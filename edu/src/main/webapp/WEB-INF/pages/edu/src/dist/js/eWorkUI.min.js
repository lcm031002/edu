/**
 * Created by Liyong.zhu on 2016/6/1.
 */
'use strict';
angular.module("ngLocale", [], ["$provide", function($provide) {
    var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
    $provide.value("$locale", {
        "DATETIME_FORMATS": {
            "AMPMS": [
                "\u4e0a\u5348",
                "\u4e0b\u5348"
            ],
            "DAY": [
                "\u661f\u671f\u65e5",
                "\u661f\u671f\u4e00",
                "\u661f\u671f\u4e8c",
                "\u661f\u671f\u4e09",
                "\u661f\u671f\u56db",
                "\u661f\u671f\u4e94",
                "\u661f\u671f\u516d"
            ],
            "ERANAMES": [
                "\u516c\u5143\u524d",
                "\u516c\u5143"
            ],
            "ERAS": [
                "\u516c\u5143\u524d",
                "\u516c\u5143"
            ],
            "FIRSTDAYOFWEEK": 6,
            "MONTH": [
                "\u4e00\u6708",
                "\u4e8c\u6708",
                "\u4e09\u6708",
                "\u56db\u6708",
                "\u4e94\u6708",
                "\u516d\u6708",
                "\u4e03\u6708",
                "\u516b\u6708",
                "\u4e5d\u6708",
                "\u5341\u6708",
                "\u5341\u4e00\u6708",
                "\u5341\u4e8c\u6708"
            ],
            "SHORTDAY": [
                "\u5468\u65e5",
                "\u5468\u4e00",
                "\u5468\u4e8c",
                "\u5468\u4e09",
                "\u5468\u56db",
                "\u5468\u4e94",
                "\u5468\u516d"
            ],
            "SHORTMONTH": [
                "1\u6708",
                "2\u6708",
                "3\u6708",
                "4\u6708",
                "5\u6708",
                "6\u6708",
                "7\u6708",
                "8\u6708",
                "9\u6708",
                "10\u6708",
                "11\u6708",
                "12\u6708"
            ],
            "STANDALONEMONTH": [
                "\u4e00\u6708",
                "\u4e8c\u6708",
                "\u4e09\u6708",
                "\u56db\u6708",
                "\u4e94\u6708",
                "\u516d\u6708",
                "\u4e03\u6708",
                "\u516b\u6708",
                "\u4e5d\u6708",
                "\u5341\u6708",
                "\u5341\u4e00\u6708",
                "\u5341\u4e8c\u6708"
            ],
            "WEEKENDRANGE": [
                5,
                6
            ],
            "fullDate": "y\u5e74M\u6708d\u65e5EEEE",
            "longDate": "y\u5e74M\u6708d\u65e5",
            "medium": "y\u5e74M\u6708d\u65e5 ah:mm:ss",
            "mediumDate": "y\u5e74M\u6708d\u65e5",
            "mediumTime": "ah:mm:ss",
            "short": "y/M/d ah:mm",
            "shortDate": "y/M/d",
            "shortTime": "ah:mm"
        },
        "NUMBER_FORMATS": {
            "CURRENCY_SYM": "\u00a5",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [
                {
                    "gSize": 3,
                    "lgSize": 3,
                    "maxFrac": 3,
                    "minFrac": 0,
                    "minInt": 1,
                    "negPre": "-",
                    "negSuf": "",
                    "posPre": "",
                    "posSuf": ""
                },
                {
                    "gSize": 3,
                    "lgSize": 3,
                    "maxFrac": 2,
                    "minFrac": 2,
                    "minInt": 1,
                    "negPre": "-\u00a4",
                    "negSuf": "",
                    "posPre": "\u00a4",
                    "posSuf": ""
                }
            ]
        },
        "id": "zh",
        "localeID": "zh",
        "pluralCat": function(n, opt_precision) {  return PLURAL_CATEGORY.OTHER;}
    });
}]);
'use strict';
/**
 * Created by Liyong.zhu on 2015/12/18.
 */
angular.module('ework-ui', ['ngMessages', 
  'ui.bootstrap',
  'mwl.calendar',
  'ImageCropper',
  'ui.router',
  'ngResource',
  'ngCookies',
  'ngSanitize',
  'angularFileUpload',
  'ngImageInputWithPreview']);

var crmContextPath = 'http://localhost';

'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('ework-ui').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        var param = {};
        function loadMenu(menus){
            if(menus.type=='$state'){
                if(!param[menus.value]){
                    param[menus.value] = {
                        value:menus.value,
                        url: menus.path,
                        templateUrl: menus.href,
                        params: menus.params
                    };
                    if(menus.value){
                        $stateProvider
                            .state(menus.value, {
                                url: menus.path,
                                templateUrl: menus.href,
                                params: menus.params
                            });
                    }
                }
            }
            
            if(menus.menus){
                var allmenus = menus.menus;
                if(allmenus){
                    $.each(allmenus,function(i,menu){
                        loadMenu(menu);
                    });
                }
            }
            
        }

        $.ajax({
            url:'common/rightservice',
            type:'GET',
            async:false,
            dataType:'json',
            success:function(data, textStatus){
                loadMenu(data);
                param = null;
            },
            error:function(){
                //error
            }
        });
    }
]);

function agPageObject(scope,service,searchParam){
	
    scope.currentPage = 1;
    scope.totalPage = 1;
    scope.pageSize = scope.pageSize?scope.pageSize:10;
    scope.pages = [];
    scope.endPage = 1;
    scope.items = [];
    scope.searchParam =searchParam;
    
    
    scope.dataHandler=function(data){
       scope.isPerformanceLoading='';
   	   scope.items = data.rows;
   	   scope.totalPage = data.totalPage;
   	   scope.total = data.total;
   	   //获取总页数
     	 scope.endPage = scope.totalPage;
     	var length = scope.totalPage - scope.currentPage;
   	    //生成数字链接
       if (scope.currentPage > 1) {
   	       if(length<5) {
   	    	 scope.pages = [scope.currentPage - 1];
   	    	for(var i=0;i<=length;i++) {
   	   	    	scope.pages.push(scope.currentPage+i);
   	   	       }
   	       }else {
   	    	scope.pages = [scope.currentPage - 1,scope.currentPage, scope.currentPage + 1,scope.currentPage + 2,scope.currentPage + 3];
   	       }
       } else if (scope.currentPage == 1) {
    	   if(length<5) {
     	    	for(var i=0;i<=length;i++) {
     	   	    	scope.pages.push(scope.currentPage+i);
     	   	       }
     	       }else {
     	    	  scope.pages = [ scope.currentPage, scope.currentPage + 1,scope.currentPage + 2,scope.currentPage + 3,scope.currentPage + 4];
     	       }
       } 
       scope.pageCallBack();
   }
    
    scope.refresh=function(){
    	scope.currentPage = 1;
        scope.totalPage = 1;
        scope.pages = [];
        scope.endPage = 1;
        scope.items = [];
        scope.isPerformanceLoading='loading...';
        scope.load();
    }
    
    scope.load = function(){
    	scope.searchParam.page = scope.currentPage;
    	scope.searchParam.rows = scope.pageSize;
    	service.page(scope.searchParam,scope.dataHandler,function(e){
    		alert(e.data);
    	});
    };
    
    scope.next = function () {
          if(scope.currentPage < scope.totalPage) {
    	          scope.currentPage++;
    	          scope.load();
    	    }
    };
    	
    scope.prev = function () {
	      if(scope.currentPage > 1) {
	          scope.currentPage--;
	          scope.load();
	      }
    };
    	 
    scope.loadPage = function (page) {
    	        scope.currentPage = page;
    	        scope.load();
    };
}

jQuery.extend({
	

    createUploadIframe: function(id, uri)
	{
			//create frame
            var frameId = 'jUploadFrame' + id;
            var iframeHtml = '<iframe id="' + frameId + '" name="' + frameId + '" style="position:absolute; top:-9999px; left:-9999px"';
			if(window.ActiveXObject)
			{
                if(typeof uri== 'boolean'){
					iframeHtml += ' src="' + 'javascript:false' + '"';

                }
                else if(typeof uri== 'string'){
					iframeHtml += ' src="' + uri + '"';

                }	
			}
			iframeHtml += ' />';
			jQuery(iframeHtml).appendTo(document.body);

            return jQuery('#' + frameId).get(0);			
    },
    createUploadForm: function(id, fileElementId, data)
	{
		//create form	
		var formId = 'jUploadForm' + id;
		var fileId = 'jUploadFile' + id;
		var form = jQuery('<form  action="" method="POST" name="' + formId + '" id="' + formId + '" enctype="multipart/form-data"></form>');	
		if(data)
		{
			for(var i in data)
			{
				jQuery('<input type="hidden" name="' + i + '" value="' + data[i] + '" />').appendTo(form);
			}			
		}		
		var oldElement = jQuery('#' + fileElementId);
		var newElement = jQuery(oldElement).clone();
		jQuery(oldElement).attr('id', fileId);
		jQuery(oldElement).before(newElement);
		jQuery(oldElement).appendTo(form);


		
		//set attributes
		jQuery(form).css('position', 'absolute');
		jQuery(form).css('top', '-1200px');
		jQuery(form).css('left', '-1200px');
		jQuery(form).appendTo('body');		
		return form;
    },

    ajaxFileUpload: function(s) {
        // TODO introduce global settings, allowing the client to modify them for all requests, not only timeout		
        s = jQuery.extend({}, jQuery.ajaxSettings, s);
        var id = new Date().getTime()        
		var form = jQuery.createUploadForm(id, s.fileElementId, (typeof(s.data)=='undefined'?false:s.data));
		var io = jQuery.createUploadIframe(id, s.secureuri);
		var frameId = 'jUploadFrame' + id;
		var formId = 'jUploadForm' + id;		
        // Watch for a new set of requests
        if ( s.global && ! jQuery.active++ )
		{
			jQuery.event.trigger( "ajaxStart" );
		}            
        var requestDone = false;
        // Create the request object
        var xml = {}   
        if ( s.global )
            jQuery.event.trigger("ajaxSend", [xml, s]);
        // Wait for a response to come back
        var uploadCallback = function(isTimeout)
		{			
			var io = document.getElementById(frameId);
            try 
			{				
				if(io.contentWindow)
				{
					 xml.responseText = io.contentWindow.document.body?io.contentWindow.document.body.innerHTML:null;
                	 xml.responseXML = io.contentWindow.document.XMLDocument?io.contentWindow.document.XMLDocument:io.contentWindow.document;
					 
				}else if(io.contentDocument)
				{
					 xml.responseText = io.contentDocument.document.body?io.contentDocument.document.body.innerHTML:null;
                	xml.responseXML = io.contentDocument.document.XMLDocument?io.contentDocument.document.XMLDocument:io.contentDocument.document;
				}						
            }catch(e)
			{
				jQuery.handleError(s, xml, null, e);
			}
            if ( xml || isTimeout == "timeout") 
			{				
                requestDone = true;
                var status;
                try {
                    status = isTimeout != "timeout" ? "success" : "error";
                    // Make sure that the request was successful or notmodified
                    if ( status != "error" )
					{
                        // process the data (runs the xml through httpData regardless of callback)
                        var data = jQuery.uploadHttpData( xml, s.dataType );    
                        // If a local callback was specified, fire it and pass it the data
                        if ( s.success )
                            s.success(data);
    
                        // Fire the global callback
                        if( s.global )
                            jQuery.event.trigger( "ajaxSuccess", [xml, s] );
                    } else
                        jQuery.handleError(s, xml, status);
                } catch(e) 
				{
                    status = "error";
                    jQuery.handleError(s, xml, status, e);
                }

                // The request was completed
                if( s.global )
                    jQuery.event.trigger( "ajaxComplete", [xml, s] );

                // Handle the global AJAX counter
                if ( s.global && ! --jQuery.active )
                    jQuery.event.trigger( "ajaxStop" );

                // Process result
                if ( s.complete )
                    s.complete(xml, status);

                jQuery(io).unbind()

                setTimeout(function()
									{	try 
										{
											jQuery(io).remove();
											jQuery(form).remove();	
											
										} catch(e) 
										{
											jQuery.handleError(s, xml, null, e);
										}									

									}, 100)

                xml = null

            }
        }
        // Timeout checker
        if ( s.timeout > 0 ) 
		{
            setTimeout(function(){
                // Check to see if the request is still happening
                if( !requestDone ) uploadCallback( "timeout" );
            }, s.timeout);
        }
        try 
		{

			var form = jQuery('#' + formId);
			jQuery(form).attr('action', s.url);
			jQuery(form).attr('method', 'POST');
			jQuery(form).attr('target', frameId);
            if(form.encoding)
			{
				jQuery(form).attr('encoding', 'multipart/form-data');      			
            }
            else
			{	
				jQuery(form).attr('enctype', 'multipart/form-data');			
            }			
            jQuery(form).submit();

        } catch(e) 
		{			
            jQuery.handleError(s, xml, null, e);
        }
		
		jQuery('#' + frameId).load(uploadCallback	);
        return {abort: function () {}};	

    },

    uploadHttpData: function( r, type ) {
        var data = !type;
        data = ((type == "xml" || data) ? r.responseXML : r.responseText);
        // If the type is "script", eval it in global context
        if ( type == "script" )
            jQuery.globalEval( data );
        // Get the JavaScript object, if JSON is used.
        if ( type == "json" ){
        	data = r.responseText;
            var start = data.indexOf(">");
            if (start != -1) {
                var end = data.indexOf("<", start + 1);
                if (end != -1) {
                    data = data.substring(start + 1, end);
                }
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////  
            eval("data = " + data);
        }
        // evaluate scripts within html
        if ( type == "html" )
            jQuery("<div>").html(data).evalScripts();
        
        return data;
    },
    handleError: function( s, xhr, status, e ) 		{
    	// If a local callback was specified, fire it
    			if ( s.error ) {
    				s.error.call( s.context || s, xhr, status, e );
    			}

    			// Fire the global callback
    			if ( s.global ) {
    				(s.context ? jQuery(s.context) : jQuery.event).trigger( "ajaxError", [xhr, s, e] );
    			}
    		}
})


/*
 angular-file-upload v2.5.0
 https://github.com/nervgh/angular-file-upload
*/

!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["angular-file-upload"]=t():e["angular-file-upload"]=t()}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=n(1),i=o(r),s=n(2),a=o(s),u=n(3),l=o(u),p=n(4),c=o(p),f=n(5),d=o(f),h=n(6),y=o(h),v=n(7),m=o(v),_=n(8),g=o(_),b=n(9),F=o(b),O=n(10),C=o(O),w=n(11),A=o(w),I=n(12),T=o(I),U=n(13),x=o(U);angular.module(i["default"].name,[]).value("fileUploaderOptions",a["default"]).factory("FileUploader",l["default"]).factory("FileLikeObject",c["default"]).factory("FileItem",d["default"]).factory("FileDirective",y["default"]).factory("FileSelect",m["default"]).factory("FileDrop",F["default"]).factory("FileOver",C["default"]).factory("Pipeline",g["default"]).directive("nvFileSelect",A["default"]).directive("nvFileDrop",T["default"]).directive("nvFileOver",x["default"]).run(["FileUploader","FileLikeObject","FileItem","FileDirective","FileSelect","FileDrop","FileOver","Pipeline",function(e,t,n,o,r,i,s,a){e.FileLikeObject=t,e.FileItem=n,e.FileDirective=o,e.FileSelect=r,e.FileDrop=i,e.FileOver=s,e.Pipeline=a}])},function(e,t){e.exports={name:"angularFileUpload"}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]={url:"/",alias:"file",headers:{},queue:[],progress:0,autoUpload:!1,removeAfterUpload:!1,method:"POST",filters:[],formData:[],queueLimit:Number.MAX_VALUE,withCredentials:!1,disableMultipart:!1}},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t,n,o,i,a,u,g){var b=o.File,F=o.FormData,O=function(){function o(t){r(this,o);var n=p(e);c(this,n,t,{isUploading:!1,_nextIndex:0,_directives:{select:[],drop:[],over:[]}}),this.filters.unshift({name:"queueLimit",fn:this._queueLimitFilter}),this.filters.unshift({name:"folder",fn:this._folderFilter})}return o.prototype.addToQueue=function(e,t,n){var o=this,r=this.isArrayLikeObject(e)?Array.prototype.slice.call(e):[e],i=this._getFilters(n),l=this.queue.length,p=[],c=function d(){var e=r.shift();if(m(e))return f();var n=o.isFile(e)?e:new a(e),l=o._convertFiltersToPipes(i),c=new g(l),h=function(e){var t=e.pipe.originalFilter,n=s(e.args,2),r=n[0],i=n[1];o._onWhenAddingFileFailed(r,t,i),d()},y=function(e,t){var n=new u(o,e,t);p.push(n),o.queue.push(n),o._onAfterAddingFile(n),d()};c.onThrown=h,c.onSuccessful=y,c.exec(n,t)},f=function(){o.queue.length!==l&&(o._onAfterAddingAll(p),o.progress=o._getTotalProgress()),o._render(),o.autoUpload&&o.uploadAll()};c()},o.prototype.removeFromQueue=function(e){var t=this.getIndexOfItem(e),n=this.queue[t];n.isUploading&&n.cancel(),this.queue.splice(t,1),n._destroy(),this.progress=this._getTotalProgress()},o.prototype.clearQueue=function(){for(;this.queue.length;)this.queue[0].remove();this.progress=0},o.prototype.uploadItem=function(e){var t=this.getIndexOfItem(e),n=this.queue[t],o=this.isHTML5?"_xhrTransport":"_iframeTransport";n._prepareToUploading(),this.isUploading||(this._onBeforeUploadItem(n),n.isCancel||(n.isUploading=!0,this.isUploading=!0,this[o](n),this._render()))},o.prototype.cancelItem=function(e){var t=this,n=this.getIndexOfItem(e),o=this.queue[n],r=this.isHTML5?"_xhr":"_form";o&&(o.isCancel=!0,o.isUploading?o[r].abort():!function(){var e=[void 0,0,{}],n=function(){t._onCancelItem.apply(t,[o].concat(e)),t._onCompleteItem.apply(t,[o].concat(e))};i(n)}())},o.prototype.uploadAll=function(){var e=this.getNotUploadedItems().filter(function(e){return!e.isUploading});e.length&&(f(e,function(e){return e._prepareToUploading()}),e[0].upload())},o.prototype.cancelAll=function(){var e=this.getNotUploadedItems();f(e,function(e){return e.cancel()})},o.prototype.isFile=function(e){return this.constructor.isFile(e)},o.prototype.isFileLikeObject=function(e){return this.constructor.isFileLikeObject(e)},o.prototype.isArrayLikeObject=function(e){return this.constructor.isArrayLikeObject(e)},o.prototype.getIndexOfItem=function(e){return h(e)?e:this.queue.indexOf(e)},o.prototype.getNotUploadedItems=function(){return this.queue.filter(function(e){return!e.isUploaded})},o.prototype.getReadyItems=function(){return this.queue.filter(function(e){return e.isReady&&!e.isUploading}).sort(function(e,t){return e.index-t.index})},o.prototype.destroy=function(){var e=this;f(this._directives,function(t){f(e._directives[t],function(e){e.destroy()})})},o.prototype.onAfterAddingAll=function(e){},o.prototype.onAfterAddingFile=function(e){},o.prototype.onWhenAddingFileFailed=function(e,t,n){},o.prototype.onBeforeUploadItem=function(e){},o.prototype.onProgressItem=function(e,t){},o.prototype.onProgressAll=function(e){},o.prototype.onSuccessItem=function(e,t,n,o){},o.prototype.onErrorItem=function(e,t,n,o){},o.prototype.onCancelItem=function(e,t,n,o){},o.prototype.onCompleteItem=function(e,t,n,o){},o.prototype.onCompleteAll=function(){},o.prototype._getTotalProgress=function(e){if(this.removeAfterUpload)return e||0;var t=this.getNotUploadedItems().length,n=t?this.queue.length-t:this.queue.length,o=100/this.queue.length,r=(e||0)*o/100;return Math.round(n*o+r)},o.prototype._getFilters=function(e){if(!e)return this.filters;if(v(e))return e;var t=e.match(/[^\s,]+/g);return this.filters.filter(function(e){return-1!==t.indexOf(e.name)})},o.prototype._convertFiltersToPipes=function(e){var t=this;return e.map(function(e){var n=l(t,e.fn);return n.isAsync=3===e.fn.length,n.originalFilter=e,n})},o.prototype._render=function(){t.$$phase||t.$apply()},o.prototype._folderFilter=function(e){return!(!e.size&&!e.type)},o.prototype._queueLimitFilter=function(){return this.queue.length<this.queueLimit},o.prototype._isSuccessCode=function(e){return e>=200&&300>e||304===e},o.prototype._transformResponse=function(e,t){var o=this._headersGetter(t);return f(n.defaults.transformResponse,function(t){e=t(e,o)}),e},o.prototype._parseHeaders=function(e){var t,n,o,r={};return e?(f(e.split("\n"),function(e){o=e.indexOf(":"),t=e.slice(0,o).trim().toLowerCase(),n=e.slice(o+1).trim(),t&&(r[t]=r[t]?r[t]+", "+n:n)}),r):r},o.prototype._headersGetter=function(e){return function(t){return t?e[t.toLowerCase()]||null:e}},o.prototype._xhrTransport=function(e){var t,n=this,o=e._xhr=new XMLHttpRequest;if(e.disableMultipart?t=e._file:(t=new F,f(e.formData,function(e){f(e,function(e,n){t.append(n,e)})}),t.append(e.alias,e._file,e.file.name)),"number"!=typeof e._file.size)throw new TypeError("The file specified is no longer valid");o.upload.onprogress=function(t){var o=Math.round(t.lengthComputable?100*t.loaded/t.total:0);n._onProgressItem(e,o)},o.onload=function(){var t=n._parseHeaders(o.getAllResponseHeaders()),r=n._transformResponse(o.response,t),i=n._isSuccessCode(o.status)?"Success":"Error",s="_on"+i+"Item";n[s](e,r,o.status,t),n._onCompleteItem(e,r,o.status,t)},o.onerror=function(){var t=n._parseHeaders(o.getAllResponseHeaders()),r=n._transformResponse(o.response,t);n._onErrorItem(e,r,o.status,t),n._onCompleteItem(e,r,o.status,t)},o.onabort=function(){var t=n._parseHeaders(o.getAllResponseHeaders()),r=n._transformResponse(o.response,t);n._onCancelItem(e,r,o.status,t),n._onCompleteItem(e,r,o.status,t)},o.open(e.method,e.url,!0),o.withCredentials=e.withCredentials,f(e.headers,function(e,t){o.setRequestHeader(t,e)}),o.send(t)},o.prototype._iframeTransport=function(e){var t=this,n=_('<form style="display: none;" />'),o=_('<iframe name="iframeTransport'+Date.now()+'">'),r=e._input;e._form&&e._form.replaceWith(r),e._form=n,r.prop("name",e.alias),f(e.formData,function(e){f(e,function(e,t){var o=_('<input type="hidden" name="'+t+'" />');o.val(e),n.append(o)})}),n.prop({action:e.url,method:"POST",target:o.prop("name"),enctype:"multipart/form-data",encoding:"multipart/form-data"}),o.bind("load",function(){var n="",r=200;try{n=o[0].contentDocument.body.innerHTML}catch(i){r=500}var s={response:n,status:r,dummy:!0},a={},u=t._transformResponse(s.response,a);t._onSuccessItem(e,u,s.status,a),t._onCompleteItem(e,u,s.status,a)}),n.abort=function(){var i,s={status:0,dummy:!0},a={};o.unbind("load").prop("src","javascript:false;"),n.replaceWith(r),t._onCancelItem(e,i,s.status,a),t._onCompleteItem(e,i,s.status,a)},r.after(n),n.append(r).append(o),n[0].submit()},o.prototype._onWhenAddingFileFailed=function(e,t,n){this.onWhenAddingFileFailed(e,t,n)},o.prototype._onAfterAddingFile=function(e){this.onAfterAddingFile(e)},o.prototype._onAfterAddingAll=function(e){this.onAfterAddingAll(e)},o.prototype._onBeforeUploadItem=function(e){e._onBeforeUpload(),this.onBeforeUploadItem(e)},o.prototype._onProgressItem=function(e,t){var n=this._getTotalProgress(t);this.progress=n,e._onProgress(t),this.onProgressItem(e,t),this.onProgressAll(n),this._render()},o.prototype._onSuccessItem=function(e,t,n,o){e._onSuccess(t,n,o),this.onSuccessItem(e,t,n,o)},o.prototype._onErrorItem=function(e,t,n,o){e._onError(t,n,o),this.onErrorItem(e,t,n,o)},o.prototype._onCancelItem=function(e,t,n,o){e._onCancel(t,n,o),this.onCancelItem(e,t,n,o)},o.prototype._onCompleteItem=function(e,t,n,o){e._onComplete(t,n,o),this.onCompleteItem(e,t,n,o);var r=this.getReadyItems()[0];return this.isUploading=!1,y(r)?void r.upload():(this.onCompleteAll(),this.progress=this._getTotalProgress(),void this._render())},o.isFile=function(e){return b&&e instanceof b},o.isFileLikeObject=function(e){return e instanceof a},o.isArrayLikeObject=function(e){return d(e)&&"length"in e},o.inherit=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.super_=t},o}();return O.prototype.isHTML5=!(!b||!F),O.isHTML5=O.prototype.isHTML5,O}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(u){r=!0,i=u}finally{try{!o&&a["return"]&&a["return"]()}finally{if(r)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t["default"]=i;var a=n(1),u=(o(a),angular),l=u.bind,p=u.copy,c=u.extend,f=u.forEach,d=u.isObject,h=u.isNumber,y=u.isDefined,v=u.isArray,m=u.isUndefined,_=u.element;i.$inject=["fileUploaderOptions","$rootScope","$http","$window","$timeout","FileLikeObject","FileItem","Pipeline"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(){return function(){function e(t){r(this,e);var n=l(t),o=n?t.value:t,i=p(o)?"FakePath":"Object",s="_createFrom"+i;this[s](o)}return e.prototype._createFromFakePath=function(e){this.lastModifiedDate=null,this.size=null,this.type="like/"+e.slice(e.lastIndexOf(".")+1).toLowerCase(),this.name=e.slice(e.lastIndexOf("/")+e.lastIndexOf("\\")+2)},e.prototype._createFromObject=function(e){this.lastModifiedDate=u(e.lastModifiedDate),this.size=e.size,this.type=e.type,this.name=e.name},e}()}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var s=n(1),a=(o(s),angular),u=a.copy,l=a.isElement,p=a.isString},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){return function(){function n(e,o,i){r(this,n);var s=c(o),a=s?p(o):null,f=s?null:o;l(this,{url:e.url,alias:e.alias,headers:u(e.headers),formData:u(e.formData),removeAfterUpload:e.removeAfterUpload,withCredentials:e.withCredentials,disableMultipart:e.disableMultipart,method:e.method},i,{uploader:e,file:new t(o),isReady:!1,isUploading:!1,isUploaded:!1,isSuccess:!1,isCancel:!1,isError:!1,progress:0,index:null,_file:f,_input:a}),a&&this._replaceNode(a)}return n.prototype.upload=function(){try{this.uploader.uploadItem(this)}catch(e){var t=e.name+":"+e.message;this.uploader._onCompleteItem(this,t,e.code,[]),this.uploader._onErrorItem(this,t,e.code,[])}},n.prototype.cancel=function(){this.uploader.cancelItem(this)},n.prototype.remove=function(){this.uploader.removeFromQueue(this)},n.prototype.onBeforeUpload=function(){},n.prototype.onProgress=function(e){},n.prototype.onSuccess=function(e,t,n){},n.prototype.onError=function(e,t,n){},n.prototype.onCancel=function(e,t,n){},n.prototype.onComplete=function(e,t,n){},n.prototype._onBeforeUpload=function(){this.isReady=!0,this.isUploading=!1,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!1,this.isError=!1,this.progress=0,this.onBeforeUpload()},n.prototype._onProgress=function(e){this.progress=e,this.onProgress(e)},n.prototype._onSuccess=function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!0,this.isCancel=!1,this.isError=!1,this.progress=100,this.index=null,this.onSuccess(e,t,n)},n.prototype._onError=function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!1,this.isCancel=!1,this.isError=!0,this.progress=0,this.index=null,this.onError(e,t,n)},n.prototype._onCancel=function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!0,this.isError=!1,this.progress=0,this.index=null,this.onCancel(e,t,n)},n.prototype._onComplete=function(e,t,n){this.onComplete(e,t,n),this.removeAfterUpload&&this.remove()},n.prototype._destroy=function(){this._input&&this._input.remove(),this._form&&this._form.remove(),delete this._form,delete this._input},n.prototype._prepareToUploading=function(){this.index=this.index||++this.uploader._nextIndex,this.isReady=!0},n.prototype._replaceNode=function(t){var n=e(t.clone())(t.scope());n.prop("value",null),t.css("display","none"),t.after(n)},n}()}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var s=n(1),a=(o(s),angular),u=a.copy,l=a.extend,p=a.element,c=a.isElement;i.$inject=["$compile","FileLikeObject"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(){var e=function(){function e(t){r(this,e),u(this,t),this.uploader._directives[this.prop].push(this),this._saveLinks(),this.bind()}return e.prototype.bind=function(){for(var e in this.events){var t=this.events[e];this.element.bind(e,this[t])}},e.prototype.unbind=function(){for(var e in this.events)this.element.unbind(e,this.events[e])},e.prototype.destroy=function(){var e=this.uploader._directives[this.prop].indexOf(this);this.uploader._directives[this.prop].splice(e,1),this.unbind()},e.prototype._saveLinks=function(){for(var e in this.events){var t=this.events[e];this[t]=this[t].bind(this)}},e}();return e.prototype.events={},e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var s=n(1),a=(o(s),angular),u=a.extend},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){return function(t){function n(e){r(this,n);var o=p(e,{events:{$destroy:"destroy",change:"onChange"},prop:"select"}),s=i(this,t.call(this,o));return s.uploader.isHTML5||s.element.removeAttr("multiple"),s.element.prop("value",null),s}return s(n,t),n.prototype.getOptions=function(){},n.prototype.getFilters=function(){},n.prototype.isEmptyAfterSelection=function(){return!!this.element.attr("multiple")},n.prototype.onChange=function(){var t=this.uploader.isHTML5?this.element[0].files:this.element[0],n=this.getOptions(),o=this.getFilters();this.uploader.isHTML5||this.destroy(),this.uploader.addToQueue(t,n,o),this.isEmptyAfterSelection()&&(this.element.prop("value",null),this.element.replaceWith(e(this.element.clone())(this.scope)))},n}(t)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a;var u=n(1),l=(o(u),angular),p=l.extend;a.$inject=["$compile","FileDirective"]},function(e,t){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e){return function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?[]:arguments[0];o(this,t),this.pipes=e}return t.prototype.next=function(t){var o=this.pipes.shift();if(a(o))return void this.onSuccessful.apply(this,n(t));var r=new Error("The filter has not passed");if(r.pipe=o,r.args=t,o.isAsync){var i=e.defer(),u=s(this,this.next,t),l=s(this,this.onThrown,r);i.promise.then(u,l),o.apply(void 0,n(t).concat([i]))}else{var p=Boolean(o.apply(void 0,n(t)));p?this.next(t):this.onThrown(r)}},t.prototype.exec=function(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];this.next(t)},t.prototype.onThrown=function(e){},t.prototype.onSuccessful=function(){},t}()}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var i=angular,s=i.bind,a=i.isUndefined;r.$inject=["$q"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e){return function(e){function t(n){r(this,t);var o=p(n,{events:{$destroy:"destroy",drop:"onDrop",dragover:"onDragOver",dragleave:"onDragLeave"},prop:"drop"});return i(this,e.call(this,o))}return s(t,e),t.prototype.getOptions=function(){},t.prototype.getFilters=function(){},t.prototype.onDrop=function(e){var t=this._getTransfer(e);if(t){var n=this.getOptions(),o=this.getFilters();this._preventAndStop(e),c(this.uploader._directives.over,this._removeOverClass,this),this.uploader.addToQueue(t.files,n,o)}},t.prototype.onDragOver=function(e){var t=this._getTransfer(e);this._haveFiles(t.types)&&(t.dropEffect="copy",this._preventAndStop(e),c(this.uploader._directives.over,this._addOverClass,this))},t.prototype.onDragLeave=function(e){e.currentTarget!==this.element[0]&&(this._preventAndStop(e),c(this.uploader._directives.over,this._removeOverClass,this))},t.prototype._getTransfer=function(e){return e.dataTransfer?e.dataTransfer:e.originalEvent.dataTransfer},t.prototype._preventAndStop=function(e){e.preventDefault(),e.stopPropagation()},t.prototype._haveFiles=function(e){return e?e.indexOf?-1!==e.indexOf("Files"):e.contains?e.contains("Files"):!1:!1},t.prototype._addOverClass=function(e){e.addOverClass()},t.prototype._removeOverClass=function(e){e.removeOverClass()},t}(e)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a;var u=n(1),l=(o(u),angular),p=l.extend,c=l.forEach;a.$inject=["FileDirective"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e){return function(e){function t(n){r(this,t);var o=p(n,{events:{$destroy:"destroy"},prop:"over",overClass:"nv-file-over"});return i(this,e.call(this,o))}return s(t,e),t.prototype.addOverClass=function(){this.element.addClass(this.getOverClass())},t.prototype.removeOverClass=function(){this.element.removeClass(this.getOverClass())},t.prototype.getOverClass=function(){return this.overClass},t}(e)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a;var u=n(1),l=(o(u),angular),p=l.extend;a.$inject=["FileDirective"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n){return{link:function(o,r,i){var s=o.$eval(i.uploader);if(!(s instanceof t))throw new TypeError('"Uploader" must be an instance of FileUploader');var a=new n({uploader:s,element:r,scope:o});a.getOptions=e(i.options).bind(a,o),a.getFilters=function(){return i.filters}}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var i=n(1);o(i);r.$inject=["$parse","FileUploader","FileSelect"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n){return{link:function(o,r,i){var s=o.$eval(i.uploader);if(!(s instanceof t))throw new TypeError('"Uploader" must be an instance of FileUploader');if(s.isHTML5){var a=new n({uploader:s,element:r});a.getOptions=e(i.options).bind(a,o),a.getFilters=function(){return i.filters}}}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var i=n(1);o(i);r.$inject=["$parse","FileUploader","FileDrop"]},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){return{link:function(n,o,r){var i=n.$eval(r.uploader);if(!(i instanceof e))throw new TypeError('"Uploader" must be an instance of FileUploader');var s=new t({uploader:i,element:o});s.getOverClass=function(){return r.overClass||s.overClass}}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var i=n(1);o(i);r.$inject=["FileUploader","FileOver"]}])});
//# sourceMappingURL=angular-file-upload.min.js.map
/*通用aJax*/
function toolAjax(url, method, obj, callBackMethod, datatype){
	$.ajax({
		type : method,       
		url : url,
		data : obj,
		dataType : datatype,
		success:function(data){
			callBackMethod(data);
		},
		error : function(xhr, msg, e){
			alert(msg);
			alert(e);
		}
	});
}

function toolUploadFile(url, elementId, dataType, callBackMethod){
	 $.ajaxFileUpload ({
         url: url, //你处理上传文件的服务端
         secureuri: false,
         fileElementId: elementId,
         dataType: dataType,
         success: function (data){
        	 callBackMethod(data);
         },
         error: function (html,status,e){
         	alert("e=" + e);
         }
	 });
}

/*校验时间大小*/
function checkStartEndTime(stateTime, endTime){  
    var start=new Date(stateTime.replace("-", "/").replace("-", "/"));  
    var end=new Date(endTime.replace("-", "/").replace("-", "/"));  
    if(end < start){
        return false;  
    }
    return true;  
}

/*检验时间间隔天数*/
function checkStartEndDateIntervalDays(stateTime, endTime, days){
  var start=new Date(stateTime.replace("-", "/").replace("-", "/")).getTime();
  var end=new Date(endTime.replace("-", "/").replace("-", "/")).getTime();
  if(Math.abs((end - start)) / (1000*60*60*24) > days){
    return false;
  }
  return true;
}

/*百分比*/
function fixPercentToSize(size, percent){
	 return size * percent;    
}

function isNotEmpty(strVal) {
	if (strVal == null || strVal == undefined) {
		return false;
	}
	var str = $.trim(strVal);
	if(str == '')
		return false;
	return true;
}

function isEmpty(strVal) {
	if (strVal == null || strVal == undefined) {
		return true;
	}
	var str = $.trim(strVal);
	if(str == '' || str == 'null')
		return true;
	return false;
}

/*字符串包含判断*/
function contains(string, substr, isIgnoreCase){
    if (isIgnoreCase){
         string = string.toLowerCase();
         substr = substr.toLowerCase();
    }
    var startChar = substr.substring(0, 1);
    var strLen = substr.length;

    for (var j = 0; j<string.length - strLen + 1; j++){
         if (string.charAt(j) == startChar){
             if (string.substring(j, j+strLen) == substr){
                 return true;
             }   
         }
    }
    return false;
}

/** 
 * 替换指定位置的内容 
 * strVal:被替换的字符串, content:要替换的内容  start:开始位置 end:结束位置
 * start如果为空或<0，那么从首位开始，end为空那么到末位结束 
 *
 ***/
function replaceByIndex(strVal, content, start, end){
	var dest = '';
	if(isEmpty(strVal)){
		return strVal;
	}
	var len = strVal.length;
	var st = start;
	var en = end;
	if(isEmpty(start) || start < 0)
		st = 0;
	if(isEmpty(end) || end < 0 || end >= len)
		en = len - 1;
	if(start > end){
		return strVal;
	}
	for(var i=0;i<len;i++){
		var append = strVal[i];
		if(st <= i && i <= end){
			append = content;
		}
		dest += append;
	}
	return dest;
}

/**
 * 列表单条选择检查
 * @param $datagrid
 * @returns {Boolean}
 */
function checkSelectOne($datagrid) {
	var rows = $datagrid.datagrid('getSelections');
	if (!rows || rows.length == 0) {
		$.messager.alert('信息 ', '请选择一条记录', 'info');
		return '';
	}
	if (rows.length > 1) {
		$.messager.alert('信息 ', '只能选择一条记录', 'info');
		return '';
	}
	return rows[0];
}

function displayPassword(pwd){
	var display = '';
	if(pwd == null)
		return display;
	for(var i=0;i<pwd.length;i++){
		display += '*';
	}
	return display;
}

function checkFileType(fileClass, fileValue){
	var pictureClass = '.jpg .jpeg .gif .bmp .png';
	var excelClass = '.excel';
	
	var compareClass = '';
	if(fileClass == 'pictureClass'){
		compareClass = pictureClass;
	}else if(fileClass == 'excelClass'){
		compareClass = excelClass;
	}
	
	if(isEmpty(fileValue))
		return false;
	var fileExt = fileValue.substr(fileValue.lastIndexOf('.')).toLowerCase();
	if(compareClass.indexOf(fileExt) != -1){
		return true;
	}
	return false;
}

function fitlerEmptyReturn(str, back){
	if(isEmpty(str)){
		return back;
	}
	return str;
}
var Validator = {
	    intege: /^-?[1-9]\d*$/, //整数
	    intege1: /^[1-9]\d*$/, //正整数
	    intege2: /^-[1-9]\d*$/, //负整数
	    num: /^([+-]?)\d*\\.?\d+$/, //数字
	    num1: /^[1-9]\d*|0$/, //正数（正整数 + 0）
	    num2: /^-[1-9]\d*|0$/, //负数（负整数 + 0）
	    num3: /^[0-9]+([.]{1}[0-9]+){0,1}$/, //整数+小数
	    positiveNumber:/^(0{1}|[1-9]+[0-9]*)(\\.\d+){0,1}$/,//正整数+小数
	    ascii: /^[\\x00-\\xFF]+$/, //仅ACSII字符
	    chinese: /^[\\u4E00-\\u9FA5]+$/, //仅中文
	    email: /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/, //邮件
	    letter: /^[A-Za-z]+$/, //字母
	    letter_l: /^[a-z]+$/, //小写字母
	    letter_u: /^[A-Z]+$/, //大写字母
	    mobile: /^0?(13|15|18|14)[0-9]{9}$/, //手机
	    notempty: /^\\S+$/, //非空
	    password: /^.*[A-Za-z0-9\\w_-]+.*$/, //密码
	    fullNumber: /^[0-9]+$/, //数字
	    tel: /^[0-9\-()（）]{7,18}$/, //电话号码的函数(包括验证国内区号,国际区号,分机号)
	    username: /^[A-Za-z0-9_\\-\\u4e00-\\u9fa5]+$/,//用户名
	    chineseLetter: /^[(\\u4E00-\\u9FA5)|(A-Za-z)]+$/,//中文加字母
	    noNumOnly: /^\\w*[(\\u4E00-\\u9FA5)|(A-Za-z)]+[\\w|(\\u4E00-\\u9FA5)]*$/,//不能纯数字
	    phone: /^((0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/,
	    zipcode: /^[0-9]{6}$/, //邮编
	    noNumberFirst: /^[(\\u4E00-\\u9FA5)|(A-Za-z)]+[(\\u4E00-\\u9FA5)|(A-Za-z)|(0-9)]*$/,//允许中文 字母 数字 不能以数字开头
	    businessCode: /^\\d{15}$/,
	    cardNo: /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/,
	    account: /[a-zA-Z0-9_]{6,20}/, // 账号  6-20长度非中文
	    id_id_15: /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/, //15位身份证
	    id_id_18: /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{4}$/, //18位身份证
	    positiveNumber2: /^(\d)*(\.(\d){0,2})?$/, // 0、正数、2位小数
	    natural: /^(0|([1-9]\d*))$/, // 0、正整数	
	    qq: /[1-9]\d{4,}/
	};
/* 将输入字符串转换为数字 */
function genFloatByString(inputString) {
    if (!inputString) {
        return null;
    } else {
        var reg = new RegExp("^(-?\\d+)(\\.\\d+)?$");
        if (!reg.test(inputString)) {
            return null;
        }
        var temp = inputString;
        try {
            temp = parseFloat(inputString);
            if (temp == NaN) {
                temp = 0;
            }
        } catch (e) {
            temp = 0;
        }

        return temp;
    }
}
function Format(fmt, date) { // author: meizz
    var o = {
        "M+" : date.getMonth() + 1, // 月份
        "d+" : date.getDate(), // 日
        "h+" : date.getHours(), // 小时
        "m+" : date.getMinutes(), // 分
        "s+" : date.getSeconds(), // 秒
        "q+" : Math
            .floor((date.getMonth() + 3) / 3), // 季度
        "S" : date.getMilliseconds()
        // 毫秒
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (date
            .getFullYear() + "")
            .substr(4 - RegExp.$1.length));
    for ( var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt
                .replace(
                RegExp.$1,
                (RegExp.$1.length == 1) ? (o[k])
                    : (("00" + o[k])
                    .substr(("" + o[k]).length)));
    return fmt;
}

/* 将输入字符串转换为数字 */
function genNumByString(inputString) {
    if (!inputString) {
        return null;
    } else {
        var reg = new RegExp("^[0-9]*$");
        if (!reg.test(inputString)) {
            return null;
        }
        var temp = inputString;
        try {
            temp = parseInt(inputString);
            if (temp == NaN) {
                temp = 0;
            }
        } catch (e) {
            temp = 0;
        }

        return temp;
    }
}

function getCurrentDate() {
	var now = new Date();
	return now.format("yyyy-MM-dd", now);
}

function getLatestWeek() {
	var now = new Date();
	return now.format("yyyy-MM-dd", now.setDate(now.getDate() - 7));
}

function getLastDayOfMonth(year, month) {
	var date = new Date(year, month, 0);
	return date.getDate();
}

function getLatestMonth() {
	var now = new Date();
	var month = now.getMonth();
	var date = now.getDate();
	if (date >= getLastDayOfMonth(now.getFullYear(), month)) {
		now.setDate(1);
	} else {
		now.setMonth(month - 1);
		now.setDate(date + 1);
	}
	
	return now.format("yyyy-MM-dd", now);
}

function getLatestYear() {
	var now = new Date();
	now.setFullYear(now.getFullYear() - 1);
	now.setDate(now.getDate() + 1);
	return now.format("yyyy-MM-dd", now);
}

function getNextTwoDays() {
	var now = new Date();
	return now.format("yyyy-MM-dd", now.setDate(now.getDate() + 1));
}

function getNextWeek() {
	var now = new Date();
	return now.format("yyyy-MM-dd", now.setDate(now.getDate() + 7));
}

function getNextMonth() {
	var now = new Date();
	var month = now.getMonth();
	var date = now.getDate();
	if (date >= getLastDayOfMonth(now.getFullYear(), month)) {
		now.setDate(1);
	} else {
		now.setMonth(month + 1);
		now.setDate(date + 1);
	}
	
	return now.format("yyyy-MM-dd", now);
}

function addYear(year) {
	var now = new Date();
	now.setFullYear(now.getFullYear() + year);
	if (year < 0) {
		now.setDate(now.getDate() + 1);
	} else {
		now.setDate(now.getDate() - 1);
	}
	return now.format("yyyy-MM-dd", now);
}


/**
 *create by 2012-08-25 pm 17:48
 *@author hexinglun@gmail.com
 *BASE64 Encode and Decode By UTF-8 unicode
 *可以和java的BASE64编码和解码互相转化
 */
(function(){
	var BASE64_MAPPING = [
		'A','B','C','D','E','F','G','H',
		'I','J','K','L','M','N','O','P',
		'Q','R','S','T','U','V','W','X',
		'Y','Z','a','b','c','d','e','f',
		'g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v',
		'w','x','y','z','0','1','2','3',
		'4','5','6','7','8','9','+','/'
	];

	/**
	 *ascii convert to binary
	 */
	var _toBinary = function(ascii){
		var binary = new Array();
		while(ascii > 0){
			var b = ascii%2;
			ascii = Math.floor(ascii/2);
			binary.push(b);
		}
		/*
		var len = binary.length;
		if(6-len > 0){
			for(var i = 6-len ; i > 0 ; --i){
				binary.push(0);
			}
		}*/
		binary.reverse();
		return binary;
	};

	/**
	 *binary convert to decimal
	 */
	var _toDecimal  = function(binary){
		var dec = 0;
		var p = 0;
		for(var i = binary.length-1 ; i >= 0 ; --i){
			var b = binary[i];
			if(b == 1){
				dec += Math.pow(2 , p);
			}
			++p;
		}
		return dec;
	};

	/**
	 *unicode convert to utf-8
	 */
	var _toUTF8Binary = function(c , binaryArray){
		var mustLen = (8-(c+1)) + ((c-1)*6);
		var fatLen = binaryArray.length;
		var diff = mustLen - fatLen;
		while(--diff >= 0){
			binaryArray.unshift(0);
		}
		var binary = [];
		var _c = c;
		while(--_c >= 0){
			binary.push(1);
		}
		binary.push(0);
		var i = 0 , len = 8 - (c+1);
		for(; i < len ; ++i){
			binary.push(binaryArray[i]);
		}

		for(var j = 0 ; j < c-1 ; ++j){
			binary.push(1);
			binary.push(0);
			var sum = 6;
			while(--sum >= 0){
				binary.push(binaryArray[i++]);
			}
		}
		return binary;
	};

	var __BASE64 = {
			/**
			 *BASE64 Encode
			 */
			encoder:function(str){
				var base64_Index = [];
				var binaryArray = [];
				for(var i = 0 , len = str.length ; i < len ; ++i){
					var unicode = str.charCodeAt(i);
					var _tmpBinary = _toBinary(unicode);
					if(unicode < 0x80){
						var _tmpdiff = 8 - _tmpBinary.length;
						while(--_tmpdiff >= 0){
							_tmpBinary.unshift(0);
						}
						binaryArray = binaryArray.concat(_tmpBinary);
					}else if(unicode >= 0x80 && unicode <= 0x7FF){
						binaryArray = binaryArray.concat(_toUTF8Binary(2 , _tmpBinary));
					}else if(unicode >= 0x800 && unicode <= 0xFFFF){//UTF-8 3byte
						binaryArray = binaryArray.concat(_toUTF8Binary(3 , _tmpBinary));
					}else if(unicode >= 0x10000 && unicode <= 0x1FFFFF){//UTF-8 4byte
						binaryArray = binaryArray.concat(_toUTF8Binary(4 , _tmpBinary));	
					}else if(unicode >= 0x200000 && unicode <= 0x3FFFFFF){//UTF-8 5byte
						binaryArray = binaryArray.concat(_toUTF8Binary(5 , _tmpBinary));
					}else if(unicode >= 4000000 && unicode <= 0x7FFFFFFF){//UTF-8 6byte
						binaryArray = binaryArray.concat(_toUTF8Binary(6 , _tmpBinary));
					}
				}

				var extra_Zero_Count = 0;
				for(var i = 0 , len = binaryArray.length ; i < len ; i+=6){
					var diff = (i+6)-len;
					if(diff == 2){
						extra_Zero_Count = 2;
					}else if(diff == 4){
						extra_Zero_Count = 4;
					}
					//if(extra_Zero_Count > 0){
					//	len += extra_Zero_Count+1;
					//}
					var _tmpExtra_Zero_Count = extra_Zero_Count;
					while(--_tmpExtra_Zero_Count >= 0){
						binaryArray.push(0);
					}
					base64_Index.push(_toDecimal(binaryArray.slice(i , i+6)));
				}

				var base64 = '';
				for(var i = 0 , len = base64_Index.length ; i < len ; ++i){
					base64 += BASE64_MAPPING[base64_Index[i]];
				}

				for(var i = 0 , len = extra_Zero_Count/2 ; i < len ; ++i){
					base64 += '=';
				}
				return base64;
			},
			/**
			 *BASE64  Decode for UTF-8 
			 */
			decoder : function(_base64Str){
				var _len = _base64Str.length;
				var extra_Zero_Count = 0;
				/**
				 *计算在进行BASE64编码的时候，补了几个0
				 */
				if(_base64Str.charAt(_len-1) == '='){
					//alert(_base64Str.charAt(_len-1));
					//alert(_base64Str.charAt(_len-2));
					if(_base64Str.charAt(_len-2) == '='){//两个等号说明补了4个0
						extra_Zero_Count = 4;
						_base64Str = _base64Str.substring(0 , _len-2);
					}else{//一个等号说明补了2个0
						extra_Zero_Count = 2;
						_base64Str = _base64Str.substring(0 , _len - 1);
					}
				}

				var binaryArray = [];
				for(var i = 0 , len = _base64Str.length; i < len ; ++i){
					var c = _base64Str.charAt(i);
					for(var j = 0 , size = BASE64_MAPPING.length ; j < size ; ++j){
						if(c == BASE64_MAPPING[j]){
							var _tmp = _toBinary(j);
							/*不足6位的补0*/
							var _tmpLen = _tmp.length;
							if(6-_tmpLen > 0){
								for(var k = 6-_tmpLen ; k > 0 ; --k){
									_tmp.unshift(0);
								}
							}
							binaryArray = binaryArray.concat(_tmp);
							break;
						}
					}
				}

				if(extra_Zero_Count > 0){
					binaryArray = binaryArray.slice(0 , binaryArray.length - extra_Zero_Count);
				}

				var unicode = [];
				var unicodeBinary = [];
				for(var i = 0 , len = binaryArray.length ; i < len ; ){
					if(binaryArray[i] == 0){
						unicode=unicode.concat(_toDecimal(binaryArray.slice(i,i+8)));
						i += 8;
					}else{
						var sum = 0;
						while(i < len){
							if(binaryArray[i] == 1){
								++sum;
							}else{
								break;
							}
							++i;
						}
						unicodeBinary = unicodeBinary.concat(binaryArray.slice(i+1 , i+8-sum));
						i += 8 - sum;
						while(sum > 1){
							unicodeBinary = unicodeBinary.concat(binaryArray.slice(i+2 , i+8));
							i += 8;
							--sum;
						}
						unicode = unicode.concat(_toDecimal(unicodeBinary));
						unicodeBinary = [];
					}
				}
				return unicode;
			}
	};

	window.BASE64 = __BASE64;
})();
/* @license 
 * jQuery.print, version 1.5.1
 *  (c) Sathvik Ponangi, Doers' Guild
 * Licence: CC-By (http://creativecommons.org/licenses/by/3.0/)
 *--------------------------------------------------------------------------*/
(function ($) {
    "use strict";
    // A nice closure for our definitions
    function getjQueryObject(string) {
        // Make string a vaild jQuery thing
        var jqObj = $("");
        try {
            jqObj = $(string)
                .clone();
        } catch (e) {
            jqObj = $("<span />")
                .html(string);
        }
        return jqObj;
    }

    function printFrame(frameWindow, content, options) {
        // Print the selected window/iframe
        var def = $.Deferred();
        try {
            frameWindow = frameWindow.contentWindow || frameWindow.contentDocument || frameWindow;
            var wdoc = frameWindow.document || frameWindow.contentDocument || frameWindow;
            if(options.doctype) {
                wdoc.write(options.doctype);
            }
            wdoc.write(content);
            wdoc.close();
            var printed = false;
            var callPrint = function () {
                if(printed) {
                    return;
                }
                // Fix for IE : Allow it to render the iframe
                frameWindow.focus();
                try {
                    // Fix for IE11 - printng the whole page instead of the iframe content
                    if (!frameWindow.document.execCommand('print', false, null)) {
                        // document.execCommand returns false if it failed -http://stackoverflow.com/a/21336448/937891
                        frameWindow.print();
                    }
                    // focus body as it is losing focus in iPad and content not getting printed
                    $('body').focus();
                } catch (e) {
                    frameWindow.print();
                }
                frameWindow.close();
                printed = true;
                def.resolve();
            }
            // Print once the frame window loads - seems to work for the new-window option but unreliable for the iframe
            $(frameWindow).on("load", callPrint);
            // Fallback to printing directly if the frame doesn't fire the load event for whatever reason
            setTimeout(callPrint, options.timeout);
        } catch (err) {
            def.reject(err);
        }
        return def;
    }

    function printContentInIFrame(content, options) {
        var $iframe = $(options.iframe + "");
        var iframeCount = $iframe.length;
        if (iframeCount === 0) {
            // Create a new iFrame if none is given
            $iframe = $('<iframe height="0" width="0" border="0" wmode="Opaque"/>')
                .prependTo('body')
                .css({
                    "position": "absolute",
                    "top": -999,
                    "left": -999
                });
        }
        var frameWindow = $iframe.get(0);
        return printFrame(frameWindow, content, options)
            .done(function () {
                // Success
                setTimeout(function () {
                    // Wait for IE
                    if (iframeCount === 0) {
                        // Destroy the iframe if created here
                        $iframe.remove();
                    }
                }, 1000);
            })
            .fail(function (err) {
                // Use the pop-up method if iframe fails for some reason
                console.error("Failed to print from iframe", err);
                printContentInNewWindow(content, options);
            })
            .always(function () {
                try {
                    options.deferred.resolve();
                } catch (err) {
                    console.warn('Error notifying deferred', err);
                }
            });
    }

    function printContentInNewWindow(content, options) {
        // Open a new window and print selected content
        var frameWindow = window.open();
        return printFrame(frameWindow, content, options)
            .always(function () {
                try {
                    options.deferred.resolve();
                } catch (err) {
                    console.warn('Error notifying deferred', err);
                }
            });
    }

    function isNode(o) {
        /* http://stackoverflow.com/a/384380/937891 */
        return !!(typeof Node === "object" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string");
    }
    $.print = $.fn.print = function () {
        // Print a given set of elements
        var options, $this, self = this;
        // console.log("Printing", this, arguments);
        if (self instanceof $) {
            // Get the node if it is a jQuery object
            self = self.get(0);
        }
        if (isNode(self)) {
            // If `this` is a HTML element, i.e. for
            // $(selector).print()
            $this = $(self);
            if (arguments.length > 0) {
                options = arguments[0];
            }
        } else {
            if (arguments.length > 0) {
                // $.print(selector,options)
                $this = $(arguments[0]);
                if (isNode($this[0])) {
                    if (arguments.length > 1) {
                        options = arguments[1];
                    }
                } else {
                    // $.print(options)
                    options = arguments[0];
                    $this = $("html");
                }
            } else {
                // $.print()
                $this = $("html");
            }
        }
        // Default options
        var defaults = {
            globalStyles: true,
            mediaPrint: false,
            stylesheet: null,
            noPrintSelector: ".no-print",
            iframe: true,
            append: null,
            prepend: null,
            manuallyCopyFormValues: true,
            deferred: $.Deferred(),
            timeout: 750,
            title: null,
            doctype: '<!doctype html>'
        };
        // Merge with user-options
        options = $.extend({}, defaults, (options || {}));
        var $styles = $("");
        if (options.globalStyles) {
            // Apply the stlyes from the current sheet to the printed page
            $styles = $("style, link, meta, base, title");
        } else if (options.mediaPrint) {
            // Apply the media-print stylesheet
            $styles = $("link[media=print]");
        }
        if (options.stylesheet) {
            // Add a custom stylesheet if given
            $styles = $.merge($styles, $('<link rel="stylesheet" href="' + options.stylesheet + '">'));
        }
        // Create a copy of the element to print
        var copy = $this.clone();
        // Wrap it in a span to get the HTML markup string
        copy = $("<span/>")
            .append(copy);
        // Remove unwanted elements
        copy.find(options.noPrintSelector)
            .remove();
        // Add in the styles
        copy.append($styles.clone());
        // Update title
        if (options.title) {
            var title = $("title", copy);
            if (title.length === 0) {
                title = $("<title />");
                copy.append(title);                
            }
            title.text(options.title);            
        }
        // Appedned content
        copy.append(getjQueryObject(options.append));
        // Prepended content
        copy.prepend(getjQueryObject(options.prepend));
        if (options.manuallyCopyFormValues) {
            // Manually copy form values into the HTML for printing user-modified input fields
            // http://stackoverflow.com/a/26707753
            copy.find("input")
                .each(function () {
                    var $field = $(this);
                    if ($field.is("[type='radio']") || $field.is("[type='checkbox']")) {
                        if ($field.prop("checked")) {
                            $field.attr("checked", "checked");
                        }
                    } else {
                        $field.attr("value", $field.val());
                    }
                });
            copy.find("select").each(function () {
                var $field = $(this);
                $field.find(":selected").attr("selected", "selected");
            });
            copy.find("textarea").each(function () {
                // Fix for https://github.com/DoersGuild/jQuery.print/issues/18#issuecomment-96451589
                var $field = $(this);
                $field.text($field.val());
            });
        }
        // Get the HTML markup string
        var content = copy.html();
        // Notify with generated markup & cloned elements - useful for logging, etc
        try {
            options.deferred.notify('generated_markup', content, copy);
        } catch (err) {
            console.warn('Error notifying deferred', err);
        }
        // Destroy the copy
        copy.remove();
        if (options.iframe) {
            // Use an iframe for printing
            try {
                printContentInIFrame(content, options);
            } catch (e) {
                // Use the pop-up method if iframe fails for some reason
                console.error("Failed to print from iframe", e.stack, e.message);
                printContentInNewWindow(content, options);
            }
        } else {
            // Use a new window for printing
            printContentInNewWindow(content, options);
        }
        return this;
    };
})(jQuery);

/*
 *  jQuery StarRatingSvg v0.9.5
 *
 *  http://github.com/nashio/star-rating-svg
 *  Author: Ignacio Chavez
 *  Licensed under MIT
 */

;(function ( $, window, document, undefined ) {

    'use strict';

    // Create the defaults once
    var pluginName = 'starRating';
    var defaults = {
        totalStars: 5,
	useFullStars: false,
        emptyColor: 'lightgray',
        hoverColor: 'orange',
        activeColor: 'gold',
        useGradient: true,
        readonly: false,
	disableAfterRate: true,
        starGradient: {
            start: '#FEF7CD',
            end: '#FF9511'
        },
        strokeWidth: 0,
        strokeColor: 'black',
        initialRating: 0,
        starSize: 40
    };

    // The actual plugin constructor
    var Plugin = function( element, options ) {
        var _rating;
        this.element = element;
        this.$el = $(element);
        this.settings = $.extend( {}, defaults, options );

        // grab rating if defined on the element
        _rating = this.$el.data('rating') || this.settings.initialRating;
        this._state = {
            // round to the nearest half
            rating: (Math.round( _rating * 2 ) / 2).toFixed(1)
        };

        // create unique id for stars
        this._uid = Math.floor( Math.random() * 999 );

        // override gradient if not used
        if( !options.starGradient && !this.settings.useGradient ){
            this.settings.starGradient.start = this.settings.starGradient.end = this.settings.activeColor;
        }

        this._defaults = defaults;
        this._name = pluginName;
        this.init();
    };

    var methods = {
        init: function () {
            this.renderMarkup();
            this.addListeners();
            this.initRating();
        },

        addListeners: function(){
            if( this.settings.readOnly ){ return; }
            this.$stars.on('mouseover', this.hoverRating.bind(this));
            this.$stars.on('mouseout', this.restoreState.bind(this));
            this.$stars.on('click', this.applyRating.bind(this));
        },

        // apply styles to hovered stars
        hoverRating: function(e){
            this.paintStars(this.getIndex(e), 'hovered');
        },

        // clicked on a rate, apply style and state
        applyRating: function(e){
            var index = this.getIndex(e);
            var rating = index + 1;

            // paint selected and remove hovered color
            this.paintStars(index, 'active');
            this.executeCallback( rating, this.$el );
            this._state.rating = rating;

	    if(this.settings.disableAfterRate){
	        this.$stars.off();
	    }
        },

        restoreState: function(){
            var rating = this._state.rating || -1;
            this.paintStars(rating - 1, 'active');
        },

        getIndex: function(e){
            var $target = $(e.currentTarget);
            var width = $target.width();
            var side = ( e.offsetX < (width / 2) && !this.settings.useFullStars) ? 'left' : 'right';

            // get index for half or whole star
            var index = $target.index() - ((side === 'left') ? 0.5 : 0);

            // pointer is way to the left, rating should be none
            index = ( index < 0 && (e.offsetX < width / 5) ) ? -1 : index;
            return index;
        },

        initRating: function(){
            this.paintStars(this._state.rating - 1, 'active');
        },

        paintStars: function(endIndex, stateClass){
            var $polygonLeft;
            var $polygonRight;
            var leftClass;
            var rightClass;

            $.each(this.$stars, function(index, star){
                $polygonLeft = $(star).find('polygon[data-side="left"]');
                $polygonRight = $(star).find('polygon[data-side="right"]');
                leftClass = rightClass = (index <= endIndex) ? stateClass : 'empty';

                // has another half rating, add half star
                leftClass = ( index - endIndex === 0.5 ) ? stateClass : leftClass;

                $polygonLeft.attr('class', 'svg-'  + leftClass + '-' + this._uid);
                $polygonRight.attr('class', 'svg-'  + rightClass + '-' + this._uid);

            }.bind(this));
        },

        renderMarkup: function () {
            // inject an svg manually to have control over attributes
            var star = '<div class="jq-star" style="width:' + this.settings.starSize+ 'px;  height:' + this.settings.starSize + 'px;"><svg version="1.0" class="jq-star-svg" shape-rendering="geometricPrecision" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="305px" height="305px" viewBox="60 -62 309 309" style="enable-background:new 64 -59 305 305; stroke-width:' + this.settings.strokeWidth + 'px;" xml:space="preserve"><style type="text/css">.svg-empty-' + this._uid + '{fill:url(#' + this._uid + '_SVGID_1_);}.svg-hovered-' + this._uid + '{fill:url(#' + this._uid + '_SVGID_2_);}.svg-active-' + this._uid + '{fill:url(#' + this._uid + '_SVGID_3_);}</style>' +
                this.getLinearGradient(this._uid + '_SVGID_1_', this.settings.emptyColor, this.settings.emptyColor) +
                this.getLinearGradient(this._uid + '_SVGID_2_', this.settings.hoverColor, this.settings.hoverColor) +
                this.getLinearGradient(this._uid + '_SVGID_3_', this.settings.starGradient.start, this.settings.starGradient.end) +
                '<polygon data-side="left" class="svg-empty-' + this._uid + '" points="281.1,129.8 364,55.7 255.5,46.8 214,-59 172.5,46.8 64,55.4 146.8,129.7 121.1,241 213.9,181.1 213.9,181 306.5,241 " style="stroke: ' + this.settings.strokeColor + '"/>' +
                '<polygon data-side="right" class="svg-empty-' + this._uid + '" points="364,55.7 255.5,46.8 214,-59 213.9,181 306.5,241 281.1,129.8 " style="stroke-dasharray: 230 232 210 0; stroke: ' + this.settings.strokeColor + '"/>' +
                '</svg></div>';

            // inject svg markup
            var starsMarkup = '';
            for( var i = 0; i < this.settings.totalStars; i++){
                starsMarkup += star;
            }
            this.$el.append(starsMarkup);
            this.$stars = this.$el.find('.jq-star');
        },

        getLinearGradient: function(id, startColor, endColor){
            return '<linearGradient id="' + id + '" gradientUnits="userSpaceOnUse" x1="121.1501" y1="-70.35" x2="121.15" y2="125.0045"><stop  offset="0" style="stop-color:' + startColor + '"/><stop  offset="1" style="stop-color:' + endColor + '"/> </linearGradient>';
        },

        executeCallback: function(rating, $el){
            var callback = this.settings.callback;
            if( $.isFunction( callback ) ){
                callback(rating, $el);
            }
        }

    };

    var publicMethods = {

        unload: function(){
            var _name = 'plugin_' + pluginName;
            var $el = $(this);
            var $star = $el.data(_name).$star;
            $el.removeData(_name);
            $star.off();
        }

    };


    // Avoid Plugin.prototype conflicts
    $.extend(Plugin.prototype, methods);

    $.fn[ pluginName ] = function ( options ) {

        // if options is a public method
        if( !$.isPlainObject(options) ){
            if( publicMethods.hasOwnProperty(options) ){
                publicMethods[options].apply(this);
                return;
            }
        }

        return this.each(function() {
            // preventing against multiple instantiations
            if ( !$.data( this, 'plugin_' + pluginName ) ) {
                $.data( this, 'plugin_' + pluginName, new Plugin( this, options ) );
            }
        });
    };

})( jQuery, window, document );



/*!
 * Less - Leaner CSS v2.7.2
 * http://lesscss.org
 *
 * Copyright (c) 2009-2017, Alexis Sellier <self@cloudhead.net>
 * Licensed under the Apache-2.0 License.
 *
 */

 /** * @license Apache-2.0
 */

!function(a){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var b;b="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,b.less=a()}}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error("Cannot find module '"+g+"'");throw j.code="MODULE_NOT_FOUND",j}var k=c[g]={exports:{}};b[g][0].call(k.exports,function(a){var c=b[g][1][a];return e(c?c:a)},k,k.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){var d=a("./utils").addDataAttr,e=a("./browser");b.exports=function(a,b){d(b,e.currentScript(a)),void 0===b.isFileProtocol&&(b.isFileProtocol=/^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(a.location.protocol)),b.async=b.async||!1,b.fileAsync=b.fileAsync||!1,b.poll=b.poll||(b.isFileProtocol?1e3:1500),b.env=b.env||("127.0.0.1"==a.location.hostname||"0.0.0.0"==a.location.hostname||"localhost"==a.location.hostname||a.location.port&&a.location.port.length>0||b.isFileProtocol?"development":"production");var c=/!dumpLineNumbers:(comments|mediaquery|all)/.exec(a.location.hash);c&&(b.dumpLineNumbers=c[1]),void 0===b.useFileCache&&(b.useFileCache=!0),void 0===b.onReady&&(b.onReady=!0)}},{"./browser":3,"./utils":10}],2:[function(a,b,c){function d(a){a.filename&&console.warn(a),e.async||h.removeChild(i)}a("promise/polyfill.js");var e=window.less||{};a("./add-default-options")(window,e);var f=b.exports=a("./index")(window,e);window.less=f;var g,h,i;e.onReady&&(/!watch/.test(window.location.hash)&&f.watch(),e.async||(g="body { display: none !important }",h=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style"),i.type="text/css",i.styleSheet?i.styleSheet.cssText=g:i.appendChild(document.createTextNode(g)),h.appendChild(i)),f.registerStylesheetsImmediately(),f.pageLoadFinished=f.refresh("development"===f.env).then(d,d))},{"./add-default-options":1,"./index":8,"promise/polyfill.js":97}],3:[function(a,b,c){var d=a("./utils");b.exports={createCSS:function(a,b,c){var e=c.href||"",f="less:"+(c.title||d.extractId(e)),g=a.getElementById(f),h=!1,i=a.createElement("style");i.setAttribute("type","text/css"),c.media&&i.setAttribute("media",c.media),i.id=f,i.styleSheet||(i.appendChild(a.createTextNode(b)),h=null!==g&&g.childNodes.length>0&&i.childNodes.length>0&&g.firstChild.nodeValue===i.firstChild.nodeValue);var j=a.getElementsByTagName("head")[0];if(null===g||h===!1){var k=c&&c.nextSibling||null;k?k.parentNode.insertBefore(i,k):j.appendChild(i)}if(g&&h===!1&&g.parentNode.removeChild(g),i.styleSheet)try{i.styleSheet.cssText=b}catch(l){throw new Error("Couldn't reassign styleSheet.cssText.")}},currentScript:function(a){var b=a.document;return b.currentScript||function(){var a=b.getElementsByTagName("script");return a[a.length-1]}()}}},{"./utils":10}],4:[function(a,b,c){b.exports=function(a,b,c){var d=null;if("development"!==b.env)try{d="undefined"==typeof a.localStorage?null:a.localStorage}catch(e){}return{setCSS:function(a,b,e,f){if(d){c.info("saving "+a+" to cache.");try{d.setItem(a,f),d.setItem(a+":timestamp",b),e&&d.setItem(a+":vars",JSON.stringify(e))}catch(g){c.error('failed to save "'+a+'" to local storage for caching.')}}},getCSS:function(a,b,c){var e=d&&d.getItem(a),f=d&&d.getItem(a+":timestamp"),g=d&&d.getItem(a+":vars");if(c=c||{},f&&b.lastModified&&new Date(b.lastModified).valueOf()===new Date(f).valueOf()&&(!c&&!g||JSON.stringify(c)===g))return e}}}},{}],5:[function(a,b,c){var d=a("./utils"),e=a("./browser");b.exports=function(a,b,c){function f(b,f){var g,h,i="less-error-message:"+d.extractId(f||""),j='<li><label>{line}</label><pre class="{class}">{content}</pre></li>',k=a.document.createElement("div"),l=[],m=b.filename||f,n=m.match(/([^\/]+(\?.*)?)$/)[1];k.id=i,k.className="less-error-message",h="<h3>"+(b.type||"Syntax")+"Error: "+(b.message||"There is an error in your .less file")+'</h3><p>in <a href="'+m+'">'+n+"</a> ";var o=function(a,b,c){void 0!==a.extract[b]&&l.push(j.replace(/\{line\}/,(parseInt(a.line,10)||0)+(b-1)).replace(/\{class\}/,c).replace(/\{content\}/,a.extract[b]))};b.extract&&(o(b,0,""),o(b,1,"line"),o(b,2,""),h+="on line "+b.line+", column "+(b.column+1)+":</p><ul>"+l.join("")+"</ul>"),b.stack&&(b.extract||c.logLevel>=4)&&(h+="<br/>Stack Trace</br />"+b.stack.split("\n").slice(1).join("<br/>")),k.innerHTML=h,e.createCSS(a.document,[".less-error-message ul, .less-error-message li {","list-style-type: none;","margin-right: 15px;","padding: 4px 0;","margin: 0;","}",".less-error-message label {","font-size: 12px;","margin-right: 15px;","padding: 4px 0;","color: #cc7777;","}",".less-error-message pre {","color: #dd6666;","padding: 4px 0;","margin: 0;","display: inline-block;","}",".less-error-message pre.line {","color: #ff0000;","}",".less-error-message h3 {","font-size: 20px;","font-weight: bold;","padding: 15px 0 5px 0;","margin: 0;","}",".less-error-message a {","color: #10a","}",".less-error-message .error {","color: red;","font-weight: bold;","padding-bottom: 2px;","border-bottom: 1px dashed red;","}"].join("\n"),{title:"error-message"}),k.style.cssText=["font-family: Arial, sans-serif","border: 1px solid #e00","background-color: #eee","border-radius: 5px","-webkit-border-radius: 5px","-moz-border-radius: 5px","color: #e00","padding: 15px","margin-bottom: 15px"].join(";"),"development"===c.env&&(g=setInterval(function(){var b=a.document,c=b.body;c&&(b.getElementById(i)?c.replaceChild(k,b.getElementById(i)):c.insertBefore(k,c.firstChild),clearInterval(g))},10))}function g(b){var c=a.document.getElementById("less-error-message:"+d.extractId(b));c&&c.parentNode.removeChild(c)}function h(a){}function i(a){c.errorReporting&&"html"!==c.errorReporting?"console"===c.errorReporting?h(a):"function"==typeof c.errorReporting&&c.errorReporting("remove",a):g(a)}function j(a,d){var e="{line} {content}",f=a.filename||d,g=[],h=(a.type||"Syntax")+"Error: "+(a.message||"There is an error in your .less file")+" in "+f+" ",i=function(a,b,c){void 0!==a.extract[b]&&g.push(e.replace(/\{line\}/,(parseInt(a.line,10)||0)+(b-1)).replace(/\{class\}/,c).replace(/\{content\}/,a.extract[b]))};a.extract&&(i(a,0,""),i(a,1,"line"),i(a,2,""),h+="on line "+a.line+", column "+(a.column+1)+":\n"+g.join("\n")),a.stack&&(a.extract||c.logLevel>=4)&&(h+="\nStack Trace\n"+a.stack),b.logger.error(h)}function k(a,b){c.errorReporting&&"html"!==c.errorReporting?"console"===c.errorReporting?j(a,b):"function"==typeof c.errorReporting&&c.errorReporting("add",a,b):f(a,b)}return{add:k,remove:i}}},{"./browser":3,"./utils":10}],6:[function(a,b,c){b.exports=function(b,c){function d(){if(window.XMLHttpRequest&&!("file:"===window.location.protocol&&"ActiveXObject"in window))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(a){return c.error("browser doesn't support AJAX."),null}}var e=a("../less/environment/abstract-file-manager.js"),f={},g=function(){};return g.prototype=new e,g.prototype.alwaysMakePathsAbsolute=function(){return!0},g.prototype.join=function(a,b){return a?this.extractUrlParts(b,a).path:b},g.prototype.doXHR=function(a,e,f,g){function h(b,c,d){b.status>=200&&b.status<300?c(b.responseText,b.getResponseHeader("Last-Modified")):"function"==typeof d&&d(b.status,a)}var i=d(),j=!b.isFileProtocol||b.fileAsync;"function"==typeof i.overrideMimeType&&i.overrideMimeType("text/css"),c.debug("XHR: Getting '"+a+"'"),i.open("GET",a,j),i.setRequestHeader("Accept",e||"text/x-less, text/css; q=0.9, */*; q=0.5"),i.send(null),b.isFileProtocol&&!b.fileAsync?0===i.status||i.status>=200&&i.status<300?f(i.responseText):g(i.status,a):j?i.onreadystatechange=function(){4==i.readyState&&h(i,f,g)}:h(i,f,g)},g.prototype.supports=function(a,b,c,d){return!0},g.prototype.clearFileCache=function(){f={}},g.prototype.loadFile=function(a,b,c,d,e){b&&!this.isPathAbsolute(a)&&(a=b+a),c=c||{};var g=this.extractUrlParts(a,window.location.href),h=g.url;if(c.useFileCache&&f[h])try{var i=f[h];e(null,{contents:i,filename:h,webInfo:{lastModified:new Date}})}catch(j){e({filename:h,message:"Error loading file "+h+" error was "+j.message})}else this.doXHR(h,c.mime,function(a,b){f[h]=a,e(null,{contents:a,filename:h,webInfo:{lastModified:b}})},function(a,b){e({type:"File",message:"'"+b+"' wasn't found ("+a+")",href:h})})},g}},{"../less/environment/abstract-file-manager.js":15}],7:[function(a,b,c){b.exports=function(){function b(){throw{type:"Runtime",message:"Image size functions are not supported in browser version of less"}}var c=a("./../less/functions/function-registry"),d={"image-size":function(a){return b(this,a),-1},"image-width":function(a){return b(this,a),-1},"image-height":function(a){return b(this,a),-1}};c.addMultiple(d)}},{"./../less/functions/function-registry":22}],8:[function(a,b,c){var d=a("./utils").addDataAttr,e=a("./browser");b.exports=function(b,c){function f(a){return c.postProcessor&&"function"==typeof c.postProcessor&&(a=c.postProcessor.call(a,a)||a),a}function g(a){var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}function h(a,b){var c=Array.prototype.slice.call(arguments,2);return function(){var d=c.concat(Array.prototype.slice.call(arguments,0));return a.apply(b,d)}}function i(a){for(var b,d=m.getElementsByTagName("style"),e=0;e<d.length;e++)if(b=d[e],b.type.match(t)){var f=g(c);f.modifyVars=a;var i=b.innerHTML||"";f.filename=m.location.href.replace(/#.*$/,""),n.render(i,f,h(function(a,b,c){b?r.add(b,"inline"):(a.type="text/css",a.styleSheet?a.styleSheet.cssText=c.css:a.innerHTML=c.css)},null,b))}}function j(a,b,e,h,i){function j(c){var d=c.contents,g=c.filename,i=c.webInfo,j={currentDirectory:q.getPath(g),filename:g,rootFilename:g,relativeUrls:k.relativeUrls};if(j.entryPath=j.currentDirectory,j.rootpath=k.rootpath||j.currentDirectory,i){i.remaining=h;var l=s.getCSS(g,i,k.modifyVars);if(!e&&l)return i.local=!0,void b(null,l,d,a,i,g)}r.remove(g),k.rootFileInfo=j,n.render(d,k,function(c,e){c?(c.href=g,b(c)):(e.css=f(e.css),s.setCSS(a.href,i.lastModified,k.modifyVars,e.css),b(null,e.css,d,a,i,g))})}var k=g(c);d(k,a),k.mime=a.type,i&&(k.modifyVars=i),q.loadFile(a.href,null,k,o,function(a,c){return a?void b(a):void j(c)})}function k(a,b,c){for(var d=0;d<n.sheets.length;d++)j(n.sheets[d],a,b,n.sheets.length-(d+1),c)}function l(){"development"===n.env&&(n.watchTimer=setInterval(function(){n.watchMode&&(q.clearFileCache(),k(function(a,c,d,f,g){a?r.add(a,a.href||f.href):c&&e.createCSS(b.document,c,f)}))},c.poll))}var m=b.document,n=a("../less")();n.options=c;var o=n.environment,p=a("./file-manager")(c,n.logger),q=new p;o.addFileManager(q),n.FileManager=p,a("./log-listener")(n,c);var r=a("./error-reporting")(b,n,c),s=n.cache=c.cache||a("./cache")(b,c,n.logger);a("./image-size")(n.environment),c.functions&&n.functions.functionRegistry.addMultiple(c.functions);var t=/^text\/(x-)?less$/;return n.watch=function(){return n.watchMode||(n.env="development",l()),this.watchMode=!0,!0},n.unwatch=function(){return clearInterval(n.watchTimer),this.watchMode=!1,!1},n.registerStylesheetsImmediately=function(){var a=m.getElementsByTagName("link");n.sheets=[];for(var b=0;b<a.length;b++)("stylesheet/less"===a[b].rel||a[b].rel.match(/stylesheet/)&&a[b].type.match(t))&&n.sheets.push(a[b])},n.registerStylesheets=function(){return new Promise(function(a,b){n.registerStylesheetsImmediately(),a()})},n.modifyVars=function(a){return n.refresh(!0,a,!1)},n.refresh=function(a,c,d){return(a||d)&&d!==!1&&q.clearFileCache(),new Promise(function(d,f){var g,h,j,l;g=h=new Date,l=n.sheets.length,0===l?(h=new Date,j=h-g,n.logger.info("Less has finished and no sheets were loaded."),d({startTime:g,endTime:h,totalMilliseconds:j,sheets:n.sheets.length})):k(function(a,c,i,k,m){return a?(r.add(a,a.href||k.href),void f(a)):(n.logger.info(m.local?"Loading "+k.href+" from cache.":"Rendered "+k.href+" successfully."),e.createCSS(b.document,c,k),n.logger.info("CSS for "+k.href+" generated in "+(new Date-h)+"ms"),l--,0===l&&(j=new Date-g,n.logger.info("Less has finished. CSS generated in "+j+"ms"),d({startTime:g,endTime:h,totalMilliseconds:j,sheets:n.sheets.length})),void(h=new Date))},a,c),i(c)})},n.refreshStyles=i,n}},{"../less":31,"./browser":3,"./cache":4,"./error-reporting":5,"./file-manager":6,"./image-size":7,"./log-listener":9,"./utils":10}],9:[function(a,b,c){b.exports=function(a,b){var c=4,d=3,e=2,f=1;b.logLevel="undefined"!=typeof b.logLevel?b.logLevel:"development"===b.env?d:f,b.loggers||(b.loggers=[{debug:function(a){b.logLevel>=c&&console.log(a)},info:function(a){b.logLevel>=d&&console.log(a)},warn:function(a){b.logLevel>=e&&console.warn(a)},error:function(a){b.logLevel>=f&&console.error(a)}}]);for(var g=0;g<b.loggers.length;g++)a.logger.addListener(b.loggers[g])}},{}],10:[function(a,b,c){b.exports={extractId:function(a){return a.replace(/^[a-z-]+:\/+?[^\/]+/,"").replace(/[\?\&]livereload=\w+/,"").replace(/^\//,"").replace(/\.[a-zA-Z]+$/,"").replace(/[^\.\w-]+/g,"-").replace(/\./g,":")},addDataAttr:function(a,b){for(var c in b.dataset)if(b.dataset.hasOwnProperty(c))if("env"===c||"dumpLineNumbers"===c||"rootpath"===c||"errorReporting"===c)a[c]=b.dataset[c];else try{a[c]=JSON.parse(b.dataset[c])}catch(d){}}}},{}],11:[function(a,b,c){var d={};b.exports=d;var e=function(a,b,c){if(a)for(var d=0;d<c.length;d++)a.hasOwnProperty(c[d])&&(b[c[d]]=a[c[d]])},f=["paths","relativeUrls","rootpath","strictImports","insecure","dumpLineNumbers","compress","syncImport","chunkInput","mime","useFileCache","processImports","pluginManager"];d.Parse=function(a){e(a,this,f),"string"==typeof this.paths&&(this.paths=[this.paths])};var g=["paths","compress","ieCompat","strictMath","strictUnits","sourceMap","importMultiple","urlArgs","javascriptEnabled","pluginManager","importantScope"];d.Eval=function(a,b){e(a,this,g),"string"==typeof this.paths&&(this.paths=[this.paths]),this.frames=b||[],this.importantScope=this.importantScope||[]},d.Eval.prototype.inParenthesis=function(){this.parensStack||(this.parensStack=[]),this.parensStack.push(!0)},d.Eval.prototype.outOfParenthesis=function(){this.parensStack.pop()},d.Eval.prototype.isMathOn=function(){return!this.strictMath||this.parensStack&&this.parensStack.length},d.Eval.prototype.isPathRelative=function(a){return!/^(?:[a-z-]+:|\/|#)/i.test(a)},d.Eval.prototype.normalizePath=function(a){var b,c=a.split("/").reverse();for(a=[];0!==c.length;)switch(b=c.pop()){case".":break;case"..":0===a.length||".."===a[a.length-1]?a.push(b):a.pop();break;default:a.push(b)}return a.join("/")}},{}],12:[function(a,b,c){b.exports={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}},{}],13:[function(a,b,c){b.exports={colors:a("./colors"),unitConversions:a("./unit-conversions")}},{"./colors":12,"./unit-conversions":14}],14:[function(a,b,c){b.exports={length:{m:1,cm:.01,mm:.001,"in":.0254,px:.0254/96,pt:.0254/72,pc:.0254/72*12},duration:{s:1,ms:.001},angle:{rad:1/(2*Math.PI),deg:1/360,grad:.0025,turn:1}}},{}],15:[function(a,b,c){var d=function(){};d.prototype.getPath=function(a){var b=a.lastIndexOf("?");return b>0&&(a=a.slice(0,b)),b=a.lastIndexOf("/"),b<0&&(b=a.lastIndexOf("\\")),b<0?"":a.slice(0,b+1)},d.prototype.tryAppendExtension=function(a,b){return/(\.[a-z]*$)|([\?;].*)$/.test(a)?a:a+b},d.prototype.tryAppendLessExtension=function(a){return this.tryAppendExtension(a,".less")},d.prototype.supportsSync=function(){return!1},d.prototype.alwaysMakePathsAbsolute=function(){return!1},d.prototype.isPathAbsolute=function(a){return/^(?:[a-z-]+:|\/|\\|#)/i.test(a)},d.prototype.join=function(a,b){return a?a+b:b},d.prototype.pathDiff=function(a,b){var c,d,e,f,g=this.extractUrlParts(a),h=this.extractUrlParts(b),i="";if(g.hostPart!==h.hostPart)return"";for(d=Math.max(h.directories.length,g.directories.length),c=0;c<d&&h.directories[c]===g.directories[c];c++);for(f=h.directories.slice(c),e=g.directories.slice(c),c=0;c<f.length-1;c++)i+="../";for(c=0;c<e.length-1;c++)i+=e[c]+"/";return i},d.prototype.extractUrlParts=function(a,b){var c,d,e=/^((?:[a-z-]+:)?\/{2}(?:[^\/\?#]*\/)|([\/\\]))?((?:[^\/\\\?#]*[\/\\])*)([^\/\\\?#]*)([#\?].*)?$/i,f=a.match(e),g={},h=[];if(!f)throw new Error("Could not parse sheet href - '"+a+"'");if(b&&(!f[1]||f[2])){if(d=b.match(e),!d)throw new Error("Could not parse page url - '"+b+"'");f[1]=f[1]||d[1]||"",f[2]||(f[3]=d[3]+f[3])}if(f[3]){for(h=f[3].replace(/\\/g,"/").split("/"),c=0;c<h.length;c++)"."===h[c]&&(h.splice(c,1),c-=1);for(c=0;c<h.length;c++)".."===h[c]&&c>0&&(h.splice(c-1,2),c-=2)}return g.hostPart=f[1],g.directories=h,g.path=(f[1]||"")+h.join("/"),g.fileUrl=g.path+(f[4]||""),g.url=g.fileUrl+(f[5]||""),g},b.exports=d},{}],16:[function(a,b,c){var d=a("../logger"),e=function(a,b){this.fileManagers=b||[],a=a||{};for(var c=["encodeBase64","mimeLookup","charsetLookup","getSourceMapGenerator"],d=[],e=d.concat(c),f=0;f<e.length;f++){var g=e[f],h=a[g];h?this[g]=h.bind(a):f<d.length&&this.warn("missing required function in environment - "+g)}};e.prototype.getFileManager=function(a,b,c,e,f){a||d.warn("getFileManager called with no filename.. Please report this issue. continuing."),null==b&&d.warn("getFileManager called with null directory.. Please report this issue. continuing.");var g=this.fileManagers;c.pluginManager&&(g=[].concat(g).concat(c.pluginManager.getFileManagers()));for(var h=g.length-1;h>=0;h--){var i=g[h];if(i[f?"supportsSync":"supports"](a,b,c,e))return i}return null},e.prototype.addFileManager=function(a){this.fileManagers.push(a)},e.prototype.clearFileManagers=function(){this.fileManagers=[]},b.exports=e},{"../logger":33}],17:[function(a,b,c){function d(a,b,c){var d,f,g,h,i=b.alpha,j=c.alpha,k=[];g=j+i*(1-j);for(var l=0;l<3;l++)d=b.rgb[l]/255,f=c.rgb[l]/255,h=a(d,f),g&&(h=(j*f+i*(d-j*(d+f-h)))/g),k[l]=255*h;return new e(k,g)}var e=a("../tree/color"),f=a("./function-registry"),g={multiply:function(a,b){return a*b},screen:function(a,b){return a+b-a*b},overlay:function(a,b){return a*=2,a<=1?g.multiply(a,b):g.screen(a-1,b)},softlight:function(a,b){var c=1,d=a;return b>.5&&(d=1,c=a>.25?Math.sqrt(a):((16*a-12)*a+4)*a),a-(1-2*b)*d*(c-a)},hardlight:function(a,b){return g.overlay(b,a)},difference:function(a,b){return Math.abs(a-b)},exclusion:function(a,b){return a+b-2*a*b},average:function(a,b){return(a+b)/2},negation:function(a,b){return 1-Math.abs(a+b-1)}};for(var h in g)g.hasOwnProperty(h)&&(d[h]=d.bind(null,g[h]));f.addMultiple(d)},{"../tree/color":50,"./function-registry":22}],18:[function(a,b,c){function d(a){return Math.min(1,Math.max(0,a))}function e(a){return h.hsla(a.h,a.s,a.l,a.a)}function f(a){if(a instanceof i)return parseFloat(a.unit.is("%")?a.value/100:a.value);if("number"==typeof a)return a;throw{type:"Argument",message:"color functions take numbers as parameters"}}function g(a,b){return a instanceof i&&a.unit.is("%")?parseFloat(a.value*b/100):f(a)}var h,i=a("../tree/dimension"),j=a("../tree/color"),k=a("../tree/quoted"),l=a("../tree/anonymous"),m=a("./function-registry");h={rgb:function(a,b,c){return h.rgba(a,b,c,1)},rgba:function(a,b,c,d){var e=[a,b,c].map(function(a){return g(a,255)});return d=f(d),new j(e,d)},hsl:function(a,b,c){return h.hsla(a,b,c,1)},hsla:function(a,b,c,e){function g(a){return a=a<0?a+1:a>1?a-1:a,6*a<1?i+(j-i)*a*6:2*a<1?j:3*a<2?i+(j-i)*(2/3-a)*6:i}var i,j;return a=f(a)%360/360,b=d(f(b)),c=d(f(c)),e=d(f(e)),j=c<=.5?c*(b+1):c+b-c*b,i=2*c-j,h.rgba(255*g(a+1/3),255*g(a),255*g(a-1/3),e)},hsv:function(a,b,c){return h.hsva(a,b,c,1)},hsva:function(a,b,c,d){a=f(a)%360/360*360,b=f(b),c=f(c),d=f(d);var e,g;e=Math.floor(a/60%6),g=a/60-e;var i=[c,c*(1-b),c*(1-g*b),c*(1-(1-g)*b)],j=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]];return h.rgba(255*i[j[e][0]],255*i[j[e][1]],255*i[j[e][2]],d)},hue:function(a){return new i(a.toHSL().h)},saturation:function(a){return new i(100*a.toHSL().s,"%")},lightness:function(a){return new i(100*a.toHSL().l,"%")},hsvhue:function(a){return new i(a.toHSV().h)},hsvsaturation:function(a){return new i(100*a.toHSV().s,"%")},hsvvalue:function(a){return new i(100*a.toHSV().v,"%")},red:function(a){return new i(a.rgb[0])},green:function(a){return new i(a.rgb[1])},blue:function(a){return new i(a.rgb[2])},alpha:function(a){return new i(a.toHSL().a)},luma:function(a){return new i(a.luma()*a.alpha*100,"%")},luminance:function(a){var b=.2126*a.rgb[0]/255+.7152*a.rgb[1]/255+.0722*a.rgb[2]/255;return new i(b*a.alpha*100,"%")},saturate:function(a,b,c){if(!a.rgb)return null;var f=a.toHSL();return f.s+="undefined"!=typeof c&&"relative"===c.value?f.s*b.value/100:b.value/100,f.s=d(f.s),e(f)},desaturate:function(a,b,c){var f=a.toHSL();return f.s-="undefined"!=typeof c&&"relative"===c.value?f.s*b.value/100:b.value/100,f.s=d(f.s),e(f)},lighten:function(a,b,c){var f=a.toHSL();return f.l+="undefined"!=typeof c&&"relative"===c.value?f.l*b.value/100:b.value/100,f.l=d(f.l),e(f)},darken:function(a,b,c){var f=a.toHSL();return f.l-="undefined"!=typeof c&&"relative"===c.value?f.l*b.value/100:b.value/100,f.l=d(f.l),e(f)},fadein:function(a,b,c){var f=a.toHSL();return f.a+="undefined"!=typeof c&&"relative"===c.value?f.a*b.value/100:b.value/100,f.a=d(f.a),e(f)},fadeout:function(a,b,c){var f=a.toHSL();return f.a-="undefined"!=typeof c&&"relative"===c.value?f.a*b.value/100:b.value/100,f.a=d(f.a),e(f)},fade:function(a,b){var c=a.toHSL();return c.a=b.value/100,c.a=d(c.a),e(c)},spin:function(a,b){var c=a.toHSL(),d=(c.h+b.value)%360;return c.h=d<0?360+d:d,e(c)},mix:function(a,b,c){a.toHSL&&b.toHSL||(console.log(b.type),console.dir(b)),c||(c=new i(50));var d=c.value/100,e=2*d-1,f=a.toHSL().a-b.toHSL().a,g=((e*f==-1?e:(e+f)/(1+e*f))+1)/2,h=1-g,k=[a.rgb[0]*g+b.rgb[0]*h,a.rgb[1]*g+b.rgb[1]*h,a.rgb[2]*g+b.rgb[2]*h],l=a.alpha*d+b.alpha*(1-d);return new j(k,l)},greyscale:function(a){return h.desaturate(a,new i(100))},contrast:function(a,b,c,d){if(!a.rgb)return null;if("undefined"==typeof c&&(c=h.rgba(255,255,255,1)),"undefined"==typeof b&&(b=h.rgba(0,0,0,1)),b.luma()>c.luma()){var e=c;c=b,b=e}return d="undefined"==typeof d?.43:f(d),a.luma()<d?c:b},argb:function(a){return new l(a.toARGB())},color:function(a){if(a instanceof k&&/^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(a.value))return new j(a.value.slice(1));if(a instanceof j||(a=j.fromKeyword(a.value)))return a.value=void 0,a;throw{type:"Argument",message:"argument must be a color keyword or 3/6 digit hex e.g. #FFF"}},tint:function(a,b){return h.mix(h.rgb(255,255,255),a,b)},shade:function(a,b){return h.mix(h.rgb(0,0,0),a,b)}},m.addMultiple(h)},{"../tree/anonymous":46,"../tree/color":50,"../tree/dimension":56,"../tree/quoted":73,"./function-registry":22}],19:[function(a,b,c){b.exports=function(b){var c=a("../tree/quoted"),d=a("../tree/url"),e=a("./function-registry"),f=function(a,b){return new d(b,a.index,a.currentFileInfo).eval(a.context)},g=a("../logger");e.add("data-uri",function(a,e){e||(e=a,a=null);var h=a&&a.value,i=e.value,j=this.currentFileInfo,k=j.relativeUrls?j.currentDirectory:j.entryPath,l=i.indexOf("#"),m="";l!==-1&&(m=i.slice(l),i=i.slice(0,l));var n=b.getFileManager(i,k,this.context,b,!0);if(!n)return f(this,e);var o=!1;if(a)o=/;base64$/.test(h);else{if(h=b.mimeLookup(i),"image/svg+xml"===h)o=!1;else{var p=b.charsetLookup(h);o=["US-ASCII","UTF-8"].indexOf(p)<0}o&&(h+=";base64")}var q=n.loadFileSync(i,k,this.context,b);if(!q.contents)return g.warn("Skipped data-uri embedding of "+i+" because file not found"),f(this,e||a);var r=q.contents;if(o&&!b.encodeBase64)return f(this,e);r=o?b.encodeBase64(r):encodeURIComponent(r);var s="data:"+h+","+r+m,t=32768;return s.length>=t&&this.context.ieCompat!==!1?(g.warn("Skipped data-uri embedding of "+i+" because its size ("+s.length+" characters) exceeds IE8-safe "+t+" characters!"),f(this,e||a)):new d(new c('"'+s+'"',s,(!1),this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../logger":33,"../tree/quoted":73,"../tree/url":80,"./function-registry":22}],20:[function(a,b,c){var d=a("../tree/keyword"),e=a("./function-registry"),f={eval:function(){var a=this.value_,b=this.error_;if(b)throw b;if(null!=a)return a?d.True:d.False},value:function(a){this.value_=a},error:function(a){this.error_=a},reset:function(){this.value_=this.error_=null}};e.add("default",f.eval.bind(f)),b.exports=f},{"../tree/keyword":65,"./function-registry":22}],21:[function(a,b,c){var d=a("../tree/expression"),e=function(a,b,c,d){this.name=a.toLowerCase(),this.index=c,this.context=b,this.currentFileInfo=d,this.func=b.frames[0].functionRegistry.get(this.name)};e.prototype.isValid=function(){return Boolean(this.func)},e.prototype.call=function(a){return Array.isArray(a)&&(a=a.filter(function(a){return"Comment"!==a.type}).map(function(a){if("Expression"===a.type){var b=a.value.filter(function(a){return"Comment"!==a.type});return 1===b.length?b[0]:new d(b)}return a})),this.func.apply(this,a)},b.exports=e},{"../tree/expression":59}],22:[function(a,b,c){function d(a){return{_data:{},add:function(a,b){a=a.toLowerCase(),this._data.hasOwnProperty(a),this._data[a]=b},addMultiple:function(a){Object.keys(a).forEach(function(b){this.add(b,a[b])}.bind(this))},get:function(b){return this._data[b]||a&&a.get(b)},inherit:function(){return d(this)}}}b.exports=d(null)},{}],23:[function(a,b,c){b.exports=function(b){var c={functionRegistry:a("./function-registry"),functionCaller:a("./function-caller")};return a("./default"),a("./color"),a("./color-blending"),a("./data-uri")(b),a("./math"),a("./number"),a("./string"),a("./svg")(b),a("./types"),c}},{"./color":18,"./color-blending":17,"./data-uri":19,"./default":20,"./function-caller":21,"./function-registry":22,"./math":25,"./number":26,"./string":27,"./svg":28,"./types":29}],24:[function(a,b,c){var d=a("../tree/dimension"),e=function(){};e._math=function(a,b,c){if(!(c instanceof d))throw{type:"Argument",message:"argument must be a number"};return null==b?b=c.unit:c=c.unify(),new d(a(parseFloat(c.value)),b)},b.exports=e},{"../tree/dimension":56}],25:[function(a,b,c){var d=a("./function-registry"),e=a("./math-helper.js"),f={ceil:null,floor:null,sqrt:null,abs:null,tan:"",sin:"",cos:"",atan:"rad",asin:"rad",acos:"rad"};for(var g in f)f.hasOwnProperty(g)&&(f[g]=e._math.bind(null,Math[g],f[g]));f.round=function(a,b){var c="undefined"==typeof b?0:b.value;return e._math(function(a){return a.toFixed(c)},null,a)},d.addMultiple(f)},{"./function-registry":22,"./math-helper.js":24}],26:[function(a,b,c){var d=a("../tree/dimension"),e=a("../tree/anonymous"),f=a("./function-registry"),g=a("./math-helper.js"),h=function(a,b){switch(b=Array.prototype.slice.call(b),b.length){case 0:throw{type:"Argument",message:"one or more arguments required"}}var c,f,g,h,i,j,k,l,m=[],n={};for(c=0;c<b.length;c++)if(g=b[c],g instanceof d)if(h=""===g.unit.toString()&&void 0!==l?new d(g.value,l).unify():g.unify(),j=""===h.unit.toString()&&void 0!==k?k:h.unit.toString(),k=""!==j&&void 0===k||""!==j&&""===m[0].unify().unit.toString()?j:k,l=""!==j&&void 0===l?g.unit.toString():l,f=void 0!==n[""]&&""!==j&&j===k?n[""]:n[j],void 0!==f)i=""===m[f].unit.toString()&&void 0!==l?new d(m[f].value,l).unify():m[f].unify(),(a&&h.value<i.value||!a&&h.value>i.value)&&(m[f]=g);else{if(void 0!==k&&j!==k)throw{type:"Argument",message:"incompatible types"};n[j]=m.length,m.push(g)}else Array.isArray(b[c].value)&&Array.prototype.push.apply(b,Array.prototype.slice.call(b[c].value));return 1==m.length?m[0]:(b=m.map(function(a){return a.toCSS(this.context)}).join(this.context.compress?",":", "),new e((a?"min":"max")+"("+b+")"))};f.addMultiple({min:function(){return h(!0,arguments)},max:function(){return h(!1,arguments)},convert:function(a,b){return a.convertTo(b.value)},pi:function(){return new d(Math.PI)},mod:function(a,b){return new d(a.value%b.value,a.unit)},pow:function(a,b){if("number"==typeof a&&"number"==typeof b)a=new d(a),b=new d(b);else if(!(a instanceof d&&b instanceof d))throw{type:"Argument",message:"arguments must be numbers"};return new d(Math.pow(a.value,b.value),a.unit)},percentage:function(a){var b=g._math(function(a){return 100*a},"%",a);return b}})},{"../tree/anonymous":46,"../tree/dimension":56,"./function-registry":22,"./math-helper.js":24}],27:[function(a,b,c){var d=a("../tree/quoted"),e=a("../tree/anonymous"),f=a("../tree/javascript"),g=a("./function-registry");g.addMultiple({e:function(a){return new e(a instanceof f?a.evaluated:a.value)},escape:function(a){return new e(encodeURI(a.value).replace(/=/g,"%3D").replace(/:/g,"%3A").replace(/#/g,"%23").replace(/;/g,"%3B").replace(/\(/g,"%28").replace(/\)/g,"%29"))},replace:function(a,b,c,e){var f=a.value;return c="Quoted"===c.type?c.value:c.toCSS(),f=f.replace(new RegExp(b.value,e?e.value:""),c),new d(a.quote||"",f,a.escaped)},"%":function(a){for(var b=Array.prototype.slice.call(arguments,1),c=a.value,e=0;e<b.length;e++)c=c.replace(/%[sda]/i,function(a){var c="Quoted"===b[e].type&&a.match(/s/i)?b[e].value:b[e].toCSS();return a.match(/[A-Z]$/)?encodeURIComponent(c):c});return c=c.replace(/%%/g,"%"),new d(a.quote||"",c,a.escaped)}})},{"../tree/anonymous":46,"../tree/javascript":63,
"../tree/quoted":73,"./function-registry":22}],28:[function(a,b,c){b.exports=function(b){var c=a("../tree/dimension"),d=a("../tree/color"),e=a("../tree/expression"),f=a("../tree/quoted"),g=a("../tree/url"),h=a("./function-registry");h.add("svg-gradient",function(a){function b(){throw{type:"Argument",message:"svg-gradient expects direction, start_color [start_position], [color position,]..., end_color [end_position] or direction, color list"}}var h,i,j,k,l,m,n,o,p="linear",q='x="0" y="0" width="1" height="1"',r={compress:!1},s=a.toCSS(r);switch(2==arguments.length?(arguments[1].value.length<2&&b(),h=arguments[1].value):arguments.length<3?b():h=Array.prototype.slice.call(arguments,1),s){case"to bottom":i='x1="0%" y1="0%" x2="0%" y2="100%"';break;case"to right":i='x1="0%" y1="0%" x2="100%" y2="0%"';break;case"to bottom right":i='x1="0%" y1="0%" x2="100%" y2="100%"';break;case"to top right":i='x1="0%" y1="100%" x2="100%" y2="0%"';break;case"ellipse":case"ellipse at center":p="radial",i='cx="50%" cy="50%" r="75%"',q='x="-50" y="-50" width="101" height="101"';break;default:throw{type:"Argument",message:"svg-gradient direction must be 'to bottom', 'to right', 'to bottom right', 'to top right' or 'ellipse at center'"}}for(j='<?xml version="1.0" ?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none"><'+p+'Gradient id="gradient" gradientUnits="userSpaceOnUse" '+i+">",k=0;k<h.length;k+=1)h[k]instanceof e?(l=h[k].value[0],m=h[k].value[1]):(l=h[k],m=void 0),l instanceof d&&((0===k||k+1===h.length)&&void 0===m||m instanceof c)||b(),n=m?m.toCSS(r):0===k?"0%":"100%",o=l.alpha,j+='<stop offset="'+n+'" stop-color="'+l.toRGB()+'"'+(o<1?' stop-opacity="'+o+'"':"")+"/>";return j+="</"+p+"Gradient><rect "+q+' fill="url(#gradient)" /></svg>',j=encodeURIComponent(j),j="data:image/svg+xml,"+j,new g(new f("'"+j+"'",j,(!1),this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../tree/color":50,"../tree/dimension":56,"../tree/expression":59,"../tree/quoted":73,"../tree/url":80,"./function-registry":22}],29:[function(a,b,c){var d=a("../tree/keyword"),e=a("../tree/detached-ruleset"),f=a("../tree/dimension"),g=a("../tree/color"),h=a("../tree/quoted"),i=a("../tree/anonymous"),j=a("../tree/url"),k=a("../tree/operation"),l=a("./function-registry"),m=function(a,b){return a instanceof b?d.True:d.False},n=function(a,b){if(void 0===b)throw{type:"Argument",message:"missing the required second argument to isunit."};if(b="string"==typeof b.value?b.value:b,"string"!=typeof b)throw{type:"Argument",message:"Second argument to isunit should be a unit or a string."};return a instanceof f&&a.unit.is(b)?d.True:d.False},o=function(a){var b=Array.isArray(a.value)?a.value:Array(a);return b};l.addMultiple({isruleset:function(a){return m(a,e)},iscolor:function(a){return m(a,g)},isnumber:function(a){return m(a,f)},isstring:function(a){return m(a,h)},iskeyword:function(a){return m(a,d)},isurl:function(a){return m(a,j)},ispixel:function(a){return n(a,"px")},ispercentage:function(a){return n(a,"%")},isem:function(a){return n(a,"em")},isunit:n,unit:function(a,b){if(!(a instanceof f))throw{type:"Argument",message:"the first argument to unit must be a number"+(a instanceof k?". Have you forgotten parenthesis?":"")};return b=b?b instanceof d?b.value:b.toCSS():"",new f(a.value,b)},"get-unit":function(a){return new i(a.unit)},extract:function(a,b){return b=b.value-1,o(a)[b]},length:function(a){return new f(o(a).length)}})},{"../tree/anonymous":46,"../tree/color":50,"../tree/detached-ruleset":55,"../tree/dimension":56,"../tree/keyword":65,"../tree/operation":71,"../tree/quoted":73,"../tree/url":80,"./function-registry":22}],30:[function(a,b,c){var d=a("./contexts"),e=a("./parser/parser"),f=a("./plugins/function-importer");b.exports=function(a){var b=function(a,b){this.rootFilename=b.filename,this.paths=a.paths||[],this.contents={},this.contentsIgnoredChars={},this.mime=a.mime,this.error=null,this.context=a,this.queue=[],this.files={}};return b.prototype.push=function(b,c,g,h,i){var j=this;this.queue.push(b);var k=function(a,c,d){j.queue.splice(j.queue.indexOf(b),1);var e=d===j.rootFilename;h.optional&&a?i(null,{rules:[]},!1,null):(j.files[d]=c,a&&!j.error&&(j.error=a),i(a,c,e,d))},l={relativeUrls:this.context.relativeUrls,entryPath:g.entryPath,rootpath:g.rootpath,rootFilename:g.rootFilename},m=a.getFileManager(b,g.currentDirectory,this.context,a);if(!m)return void k({message:"Could not find a file-manager for "+b});c&&(b=m.tryAppendExtension(b,h.plugin?".js":".less"));var n=function(a){var b=a.filename,c=a.contents.replace(/^\uFEFF/,"");l.currentDirectory=m.getPath(b),l.relativeUrls&&(l.rootpath=m.join(j.context.rootpath||"",m.pathDiff(l.currentDirectory,l.entryPath)),!m.isPathAbsolute(l.rootpath)&&m.alwaysMakePathsAbsolute()&&(l.rootpath=m.join(l.entryPath,l.rootpath))),l.filename=b;var i=new d.Parse(j.context);i.processImports=!1,j.contents[b]=c,(g.reference||h.reference)&&(l.reference=!0),h.plugin?new f(i,l).eval(c,function(a,c){k(a,c,b)}):h.inline?k(null,c,b):new e(i,j,l).parse(c,function(a,c){k(a,c,b)})},o=m.loadFile(b,g.currentDirectory,this.context,a,function(a,b){a?k(a):n(b)});o&&o.then(n,k)},b}},{"./contexts":11,"./parser/parser":38,"./plugins/function-importer":40}],31:[function(a,b,c){b.exports=function(b,c){var d,e,f,g,h,i={version:[2,7,2],data:a("./data"),tree:a("./tree"),Environment:h=a("./environment/environment"),AbstractFileManager:a("./environment/abstract-file-manager"),environment:b=new h(b,c),visitors:a("./visitors"),Parser:a("./parser/parser"),functions:a("./functions")(b),contexts:a("./contexts"),SourceMapOutput:d=a("./source-map-output")(b),SourceMapBuilder:e=a("./source-map-builder")(d,b),ParseTree:f=a("./parse-tree")(e),ImportManager:g=a("./import-manager")(b),render:a("./render")(b,f,g),parse:a("./parse")(b,f,g),LessError:a("./less-error"),transformTree:a("./transform-tree"),utils:a("./utils"),PluginManager:a("./plugin-manager"),logger:a("./logger")};return i}},{"./contexts":11,"./data":13,"./environment/abstract-file-manager":15,"./environment/environment":16,"./functions":23,"./import-manager":30,"./less-error":32,"./logger":33,"./parse":35,"./parse-tree":34,"./parser/parser":38,"./plugin-manager":39,"./render":41,"./source-map-builder":42,"./source-map-output":43,"./transform-tree":44,"./tree":62,"./utils":83,"./visitors":87}],32:[function(a,b,c){var d=a("./utils"),e=b.exports=function(a,b,c){Error.call(this);var e=a.filename||c;if(b&&e){var f=b.contents[e],g=d.getLocation(a.index,f),h=g.line,i=g.column,j=a.call&&d.getLocation(a.call,f).line,k=f.split("\n");this.type=a.type||"Syntax",this.filename=e,this.index=a.index,this.line="number"==typeof h?h+1:null,this.callLine=j+1,this.callExtract=k[j],this.column=i,this.extract=[k[h-1],k[h],k[h+1]]}this.message=a.message,this.stack=a.stack};if("undefined"==typeof Object.create){var f=function(){};f.prototype=Error.prototype,e.prototype=new f}else e.prototype=Object.create(Error.prototype);e.prototype.constructor=e},{"./utils":83}],33:[function(a,b,c){b.exports={error:function(a){this._fireEvent("error",a)},warn:function(a){this._fireEvent("warn",a)},info:function(a){this._fireEvent("info",a)},debug:function(a){this._fireEvent("debug",a)},addListener:function(a){this._listeners.push(a)},removeListener:function(a){for(var b=0;b<this._listeners.length;b++)if(this._listeners[b]===a)return void this._listeners.splice(b,1)},_fireEvent:function(a,b){for(var c=0;c<this._listeners.length;c++){var d=this._listeners[c][a];d&&d(b)}},_listeners:[]}},{}],34:[function(a,b,c){var d=a("./less-error"),e=a("./transform-tree"),f=a("./logger");b.exports=function(a){var b=function(a,b){this.root=a,this.imports=b};return b.prototype.toCSS=function(b){var c,g,h={};try{c=e(this.root,b)}catch(i){throw new d(i,this.imports)}try{var j=Boolean(b.compress);j&&f.warn("The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.");var k={compress:j,dumpLineNumbers:b.dumpLineNumbers,strictUnits:Boolean(b.strictUnits),numPrecision:8};b.sourceMap?(g=new a(b.sourceMap),h.css=g.toCSS(c,k,this.imports)):h.css=c.toCSS(k)}catch(i){throw new d(i,this.imports)}if(b.pluginManager)for(var l=b.pluginManager.getPostProcessors(),m=0;m<l.length;m++)h.css=l[m].process(h.css,{sourceMap:g,options:b,imports:this.imports});b.sourceMap&&(h.map=g.getExternalSourceMap()),h.imports=[];for(var n in this.imports.files)this.imports.files.hasOwnProperty(n)&&n!==this.imports.rootFilename&&h.imports.push(n);return h},b}},{"./less-error":32,"./logger":33,"./transform-tree":44}],35:[function(a,b,c){var d,e=a("./contexts"),f=a("./parser/parser"),g=a("./plugin-manager");b.exports=function(b,c,h){var i=function(b,c,j){if(c=c||{},"function"==typeof c&&(j=c,c={}),!j){d||(d="undefined"==typeof Promise?a("promise"):Promise);var k=this;return new d(function(a,d){i.call(k,b,c,function(b,c){b?d(b):a(c)})})}var l,m,n=new g(this);if(n.addPlugins(c.plugins),c.pluginManager=n,l=new e.Parse(c),c.rootFileInfo)m=c.rootFileInfo;else{var o=c.filename||"input",p=o.replace(/[^\/\\]*$/,"");m={filename:o,relativeUrls:l.relativeUrls,rootpath:l.rootpath||"",currentDirectory:p,entryPath:p,rootFilename:o},m.rootpath&&"/"!==m.rootpath.slice(-1)&&(m.rootpath+="/")}var q=new h(l,m);new f(l,q,m).parse(b,function(a,b){return a?j(a):void j(null,b,q,c)},c)};return i}},{"./contexts":11,"./parser/parser":38,"./plugin-manager":39,promise:void 0}],36:[function(a,b,c){b.exports=function(a,b){function c(b){var c=h-q;c<512&&!b||!c||(p.push(a.slice(q,h+1)),q=h+1)}var d,e,f,g,h,i,j,k,l,m=a.length,n=0,o=0,p=[],q=0;for(h=0;h<m;h++)if(j=a.charCodeAt(h),!(j>=97&&j<=122||j<34))switch(j){case 40:o++,e=h;continue;case 41:if(--o<0)return b("missing opening `(`",h);continue;case 59:o||c();continue;case 123:n++,d=h;continue;case 125:if(--n<0)return b("missing opening `{`",h);n||o||c();continue;case 92:if(h<m-1){h++;continue}return b("unescaped `\\`",h);case 34:case 39:case 96:for(l=0,i=h,h+=1;h<m;h++)if(k=a.charCodeAt(h),!(k>96)){if(k==j){l=1;break}if(92==k){if(h==m-1)return b("unescaped `\\`",h);h++}}if(l)continue;return b("unmatched `"+String.fromCharCode(j)+"`",i);case 47:if(o||h==m-1)continue;if(k=a.charCodeAt(h+1),47==k)for(h+=2;h<m&&(k=a.charCodeAt(h),!(k<=13)||10!=k&&13!=k);h++);else if(42==k){for(f=i=h,h+=2;h<m-1&&(k=a.charCodeAt(h),125==k&&(g=h),42!=k||47!=a.charCodeAt(h+1));h++);if(h==m-1)return b("missing closing `*/`",i);h++}continue;case 42:if(h<m-1&&47==a.charCodeAt(h+1))return b("unmatched `/*`",h);continue}return 0!==n?f>d&&g>f?b("missing closing `}` or `*/`",d):b("missing closing `}`",d):0!==o?b("missing closing `)`",e):(c(!0),p)}},{}],37:[function(a,b,c){var d=a("./chunker");b.exports=function(){function a(d){for(var e,f,j,p=k.i,q=c,s=k.i-i,t=k.i+h.length-s,u=k.i+=d,v=b;k.i<t;k.i++){if(e=v.charCodeAt(k.i),k.autoCommentAbsorb&&e===r){if(f=v.charAt(k.i+1),"/"===f){j={index:k.i,isLineComment:!0};var w=v.indexOf("\n",k.i+2);w<0&&(w=t),k.i=w,j.text=v.substr(j.index,k.i-j.index),k.commentStore.push(j);continue}if("*"===f){var x=v.indexOf("*/",k.i+2);if(x>=0){j={index:k.i,text:v.substr(k.i,x+2-k.i),isLineComment:!1},k.i+=j.text.length-1,k.commentStore.push(j);continue}}break}if(e!==l&&e!==n&&e!==m&&e!==o)break}if(h=h.slice(d+k.i-u+s),i=k.i,!h.length){if(c<g.length-1)return h=g[++c],a(0),!0;k.finished=!0}return p!==k.i||q!==c}var b,c,e,f,g,h,i,j=[],k={},l=32,m=9,n=10,o=13,p=43,q=44,r=47,s=57;return k.save=function(){i=k.i,j.push({current:h,i:k.i,j:c})},k.restore=function(a){(k.i>e||k.i===e&&a&&!f)&&(e=k.i,f=a);var b=j.pop();h=b.current,i=k.i=b.i,c=b.j},k.forget=function(){j.pop()},k.isWhitespace=function(a){var c=k.i+(a||0),d=b.charCodeAt(c);return d===l||d===o||d===m||d===n},k.$re=function(b){k.i>i&&(h=h.slice(k.i-i),i=k.i);var c=b.exec(h);return c?(a(c[0].length),"string"==typeof c?c:1===c.length?c[0]:c):null},k.$char=function(c){return b.charAt(k.i)!==c?null:(a(1),c)},k.$str=function(c){for(var d=c.length,e=0;e<d;e++)if(b.charAt(k.i+e)!==c.charAt(e))return null;return a(d),c},k.$quoted=function(){var c=b.charAt(k.i);if("'"===c||'"'===c){for(var d=b.length,e=k.i,f=1;f+e<d;f++){var g=b.charAt(f+e);switch(g){case"\\":f++;continue;case"\r":case"\n":break;case c:var h=b.substr(e,f+1);return a(f+1),h}}return null}},k.autoCommentAbsorb=!0,k.commentStore=[],k.finished=!1,k.peek=function(a){if("string"==typeof a){for(var c=0;c<a.length;c++)if(b.charAt(k.i+c)!==a.charAt(c))return!1;return!0}return a.test(h)},k.peekChar=function(a){return b.charAt(k.i)===a},k.currentChar=function(){return b.charAt(k.i)},k.getInput=function(){return b},k.peekNotNumeric=function(){var a=b.charCodeAt(k.i);return a>s||a<p||a===r||a===q},k.start=function(f,j,l){b=f,k.i=c=i=e=0,g=j?d(f,l):[f],h=g[0],a(0)},k.end=function(){var a,c=k.i>=b.length;return k.i<e&&(a=f,k.i=e),{isFinished:c,furthest:k.i,furthestPossibleErrorMessage:a,furthestReachedEnd:k.i>=b.length-1,furthestChar:b[k.i]}},k}},{"./chunker":36}],38:[function(a,b,c){var d=a("../less-error"),e=a("../tree"),f=a("../visitors"),g=a("./parser-input"),h=a("../utils"),i=function j(a,b,c){function i(a,e){throw new d({index:o.i,filename:c.filename,type:e||"Syntax",message:a},b)}function k(a,b,c){var d=a instanceof Function?a.call(n):o.$re(a);return d?d:void i(b||("string"==typeof a?"expected '"+a+"' got '"+o.currentChar()+"'":"unexpected token"))}function l(a,b){return o.$char(a)?a:void i(b||"expected '"+a+"' got '"+o.currentChar()+"'")}function m(a){var b=c.filename;return{lineNumber:h.getLocation(a,o.getInput()).line+1,fileName:b}}var n,o=g();return{parse:function(g,h,i){var k,l,m,n,p=null,q="";if(l=i&&i.globalVars?j.serializeVars(i.globalVars)+"\n":"",m=i&&i.modifyVars?"\n"+j.serializeVars(i.modifyVars):"",a.pluginManager)for(var r=a.pluginManager.getPreProcessors(),s=0;s<r.length;s++)g=r[s].process(g,{context:a,imports:b,fileInfo:c});(l||i&&i.banner)&&(q=(i&&i.banner?i.banner:"")+l,n=b.contentsIgnoredChars,n[c.filename]=n[c.filename]||0,n[c.filename]+=q.length),g=g.replace(/\r\n?/g,"\n"),g=q+g.replace(/^\uFEFF/,"")+m,b.contents[c.filename]=g;try{o.start(g,a.chunkInput,function(a,e){throw new d({index:e,type:"Parse",message:a,filename:c.filename},b)}),k=new e.Ruleset(null,this.parsers.primary()),k.root=!0,k.firstRoot=!0}catch(t){return h(new d(t,b,c.filename))}var u=o.end();if(!u.isFinished){var v=u.furthestPossibleErrorMessage;v||(v="Unrecognised input","}"===u.furthestChar?v+=". Possibly missing opening '{'":")"===u.furthestChar?v+=". Possibly missing opening '('":u.furthestReachedEnd&&(v+=". Possibly missing something")),p=new d({type:"Parse",message:v,index:u.furthest,filename:c.filename},b)}var w=function(a){return a=p||a||b.error,a?(a instanceof d||(a=new d(a,b,c.filename)),h(a)):h(null,k)};return a.processImports===!1?w():void new f.ImportVisitor(b,w).run(k)},parsers:n={primary:function(){for(var a,b=this.mixin,c=[];;){for(;;){if(a=this.comment(),!a)break;c.push(a)}if(o.finished)break;if(o.peek("}"))break;if(a=this.extendRule())c=c.concat(a);else if(a=b.definition()||this.rule()||this.ruleset()||b.call()||this.rulesetCall()||this.entities.call()||this.directive())c.push(a);else{for(var d=!1;o.$char(";");)d=!0;if(!d)break}}return c},comment:function(){if(o.commentStore.length){var a=o.commentStore.shift();return new e.Comment(a.text,a.isLineComment,a.index,c)}},entities:{quoted:function(){var a,b=o.i,d=!1;return o.save(),o.$char("~")&&(d=!0),(a=o.$quoted())?(o.forget(),new e.Quoted(a.charAt(0),a.substr(1,a.length-2),d,b,c)):void o.restore()},keyword:function(){var a=o.$char("%")||o.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/);if(a)return e.Color.fromKeyword(a)||new e.Keyword(a)},call:function(){var a,b,d,f,g=o.i;if(!o.peek(/^url\(/i))return o.save(),(a=o.$re(/^([\w-]+|%|progid:[\w\.]+)\(/))?(a=a[1],b=a.toLowerCase(),"alpha"===b&&(f=n.alpha())?(o.forget(),f):(d=this.arguments(),o.$char(")")?(o.forget(),new e.Call(a,d,g,c)):void o.restore("Could not parse call arguments or missing ')'"))):void o.forget()},arguments:function(){var a,b,c,d=[],f=[],g=[];for(o.save();;){if(c=n.detachedRuleset()||this.assignment()||n.expression(),!c)break;b=c,c.value&&1==c.value.length&&(b=c.value[0]),b&&g.push(b),f.push(b),o.$char(",")||(o.$char(";")||a)&&(a=!0,g.length>1&&(b=new e.Value(g)),d.push(b),g=[])}return o.forget(),a?d:f},literal:function(){return this.dimension()||this.color()||this.quoted()||this.unicodeDescriptor()},assignment:function(){var a,b;return o.save(),(a=o.$re(/^\w+(?=\s?=)/i))&&o.$char("=")&&(b=n.entity())?(o.forget(),new e.Assignment(a,b)):void o.restore()},url:function(){var a,b=o.i;return o.autoCommentAbsorb=!1,o.$str("url(")?(a=this.quoted()||this.variable()||o.$re(/^(?:(?:\\[\(\)'"])|[^\(\)'"])+/)||"",o.autoCommentAbsorb=!0,l(")"),new e.URL(null!=a.value||a instanceof e.Variable?a:new e.Anonymous(a),b,c)):void(o.autoCommentAbsorb=!0)},variable:function(){var a,b=o.i;if("@"===o.currentChar()&&(a=o.$re(/^@@?[\w-]+/)))return new e.Variable(a,b,c)},variableCurly:function(){var a,b=o.i;if("@"===o.currentChar()&&(a=o.$re(/^@\{([\w-]+)\}/)))return new e.Variable("@"+a[1],b,c)},color:function(){var a;if("#"===o.currentChar()&&(a=o.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))){var b=a.input.match(/^#([\w]+).*/);return b=b[1],b.match(/^[A-Fa-f0-9]+$/)||i("Invalid HEX color code"),new e.Color(a[1],(void 0),"#"+b)}},colorKeyword:function(){o.save();var a=o.autoCommentAbsorb;o.autoCommentAbsorb=!1;var b=o.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);if(o.autoCommentAbsorb=a,!b)return void o.forget();o.restore();var c=e.Color.fromKeyword(b);return c?(o.$str(b),c):void 0},dimension:function(){if(!o.peekNotNumeric()){var a=o.$re(/^([+-]?\d*\.?\d+)(%|[a-z_]+)?/i);return a?new e.Dimension(a[1],a[2]):void 0}},unicodeDescriptor:function(){var a;if(a=o.$re(/^U\+[0-9a-fA-F?]+(\-[0-9a-fA-F?]+)?/))return new e.UnicodeDescriptor(a[0])},javascript:function(){var a,b=o.i;o.save();var d=o.$char("~"),f=o.$char("`");return f?(a=o.$re(/^[^`]*`/))?(o.forget(),new e.JavaScript(a.substr(0,a.length-1),Boolean(d),b,c)):void o.restore("invalid javascript definition"):void o.restore()}},variable:function(){var a;if("@"===o.currentChar()&&(a=o.$re(/^(@[\w-]+)\s*:/)))return a[1]},rulesetCall:function(){var a;if("@"===o.currentChar()&&(a=o.$re(/^(@[\w-]+)\(\s*\)\s*;/)))return new e.RulesetCall(a[1])},extend:function(a){var b,d,f,g,h,j=o.i;if(o.$str(a?"&:extend(":":extend(")){do{for(f=null,b=null;!(f=o.$re(/^(all)(?=\s*(\)|,))/))&&(d=this.element());)b?b.push(d):b=[d];f=f&&f[1],b||i("Missing target selector for :extend()."),h=new e.Extend(new e.Selector(b),f,j,c),g?g.push(h):g=[h]}while(o.$char(","));return k(/^\)/),a&&k(/^;/),g}},extendRule:function(){return this.extend(!0)},mixin:{call:function(){var a,b,d,f,g,h,i=o.currentChar(),j=!1,k=o.i;if("."===i||"#"===i){for(o.save();;){if(a=o.i,f=o.$re(/^[#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/),!f)break;d=new e.Element(g,f,a,c),b?b.push(d):b=[d],g=o.$char(">")}return b&&(o.$char("(")&&(h=this.args(!0).args,l(")")),n.important()&&(j=!0),n.end())?(o.forget(),new e.mixin.Call(b,h,k,c,j)):void o.restore()}},args:function(a){var b,c,d,f,g,h,j,k=n.entities,l={args:null,variadic:!1},m=[],p=[],q=[];for(o.save();;){if(a)h=n.detachedRuleset()||n.expression();else{if(o.commentStore.length=0,o.$str("...")){l.variadic=!0,o.$char(";")&&!b&&(b=!0),(b?p:q).push({variadic:!0});break}h=k.variable()||k.literal()||k.keyword()}if(!h)break;f=null,h.throwAwayComments&&h.throwAwayComments(),g=h;var r=null;if(a?h.value&&1==h.value.length&&(r=h.value[0]):r=h,r&&r instanceof e.Variable)if(o.$char(":")){if(m.length>0&&(b&&i("Cannot mix ; and , as delimiter types"),c=!0),g=n.detachedRuleset()||n.expression(),!g){if(!a)return o.restore(),l.args=[],l;i("could not understand value for named argument")}f=d=r.name}else if(o.$str("...")){if(!a){l.variadic=!0,o.$char(";")&&!b&&(b=!0),(b?p:q).push({name:h.name,variadic:!0});break}j=!0}else a||(d=f=r.name,g=null);g&&m.push(g),q.push({name:f,value:g,expand:j}),o.$char(",")||(o.$char(";")||b)&&(c&&i("Cannot mix ; and , as delimiter types"),b=!0,m.length>1&&(g=new e.Value(m)),p.push({name:d,value:g,expand:j}),d=null,m=[],c=!1)}return o.forget(),l.args=b?p:q,l},definition:function(){var a,b,c,d,f=[],g=!1;if(!("."!==o.currentChar()&&"#"!==o.currentChar()||o.peek(/^[^{]*\}/)))if(o.save(),b=o.$re(/^([#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\s*\(/)){a=b[1];var h=this.args(!1);if(f=h.args,g=h.variadic,!o.$char(")"))return void o.restore("Missing closing ')'");if(o.commentStore.length=0,o.$str("when")&&(d=k(n.conditions,"expected condition")),c=n.block())return o.forget(),new e.mixin.Definition(a,f,c,d,g);o.restore()}else o.forget()}},entity:function(){var a=this.entities;return this.comment()||a.literal()||a.variable()||a.url()||a.call()||a.keyword()||a.javascript()},end:function(){return o.$char(";")||o.peek("}")},alpha:function(){var a;if(o.$re(/^opacity=/i))return a=o.$re(/^\d+/),a||(a=k(this.entities.variable,"Could not parse alpha")),l(")"),new e.Alpha(a)},element:function(){var a,b,d,f=o.i;if(b=this.combinator(),a=o.$re(/^(?:\d+\.\d+|\d+)%/)||o.$re(/^(?:[.#]?|:*)(?:[\w-]|[^\x00-\x9f]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/)||o.$char("*")||o.$char("&")||this.attribute()||o.$re(/^\([^&()@]+\)/)||o.$re(/^[\.#:](?=@)/)||this.entities.variableCurly(),a||(o.save(),o.$char("(")?(d=this.selector())&&o.$char(")")?(a=new e.Paren(d),o.forget()):o.restore("Missing closing ')'"):o.forget()),a)return new e.Element(b,a,f,c)},combinator:function(){var a=o.currentChar();if("/"===a){o.save();var b=o.$re(/^\/[a-z]+\//i);if(b)return o.forget(),new e.Combinator(b);o.restore()}if(">"===a||"+"===a||"~"===a||"|"===a||"^"===a){for(o.i++,"^"===a&&"^"===o.currentChar()&&(a="^^",o.i++);o.isWhitespace();)o.i++;return new e.Combinator(a)}return new e.Combinator(o.isWhitespace(-1)?" ":null)},lessSelector:function(){return this.selector(!0)},selector:function(a){for(var b,d,f,g,h,j,l,m=o.i;(a&&(d=this.extend())||a&&(j=o.$str("when"))||(g=this.element()))&&(j?l=k(this.conditions,"expected condition"):l?i("CSS guard can only be used at the end of selector"):d?h=h?h.concat(d):d:(h&&i("Extend can only be used at the end of selector"),f=o.currentChar(),b?b.push(g):b=[g],g=null),"{"!==f&&"}"!==f&&";"!==f&&","!==f&&")"!==f););return b?new e.Selector(b,h,l,m,c):void(h&&i("Extend must be used to extend a selector, it cannot be used on its own"))},attribute:function(){if(o.$char("[")){var a,b,c,d=this.entities;return(a=d.variableCurly())||(a=k(/^(?:[_A-Za-z0-9-\*]*\|)?(?:[_A-Za-z0-9-]|\\.)+/)),c=o.$re(/^[|~*$^]?=/),c&&(b=d.quoted()||o.$re(/^[0-9]+%/)||o.$re(/^[\w-]+/)||d.variableCurly()),l("]"),new e.Attribute(a,c,b)}},block:function(){var a;if(o.$char("{")&&(a=this.primary())&&o.$char("}"))return a},blockRuleset:function(){var a=this.block();return a&&(a=new e.Ruleset(null,a)),a},detachedRuleset:function(){var a=this.blockRuleset();if(a)return new e.DetachedRuleset(a)},ruleset:function(){var b,c,d,f;for(o.save(),a.dumpLineNumbers&&(f=m(o.i));;){if(c=this.lessSelector(),!c)break;if(b?b.push(c):b=[c],o.commentStore.length=0,c.condition&&b.length>1&&i("Guards are only currently allowed on a single selector."),!o.$char(","))break;c.condition&&i("Guards are only currently allowed on a single selector."),o.commentStore.length=0}if(b&&(d=this.block())){o.forget();var g=new e.Ruleset(b,d,a.strictImports);return a.dumpLineNumbers&&(g.debugInfo=f),g}o.restore()},rule:function(b){var d,f,g,h,i,j=o.i,k=o.currentChar();if("."!==k&&"#"!==k&&"&"!==k&&":"!==k)if(o.save(),d=this.variable()||this.ruleProperty()){if(i="string"==typeof d,i&&(f=this.detachedRuleset()),o.commentStore.length=0,!f){h=!i&&d.length>1&&d.pop().value;var l=!b&&(a.compress||i);if(l&&(f=this.value()),!f&&(f=this.anonymousValue()))return o.forget(),new e.Rule(d,f,(!1),h,j,c);l||f||(f=this.value()),g=this.important()}if(f&&this.end())return o.forget(),new e.Rule(d,f,g,h,j,c);if(o.restore(),f&&!b)return this.rule(!0)}else o.forget()},anonymousValue:function(){var a=o.$re(/^([^@+\/'"*`(;{}-]*);/);if(a)return new e.Anonymous(a[1])},"import":function(){var a,b,d=o.i,f=o.$re(/^@import?\s+/);if(f){var g=(f?this.importOptions():null)||{};if(a=this.entities.quoted()||this.entities.url())return b=this.mediaFeatures(),o.$char(";")||(o.i=d,i("missing semi-colon or unrecognised media features on import")),b=b&&new e.Value(b),new e.Import(a,b,g,d,c);o.i=d,i("malformed import statement")}},importOptions:function(){var a,b,c,d={};if(!o.$char("("))return null;do if(a=this.importOption()){switch(b=a,c=!0,b){case"css":b="less",c=!1;break;case"once":b="multiple",c=!1}if(d[b]=c,!o.$char(","))break}while(a);return l(")"),d},importOption:function(){var a=o.$re(/^(less|css|multiple|once|inline|reference|optional)/);if(a)return a[1]},mediaFeature:function(){var a,b,d=this.entities,f=[];o.save();do a=d.keyword()||d.variable(),a?f.push(a):o.$char("(")&&(b=this.property(),a=this.value(),o.$char(")")?b&&a?f.push(new e.Paren(new e.Rule(b,a,null,null,o.i,c,(!0)))):a?f.push(new e.Paren(a)):i("badly formed media feature definition"):i("Missing closing ')'","Parse"));while(a);if(o.forget(),f.length>0)return new e.Expression(f)},mediaFeatures:function(){var a,b=this.entities,c=[];do if(a=this.mediaFeature()){if(c.push(a),!o.$char(","))break}else if(a=b.variable(),a&&(c.push(a),!o.$char(",")))break;while(a);return c.length>0?c:null},media:function(){var b,d,f,g,h=o.i;return a.dumpLineNumbers&&(g=m(h)),o.save(),o.$str("@media")?(b=this.mediaFeatures(),d=this.block(),d||i("media definitions require block statements after any features"),o.forget(),f=new e.Media(d,b,h,c),a.dumpLineNumbers&&(f.debugInfo=g),f):void o.restore()},plugin:function(){var a,b=o.i,d=o.$re(/^@plugin?\s+/);if(d){var f={plugin:!0};if(a=this.entities.quoted()||this.entities.url())return o.$char(";")||(o.i=b,i("missing semi-colon on plugin")),new e.Import(a,null,f,b,c);o.i=b,i("malformed plugin statement")}},directive:function(){var b,d,f,g,h,j,k,l=o.i,n=!0,p=!0;if("@"===o.currentChar()){if(d=this["import"]()||this.plugin()||this.media())return d;if(o.save(),b=o.$re(/^@[a-z-]+/)){switch(g=b,"-"==b.charAt(1)&&b.indexOf("-",2)>0&&(g="@"+b.slice(b.indexOf("-",2)+1)),g){case"@charset":h=!0,n=!1;break;case"@namespace":j=!0,n=!1;break;case"@keyframes":case"@counter-style":h=!0;break;case"@document":case"@supports":k=!0,p=!1;break;default:k=!0}return o.commentStore.length=0,h?(d=this.entity(),d||i("expected "+b+" identifier")):j?(d=this.expression(),d||i("expected "+b+" expression")):k&&(d=(o.$re(/^[^{;]+/)||"").trim(),n="{"==o.currentChar(),d&&(d=new e.Anonymous(d))),n&&(f=this.blockRuleset()),f||!n&&d&&o.$char(";")?(o.forget(),new e.Directive(b,d,f,l,c,a.dumpLineNumbers?m(l):null,p)):void o.restore("directive options not recognised")}}},value:function(){var a,b=[];do if(a=this.expression(),a&&(b.push(a),!o.$char(",")))break;while(a);if(b.length>0)return new e.Value(b)},important:function(){if("!"===o.currentChar())return o.$re(/^! *important/)},sub:function(){var a,b;return o.save(),o.$char("(")?(a=this.addition(),a&&o.$char(")")?(o.forget(),b=new e.Expression([a]),b.parens=!0,b):void o.restore("Expected ')'")):void o.restore()},multiplication:function(){var a,b,c,d,f;if(a=this.operand()){for(f=o.isWhitespace(-1);;){if(o.peek(/^\/[*\/]/))break;if(o.save(),c=o.$char("/")||o.$char("*"),!c){o.forget();break}if(b=this.operand(),!b){o.restore();break}o.forget(),a.parensInOp=!0,b.parensInOp=!0,d=new e.Operation(c,[d||a,b],f),f=o.isWhitespace(-1)}return d||a}},addition:function(){var a,b,c,d,f;if(a=this.multiplication()){for(f=o.isWhitespace(-1);;){if(c=o.$re(/^[-+]\s+/)||!f&&(o.$char("+")||o.$char("-")),!c)break;if(b=this.multiplication(),!b)break;a.parensInOp=!0,b.parensInOp=!0,d=new e.Operation(c,[d||a,b],f),f=o.isWhitespace(-1)}return d||a}},conditions:function(){var a,b,c,d=o.i;if(a=this.condition()){for(;;){if(!o.peek(/^,\s*(not\s*)?\(/)||!o.$char(","))break;if(b=this.condition(),!b)break;c=new e.Condition("or",c||a,b,d)}return c||a}},condition:function(){function a(){return o.$str("or")}var b,c,d;if(b=this.conditionAnd(this)){if(c=a()){if(d=this.condition(),!d)return;b=new e.Condition(c,b,d)}return b}},conditionAnd:function(){function a(a){return a.negatedCondition()||a.parenthesisCondition()}function b(){return o.$str("and")}var c,d,f;if(c=a(this)){if(d=b()){if(f=this.conditionAnd(),!f)return;c=new e.Condition(d,c,f)}return c}},negatedCondition:function(){if(o.$str("not")){var a=this.parenthesisCondition();return a&&(a.negate=!a.negate),a}},parenthesisCondition:function(){function a(a){var b;return o.save(),(b=a.condition())&&o.$char(")")?(o.forget(),b):void o.restore()}var b;return o.save(),o.$str("(")?(b=a(this))?(o.forget(),b):(b=this.atomicCondition())?o.$char(")")?(o.forget(),b):void o.restore("expected ')' got '"+o.currentChar()+"'"):void o.restore():void o.restore()},atomicCondition:function(){var a,b,c,d,f=this.entities,g=o.i;if(a=this.addition()||f.keyword()||f.quoted())return o.$char(">")?d=o.$char("=")?">=":">":o.$char("<")?d=o.$char("=")?"<=":"<":o.$char("=")&&(d=o.$char(">")?"=>":o.$char("<")?"=<":"="),d?(b=this.addition()||f.keyword()||f.quoted(),b?c=new e.Condition(d,a,b,g,(!1)):i("expected expression")):c=new e.Condition("=",a,new e.Keyword("true"),g,(!1)),c},operand:function(){var a,b=this.entities;o.peek(/^-[@\(]/)&&(a=o.$char("-"));var c=this.sub()||b.dimension()||b.color()||b.variable()||b.call()||b.colorKeyword();return a&&(c.parensInOp=!0,c=new e.Negative(c)),c},expression:function(){var a,b,c=[];do a=this.comment(),a?c.push(a):(a=this.addition()||this.entity(),a&&(c.push(a),o.peek(/^\/[\/*]/)||(b=o.$char("/"),b&&c.push(new e.Anonymous(b)))));while(a);if(c.length>0)return new e.Expression(c)},property:function(){var a=o.$re(/^(\*?-?[_a-zA-Z0-9-]+)\s*:/);if(a)return a[1]},ruleProperty:function(){function a(a){var b=o.i,c=o.$re(a);if(c)return g.push(b),f.push(c[1])}var b,d,f=[],g=[];o.save();var h=o.$re(/^([_a-zA-Z0-9-]+)\s*:/);if(h)return f=[new e.Keyword(h[1])],o.forget(),f;for(a(/^(\*?)/);;)if(!a(/^((?:[\w-]+)|(?:@\{[\w-]+\}))/))break;if(f.length>1&&a(/^((?:\+_|\+)?)\s*:/)){for(o.forget(),""===f[0]&&(f.shift(),g.shift()),d=0;d<f.length;d++)b=f[d],f[d]="@"!==b.charAt(0)?new e.Keyword(b):new e.Variable("@"+b.slice(2,-1),g[d],c);return f}o.restore()}}}};i.serializeVars=function(a){var b="";for(var c in a)if(Object.hasOwnProperty.call(a,c)){var d=a[c];b+=("@"===c[0]?"":"@")+c+": "+d+(";"===String(d).slice(-1)?"":";")}return b},b.exports=i},{"../less-error":32,"../tree":62,"../utils":83,"../visitors":87,"./parser-input":37}],39:[function(a,b,c){var d=function(a){this.less=a,this.visitors=[],this.preProcessors=[],this.postProcessors=[],this.installedPlugins=[],this.fileManagers=[]};d.prototype.addPlugins=function(a){if(a)for(var b=0;b<a.length;b++)this.addPlugin(a[b])},d.prototype.addPlugin=function(a){this.installedPlugins.push(a),a.install(this.less,this)},d.prototype.addVisitor=function(a){this.visitors.push(a)},d.prototype.addPreProcessor=function(a,b){var c;for(c=0;c<this.preProcessors.length&&!(this.preProcessors[c].priority>=b);c++);this.preProcessors.splice(c,0,{preProcessor:a,priority:b})},d.prototype.addPostProcessor=function(a,b){var c;for(c=0;c<this.postProcessors.length&&!(this.postProcessors[c].priority>=b);c++);this.postProcessors.splice(c,0,{postProcessor:a,priority:b})},d.prototype.addFileManager=function(a){this.fileManagers.push(a)},d.prototype.getPreProcessors=function(){for(var a=[],b=0;b<this.preProcessors.length;b++)a.push(this.preProcessors[b].preProcessor);return a},d.prototype.getPostProcessors=function(){for(var a=[],b=0;b<this.postProcessors.length;b++)a.push(this.postProcessors[b].postProcessor);return a},d.prototype.getVisitors=function(){return this.visitors},d.prototype.getFileManagers=function(){return this.fileManagers},b.exports=d},{}],40:[function(a,b,c){var d=a("../less-error"),e=a("../tree"),f=b.exports=function(a,b){this.fileInfo=b};f.prototype.eval=function(a,b){var c,f,g={};f={add:function(a,b){g[a]=b},addMultiple:function(a){Object.keys(a).forEach(function(b){g[b]=a[b]})}};try{c=new Function("functions","tree","fileInfo",a),
c(f,e,this.fileInfo)}catch(h){b(new d({message:"Plugin evaluation error: '"+h.name+": "+h.message.replace(/["]/g,"'")+"'",filename:this.fileInfo.filename}),null)}b(null,{functions:g})}},{"../less-error":32,"../tree":62}],41:[function(a,b,c){var d;b.exports=function(b,c,e){var f=function(b,e,g){if("function"==typeof e&&(g=e,e={}),!g){d||(d="undefined"==typeof Promise?a("promise"):Promise);var h=this;return new d(function(a,c){f.call(h,b,e,function(b,d){b?c(b):a(d)})})}this.parse(b,e,function(a,b,d,e){if(a)return g(a);var f;try{var h=new c(b,d);f=h.toCSS(e)}catch(a){return g(a)}g(null,f)})};return f}},{promise:void 0}],42:[function(a,b,c){b.exports=function(a,b){var c=function(a){this.options=a};return c.prototype.toCSS=function(b,c,d){var e=new a({contentsIgnoredCharsMap:d.contentsIgnoredChars,rootNode:b,contentsMap:d.contents,sourceMapFilename:this.options.sourceMapFilename,sourceMapURL:this.options.sourceMapURL,outputFilename:this.options.sourceMapOutputFilename,sourceMapBasepath:this.options.sourceMapBasepath,sourceMapRootpath:this.options.sourceMapRootpath,outputSourceFiles:this.options.outputSourceFiles,sourceMapGenerator:this.options.sourceMapGenerator,sourceMapFileInline:this.options.sourceMapFileInline}),f=e.toCSS(c);return this.sourceMap=e.sourceMap,this.sourceMapURL=e.sourceMapURL,this.options.sourceMapInputFilename&&(this.sourceMapInputFilename=e.normalizeFilename(this.options.sourceMapInputFilename)),f+this.getCSSAppendage()},c.prototype.getCSSAppendage=function(){var a=this.sourceMapURL;if(this.options.sourceMapFileInline){if(void 0===this.sourceMap)return"";a="data:application/json;base64,"+b.encodeBase64(this.sourceMap)}return a?"/*# sourceMappingURL="+a+" */":""},c.prototype.getExternalSourceMap=function(){return this.sourceMap},c.prototype.setExternalSourceMap=function(a){this.sourceMap=a},c.prototype.isInline=function(){return this.options.sourceMapFileInline},c.prototype.getSourceMapURL=function(){return this.sourceMapURL},c.prototype.getOutputFilename=function(){return this.options.sourceMapOutputFilename},c.prototype.getInputFilename=function(){return this.sourceMapInputFilename},c}},{}],43:[function(a,b,c){b.exports=function(a){var b=function(b){this._css=[],this._rootNode=b.rootNode,this._contentsMap=b.contentsMap,this._contentsIgnoredCharsMap=b.contentsIgnoredCharsMap,b.sourceMapFilename&&(this._sourceMapFilename=b.sourceMapFilename.replace(/\\/g,"/")),this._outputFilename=b.outputFilename,this.sourceMapURL=b.sourceMapURL,b.sourceMapBasepath&&(this._sourceMapBasepath=b.sourceMapBasepath.replace(/\\/g,"/")),b.sourceMapRootpath?(this._sourceMapRootpath=b.sourceMapRootpath.replace(/\\/g,"/"),"/"!==this._sourceMapRootpath.charAt(this._sourceMapRootpath.length-1)&&(this._sourceMapRootpath+="/")):this._sourceMapRootpath="",this._outputSourceFiles=b.outputSourceFiles,this._sourceMapGeneratorConstructor=a.getSourceMapGenerator(),this._lineNumber=0,this._column=0};return b.prototype.normalizeFilename=function(a){return a=a.replace(/\\/g,"/"),this._sourceMapBasepath&&0===a.indexOf(this._sourceMapBasepath)&&(a=a.substring(this._sourceMapBasepath.length),"\\"!==a.charAt(0)&&"/"!==a.charAt(0)||(a=a.substring(1))),(this._sourceMapRootpath||"")+a},b.prototype.add=function(a,b,c,d){if(a){var e,f,g,h,i;if(b){var j=this._contentsMap[b.filename];this._contentsIgnoredCharsMap[b.filename]&&(c-=this._contentsIgnoredCharsMap[b.filename],c<0&&(c=0),j=j.slice(this._contentsIgnoredCharsMap[b.filename])),j=j.substring(0,c),f=j.split("\n"),h=f[f.length-1]}if(e=a.split("\n"),g=e[e.length-1],b)if(d)for(i=0;i<e.length;i++)this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+i+1,column:0===i?this._column:0},original:{line:f.length+i,column:0===i?h.length:0},source:this.normalizeFilename(b.filename)});else this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+1,column:this._column},original:{line:f.length,column:h.length},source:this.normalizeFilename(b.filename)});1===e.length?this._column+=g.length:(this._lineNumber+=e.length-1,this._column=g.length),this._css.push(a)}},b.prototype.isEmpty=function(){return 0===this._css.length},b.prototype.toCSS=function(a){if(this._sourceMapGenerator=new this._sourceMapGeneratorConstructor({file:this._outputFilename,sourceRoot:null}),this._outputSourceFiles)for(var b in this._contentsMap)if(this._contentsMap.hasOwnProperty(b)){var c=this._contentsMap[b];this._contentsIgnoredCharsMap[b]&&(c=c.slice(this._contentsIgnoredCharsMap[b])),this._sourceMapGenerator.setSourceContent(this.normalizeFilename(b),c)}if(this._rootNode.genCSS(a,this),this._css.length>0){var d,e=JSON.stringify(this._sourceMapGenerator.toJSON());this.sourceMapURL?d=this.sourceMapURL:this._sourceMapFilename&&(d=this._sourceMapFilename),this.sourceMapURL=d,this.sourceMap=e}return this._css.join("")},b}},{}],44:[function(a,b,c){var d=a("./contexts"),e=a("./visitors"),f=a("./tree");b.exports=function(a,b){b=b||{};var c,g=b.variables,h=new d.Eval(b);"object"!=typeof g||Array.isArray(g)||(g=Object.keys(g).map(function(a){var b=g[a];return b instanceof f.Value||(b instanceof f.Expression||(b=new f.Expression([b])),b=new f.Value([b])),new f.Rule("@"+a,b,(!1),null,0)}),h.frames=[new f.Ruleset(null,g)]);var i,j=[],k=[new e.JoinSelectorVisitor,new e.MarkVisibleSelectorsVisitor((!0)),new e.ExtendVisitor,new e.ToCSSVisitor({compress:Boolean(b.compress)})];if(b.pluginManager){var l=b.pluginManager.getVisitors();for(i=0;i<l.length;i++){var m=l[i];m.isPreEvalVisitor?j.push(m):m.isPreVisitor?k.splice(0,0,m):k.push(m)}}for(i=0;i<j.length;i++)j[i].run(a);for(c=a.eval(h),i=0;i<k.length;i++)k[i].run(c);return c}},{"./contexts":11,"./tree":62,"./visitors":87}],45:[function(a,b,c){var d=a("./node"),e=function(a){this.value=a};e.prototype=new d,e.prototype.type="Alpha",e.prototype.accept=function(a){this.value=a.visit(this.value)},e.prototype.eval=function(a){return this.value.eval?new e(this.value.eval(a)):this},e.prototype.genCSS=function(a,b){b.add("alpha(opacity="),this.value.genCSS?this.value.genCSS(a,b):b.add(this.value),b.add(")")},b.exports=e},{"./node":70}],46:[function(a,b,c){var d=a("./node"),e=function(a,b,c,d,e,f){this.value=a,this.index=b,this.mapLines=d,this.currentFileInfo=c,this.rulesetLike="undefined"!=typeof e&&e,this.allowRoot=!0,this.copyVisibilityInfo(f)};e.prototype=new d,e.prototype.type="Anonymous",e.prototype.eval=function(){return new e(this.value,this.index,this.currentFileInfo,this.mapLines,this.rulesetLike,this.visibilityInfo())},e.prototype.compare=function(a){return a.toCSS&&this.toCSS()===a.toCSS()?0:void 0},e.prototype.isRulesetLike=function(){return this.rulesetLike},e.prototype.genCSS=function(a,b){b.add(this.value,this.currentFileInfo,this.index,this.mapLines)},b.exports=e},{"./node":70}],47:[function(a,b,c){var d=a("./node"),e=function(a,b){this.key=a,this.value=b};e.prototype=new d,e.prototype.type="Assignment",e.prototype.accept=function(a){this.value=a.visit(this.value)},e.prototype.eval=function(a){return this.value.eval?new e(this.key,this.value.eval(a)):this},e.prototype.genCSS=function(a,b){b.add(this.key+"="),this.value.genCSS?this.value.genCSS(a,b):b.add(this.value)},b.exports=e},{"./node":70}],48:[function(a,b,c){var d=a("./node"),e=function(a,b,c){this.key=a,this.op=b,this.value=c};e.prototype=new d,e.prototype.type="Attribute",e.prototype.eval=function(a){return new e(this.key.eval?this.key.eval(a):this.key,this.op,this.value&&this.value.eval?this.value.eval(a):this.value)},e.prototype.genCSS=function(a,b){b.add(this.toCSS(a))},e.prototype.toCSS=function(a){var b=this.key.toCSS?this.key.toCSS(a):this.key;return this.op&&(b+=this.op,b+=this.value.toCSS?this.value.toCSS(a):this.value),"["+b+"]"},b.exports=e},{"./node":70}],49:[function(a,b,c){var d=a("./node"),e=a("../functions/function-caller"),f=function(a,b,c,d){this.name=a,this.args=b,this.index=c,this.currentFileInfo=d};f.prototype=new d,f.prototype.type="Call",f.prototype.accept=function(a){this.args&&(this.args=a.visitArray(this.args))},f.prototype.eval=function(a){var b,c=this.args.map(function(b){return b.eval(a)}),d=new e(this.name,a,this.index,this.currentFileInfo);if(d.isValid()){try{b=d.call(c)}catch(g){throw{type:g.type||"Runtime",message:"error evaluating function `"+this.name+"`"+(g.message?": "+g.message:""),index:this.index,filename:this.currentFileInfo.filename}}if(null!=b)return b.index=this.index,b.currentFileInfo=this.currentFileInfo,b}return new f(this.name,c,this.index,this.currentFileInfo)},f.prototype.genCSS=function(a,b){b.add(this.name+"(",this.currentFileInfo,this.index);for(var c=0;c<this.args.length;c++)this.args[c].genCSS(a,b),c+1<this.args.length&&b.add(", ");b.add(")")},b.exports=f},{"../functions/function-caller":21,"./node":70}],50:[function(a,b,c){function d(a,b){return Math.min(Math.max(a,0),b)}function e(a){return"#"+a.map(function(a){return a=d(Math.round(a),255),(a<16?"0":"")+a.toString(16)}).join("")}var f=a("./node"),g=a("../data/colors"),h=function(a,b,c){this.rgb=Array.isArray(a)?a:6==a.length?a.match(/.{2}/g).map(function(a){return parseInt(a,16)}):a.split("").map(function(a){return parseInt(a+a,16)}),this.alpha="number"==typeof b?b:1,"undefined"!=typeof c&&(this.value=c)};h.prototype=new f,h.prototype.type="Color",h.prototype.luma=function(){var a=this.rgb[0]/255,b=this.rgb[1]/255,c=this.rgb[2]/255;return a=a<=.03928?a/12.92:Math.pow((a+.055)/1.055,2.4),b=b<=.03928?b/12.92:Math.pow((b+.055)/1.055,2.4),c=c<=.03928?c/12.92:Math.pow((c+.055)/1.055,2.4),.2126*a+.7152*b+.0722*c},h.prototype.genCSS=function(a,b){b.add(this.toCSS(a))},h.prototype.toCSS=function(a,b){var c,e,f=a&&a.compress&&!b;if(this.value)return this.value;if(e=this.fround(a,this.alpha),e<1)return"rgba("+this.rgb.map(function(a){return d(Math.round(a),255)}).concat(d(e,1)).join(","+(f?"":" "))+")";if(c=this.toRGB(),f){var g=c.split("");g[1]===g[2]&&g[3]===g[4]&&g[5]===g[6]&&(c="#"+g[1]+g[3]+g[5])}return c},h.prototype.operate=function(a,b,c){for(var d=[],e=this.alpha*(1-c.alpha)+c.alpha,f=0;f<3;f++)d[f]=this._operate(a,b,this.rgb[f],c.rgb[f]);return new h(d,e)},h.prototype.toRGB=function(){return e(this.rgb)},h.prototype.toHSL=function(){var a,b,c=this.rgb[0]/255,d=this.rgb[1]/255,e=this.rgb[2]/255,f=this.alpha,g=Math.max(c,d,e),h=Math.min(c,d,e),i=(g+h)/2,j=g-h;if(g===h)a=b=0;else{switch(b=i>.5?j/(2-g-h):j/(g+h),g){case c:a=(d-e)/j+(d<e?6:0);break;case d:a=(e-c)/j+2;break;case e:a=(c-d)/j+4}a/=6}return{h:360*a,s:b,l:i,a:f}},h.prototype.toHSV=function(){var a,b,c=this.rgb[0]/255,d=this.rgb[1]/255,e=this.rgb[2]/255,f=this.alpha,g=Math.max(c,d,e),h=Math.min(c,d,e),i=g,j=g-h;if(b=0===g?0:j/g,g===h)a=0;else{switch(g){case c:a=(d-e)/j+(d<e?6:0);break;case d:a=(e-c)/j+2;break;case e:a=(c-d)/j+4}a/=6}return{h:360*a,s:b,v:i,a:f}},h.prototype.toARGB=function(){return e([255*this.alpha].concat(this.rgb))},h.prototype.compare=function(a){return a.rgb&&a.rgb[0]===this.rgb[0]&&a.rgb[1]===this.rgb[1]&&a.rgb[2]===this.rgb[2]&&a.alpha===this.alpha?0:void 0},h.fromKeyword=function(a){var b,c=a.toLowerCase();if(g.hasOwnProperty(c)?b=new h(g[c].slice(1)):"transparent"===c&&(b=new h([0,0,0],0)),b)return b.value=a,b},b.exports=h},{"../data/colors":12,"./node":70}],51:[function(a,b,c){var d=a("./node"),e=function(a){" "===a?(this.value=" ",this.emptyOrWhitespace=!0):(this.value=a?a.trim():"",this.emptyOrWhitespace=""===this.value)};e.prototype=new d,e.prototype.type="Combinator";var f={"":!0," ":!0,"|":!0};e.prototype.genCSS=function(a,b){var c=a.compress||f[this.value]?"":" ";b.add(c+this.value+c)},b.exports=e},{"./node":70}],52:[function(a,b,c){var d=a("./node"),e=a("./debug-info"),f=function(a,b,c,d){this.value=a,this.isLineComment=b,this.index=c,this.currentFileInfo=d,this.allowRoot=!0};f.prototype=new d,f.prototype.type="Comment",f.prototype.genCSS=function(a,b){this.debugInfo&&b.add(e(a,this),this.currentFileInfo,this.index),b.add(this.value)},f.prototype.isSilent=function(a){var b=a.compress&&"!"!==this.value[2];return this.isLineComment||b},b.exports=f},{"./debug-info":54,"./node":70}],53:[function(a,b,c){var d=a("./node"),e=function(a,b,c,d,e){this.op=a.trim(),this.lvalue=b,this.rvalue=c,this.index=d,this.negate=e};e.prototype=new d,e.prototype.type="Condition",e.prototype.accept=function(a){this.lvalue=a.visit(this.lvalue),this.rvalue=a.visit(this.rvalue)},e.prototype.eval=function(a){var b=function(a,b,c){switch(a){case"and":return b&&c;case"or":return b||c;default:switch(d.compare(b,c)){case-1:return"<"===a||"=<"===a||"<="===a;case 0:return"="===a||">="===a||"=<"===a||"<="===a;case 1:return">"===a||">="===a;default:return!1}}}(this.op,this.lvalue.eval(a),this.rvalue.eval(a));return this.negate?!b:b},b.exports=e},{"./node":70}],54:[function(a,b,c){var d=function(a,b,c){var e="";if(a.dumpLineNumbers&&!a.compress)switch(a.dumpLineNumbers){case"comments":e=d.asComment(b);break;case"mediaquery":e=d.asMediaQuery(b);break;case"all":e=d.asComment(b)+(c||"")+d.asMediaQuery(b)}return e};d.asComment=function(a){return"/* line "+a.debugInfo.lineNumber+", "+a.debugInfo.fileName+" */\n"},d.asMediaQuery=function(a){var b=a.debugInfo.fileName;return/^[a-z]+:\/\//i.test(b)||(b="file://"+b),"@media -sass-debug-info{filename{font-family:"+b.replace(/([.:\/\\])/g,function(a){return"\\"==a&&(a="/"),"\\"+a})+"}line{font-family:\\00003"+a.debugInfo.lineNumber+"}}\n"},b.exports=d},{}],55:[function(a,b,c){var d=a("./node"),e=a("../contexts"),f=function(a,b){this.ruleset=a,this.frames=b};f.prototype=new d,f.prototype.type="DetachedRuleset",f.prototype.evalFirst=!0,f.prototype.accept=function(a){this.ruleset=a.visit(this.ruleset)},f.prototype.eval=function(a){var b=this.frames||a.frames.slice(0);return new f(this.ruleset,b)},f.prototype.callEval=function(a){return this.ruleset.eval(this.frames?new e.Eval(a,this.frames.concat(a.frames)):a)},b.exports=f},{"../contexts":11,"./node":70}],56:[function(a,b,c){var d=a("./node"),e=a("../data/unit-conversions"),f=a("./unit"),g=a("./color"),h=function(a,b){this.value=parseFloat(a),this.unit=b&&b instanceof f?b:new f(b?[b]:void 0)};h.prototype=new d,h.prototype.type="Dimension",h.prototype.accept=function(a){this.unit=a.visit(this.unit)},h.prototype.eval=function(a){return this},h.prototype.toColor=function(){return new g([this.value,this.value,this.value])},h.prototype.genCSS=function(a,b){if(a&&a.strictUnits&&!this.unit.isSingular())throw new Error("Multiple units in dimension. Correct the units or use the unit function. Bad unit: "+this.unit.toString());var c=this.fround(a,this.value),d=String(c);if(0!==c&&c<1e-6&&c>-1e-6&&(d=c.toFixed(20).replace(/0+$/,"")),a&&a.compress){if(0===c&&this.unit.isLength())return void b.add(d);c>0&&c<1&&(d=d.substr(1))}b.add(d),this.unit.genCSS(a,b)},h.prototype.operate=function(a,b,c){var d=this._operate(a,b,this.value,c.value),e=this.unit.clone();if("+"===b||"-"===b)if(0===e.numerator.length&&0===e.denominator.length)e=c.unit.clone(),this.unit.backupUnit&&(e.backupUnit=this.unit.backupUnit);else if(0===c.unit.numerator.length&&0===e.denominator.length);else{if(c=c.convertTo(this.unit.usedUnits()),a.strictUnits&&c.unit.toString()!==e.toString())throw new Error("Incompatible units. Change the units or use the unit function. Bad units: '"+e.toString()+"' and '"+c.unit.toString()+"'.");d=this._operate(a,b,this.value,c.value)}else"*"===b?(e.numerator=e.numerator.concat(c.unit.numerator).sort(),e.denominator=e.denominator.concat(c.unit.denominator).sort(),e.cancel()):"/"===b&&(e.numerator=e.numerator.concat(c.unit.denominator).sort(),e.denominator=e.denominator.concat(c.unit.numerator).sort(),e.cancel());return new h(d,e)},h.prototype.compare=function(a){var b,c;if(a instanceof h){if(this.unit.isEmpty()||a.unit.isEmpty())b=this,c=a;else if(b=this.unify(),c=a.unify(),0!==b.unit.compare(c.unit))return;return d.numericCompare(b.value,c.value)}},h.prototype.unify=function(){return this.convertTo({length:"px",duration:"s",angle:"rad"})},h.prototype.convertTo=function(a){var b,c,d,f,g,i=this.value,j=this.unit.clone(),k={};if("string"==typeof a){for(b in e)e[b].hasOwnProperty(a)&&(k={},k[b]=a);a=k}g=function(a,b){return d.hasOwnProperty(a)?(b?i/=d[a]/d[f]:i*=d[a]/d[f],f):a};for(c in a)a.hasOwnProperty(c)&&(f=a[c],d=e[c],j.map(g));return j.cancel(),new h(i,j)},b.exports=h},{"../data/unit-conversions":14,"./color":50,"./node":70,"./unit":79}],57:[function(a,b,c){var d=a("./node"),e=a("./selector"),f=a("./ruleset"),g=function(a,b,c,d,f,g,h,i){var j;if(this.name=a,this.value=b,c)for(Array.isArray(c)?this.rules=c:(this.rules=[c],this.rules[0].selectors=new e([],null,null,this.index,f).createEmptySelectors()),j=0;j<this.rules.length;j++)this.rules[j].allowImports=!0;this.index=d,this.currentFileInfo=f,this.debugInfo=g,this.isRooted=h||!1,this.copyVisibilityInfo(i),this.allowRoot=!0};g.prototype=new d,g.prototype.type="Directive",g.prototype.accept=function(a){var b=this.value,c=this.rules;c&&(this.rules=a.visitArray(c)),b&&(this.value=a.visit(b))},g.prototype.isRulesetLike=function(){return this.rules||!this.isCharset()},g.prototype.isCharset=function(){return"@charset"===this.name},g.prototype.genCSS=function(a,b){var c=this.value,d=this.rules;b.add(this.name,this.currentFileInfo,this.index),c&&(b.add(" "),c.genCSS(a,b)),d?this.outputRuleset(a,b,d):b.add(";")},g.prototype.eval=function(a){var b,c,d=this.value,e=this.rules;return b=a.mediaPath,c=a.mediaBlocks,a.mediaPath=[],a.mediaBlocks=[],d&&(d=d.eval(a)),e&&(e=[e[0].eval(a)],e[0].root=!0),a.mediaPath=b,a.mediaBlocks=c,new g(this.name,d,e,this.index,this.currentFileInfo,this.debugInfo,this.isRooted,this.visibilityInfo())},g.prototype.variable=function(a){if(this.rules)return f.prototype.variable.call(this.rules[0],a)},g.prototype.find=function(){if(this.rules)return f.prototype.find.apply(this.rules[0],arguments)},g.prototype.rulesets=function(){if(this.rules)return f.prototype.rulesets.apply(this.rules[0])},g.prototype.outputRuleset=function(a,b,c){var d,e=c.length;if(a.tabLevel=(0|a.tabLevel)+1,a.compress){for(b.add("{"),d=0;d<e;d++)c[d].genCSS(a,b);return b.add("}"),void a.tabLevel--}var f="\n"+Array(a.tabLevel).join("  "),g=f+"  ";if(e){for(b.add(" {"+g),c[0].genCSS(a,b),d=1;d<e;d++)b.add(g),c[d].genCSS(a,b);b.add(f+"}")}else b.add(" {"+f+"}");a.tabLevel--},b.exports=g},{"./node":70,"./ruleset":76,"./selector":77}],58:[function(a,b,c){var d=a("./node"),e=a("./paren"),f=a("./combinator"),g=function(a,b,c,d,e){this.combinator=a instanceof f?a:new f(a),this.value="string"==typeof b?b.trim():b?b:"",this.index=c,this.currentFileInfo=d,this.copyVisibilityInfo(e)};g.prototype=new d,g.prototype.type="Element",g.prototype.accept=function(a){var b=this.value;this.combinator=a.visit(this.combinator),"object"==typeof b&&(this.value=a.visit(b))},g.prototype.eval=function(a){return new g(this.combinator,this.value.eval?this.value.eval(a):this.value,this.index,this.currentFileInfo,this.visibilityInfo())},g.prototype.clone=function(){return new g(this.combinator,this.value,this.index,this.currentFileInfo,this.visibilityInfo())},g.prototype.genCSS=function(a,b){b.add(this.toCSS(a),this.currentFileInfo,this.index)},g.prototype.toCSS=function(a){a=a||{};var b=this.value,c=a.firstSelector;return b instanceof e&&(a.firstSelector=!0),b=b.toCSS?b.toCSS(a):b,a.firstSelector=c,""===b&&"&"===this.combinator.value.charAt(0)?"":this.combinator.toCSS(a)+b},b.exports=g},{"./combinator":51,"./node":70,"./paren":72}],59:[function(a,b,c){var d=a("./node"),e=a("./paren"),f=a("./comment"),g=function(a){if(this.value=a,!a)throw new Error("Expression requires an array parameter")};g.prototype=new d,g.prototype.type="Expression",g.prototype.accept=function(a){this.value=a.visitArray(this.value)},g.prototype.eval=function(a){var b,c=this.parens&&!this.parensInOp,d=!1;return c&&a.inParenthesis(),this.value.length>1?b=new g(this.value.map(function(b){return b.eval(a)})):1===this.value.length?(this.value[0].parens&&!this.value[0].parensInOp&&(d=!0),b=this.value[0].eval(a)):b=this,c&&a.outOfParenthesis(),this.parens&&this.parensInOp&&!a.isMathOn()&&!d&&(b=new e(b)),b},g.prototype.genCSS=function(a,b){for(var c=0;c<this.value.length;c++)this.value[c].genCSS(a,b),c+1<this.value.length&&b.add(" ")},g.prototype.throwAwayComments=function(){this.value=this.value.filter(function(a){return!(a instanceof f)})},b.exports=g},{"./comment":52,"./node":70,"./paren":72}],60:[function(a,b,c){var d=a("./node"),e=a("./selector"),f=function g(a,b,c,d,e){switch(this.selector=a,this.option=b,this.index=c,this.object_id=g.next_id++,this.parent_ids=[this.object_id],this.currentFileInfo=d||{},this.copyVisibilityInfo(e),this.allowRoot=!0,b){case"all":this.allowBefore=!0,this.allowAfter=!0;break;default:this.allowBefore=!1,this.allowAfter=!1}};f.next_id=0,f.prototype=new d,f.prototype.type="Extend",f.prototype.accept=function(a){this.selector=a.visit(this.selector)},f.prototype.eval=function(a){return new f(this.selector.eval(a),this.option,this.index,this.currentFileInfo,this.visibilityInfo())},f.prototype.clone=function(a){return new f(this.selector,this.option,this.index,this.currentFileInfo,this.visibilityInfo())},f.prototype.findSelfSelectors=function(a){var b,c,d=[];for(b=0;b<a.length;b++)c=a[b].elements,b>0&&c.length&&""===c[0].combinator.value&&(c[0].combinator.value=" "),d=d.concat(a[b].elements);this.selfSelectors=[new e(d)],this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo())},b.exports=f},{"./node":70,"./selector":77}],61:[function(a,b,c){var d=a("./node"),e=a("./media"),f=a("./url"),g=a("./quoted"),h=a("./ruleset"),i=a("./anonymous"),j=function(a,b,c,d,e,f){if(this.options=c,this.index=d,this.path=a,this.features=b,this.currentFileInfo=e,this.allowRoot=!0,void 0!==this.options.less||this.options.inline)this.css=!this.options.less||this.options.inline;else{var g=this.getPath();g&&/[#\.\&\?\/]css([\?;].*)?$/.test(g)&&(this.css=!0)}this.copyVisibilityInfo(f)};j.prototype=new d,j.prototype.type="Import",j.prototype.accept=function(a){this.features&&(this.features=a.visit(this.features)),this.path=a.visit(this.path),this.options.plugin||this.options.inline||!this.root||(this.root=a.visit(this.root))},j.prototype.genCSS=function(a,b){this.css&&void 0===this.path.currentFileInfo.reference&&(b.add("@import ",this.currentFileInfo,this.index),this.path.genCSS(a,b),this.features&&(b.add(" "),this.features.genCSS(a,b)),b.add(";"))},j.prototype.getPath=function(){return this.path instanceof f?this.path.value.value:this.path.value},j.prototype.isVariableImport=function(){var a=this.path;return a instanceof f&&(a=a.value),!(a instanceof g)||a.containsVariables()},j.prototype.evalForImport=function(a){var b=this.path;return b instanceof f&&(b=b.value),new j(b.eval(a),this.features,this.options,this.index,this.currentFileInfo,this.visibilityInfo())},j.prototype.evalPath=function(a){var b=this.path.eval(a),c=this.currentFileInfo&&this.currentFileInfo.rootpath;if(!(b instanceof f)){if(c){var d=b.value;d&&a.isPathRelative(d)&&(b.value=c+d)}b.value=a.normalizePath(b.value)}return b},j.prototype.eval=function(a){var b=this.doEval(a);return(this.options.reference||this.blocksVisibility())&&(b.length||0===b.length?b.forEach(function(a){a.addVisibilityBlock()}):b.addVisibilityBlock()),b},j.prototype.doEval=function(a){var b,c,d=this.features&&this.features.eval(a);if(this.options.plugin)return c=a.frames[0]&&a.frames[0].functionRegistry,c&&this.root&&this.root.functions&&c.addMultiple(this.root.functions),[];if(this.skip&&("function"==typeof this.skip&&(this.skip=this.skip()),this.skip))return[];if(this.options.inline){var f=new i(this.root,0,{filename:this.importedFilename,reference:this.path.currentFileInfo&&this.path.currentFileInfo.reference},(!0),(!0));return this.features?new e([f],this.features.value):[f]}if(this.css){var g=new j(this.evalPath(a),d,this.options,this.index);if(!g.css&&this.error)throw this.error;return g}return b=new h(null,this.root.rules.slice(0)),b.evalImports(a),this.features?new e(b.rules,this.features.value):b.rules},b.exports=j},{"./anonymous":46,"./media":66,"./node":70,"./quoted":73,"./ruleset":76,"./url":80}],62:[function(a,b,c){var d={};d.Node=a("./node"),d.Alpha=a("./alpha"),d.Color=a("./color"),d.Directive=a("./directive"),d.DetachedRuleset=a("./detached-ruleset"),d.Operation=a("./operation"),d.Dimension=a("./dimension"),d.Unit=a("./unit"),d.Keyword=a("./keyword"),d.Variable=a("./variable"),d.Ruleset=a("./ruleset"),d.Element=a("./element"),d.Attribute=a("./attribute"),d.Combinator=a("./combinator"),d.Selector=a("./selector"),d.Quoted=a("./quoted"),d.Expression=a("./expression"),d.Rule=a("./rule"),d.Call=a("./call"),d.URL=a("./url"),d.Import=a("./import"),d.mixin={Call:a("./mixin-call"),Definition:a("./mixin-definition")},d.Comment=a("./comment"),d.Anonymous=a("./anonymous"),d.Value=a("./value"),d.JavaScript=a("./javascript"),d.Assignment=a("./assignment"),d.Condition=a("./condition"),d.Paren=a("./paren"),d.Media=a("./media"),d.UnicodeDescriptor=a("./unicode-descriptor"),d.Negative=a("./negative"),d.Extend=a("./extend"),d.RulesetCall=a("./ruleset-call"),b.exports=d},{"./alpha":45,"./anonymous":46,"./assignment":47,"./attribute":48,"./call":49,"./color":50,"./combinator":51,"./comment":52,"./condition":53,"./detached-ruleset":55,"./dimension":56,"./directive":57,"./element":58,"./expression":59,"./extend":60,"./import":61,"./javascript":63,"./keyword":65,"./media":66,"./mixin-call":67,"./mixin-definition":68,"./negative":69,"./node":70,"./operation":71,"./paren":72,"./quoted":73,"./rule":74,"./ruleset":76,"./ruleset-call":75,"./selector":77,"./unicode-descriptor":78,"./unit":79,"./url":80,"./value":81,"./variable":82}],63:[function(a,b,c){var d=a("./js-eval-node"),e=a("./dimension"),f=a("./quoted"),g=a("./anonymous"),h=function(a,b,c,d){this.escaped=b,this.expression=a,this.index=c,this.currentFileInfo=d};h.prototype=new d,h.prototype.type="JavaScript",h.prototype.eval=function(a){var b=this.evaluateJavaScript(this.expression,a);return"number"==typeof b?new e(b):"string"==typeof b?new f('"'+b+'"',b,this.escaped,this.index):new g(Array.isArray(b)?b.join(", "):b)},b.exports=h},{"./anonymous":46,"./dimension":56,"./js-eval-node":64,"./quoted":73}],64:[function(a,b,c){var d=a("./node"),e=a("./variable"),f=function(){};f.prototype=new d,f.prototype.evaluateJavaScript=function(a,b){var c,d=this,f={};if(void 0!==b.javascriptEnabled&&!b.javascriptEnabled)throw{message:"You are using JavaScript, which has been disabled.",filename:this.currentFileInfo.filename,index:this.index};a=a.replace(/@\{([\w-]+)\}/g,function(a,c){return d.jsify(new e("@"+c,d.index,d.currentFileInfo).eval(b))});try{a=new Function("return ("+a+")")}catch(g){throw{message:"JavaScript evaluation error: "+g.message+" from `"+a+"`",filename:this.currentFileInfo.filename,index:this.index}}var h=b.frames[0].variables();for(var i in h)h.hasOwnProperty(i)&&(f[i.slice(1)]={value:h[i].value,toJS:function(){return this.value.eval(b).toCSS()}});try{c=a.call(f)}catch(g){throw{message:"JavaScript evaluation error: '"+g.name+": "+g.message.replace(/["]/g,"'")+"'",filename:this.currentFileInfo.filename,index:this.index}}return c},f.prototype.jsify=function(a){return Array.isArray(a.value)&&a.value.length>1?"["+a.value.map(function(a){return a.toCSS()}).join(", ")+"]":a.toCSS()},b.exports=f},{"./node":70,"./variable":82}],65:[function(a,b,c){var d=a("./node"),e=function(a){this.value=a};e.prototype=new d,e.prototype.type="Keyword",e.prototype.genCSS=function(a,b){if("%"===this.value)throw{type:"Syntax",message:"Invalid % without number"};b.add(this.value)},e.True=new e("true"),e.False=new e("false"),b.exports=e},{"./node":70}],66:[function(a,b,c){var d=a("./ruleset"),e=a("./value"),f=a("./selector"),g=a("./anonymous"),h=a("./expression"),i=a("./directive"),j=function(a,b,c,g,h){this.index=c,this.currentFileInfo=g;var i=new f([],null,null,this.index,this.currentFileInfo).createEmptySelectors();this.features=new e(b),this.rules=[new d(i,a)],this.rules[0].allowImports=!0,this.copyVisibilityInfo(h),this.allowRoot=!0};j.prototype=new i,j.prototype.type="Media",j.prototype.isRulesetLike=!0,j.prototype.accept=function(a){this.features&&(this.features=a.visit(this.features)),this.rules&&(this.rules=a.visitArray(this.rules))},j.prototype.genCSS=function(a,b){b.add("@media ",this.currentFileInfo,this.index),this.features.genCSS(a,b),this.outputRuleset(a,b,this.rules)},j.prototype.eval=function(a){a.mediaBlocks||(a.mediaBlocks=[],a.mediaPath=[]);var b=new j(null,[],this.index,this.currentFileInfo,this.visibilityInfo());this.debugInfo&&(this.rules[0].debugInfo=this.debugInfo,b.debugInfo=this.debugInfo);var c=!1;a.strictMath||(c=!0,a.strictMath=!0);try{b.features=this.features.eval(a)}finally{c&&(a.strictMath=!1)}return a.mediaPath.push(b),a.mediaBlocks.push(b),this.rules[0].functionRegistry=a.frames[0].functionRegistry.inherit(),a.frames.unshift(this.rules[0]),b.rules=[this.rules[0].eval(a)],a.frames.shift(),a.mediaPath.pop(),0===a.mediaPath.length?b.evalTop(a):b.evalNested(a)},j.prototype.evalTop=function(a){var b=this;if(a.mediaBlocks.length>1){var c=new f([],null,null,this.index,this.currentFileInfo).createEmptySelectors();b=new d(c,a.mediaBlocks),b.multiMedia=!0,b.copyVisibilityInfo(this.visibilityInfo())}return delete a.mediaBlocks,delete a.mediaPath,b},j.prototype.evalNested=function(a){var b,c,f=a.mediaPath.concat([this]);for(b=0;b<f.length;b++)c=f[b].features instanceof e?f[b].features.value:f[b].features,f[b]=Array.isArray(c)?c:[c];return this.features=new e(this.permute(f).map(function(a){for(a=a.map(function(a){return a.toCSS?a:new g(a)}),b=a.length-1;b>0;b--)a.splice(b,0,new g("and"));return new h(a)})),new d([],[])},j.prototype.permute=function(a){if(0===a.length)return[];if(1===a.length)return a[0];for(var b=[],c=this.permute(a.slice(1)),d=0;d<c.length;d++)for(var e=0;e<a[0].length;e++)b.push([a[0][e]].concat(c[d]));return b},j.prototype.bubbleSelectors=function(a){a&&(this.rules=[new d(a.slice(0),[this.rules[0]])])},b.exports=j},{"./anonymous":46,"./directive":57,"./expression":59,"./ruleset":76,"./selector":77,"./value":81}],67:[function(a,b,c){var d=a("./node"),e=a("./selector"),f=a("./mixin-definition"),g=a("../functions/default"),h=function(a,b,c,d,f){this.selector=new e(a),this.arguments=b||[],this.index=c,this.currentFileInfo=d,this.important=f,this.allowRoot=!0};h.prototype=new d,h.prototype.type="MixinCall",h.prototype.accept=function(a){this.selector&&(this.selector=a.visit(this.selector)),this.arguments.length&&(this.arguments=a.visitArray(this.arguments))},h.prototype.eval=function(a){function b(b,c){var d,e,f;for(d=0;d<2;d++){for(x[d]=!0,g.value(d),e=0;e<c.length&&x[d];e++)f=c[e],f.matchCondition&&(x[d]=x[d]&&f.matchCondition(null,a));b.matchCondition&&(x[d]=x[d]&&b.matchCondition(t,a))}return x[0]||x[1]?x[0]!=x[1]?x[1]?A:B:z:y}var c,d,e,h,i,j,k,l,m,n,o,p,q,r,s,t=[],u=[],v=!1,w=[],x=[],y=-1,z=0,A=1,B=2;for(j=0;j<this.arguments.length;j++)if(h=this.arguments[j],i=h.value.eval(a),h.expand&&Array.isArray(i.value))for(i=i.value,k=0;k<i.length;k++)t.push({value:i[k]});else t.push({name:h.name,value:i});for(s=function(b){return b.matchArgs(null,a)},j=0;j<a.frames.length;j++)if((c=a.frames[j].find(this.selector,null,s)).length>0){for(n=!0,k=0;k<c.length;k++){for(d=c[k].rule,e=c[k].path,m=!1,l=0;l<a.frames.length;l++)if(!(d instanceof f)&&d===(a.frames[l].originalRuleset||a.frames[l])){m=!0;break}m||d.matchArgs(t,a)&&(o={mixin:d,group:b(d,e)},o.group!==y&&w.push(o),v=!0)}for(g.reset(),q=[0,0,0],k=0;k<w.length;k++)q[w[k].group]++;if(q[z]>0)p=B;else if(p=A,q[A]+q[B]>1)throw{type:"Runtime",message:"Ambiguous use of `default()` found when matching for `"+this.format(t)+"`",index:this.index,filename:this.currentFileInfo.filename};for(k=0;k<w.length;k++)if(o=w[k].group,o===z||o===p)try{d=w[k].mixin,d instanceof f||(r=d.originalRuleset||d,d=new f("",[],d.rules,null,(!1),null,r.visibilityInfo()),d.originalRuleset=r);var C=d.evalCall(a,t,this.important).rules;this._setVisibilityToReplacement(C),Array.prototype.push.apply(u,C)}catch(D){throw{message:D.message,index:this.index,filename:this.currentFileInfo.filename,
stack:D.stack}}if(v)return u}throw n?{type:"Runtime",message:"No matching definition was found for `"+this.format(t)+"`",index:this.index,filename:this.currentFileInfo.filename}:{type:"Name",message:this.selector.toCSS().trim()+" is undefined",index:this.index,filename:this.currentFileInfo.filename}},h.prototype._setVisibilityToReplacement=function(a){var b,c;if(this.blocksVisibility())for(b=0;b<a.length;b++)c=a[b],c.addVisibilityBlock()},h.prototype.format=function(a){return this.selector.toCSS().trim()+"("+(a?a.map(function(a){var b="";return a.name&&(b+=a.name+":"),b+=a.value.toCSS?a.value.toCSS():"???"}).join(", "):"")+")"},b.exports=h},{"../functions/default":20,"./mixin-definition":68,"./node":70,"./selector":77}],68:[function(a,b,c){var d=a("./selector"),e=a("./element"),f=a("./ruleset"),g=a("./rule"),h=a("./expression"),i=a("../contexts"),j=function(a,b,c,f,g,h,i){this.name=a,this.selectors=[new d([new e(null,a,this.index,this.currentFileInfo)])],this.params=b,this.condition=f,this.variadic=g,this.arity=b.length,this.rules=c,this._lookups={};var j=[];this.required=b.reduce(function(a,b){return!b.name||b.name&&!b.value?a+1:(j.push(b.name),a)},0),this.optionalParameters=j,this.frames=h,this.copyVisibilityInfo(i),this.allowRoot=!0};j.prototype=new f,j.prototype.type="MixinDefinition",j.prototype.evalFirst=!0,j.prototype.accept=function(a){this.params&&this.params.length&&(this.params=a.visitArray(this.params)),this.rules=a.visitArray(this.rules),this.condition&&(this.condition=a.visit(this.condition))},j.prototype.evalParams=function(a,b,c,d){var e,j,k,l,m,n,o,p,q=new f(null,null),r=this.params.slice(0),s=0;if(b.frames&&b.frames[0]&&b.frames[0].functionRegistry&&(q.functionRegistry=b.frames[0].functionRegistry.inherit()),b=new i.Eval(b,[q].concat(b.frames)),c)for(c=c.slice(0),s=c.length,k=0;k<s;k++)if(j=c[k],n=j&&j.name){for(o=!1,l=0;l<r.length;l++)if(!d[l]&&n===r[l].name){d[l]=j.value.eval(a),q.prependRule(new g(n,j.value.eval(a))),o=!0;break}if(o){c.splice(k,1),k--;continue}throw{type:"Runtime",message:"Named argument for "+this.name+" "+c[k].name+" not found"}}for(p=0,k=0;k<r.length;k++)if(!d[k]){if(j=c&&c[p],n=r[k].name)if(r[k].variadic){for(e=[],l=p;l<s;l++)e.push(c[l].value.eval(a));q.prependRule(new g(n,new h(e).eval(a)))}else{if(m=j&&j.value)m=m.eval(a);else{if(!r[k].value)throw{type:"Runtime",message:"wrong number of arguments for "+this.name+" ("+s+" for "+this.arity+")"};m=r[k].value.eval(b),q.resetCache()}q.prependRule(new g(n,m)),d[k]=m}if(r[k].variadic&&c)for(l=p;l<s;l++)d[l]=c[l].value.eval(a);p++}return q},j.prototype.makeImportant=function(){var a=this.rules?this.rules.map(function(a){return a.makeImportant?a.makeImportant(!0):a}):this.rules,b=new j(this.name,this.params,a,this.condition,this.variadic,this.frames);return b},j.prototype.eval=function(a){return new j(this.name,this.params,this.rules,this.condition,this.variadic,this.frames||a.frames.slice(0))},j.prototype.evalCall=function(a,b,c){var d,e,j=[],k=this.frames?this.frames.concat(a.frames):a.frames,l=this.evalParams(a,new i.Eval(a,k),b,j);return l.prependRule(new g("@arguments",new h(j).eval(a))),d=this.rules.slice(0),e=new f(null,d),e.originalRuleset=this,e=e.eval(new i.Eval(a,[this,l].concat(k))),c&&(e=e.makeImportant()),e},j.prototype.matchCondition=function(a,b){return!(this.condition&&!this.condition.eval(new i.Eval(b,[this.evalParams(b,new i.Eval(b,this.frames?this.frames.concat(b.frames):b.frames),a,[])].concat(this.frames||[]).concat(b.frames))))},j.prototype.matchArgs=function(a,b){var c,d=a&&a.length||0,e=this.optionalParameters,f=a?a.reduce(function(a,b){return e.indexOf(b.name)<0?a+1:a},0):0;if(this.variadic){if(f<this.required-1)return!1}else{if(f<this.required)return!1;if(d>this.params.length)return!1}c=Math.min(f,this.arity);for(var g=0;g<c;g++)if(!this.params[g].name&&!this.params[g].variadic&&a[g].value.eval(b).toCSS()!=this.params[g].value.eval(b).toCSS())return!1;return!0},b.exports=j},{"../contexts":11,"./element":58,"./expression":59,"./rule":74,"./ruleset":76,"./selector":77}],69:[function(a,b,c){var d=a("./node"),e=a("./operation"),f=a("./dimension"),g=function(a){this.value=a};g.prototype=new d,g.prototype.type="Negative",g.prototype.genCSS=function(a,b){b.add("-"),this.value.genCSS(a,b)},g.prototype.eval=function(a){return a.isMathOn()?new e("*",[new f((-1)),this.value]).eval(a):new g(this.value.eval(a))},b.exports=g},{"./dimension":56,"./node":70,"./operation":71}],70:[function(a,b,c){var d=function(){};d.prototype.toCSS=function(a){var b=[];return this.genCSS(a,{add:function(a,c,d){b.push(a)},isEmpty:function(){return 0===b.length}}),b.join("")},d.prototype.genCSS=function(a,b){b.add(this.value)},d.prototype.accept=function(a){this.value=a.visit(this.value)},d.prototype.eval=function(){return this},d.prototype._operate=function(a,b,c,d){switch(b){case"+":return c+d;case"-":return c-d;case"*":return c*d;case"/":return c/d}},d.prototype.fround=function(a,b){var c=a&&a.numPrecision;return null==c?b:Number((b+2e-16).toFixed(c))},d.compare=function(a,b){if(a.compare&&"Quoted"!==b.type&&"Anonymous"!==b.type)return a.compare(b);if(b.compare)return-b.compare(a);if(a.type===b.type){if(a=a.value,b=b.value,!Array.isArray(a))return a===b?0:void 0;if(a.length===b.length){for(var c=0;c<a.length;c++)if(0!==d.compare(a[c],b[c]))return;return 0}}},d.numericCompare=function(a,b){return a<b?-1:a===b?0:a>b?1:void 0},d.prototype.blocksVisibility=function(){return null==this.visibilityBlocks&&(this.visibilityBlocks=0),0!==this.visibilityBlocks},d.prototype.addVisibilityBlock=function(){null==this.visibilityBlocks&&(this.visibilityBlocks=0),this.visibilityBlocks=this.visibilityBlocks+1},d.prototype.removeVisibilityBlock=function(){null==this.visibilityBlocks&&(this.visibilityBlocks=0),this.visibilityBlocks=this.visibilityBlocks-1},d.prototype.ensureVisibility=function(){this.nodeVisible=!0},d.prototype.ensureInvisibility=function(){this.nodeVisible=!1},d.prototype.isVisible=function(){return this.nodeVisible},d.prototype.visibilityInfo=function(){return{visibilityBlocks:this.visibilityBlocks,nodeVisible:this.nodeVisible}},d.prototype.copyVisibilityInfo=function(a){a&&(this.visibilityBlocks=a.visibilityBlocks,this.nodeVisible=a.nodeVisible)},b.exports=d},{}],71:[function(a,b,c){var d=a("./node"),e=a("./color"),f=a("./dimension"),g=function(a,b,c){this.op=a.trim(),this.operands=b,this.isSpaced=c};g.prototype=new d,g.prototype.type="Operation",g.prototype.accept=function(a){this.operands=a.visit(this.operands)},g.prototype.eval=function(a){var b=this.operands[0].eval(a),c=this.operands[1].eval(a);if(a.isMathOn()){if(b instanceof f&&c instanceof e&&(b=b.toColor()),c instanceof f&&b instanceof e&&(c=c.toColor()),!b.operate)throw{type:"Operation",message:"Operation on an invalid type"};return b.operate(a,this.op,c)}return new g(this.op,[b,c],this.isSpaced)},g.prototype.genCSS=function(a,b){this.operands[0].genCSS(a,b),this.isSpaced&&b.add(" "),b.add(this.op),this.isSpaced&&b.add(" "),this.operands[1].genCSS(a,b)},b.exports=g},{"./color":50,"./dimension":56,"./node":70}],72:[function(a,b,c){var d=a("./node"),e=function(a){this.value=a};e.prototype=new d,e.prototype.type="Paren",e.prototype.genCSS=function(a,b){b.add("("),this.value.genCSS(a,b),b.add(")")},e.prototype.eval=function(a){return new e(this.value.eval(a))},b.exports=e},{"./node":70}],73:[function(a,b,c){var d=a("./node"),e=a("./js-eval-node"),f=a("./variable"),g=function(a,b,c,d,e){this.escaped=null==c||c,this.value=b||"",this.quote=a.charAt(0),this.index=d,this.currentFileInfo=e};g.prototype=new e,g.prototype.type="Quoted",g.prototype.genCSS=function(a,b){this.escaped||b.add(this.quote,this.currentFileInfo,this.index),b.add(this.value),this.escaped||b.add(this.quote)},g.prototype.containsVariables=function(){return this.value.match(/(`([^`]+)`)|@\{([\w-]+)\}/)},g.prototype.eval=function(a){function b(a,b,c){var d=a;do a=d,d=a.replace(b,c);while(a!==d);return d}var c=this,d=this.value,e=function(b,d){return String(c.evaluateJavaScript(d,a))},h=function(b,d){var e=new f("@"+d,c.index,c.currentFileInfo).eval(a,!0);return e instanceof g?e.value:e.toCSS()};return d=b(d,/`([^`]+)`/g,e),d=b(d,/@\{([\w-]+)\}/g,h),new g(this.quote+d+this.quote,d,this.escaped,this.index,this.currentFileInfo)},g.prototype.compare=function(a){return"Quoted"!==a.type||this.escaped||a.escaped?a.toCSS&&this.toCSS()===a.toCSS()?0:void 0:d.numericCompare(this.value,a.value)},b.exports=g},{"./js-eval-node":64,"./node":70,"./variable":82}],74:[function(a,b,c){function d(a,b){var c,d="",e=b.length,f={add:function(a){d+=a}};for(c=0;c<e;c++)b[c].eval(a).genCSS(a,f);return d}var e=a("./node"),f=a("./value"),g=a("./keyword"),h=function(a,b,c,d,g,h,i,j){this.name=a,this.value=b instanceof e?b:new f([b]),this.important=c?" "+c.trim():"",this.merge=d,this.index=g,this.currentFileInfo=h,this.inline=i||!1,this.variable=void 0!==j?j:a.charAt&&"@"===a.charAt(0),this.allowRoot=!0};h.prototype=new e,h.prototype.type="Rule",h.prototype.genCSS=function(a,b){b.add(this.name+(a.compress?":":": "),this.currentFileInfo,this.index);try{this.value.genCSS(a,b)}catch(c){throw c.index=this.index,c.filename=this.currentFileInfo.filename,c}b.add(this.important+(this.inline||a.lastRule&&a.compress?"":";"),this.currentFileInfo,this.index)},h.prototype.eval=function(a){var b,c=!1,e=this.name,f=this.variable;"string"!=typeof e&&(e=1===e.length&&e[0]instanceof g?e[0].value:d(a,e),f=!1),"font"!==e||a.strictMath||(c=!0,a.strictMath=!0);try{if(a.importantScope.push({}),b=this.value.eval(a),!this.variable&&"DetachedRuleset"===b.type)throw{message:"Rulesets cannot be evaluated on a property.",index:this.index,filename:this.currentFileInfo.filename};var i=this.important,j=a.importantScope.pop();return!i&&j.important&&(i=j.important),new h(e,b,i,this.merge,this.index,this.currentFileInfo,this.inline,f)}catch(k){throw"number"!=typeof k.index&&(k.index=this.index,k.filename=this.currentFileInfo.filename),k}finally{c&&(a.strictMath=!1)}},h.prototype.makeImportant=function(){return new h(this.name,this.value,"!important",this.merge,this.index,this.currentFileInfo,this.inline)},b.exports=h},{"./keyword":65,"./node":70,"./value":81}],75:[function(a,b,c){var d=a("./node"),e=a("./variable"),f=function(a){this.variable=a,this.allowRoot=!0};f.prototype=new d,f.prototype.type="RulesetCall",f.prototype.eval=function(a){var b=new e(this.variable).eval(a);return b.callEval(a)},b.exports=f},{"./node":70,"./variable":82}],76:[function(a,b,c){var d=a("./node"),e=a("./rule"),f=a("./selector"),g=a("./element"),h=a("./paren"),i=a("../contexts"),j=a("../functions/function-registry"),k=a("../functions/default"),l=a("./debug-info"),m=function(a,b,c,d){this.selectors=a,this.rules=b,this._lookups={},this.strictImports=c,this.copyVisibilityInfo(d),this.allowRoot=!0};m.prototype=new d,m.prototype.type="Ruleset",m.prototype.isRuleset=!0,m.prototype.isRulesetLike=!0,m.prototype.accept=function(a){this.paths?this.paths=a.visitArray(this.paths,!0):this.selectors&&(this.selectors=a.visitArray(this.selectors)),this.rules&&this.rules.length&&(this.rules=a.visitArray(this.rules))},m.prototype.eval=function(a){var b,c,d,f,g=this.selectors,h=!1;if(g&&(c=g.length)){for(b=[],k.error({type:"Syntax",message:"it is currently only allowed in parametric mixin guards,"}),f=0;f<c;f++)d=g[f].eval(a),b.push(d),d.evaldCondition&&(h=!0);k.reset()}else h=!0;var i,l,n=this.rules?this.rules.slice(0):null,o=new m(b,n,this.strictImports,this.visibilityInfo());o.originalRuleset=this,o.root=this.root,o.firstRoot=this.firstRoot,o.allowImports=this.allowImports,this.debugInfo&&(o.debugInfo=this.debugInfo),h||(n.length=0),o.functionRegistry=function(a){for(var b,c=0,d=a.length;c!==d;++c)if(b=a[c].functionRegistry)return b;return j}(a.frames).inherit();var p=a.frames;p.unshift(o);var q=a.selectors;q||(a.selectors=q=[]),q.unshift(this.selectors),(o.root||o.allowImports||!o.strictImports)&&o.evalImports(a);var r=o.rules,s=r?r.length:0;for(f=0;f<s;f++)r[f].evalFirst&&(r[f]=r[f].eval(a));var t=a.mediaBlocks&&a.mediaBlocks.length||0;for(f=0;f<s;f++)"MixinCall"===r[f].type?(n=r[f].eval(a).filter(function(a){return!(a instanceof e&&a.variable)||!o.variable(a.name)}),r.splice.apply(r,[f,1].concat(n)),s+=n.length-1,f+=n.length-1,o.resetCache()):"RulesetCall"===r[f].type&&(n=r[f].eval(a).rules.filter(function(a){return!(a instanceof e&&a.variable)}),r.splice.apply(r,[f,1].concat(n)),s+=n.length-1,f+=n.length-1,o.resetCache());for(f=0;f<r.length;f++)i=r[f],i.evalFirst||(r[f]=i=i.eval?i.eval(a):i);for(f=0;f<r.length;f++)if(i=r[f],i instanceof m&&i.selectors&&1===i.selectors.length&&i.selectors[0].isJustParentSelector()){r.splice(f--,1);for(var u=0;u<i.rules.length;u++)l=i.rules[u],l.copyVisibilityInfo(i.visibilityInfo()),l instanceof e&&l.variable||r.splice(++f,0,l)}if(p.shift(),q.shift(),a.mediaBlocks)for(f=t;f<a.mediaBlocks.length;f++)a.mediaBlocks[f].bubbleSelectors(b);return o},m.prototype.evalImports=function(a){var b,c,d=this.rules;if(d)for(b=0;b<d.length;b++)"Import"===d[b].type&&(c=d[b].eval(a),c&&(c.length||0===c.length)?(d.splice.apply(d,[b,1].concat(c)),b+=c.length-1):d.splice(b,1,c),this.resetCache())},m.prototype.makeImportant=function(){var a=new m(this.selectors,this.rules.map(function(a){return a.makeImportant?a.makeImportant():a}),this.strictImports,this.visibilityInfo());return a},m.prototype.matchArgs=function(a){return!a||0===a.length},m.prototype.matchCondition=function(a,b){var c=this.selectors[this.selectors.length-1];return!!c.evaldCondition&&!(c.condition&&!c.condition.eval(new i.Eval(b,b.frames)))},m.prototype.resetCache=function(){this._rulesets=null,this._variables=null,this._lookups={}},m.prototype.variables=function(){return this._variables||(this._variables=this.rules?this.rules.reduce(function(a,b){if(b instanceof e&&b.variable===!0&&(a[b.name]=b),"Import"===b.type&&b.root&&b.root.variables){var c=b.root.variables();for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}return a},{}):{}),this._variables},m.prototype.variable=function(a){return this.variables()[a]},m.prototype.rulesets=function(){if(!this.rules)return[];var a,b,c=[],d=this.rules,e=d.length;for(a=0;a<e;a++)b=d[a],b.isRuleset&&c.push(b);return c},m.prototype.prependRule=function(a){var b=this.rules;b?b.unshift(a):this.rules=[a]},m.prototype.find=function(a,b,c){b=b||this;var d,e,g=[],h=a.toCSS();return h in this._lookups?this._lookups[h]:(this.rulesets().forEach(function(h){if(h!==b)for(var i=0;i<h.selectors.length;i++)if(d=a.match(h.selectors[i])){if(a.elements.length>d){if(!c||c(h)){e=h.find(new f(a.elements.slice(d)),b,c);for(var j=0;j<e.length;++j)e[j].path.push(h);Array.prototype.push.apply(g,e)}}else g.push({rule:h,path:[]});break}}),this._lookups[h]=g,g)},m.prototype.genCSS=function(a,b){function c(a){return"boolean"==typeof a.isRulesetLike?a.isRulesetLike:"function"==typeof a.isRulesetLike&&a.isRulesetLike()}var d,e,f,g,h,i=[],j=[];a.tabLevel=a.tabLevel||0,this.root||a.tabLevel++;var k,m=a.compress?"":Array(a.tabLevel+1).join("  "),n=a.compress?"":Array(a.tabLevel).join("  "),o=0,p=0;for(d=0;d<this.rules.length;d++)g=this.rules[d],"Comment"===g.type?(p===d&&p++,j.push(g)):g.isCharset&&g.isCharset()?(j.splice(o,0,g),o++,p++):"Import"===g.type?(j.splice(p,0,g),p++):j.push(g);if(j=i.concat(j),!this.root){f=l(a,this,n),f&&(b.add(f),b.add(n));var q,r=this.paths,s=r.length;for(k=a.compress?",":",\n"+n,d=0;d<s;d++)if(h=r[d],q=h.length)for(d>0&&b.add(k),a.firstSelector=!0,h[0].genCSS(a,b),a.firstSelector=!1,e=1;e<q;e++)h[e].genCSS(a,b);b.add((a.compress?"{":" {\n")+m)}for(d=0;d<j.length;d++){g=j[d],d+1===j.length&&(a.lastRule=!0);var t=a.lastRule;c(g)&&(a.lastRule=!1),g.genCSS?g.genCSS(a,b):g.value&&b.add(g.value.toString()),a.lastRule=t,a.lastRule?a.lastRule=!1:b.add(a.compress?"":"\n"+m)}this.root||(b.add(a.compress?"}":"\n"+n+"}"),a.tabLevel--),b.isEmpty()||a.compress||!this.firstRoot||b.add("\n")},m.prototype.joinSelectors=function(a,b,c){for(var d=0;d<c.length;d++)this.joinSelector(a,b,c[d])},m.prototype.joinSelector=function(a,b,c){function d(a,b){var c,d;if(0===a.length)c=new h(a[0]);else{var e=[];for(d=0;d<a.length;d++)e.push(new g(null,a[d],b.index,b.currentFileInfo));c=new h(new f(e))}return c}function e(a,b){var c,d;return c=new g(null,a,b.index,b.currentFileInfo),d=new f([c])}function i(a,b,c,d){var e,f,h;if(e=[],a.length>0?(e=a.slice(0),f=e.pop(),h=d.createDerived(f.elements.slice(0))):h=d.createDerived([]),b.length>0){var i=c.combinator,j=b[0].elements[0];i.emptyOrWhitespace&&!j.combinator.emptyOrWhitespace&&(i=j.combinator),h.elements.push(new g(i,j.value,c.index,c.currentFileInfo)),h.elements=h.elements.concat(b[0].elements.slice(1))}if(0!==h.elements.length&&e.push(h),b.length>1){var k=b.slice(1);k=k.map(function(a){return a.createDerived(a.elements,[])}),e=e.concat(k)}return e}function j(a,b,c,d,e){var f;for(f=0;f<a.length;f++){var g=i(a[f],b,c,d);e.push(g)}return e}function k(a,b){var c,d;if(0!==a.length){if(0===b.length)return void b.push([new f(a)]);for(c=0;c<b.length;c++)d=b[c],d.length>0?d[d.length-1]=d[d.length-1].createDerived(d[d.length-1].elements.concat(a)):d.push(new f(a))}}function l(a,b,c){function f(a){var b;return"Paren"!==a.value.type?null:(b=a.value.value,"Selector"!==b.type?null:b)}var h,m,n,o,p,q,r,s,t,u,v=!1;for(o=[],p=[[]],h=0;h<c.elements.length;h++)if(s=c.elements[h],"&"!==s.value){var w=f(s);if(null!=w){k(o,p);var x,y=[],z=[];for(x=l(y,b,w),v=v||x,n=0;n<y.length;n++){var A=e(d(y[n],s),s);j(p,[A],s,c,z)}p=z,o=[]}else o.push(s)}else{for(v=!0,q=[],k(o,p),m=0;m<p.length;m++)if(r=p[m],0===b.length)r.length>0&&r[0].elements.push(new g(s.combinator,"",s.index,s.currentFileInfo)),q.push(r);else for(n=0;n<b.length;n++){var B=i(r,b[n],s,c);q.push(B)}p=q,o=[]}for(k(o,p),h=0;h<p.length;h++)t=p[h].length,t>0&&(a.push(p[h]),u=p[h][t-1],p[h][t-1]=u.createDerived(u.elements,c.extendList));return v}function m(a,b){var c=b.createDerived(b.elements,b.extendList,b.evaldCondition);return c.copyVisibilityInfo(a),c}var n,o,p;if(o=[],p=l(o,b,c),!p)if(b.length>0)for(o=[],n=0;n<b.length;n++){var q=b[n].map(m.bind(this,c.visibilityInfo()));q.push(c),o.push(q)}else o=[[c]];for(n=0;n<o.length;n++)a.push(o[n])},b.exports=m},{"../contexts":11,"../functions/default":20,"../functions/function-registry":22,"./debug-info":54,"./element":58,"./node":70,"./paren":72,"./rule":74,"./selector":77}],77:[function(a,b,c){var d=a("./node"),e=a("./element"),f=function(a,b,c,d,e,f){this.elements=a,this.extendList=b,this.condition=c,this.currentFileInfo=e||{},c||(this.evaldCondition=!0),this.copyVisibilityInfo(f)};f.prototype=new d,f.prototype.type="Selector",f.prototype.accept=function(a){this.elements&&(this.elements=a.visitArray(this.elements)),this.extendList&&(this.extendList=a.visitArray(this.extendList)),this.condition&&(this.condition=a.visit(this.condition))},f.prototype.createDerived=function(a,b,c){var d=this.visibilityInfo();c=null!=c?c:this.evaldCondition;var e=new f(a,b||this.extendList,null,this.index,this.currentFileInfo,d);return e.evaldCondition=c,e.mediaEmpty=this.mediaEmpty,e},f.prototype.createEmptySelectors=function(){var a=new e("","&",this.index,this.currentFileInfo),b=[new f([a],null,null,this.index,this.currentFileInfo)];return b[0].mediaEmpty=!0,b},f.prototype.match=function(a){var b,c,d=this.elements,e=d.length;if(a.CacheElements(),b=a._elements.length,0===b||e<b)return 0;for(c=0;c<b;c++)if(d[c].value!==a._elements[c])return 0;return b},f.prototype.CacheElements=function(){if(!this._elements){var a=this.elements.map(function(a){return a.combinator.value+(a.value.value||a.value)}).join("").match(/[,&#\*\.\w-]([\w-]|(\\.))*/g);a?"&"===a[0]&&a.shift():a=[],this._elements=a}},f.prototype.isJustParentSelector=function(){return!this.mediaEmpty&&1===this.elements.length&&"&"===this.elements[0].value&&(" "===this.elements[0].combinator.value||""===this.elements[0].combinator.value)},f.prototype.eval=function(a){var b=this.condition&&this.condition.eval(a),c=this.elements,d=this.extendList;return c=c&&c.map(function(b){return b.eval(a)}),d=d&&d.map(function(b){return b.eval(a)}),this.createDerived(c,d,b)},f.prototype.genCSS=function(a,b){var c,d;if(a&&a.firstSelector||""!==this.elements[0].combinator.value||b.add(" ",this.currentFileInfo,this.index),!this._css)for(c=0;c<this.elements.length;c++)d=this.elements[c],d.genCSS(a,b)},f.prototype.getIsOutput=function(){return this.evaldCondition},b.exports=f},{"./element":58,"./node":70}],78:[function(a,b,c){var d=a("./node"),e=function(a){this.value=a};e.prototype=new d,e.prototype.type="UnicodeDescriptor",b.exports=e},{"./node":70}],79:[function(a,b,c){var d=a("./node"),e=a("../data/unit-conversions"),f=function(a,b,c){this.numerator=a?a.slice(0).sort():[],this.denominator=b?b.slice(0).sort():[],c?this.backupUnit=c:a&&a.length&&(this.backupUnit=a[0])};f.prototype=new d,f.prototype.type="Unit",f.prototype.clone=function(){return new f(this.numerator.slice(0),this.denominator.slice(0),this.backupUnit)},f.prototype.genCSS=function(a,b){var c=a&&a.strictUnits;1===this.numerator.length?b.add(this.numerator[0]):!c&&this.backupUnit?b.add(this.backupUnit):!c&&this.denominator.length&&b.add(this.denominator[0])},f.prototype.toString=function(){var a,b=this.numerator.join("*");for(a=0;a<this.denominator.length;a++)b+="/"+this.denominator[a];return b},f.prototype.compare=function(a){return this.is(a.toString())?0:void 0},f.prototype.is=function(a){return this.toString().toUpperCase()===a.toUpperCase()},f.prototype.isLength=function(){return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/))},f.prototype.isEmpty=function(){return 0===this.numerator.length&&0===this.denominator.length},f.prototype.isSingular=function(){return this.numerator.length<=1&&0===this.denominator.length},f.prototype.map=function(a){var b;for(b=0;b<this.numerator.length;b++)this.numerator[b]=a(this.numerator[b],!1);for(b=0;b<this.denominator.length;b++)this.denominator[b]=a(this.denominator[b],!0)},f.prototype.usedUnits=function(){var a,b,c,d={};b=function(b){return a.hasOwnProperty(b)&&!d[c]&&(d[c]=b),b};for(c in e)e.hasOwnProperty(c)&&(a=e[c],this.map(b));return d},f.prototype.cancel=function(){var a,b,c={};for(b=0;b<this.numerator.length;b++)a=this.numerator[b],c[a]=(c[a]||0)+1;for(b=0;b<this.denominator.length;b++)a=this.denominator[b],c[a]=(c[a]||0)-1;this.numerator=[],this.denominator=[];for(a in c)if(c.hasOwnProperty(a)){var d=c[a];if(d>0)for(b=0;b<d;b++)this.numerator.push(a);else if(d<0)for(b=0;b<-d;b++)this.denominator.push(a)}this.numerator.sort(),this.denominator.sort()},b.exports=f},{"../data/unit-conversions":14,"./node":70}],80:[function(a,b,c){var d=a("./node"),e=function(a,b,c,d){this.value=a,this.currentFileInfo=c,this.index=b,this.isEvald=d};e.prototype=new d,e.prototype.type="Url",e.prototype.accept=function(a){this.value=a.visit(this.value)},e.prototype.genCSS=function(a,b){b.add("url("),this.value.genCSS(a,b),b.add(")")},e.prototype.eval=function(a){var b,c=this.value.eval(a);if(!this.isEvald&&(b=this.currentFileInfo&&this.currentFileInfo.rootpath,b&&"string"==typeof c.value&&a.isPathRelative(c.value)&&(c.quote||(b=b.replace(/[\(\)'"\s]/g,function(a){return"\\"+a})),c.value=b+c.value),c.value=a.normalizePath(c.value),a.urlArgs&&!c.value.match(/^\s*data:/))){var d=c.value.indexOf("?")===-1?"?":"&",f=d+a.urlArgs;c.value.indexOf("#")!==-1?c.value=c.value.replace("#",f+"#"):c.value+=f}return new e(c,this.index,this.currentFileInfo,(!0))},b.exports=e},{"./node":70}],81:[function(a,b,c){var d=a("./node"),e=function(a){if(this.value=a,!a)throw new Error("Value requires an array argument")};e.prototype=new d,e.prototype.type="Value",e.prototype.accept=function(a){this.value&&(this.value=a.visitArray(this.value))},e.prototype.eval=function(a){return 1===this.value.length?this.value[0].eval(a):new e(this.value.map(function(b){return b.eval(a)}))},e.prototype.genCSS=function(a,b){var c;for(c=0;c<this.value.length;c++)this.value[c].genCSS(a,b),c+1<this.value.length&&b.add(a&&a.compress?",":", ")},b.exports=e},{"./node":70}],82:[function(a,b,c){var d=a("./node"),e=function(a,b,c){this.name=a,this.index=b,this.currentFileInfo=c||{}};e.prototype=new d,e.prototype.type="Variable",e.prototype.eval=function(a){var b,c=this.name;if(0===c.indexOf("@@")&&(c="@"+new e(c.slice(1),this.index,this.currentFileInfo).eval(a).value),this.evaluating)throw{type:"Name",message:"Recursive variable definition for "+c,filename:this.currentFileInfo.filename,index:this.index};if(this.evaluating=!0,b=this.find(a.frames,function(b){var d=b.variable(c);if(d){if(d.important){var e=a.importantScope[a.importantScope.length-1];e.important=d.important}return d.value.eval(a)}}))return this.evaluating=!1,b;throw{type:"Name",message:"variable "+c+" is undefined",filename:this.currentFileInfo.filename,index:this.index}},e.prototype.find=function(a,b){for(var c,d=0;d<a.length;d++)if(c=b.call(a,a[d]))return c;return null},b.exports=e},{"./node":70}],83:[function(a,b,c){b.exports={getLocation:function(a,b){for(var c=a+1,d=null,e=-1;--c>=0&&"\n"!==b.charAt(c);)e++;return"number"==typeof a&&(d=(b.slice(0,a).match(/\n/g)||"").length),{line:d,column:e}}}},{}],84:[function(a,b,c){var d=a("../tree"),e=a("./visitor"),f=a("../logger"),g=function(){this._visitor=new e(this),this.contexts=[],this.allExtendsStack=[[]]};g.prototype={run:function(a){return a=this._visitor.visit(a),a.allExtends=this.allExtendsStack[0],a},visitRule:function(a,b){b.visitDeeper=!1},visitMixinDefinition:function(a,b){b.visitDeeper=!1},visitRuleset:function(a,b){if(!a.root){var c,e,f,g,h=[],i=a.rules,j=i?i.length:0;for(c=0;c<j;c++)a.rules[c]instanceof d.Extend&&(h.push(i[c]),a.extendOnEveryPath=!0);var k=a.paths;for(c=0;c<k.length;c++){var l=k[c],m=l[l.length-1],n=m.extendList;for(g=n?n.slice(0).concat(h):h,g&&(g=g.map(function(a){return a.clone()})),e=0;e<g.length;e++)this.foundExtends=!0,f=g[e],f.findSelfSelectors(l),f.ruleset=a,0===e&&(f.firstExtendOnThisSelectorPath=!0),this.allExtendsStack[this.allExtendsStack.length-1].push(f)}this.contexts.push(a.selectors)}},visitRulesetOut:function(a){a.root||(this.contexts.length=this.contexts.length-1)},visitMedia:function(a,b){a.allExtends=[],this.allExtendsStack.push(a.allExtends)},visitMediaOut:function(a){this.allExtendsStack.length=this.allExtendsStack.length-1},visitDirective:function(a,b){a.allExtends=[],this.allExtendsStack.push(a.allExtends)},visitDirectiveOut:function(a){this.allExtendsStack.length=this.allExtendsStack.length-1}};var h=function(){this._visitor=new e(this)};h.prototype={run:function(a){var b=new g;if(this.extendIndices={},b.run(a),!b.foundExtends)return a;a.allExtends=a.allExtends.concat(this.doExtendChaining(a.allExtends,a.allExtends)),this.allExtendsStack=[a.allExtends];var c=this._visitor.visit(a);return this.checkExtendsForNonMatched(a.allExtends),c},checkExtendsForNonMatched:function(a){var b=this.extendIndices;a.filter(function(a){return!a.hasFoundMatches&&1==a.parent_ids.length}).forEach(function(a){var c="_unknown_";try{c=a.selector.toCSS({})}catch(d){}b[a.index+" "+c]||(b[a.index+" "+c]=!0,f.warn("extend '"+c+"' has no matches"))})},doExtendChaining:function(a,b,c){var e,f,g,h,i,j,k,l,m=[],n=this;for(c=c||0,e=0;e<a.length;e++)for(f=0;f<b.length;f++)j=a[e],k=b[f],j.parent_ids.indexOf(k.object_id)>=0||(i=[k.selfSelectors[0]],g=n.findMatch(j,i),g.length&&(j.hasFoundMatches=!0,j.selfSelectors.forEach(function(a){var b=k.visibilityInfo();h=n.extendSelector(g,i,a,j.isVisible()),l=new d.Extend(k.selector,k.option,0,k.currentFileInfo,b),l.selfSelectors=h,h[h.length-1].extendList=[l],m.push(l),l.ruleset=k.ruleset,l.parent_ids=l.parent_ids.concat(k.parent_ids,j.parent_ids),k.firstExtendOnThisSelectorPath&&(l.firstExtendOnThisSelectorPath=!0,k.ruleset.paths.push(h))})));if(m.length){if(this.extendChainCount++,c>100){var o="{unable to calculate}",p="{unable to calculate}";try{o=m[0].selfSelectors[0].toCSS(),p=m[0].selector.toCSS()}catch(q){}throw{message:"extend circular reference detected. One of the circular extends is currently:"+o+":extend("+p+")"}}return m.concat(n.doExtendChaining(m,b,c+1))}return m},visitRule:function(a,b){b.visitDeeper=!1},visitMixinDefinition:function(a,b){b.visitDeeper=!1},visitSelector:function(a,b){b.visitDeeper=!1},visitRuleset:function(a,b){if(!a.root){var c,d,e,f,g=this.allExtendsStack[this.allExtendsStack.length-1],h=[],i=this;for(e=0;e<g.length;e++)for(d=0;d<a.paths.length;d++)if(f=a.paths[d],!a.extendOnEveryPath){var j=f[f.length-1].extendList;j&&j.length||(c=this.findMatch(g[e],f),c.length&&(g[e].hasFoundMatches=!0,g[e].selfSelectors.forEach(function(a){var b;b=i.extendSelector(c,f,a,g[e].isVisible()),h.push(b)})))}a.paths=a.paths.concat(h)}},findMatch:function(a,b){var c,d,e,f,g,h,i,j=this,k=a.selector.elements,l=[],m=[];for(c=0;c<b.length;c++)for(d=b[c],e=0;e<d.elements.length;e++)for(f=d.elements[e],(a.allowBefore||0===c&&0===e)&&l.push({pathIndex:c,index:e,matched:0,initialCombinator:f.combinator}),h=0;h<l.length;h++)i=l[h],g=f.combinator.value,""===g&&0===e&&(g=" "),!j.isElementValuesEqual(k[i.matched].value,f.value)||i.matched>0&&k[i.matched].combinator.value!==g?i=null:i.matched++,i&&(i.finished=i.matched===k.length,i.finished&&!a.allowAfter&&(e+1<d.elements.length||c+1<b.length)&&(i=null)),i?i.finished&&(i.length=k.length,i.endPathIndex=c,i.endPathElementIndex=e+1,l.length=0,m.push(i)):(l.splice(h,1),h--);return m},isElementValuesEqual:function(a,b){if("string"==typeof a||"string"==typeof b)return a===b;if(a instanceof d.Attribute)return a.op===b.op&&a.key===b.key&&(a.value&&b.value?(a=a.value.value||a.value,b=b.value.value||b.value,a===b):!a.value&&!b.value);if(a=a.value,b=b.value,a instanceof d.Selector){if(!(b instanceof d.Selector)||a.elements.length!==b.elements.length)return!1;for(var c=0;c<a.elements.length;c++){if(a.elements[c].combinator.value!==b.elements[c].combinator.value&&(0!==c||(a.elements[c].combinator.value||" ")!==(b.elements[c].combinator.value||" ")))return!1;if(!this.isElementValuesEqual(a.elements[c].value,b.elements[c].value))return!1}return!0}return!1},extendSelector:function(a,b,c,e){var f,g,h,i,j,k=0,l=0,m=[];for(f=0;f<a.length;f++)i=a[f],g=b[i.pathIndex],h=new d.Element(i.initialCombinator,c.elements[0].value,c.elements[0].index,c.elements[0].currentFileInfo),i.pathIndex>k&&l>0&&(m[m.length-1].elements=m[m.length-1].elements.concat(b[k].elements.slice(l)),l=0,k++),j=g.elements.slice(l,i.index).concat([h]).concat(c.elements.slice(1)),k===i.pathIndex&&f>0?m[m.length-1].elements=m[m.length-1].elements.concat(j):(m=m.concat(b.slice(k,i.pathIndex)),m.push(new d.Selector(j))),k=i.endPathIndex,l=i.endPathElementIndex,l>=b[k].elements.length&&(l=0,k++);return k<b.length&&l>0&&(m[m.length-1].elements=m[m.length-1].elements.concat(b[k].elements.slice(l)),k++),m=m.concat(b.slice(k,b.length)),m=m.map(function(a){var b=a.createDerived(a.elements);return e?b.ensureVisibility():b.ensureInvisibility(),b})},visitMedia:function(a,b){var c=a.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);c=c.concat(this.doExtendChaining(c,a.allExtends)),this.allExtendsStack.push(c)},visitMediaOut:function(a){var b=this.allExtendsStack.length-1;this.allExtendsStack.length=b},visitDirective:function(a,b){var c=a.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);c=c.concat(this.doExtendChaining(c,a.allExtends)),this.allExtendsStack.push(c)},visitDirectiveOut:function(a){var b=this.allExtendsStack.length-1;this.allExtendsStack.length=b}},b.exports=h},{"../logger":33,"../tree":62,"./visitor":91}],85:[function(a,b,c){function d(a){this.imports=[],this.variableImports=[],this._onSequencerEmpty=a,this._currentDepth=0}d.prototype.addImport=function(a){var b=this,c={callback:a,args:null,isReady:!1};return this.imports.push(c),function(){c.args=Array.prototype.slice.call(arguments,0),c.isReady=!0,b.tryRun()}},d.prototype.addVariableImport=function(a){this.variableImports.push(a)},d.prototype.tryRun=function(){this._currentDepth++;try{for(;;){for(;this.imports.length>0;){var a=this.imports[0];if(!a.isReady)return;
this.imports=this.imports.slice(1),a.callback.apply(null,a.args)}if(0===this.variableImports.length)break;var b=this.variableImports[0];this.variableImports=this.variableImports.slice(1),b()}}finally{this._currentDepth--}0===this._currentDepth&&this._onSequencerEmpty&&this._onSequencerEmpty()},b.exports=d},{}],86:[function(a,b,c){var d=a("../contexts"),e=a("./visitor"),f=a("./import-sequencer"),g=function(a,b){this._visitor=new e(this),this._importer=a,this._finish=b,this.context=new d.Eval,this.importCount=0,this.onceFileDetectionMap={},this.recursionDetector={},this._sequencer=new f(this._onSequencerEmpty.bind(this))};g.prototype={isReplacing:!1,run:function(a){try{this._visitor.visit(a)}catch(b){this.error=b}this.isFinished=!0,this._sequencer.tryRun()},_onSequencerEmpty:function(){this.isFinished&&this._finish(this.error)},visitImport:function(a,b){var c=a.options.inline;if(!a.css||c){var e=new d.Eval(this.context,this.context.frames.slice(0)),f=e.frames[0];this.importCount++,a.isVariableImport()?this._sequencer.addVariableImport(this.processImportNode.bind(this,a,e,f)):this.processImportNode(a,e,f)}b.visitDeeper=!1},processImportNode:function(a,b,c){var d,e=a.options.inline;try{d=a.evalForImport(b)}catch(f){f.filename||(f.index=a.index,f.filename=a.currentFileInfo.filename),a.css=!0,a.error=f}if(!d||d.css&&!e)this.importCount--,this.isFinished&&this._sequencer.tryRun();else{d.options.multiple&&(b.importMultiple=!0);for(var g=void 0===d.css,h=0;h<c.rules.length;h++)if(c.rules[h]===a){c.rules[h]=d;break}var i=this.onImported.bind(this,d,b),j=this._sequencer.addImport(i);this._importer.push(d.getPath(),g,d.currentFileInfo,d.options,j)}},onImported:function(a,b,c,d,e,f){c&&(c.filename||(c.index=a.index,c.filename=a.currentFileInfo.filename),this.error=c);var g=this,h=a.options.inline,i=a.options.plugin,j=a.options.optional,k=e||f in g.recursionDetector;if(b.importMultiple||(a.skip=!!k||function(){return f in g.onceFileDetectionMap||(g.onceFileDetectionMap[f]=!0,!1)}),!f&&j&&(a.skip=!0),d&&(a.root=d,a.importedFilename=f,!h&&!i&&(b.importMultiple||!k))){g.recursionDetector[f]=!0;var l=this.context;this.context=b;try{this._visitor.visit(d)}catch(c){this.error=c}this.context=l}g.importCount--,g.isFinished&&g._sequencer.tryRun()},visitRule:function(a,b){"DetachedRuleset"===a.value.type?this.context.frames.unshift(a):b.visitDeeper=!1},visitRuleOut:function(a){"DetachedRuleset"===a.value.type&&this.context.frames.shift()},visitDirective:function(a,b){this.context.frames.unshift(a)},visitDirectiveOut:function(a){this.context.frames.shift()},visitMixinDefinition:function(a,b){this.context.frames.unshift(a)},visitMixinDefinitionOut:function(a){this.context.frames.shift()},visitRuleset:function(a,b){this.context.frames.unshift(a)},visitRulesetOut:function(a){this.context.frames.shift()},visitMedia:function(a,b){this.context.frames.unshift(a.rules[0])},visitMediaOut:function(a){this.context.frames.shift()}},b.exports=g},{"../contexts":11,"./import-sequencer":85,"./visitor":91}],87:[function(a,b,c){var d={Visitor:a("./visitor"),ImportVisitor:a("./import-visitor"),MarkVisibleSelectorsVisitor:a("./set-tree-visibility-visitor"),ExtendVisitor:a("./extend-visitor"),JoinSelectorVisitor:a("./join-selector-visitor"),ToCSSVisitor:a("./to-css-visitor")};b.exports=d},{"./extend-visitor":84,"./import-visitor":86,"./join-selector-visitor":88,"./set-tree-visibility-visitor":89,"./to-css-visitor":90,"./visitor":91}],88:[function(a,b,c){var d=a("./visitor"),e=function(){this.contexts=[[]],this._visitor=new d(this)};e.prototype={run:function(a){return this._visitor.visit(a)},visitRule:function(a,b){b.visitDeeper=!1},visitMixinDefinition:function(a,b){b.visitDeeper=!1},visitRuleset:function(a,b){var c,d=this.contexts[this.contexts.length-1],e=[];this.contexts.push(e),a.root||(c=a.selectors,c&&(c=c.filter(function(a){return a.getIsOutput()}),a.selectors=c.length?c:c=null,c&&a.joinSelectors(e,d,c)),c||(a.rules=null),a.paths=e)},visitRulesetOut:function(a){this.contexts.length=this.contexts.length-1},visitMedia:function(a,b){var c=this.contexts[this.contexts.length-1];a.rules[0].root=0===c.length||c[0].multiMedia},visitDirective:function(a,b){var c=this.contexts[this.contexts.length-1];a.rules&&a.rules.length&&(a.rules[0].root=a.isRooted||0===c.length||null)}},b.exports=e},{"./visitor":91}],89:[function(a,b,c){var d=function(a){this.visible=a};d.prototype.run=function(a){this.visit(a)},d.prototype.visitArray=function(a){if(!a)return a;var b,c=a.length;for(b=0;b<c;b++)this.visit(a[b]);return a},d.prototype.visit=function(a){return a?a.constructor===Array?this.visitArray(a):!a.blocksVisibility||a.blocksVisibility()?a:(this.visible?a.ensureVisibility():a.ensureInvisibility(),a.accept(this),a):a},b.exports=d},{}],90:[function(a,b,c){var d=a("../tree"),e=a("./visitor"),f=function(a){this._visitor=new e(this),this._context=a};f.prototype={containsSilentNonBlockedChild:function(a){var b;if(null==a)return!1;for(var c=0;c<a.length;c++)if(b=a[c],b.isSilent&&b.isSilent(this._context)&&!b.blocksVisibility())return!0;return!1},keepOnlyVisibleChilds:function(a){null!=a&&null!=a.rules&&(a.rules=a.rules.filter(function(a){return a.isVisible()}))},isEmpty:function(a){return null==a||null==a.rules||0===a.rules.length},hasVisibleSelector:function(a){return null!=a&&null!=a.paths&&a.paths.length>0},resolveVisibility:function(a,b){if(!a.blocksVisibility()){if(this.isEmpty(a)&&!this.containsSilentNonBlockedChild(b))return;return a}var c=a.rules[0];if(this.keepOnlyVisibleChilds(c),!this.isEmpty(c))return a.ensureVisibility(),a.removeVisibilityBlock(),a},isVisibleRuleset:function(a){return!!a.firstRoot||!this.isEmpty(a)&&!(!a.root&&!this.hasVisibleSelector(a))}};var g=function(a){this._visitor=new e(this),this._context=a,this.utils=new f(a)};g.prototype={isReplacing:!0,run:function(a){return this._visitor.visit(a)},visitRule:function(a,b){if(!a.blocksVisibility()&&!a.variable)return a},visitMixinDefinition:function(a,b){a.frames=[]},visitExtend:function(a,b){},visitComment:function(a,b){if(!a.blocksVisibility()&&!a.isSilent(this._context))return a},visitMedia:function(a,b){var c=a.rules[0].rules;return a.accept(this._visitor),b.visitDeeper=!1,this.utils.resolveVisibility(a,c)},visitImport:function(a,b){if(!a.blocksVisibility())return a},visitDirective:function(a,b){return a.rules&&a.rules.length?this.visitDirectiveWithBody(a,b):this.visitDirectiveWithoutBody(a,b)},visitDirectiveWithBody:function(a,b){function c(a){var b=a.rules;return 1===b.length&&(!b[0].paths||0===b[0].paths.length)}function d(a){var b=a.rules;return c(a)?b[0].rules:b}var e=d(a);return a.accept(this._visitor),b.visitDeeper=!1,this.utils.isEmpty(a)||this._mergeRules(a.rules[0].rules),this.utils.resolveVisibility(a,e)},visitDirectiveWithoutBody:function(a,b){if(!a.blocksVisibility()){if("@charset"===a.name){if(this.charset){if(a.debugInfo){var c=new d.Comment("/* "+a.toCSS(this._context).replace(/\n/g,"")+" */\n");return c.debugInfo=a.debugInfo,this._visitor.visit(c)}return}this.charset=!0}return a}},checkValidNodes:function(a,b){if(a)for(var c=0;c<a.length;c++){var e=a[c];if(b&&e instanceof d.Rule&&!e.variable)throw{message:"Properties must be inside selector blocks. They cannot be in the root",index:e.index,filename:e.currentFileInfo&&e.currentFileInfo.filename};if(e instanceof d.Call)throw{message:"Function '"+e.name+"' is undefined",index:e.index,filename:e.currentFileInfo&&e.currentFileInfo.filename};if(e.type&&!e.allowRoot)throw{message:e.type+" node returned by a function is not valid here",index:e.index,filename:e.currentFileInfo&&e.currentFileInfo.filename}}},visitRuleset:function(a,b){var c,d=[];if(this.checkValidNodes(a.rules,a.firstRoot),a.root)a.accept(this._visitor),b.visitDeeper=!1;else{this._compileRulesetPaths(a);for(var e=a.rules,f=e?e.length:0,g=0;g<f;)c=e[g],c&&c.rules?(d.push(this._visitor.visit(c)),e.splice(g,1),f--):g++;f>0?a.accept(this._visitor):a.rules=null,b.visitDeeper=!1}return a.rules&&(this._mergeRules(a.rules),this._removeDuplicateRules(a.rules)),this.utils.isVisibleRuleset(a)&&(a.ensureVisibility(),d.splice(0,0,a)),1===d.length?d[0]:d},_compileRulesetPaths:function(a){a.paths&&(a.paths=a.paths.filter(function(a){var b;for(" "===a[0].elements[0].combinator.value&&(a[0].elements[0].combinator=new d.Combinator("")),b=0;b<a.length;b++)if(a[b].isVisible()&&a[b].getIsOutput())return!0;return!1}))},_removeDuplicateRules:function(a){if(a){var b,c,e,f={};for(e=a.length-1;e>=0;e--)if(c=a[e],c instanceof d.Rule)if(f[c.name]){b=f[c.name],b instanceof d.Rule&&(b=f[c.name]=[f[c.name].toCSS(this._context)]);var g=c.toCSS(this._context);b.indexOf(g)!==-1?a.splice(e,1):b.push(g)}else f[c.name]=c}},_mergeRules:function(a){if(a){for(var b,c,e,f={},g=0;g<a.length;g++)c=a[g],c instanceof d.Rule&&c.merge&&(e=[c.name,c.important?"!":""].join(","),f[e]?a.splice(g--,1):f[e]=[],f[e].push(c));Object.keys(f).map(function(a){function e(a){return new d.Expression(a.map(function(a){return a.value}))}function g(a){return new d.Value(a.map(function(a){return a}))}if(b=f[a],b.length>1){c=b[0];var h=[],i=[];b.map(function(a){"+"===a.merge&&(i.length>0&&h.push(e(i)),i=[]),i.push(a)}),h.push(e(i)),c.value=g(h)}})}},visitAnonymous:function(a,b){if(!a.blocksVisibility())return a.accept(this._visitor),a}},b.exports=g},{"../tree":62,"./visitor":91}],91:[function(a,b,c){function d(a){return a}function e(a,b){var c,d;for(c in a)if(a.hasOwnProperty(c))switch(d=a[c],typeof d){case"function":d.prototype&&d.prototype.type&&(d.prototype.typeIndex=b++);break;case"object":b=e(d,b)}return b}var f=a("../tree"),g={visitDeeper:!0},h=!1,i=function(a){this._implementation=a,this._visitFnCache=[],h||(e(f,1),h=!0)};i.prototype={visit:function(a){if(!a)return a;var b=a.typeIndex;if(!b)return a;var c,e=this._visitFnCache,f=this._implementation,h=b<<1,i=1|h,j=e[h],k=e[i],l=g;if(l.visitDeeper=!0,j||(c="visit"+a.type,j=f[c]||d,k=f[c+"Out"]||d,e[h]=j,e[i]=k),j!==d){var m=j.call(f,a,l);f.isReplacing&&(a=m)}return l.visitDeeper&&a&&a.accept&&a.accept(this),k!=d&&k.call(f,a),a},visitArray:function(a,b){if(!a)return a;var c,d=a.length;if(b||!this._implementation.isReplacing){for(c=0;c<d;c++)this.visit(a[c]);return a}var e=[];for(c=0;c<d;c++){var f=this.visit(a[c]);void 0!==f&&(f.splice?f.length&&this.flatten(f,e):e.push(f))}return e},flatten:function(a,b){b||(b=[]);var c,d,e,f,g,h;for(d=0,c=a.length;d<c;d++)if(e=a[d],void 0!==e)if(e.splice)for(g=0,f=e.length;g<f;g++)h=e[g],void 0!==h&&(h.splice?h.length&&this.flatten(h,b):b.push(h));else b.push(e);return b}},b.exports=i},{"../tree":62}],92:[function(a,b,c){"use strict";function d(){if(i.length)throw i.shift()}function e(a){var b;b=h.length?h.pop():new f,b.task=a,g(b)}function f(){this.task=null}var g=a("./raw"),h=[],i=[],j=g.makeRequestCallFromTimer(d);b.exports=e,f.prototype.call=function(){try{this.task.call()}catch(a){e.onerror?e.onerror(a):(i.push(a),j())}finally{this.task=null,h[h.length]=this}}},{"./raw":93}],93:[function(a,b,c){(function(a){"use strict";function c(a){h.length||(g(),i=!0),h[h.length]=a}function d(){for(;j<h.length;){var a=j;if(j+=1,h[a].call(),j>k){for(var b=0,c=h.length-j;b<c;b++)h[b]=h[b+j];h.length-=j,j=0}}h.length=0,j=0,i=!1}function e(a){var b=1,c=new l(a),d=document.createTextNode("");return c.observe(d,{characterData:!0}),function(){b=-b,d.data=b}}function f(a){return function(){function b(){clearTimeout(c),clearInterval(d),a()}var c=setTimeout(b,0),d=setInterval(b,50)}}b.exports=c;var g,h=[],i=!1,j=0,k=1024,l=a.MutationObserver||a.WebKitMutationObserver;g="function"==typeof l?e(d):f(d),c.requestFlush=g,c.makeRequestCallFromTimer=f}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],94:[function(a,b,c){"use strict";function d(){}function e(a){try{return a.then}catch(b){return r=b,s}}function f(a,b){try{return a(b)}catch(c){return r=c,s}}function g(a,b,c){try{a(b,c)}catch(d){return r=d,s}}function h(a){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof a)throw new TypeError("not a function");this._45=0,this._81=0,this._65=null,this._54=null,a!==d&&p(a,this)}function i(a,b,c){return new a.constructor(function(e,f){var g=new h(d);g.then(e,f),j(a,new o(b,c,g))})}function j(a,b){for(;3===a._81;)a=a._65;return h._10&&h._10(a),0===a._81?0===a._45?(a._45=1,void(a._54=b)):1===a._45?(a._45=2,void(a._54=[a._54,b])):void a._54.push(b):void k(a,b)}function k(a,b){q(function(){var c=1===a._81?b.onFulfilled:b.onRejected;if(null===c)return void(1===a._81?l(b.promise,a._65):m(b.promise,a._65));var d=f(c,a._65);d===s?m(b.promise,r):l(b.promise,d)})}function l(a,b){if(b===a)return m(a,new TypeError("A promise cannot be resolved with itself."));if(b&&("object"==typeof b||"function"==typeof b)){var c=e(b);if(c===s)return m(a,r);if(c===a.then&&b instanceof h)return a._81=3,a._65=b,void n(a);if("function"==typeof c)return void p(c.bind(b),a)}a._81=1,a._65=b,n(a)}function m(a,b){a._81=2,a._65=b,h._97&&h._97(a,b),n(a)}function n(a){if(1===a._45&&(j(a,a._54),a._54=null),2===a._45){for(var b=0;b<a._54.length;b++)j(a,a._54[b]);a._54=null}}function o(a,b,c){this.onFulfilled="function"==typeof a?a:null,this.onRejected="function"==typeof b?b:null,this.promise=c}function p(a,b){var c=!1,d=g(a,function(a){c||(c=!0,l(b,a))},function(a){c||(c=!0,m(b,a))});c||d!==s||(c=!0,m(b,r))}var q=a("asap/raw"),r=null,s={};b.exports=h,h._10=null,h._97=null,h._61=d,h.prototype.then=function(a,b){if(this.constructor!==h)return i(this,a,b);var c=new h(d);return j(this,new o(a,b,c)),c}},{"asap/raw":93}],95:[function(a,b,c){"use strict";function d(a){var b=new e(e._61);return b._81=1,b._65=a,b}var e=a("./core.js");b.exports=e;var f=d(!0),g=d(!1),h=d(null),i=d(void 0),j=d(0),k=d("");e.resolve=function(a){if(a instanceof e)return a;if(null===a)return h;if(void 0===a)return i;if(a===!0)return f;if(a===!1)return g;if(0===a)return j;if(""===a)return k;if("object"==typeof a||"function"==typeof a)try{var b=a.then;if("function"==typeof b)return new e(b.bind(a))}catch(c){return new e(function(a,b){b(c)})}return d(a)},e.all=function(a){var b=Array.prototype.slice.call(a);return new e(function(a,c){function d(g,h){if(h&&("object"==typeof h||"function"==typeof h)){if(h instanceof e&&h.then===e.prototype.then){for(;3===h._81;)h=h._65;return 1===h._81?d(g,h._65):(2===h._81&&c(h._65),void h.then(function(a){d(g,a)},c))}var i=h.then;if("function"==typeof i){var j=new e(i.bind(h));return void j.then(function(a){d(g,a)},c)}}b[g]=h,0===--f&&a(b)}if(0===b.length)return a([]);for(var f=b.length,g=0;g<b.length;g++)d(g,b[g])})},e.reject=function(a){return new e(function(b,c){c(a)})},e.race=function(a){return new e(function(b,c){a.forEach(function(a){e.resolve(a).then(b,c)})})},e.prototype["catch"]=function(a){return this.then(null,a)}},{"./core.js":94}],96:[function(a,b,c){"function"!=typeof Promise.prototype.done&&(Promise.prototype.done=function(a,b){var c=arguments.length?this.then.apply(this,arguments):this;c.then(null,function(a){setTimeout(function(){throw a},0)})})},{}],97:[function(a,b,c){a("asap");"undefined"==typeof Promise&&(Promise=a("./lib/core.js"),a("./lib/es6-extensions.js")),a("./polyfill-done.js")},{"./lib/core.js":94,"./lib/es6-extensions.js":95,"./polyfill-done.js":96,asap:92}]},{},[2])(2)});
//====判断是否需要安装CLodop云打印服务器:====
function needCLodop() {
  try {
    var ua = navigator.userAgent;
    if (ua.match(/Windows\sPhone/i) != null) return true;
    if (ua.match(/iPhone|iPod/i) != null) return true;
    if (ua.match(/Android/i) != null) return true;
    if (ua.match(/Edge\D?\d+/i) != null) return true;

    var verTrident = ua.match(/Trident\D?\d+/i);
    var verIE = ua.match(/MSIE\D?\d+/i);
    var verOPR = ua.match(/OPR\D?\d+/i);
    var verFF = ua.match(/Firefox\D?\d+/i);
    var x64 = ua.match(/x64/i);
    if ((verTrident == null) && (verIE == null) && (x64 !== null))
      return true;
    else
    if (verFF !== null) {
      verFF = verFF[0].match(/\d+/);
      if ((verFF[0] >= 42) || (x64 !== null)) return true;
    } else
    if (verOPR !== null) {
      verOPR = verOPR[0].match(/\d+/);
      if (verOPR[0] >= 32) return true;
    } else
    if ((verTrident == null) && (verIE == null)) {
      var verChrome = ua.match(/Chrome\D?\d+/i);
      if (verChrome !== null) {
        verChrome = verChrome[0].match(/\d+/);
        if (verChrome[0] >= 42) return true;
      };
    };
    return false;
  } catch (err) {
    return true;
  };
};

//====页面引用CLodop云打印必须的JS文件：====
if (needCLodop()) {
  var head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;



  var oscript = document.createElement("script");
  oscript.src = "http://localhost:8000/CLodopfuncs.js?priority=3";
  head.insertBefore(oscript, head.firstChild);

  //引用双端口(8000和18000）避免其中某个被占用：
  oscript = document.createElement("script");
  oscript.src = "http://localhost:18000/CLodopfuncs.js?priority=2";
  head.insertBefore(oscript, head.firstChild);

  //oscript = document.createElement("script");
  //oscript.src ="http://192.168.1.3:8000/CLodopfuncs.js?priority=1";
  //head.insertBefore( oscript,head.firstChild );
};

//====获取LODOP对象的主过程：====
function getLodop(oOBJECT, oEMBED) {
  var strHtmInstall = "<br><font color='#999'>打印控件未安装!点击这里<a class='print-install' href='js/print_plugin/CLodop_Setup_for_Win32NT.exe' style=''  target='_self'>执行安装</a>,安装后请<span style='color:red'>刷新页面或重新进入</span>。</font>";
  var strHtmUpdate = "<br><font color='#999'>打印控件需要升级!点击这里<a class='print-install' href='js/print_plugin/CLodop_Setup_for_Win32NT.exe' target='_self'>执行升级</a>,升级后请<span style='color:red'>重新进入</span>。</font>";
  var strHtm64_Install = "<br><font color='#999'>打印控件未安装!点击这里<a class='print-install' href='js/print_plugin/CLodop_Setup_for_Win64NT_2.102.exe' target='_self'>执行安装</a>,安装后请<span style='color:red'>刷新页面或重新进入</span>。</font>";
  var strHtm64_Update = "<br><font color='#999'>打印控件需要升级!点击这里<a class='print-install' href='js/print_plugin/CLodop_Setup_for_Win64NT_2.102.exe' target='_self'>执行升级</a>,升级后请<span style='color:red'>重新进入</span>。</font>";
  var strHtmFireFox = "<br><br><font color='#999'>（注意：如曾安装过Lodop旧版附件npActiveXPLugin,请在【工具】->【附加组件】->【扩展】中先卸它）</font>";
  var strHtmChrome = "<br><br><font color='#999'>(如果此前正常，仅因浏览器升级或重安装而出问题，需重新执行以上安装）</font>";
  var strCLodopInstall = "<br><font color='#999'>CLodop云打印服务(localhost本地)未安装启动!点击这里<a class='print-install' href='js/print_plugin/CLodop_Setup_for_Win32NT.exe' target='_self'>执行安装</a>,安装后请<span style='color:red'>刷新页面</span>。</font>";
  var strCLodopUpdate = "<br><font color='#999'>CLodop云打印服务需升级!点击这里<a class='print-install' href='js/print_plugin/CLodop_Setup_for_Win32NT.exe' target='_self'>执行升级</a>,升级后请<span style='color:red'>刷新页面</span>。</font>";
  var LODOP;
  try {
    var isIE = (navigator.userAgent.indexOf('MSIE') >= 0) || (navigator.userAgent.indexOf('Trident') >= 0);
    if (needCLodop()) {
      try { LODOP = getCLodop(); } catch (err) {};
      if (!LODOP && document.readyState !== "complete") {
        alert("C-Lodop没准备好，请稍后再试！");
        return;
      };
      if (!LODOP) {
        if (isIE) {
          showMsg(strCLodopInstall)
            // document.write(strCLodopInstall);
        } else {
          showMsg(strCLodopInstall);
          // document.documentElement.innerHTML = strCLodopInstall + document.documentElement.innerHTML;
        }
        return;
      } else {

        if (CLODOP.CVERSION < "2.1.0.2") {
          showMsg(strCLodopUpdate)
        };
        if (oEMBED && oEMBED.parentNode) oEMBED.parentNode.removeChild(oEMBED);
        if (oOBJECT && oOBJECT.parentNode) oOBJECT.parentNode.removeChild(oOBJECT);
      };
    } else {
      var is64IE = isIE && (navigator.userAgent.indexOf('x64') >= 0);
      //=====如果页面有Lodop就直接使用，没有则新建:==========
      if (oOBJECT != undefined || oEMBED != undefined) {
        if (isIE) LODOP = oOBJECT;
        else LODOP = oEMBED;
      } else if (CreatedOKLodop7766 == null) {
        LODOP = document.createElement("object");
        LODOP.setAttribute("width", 0);
        LODOP.setAttribute("height", 0);
        LODOP.setAttribute("style", "position:absolute;left:0px;top:-100px;width:0px;height:0px;");
        if (isIE) LODOP.setAttribute("classid", "clsid:2105C259-1E0C-4534-8141-A753534CB4CA");
        else LODOP.setAttribute("type", "application/x-print-lodop");
        document.documentElement.appendChild(LODOP);
        CreatedOKLodop7766 = LODOP;
      } else LODOP = CreatedOKLodop7766;
      //=====Lodop插件未安装时提示下载地址:==========
      if ((LODOP == null) || (typeof(LODOP.VERSION) == "undefined")) {
        if (navigator.userAgent.indexOf('Chrome') >= 0) {
          showMsg(strHtmChrome)
            // document.documentElement.innerHTML=strHtmChrome+document.documentElement.innerHTML;
        }
        if (navigator.userAgent.indexOf('Firefox') >= 0) {
          showMsg(strHtmFireFox)
            // document.documentElement.innerHTML=strHtmFireFox+document.documentElement.innerHTML;
        }
        if (is64IE) {
          document.write(strHtm64_Install);
        } else if (isIE) {
          document.write(strHtmInstall);
        } else {
          document.documentElement.innerHTML = strHtmInstall + document.documentElement.innerHTML;
        }
        return LODOP;
      };
    };
    if (LODOP.VERSION < "6.2.1.7") {
      if (needCLodop()) {
        showMsg(strCLodopUpdate);
        // document.documentElement.innerHTML = strCLodopUpdate + document.documentElement.innerHTML;
      } else if (is64IE) {
        showMsg(strHtm64_Update)
        // document.write(strHtm64_Update);
      } else if (isIE) {
        showMsg(strHtmUpdate);
        // document.write(strHtmUpdate);
      } else {
        showMsg(strHtmUpdate)
        // document.documentElement.innerHTML = strHtmUpdate + document.documentElement.innerHTML;
      }
      return LODOP;
    };
    //===如下空白位置适合调用统一功能(如注册语句、语言选择等):===

    //===========================================================
    return LODOP;
  } catch (err) { alert("getLodop出错:" + err); };

  function showMsg(msg) {
    if ($('#KlxxPrintErrorMsgModal').length <= 0) {
      $('body').append($(
        '<div class="modal  fade" id="KlxxPrintErrorMsgModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">' 
        + '  <div class="modal-dialog klxx-modal-primary" role="document">'
        + '    <div class="modal-content">' 
        + '      <div class="modal-header">' 
        + '        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>' 
        + '        <h4 class="modal-title" id="myModalLabel">提示</h4>' 
        + '      </div>' 
        + '      <div class="modal-body">' 
        + '        <div class="print-wrapper"></div>' 
        + '      </div>' 
        + '      <div class="modal-footer">' 
        + '        <button type="button" class="btn btn-default" data-dismiss="modal">确定</button>' 
        + '      </div>' 
        + '    </div>' 
        + '  </div>' 
        + '</div>'
      ));
    }
    var $KlxxPrintErrorMsgModal = $('#KlxxPrintErrorMsgModal');
    $('.modal-body .print-wrapper', $KlxxPrintErrorMsgModal).empty().append($(msg));
    $KlxxPrintErrorMsgModal.modal('show');
  }
};

/**
 * Created by Liyong.zhu on 2016/10/19.
 */
function CreatePrintPage(data) {

    //01报班
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px;}';
    strHtml += 'tr td{ height:15px; line-height:15px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<body style="margin:0 auto;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + data.branch_name + '	经办人:' + data.employee_name + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center" style="font-weight:900;">';
    strHtml += '<td width="150">学员编号</td>';
    strHtml += '<td width="66">学员姓名</td>';
    strHtml += '<td width="185">单据编号</td>';
    strHtml += '<td width="68">业务类型</td>';
    strHtml += '<td width="76">业务日期</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>'+data.student_encoding+'</td>';
    strHtml += '<td>'+data.student_name+'</td>';
    strHtml += '<td>'+data.encoding+'</td>';
    strHtml += '<td>报班</td>';
    strHtml += '<td>'+Format("yyyy-MM-dd", new Date(data.create_time))+'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px">';
    strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    strHtml += '<td>课程商品名称</td>';
    strHtml += '<td>上课时间</td>';
    strHtml += '<td>下课时间</td>';
    strHtml += '<td>报班课时</td>';
    strHtml += '<td>报班总金额</td>';
    strHtml += '</tr>';
    for(var i = 0 ; i < data.details.length ; i++){
        var startTime = data.details[i].start_time;
        var endTime = data.details[i].end_time;
        if(startTime==null){
            startTime='';
        }
        if(endTime==null){
            endTime='';
        }
        strHtml += '<tr align="center">';
        strHtml += '<td>'+(i+1)+'</td>';
        strHtml += '<td>'+data.details[i].course_name+'</td>';
        strHtml += '<td>'+startTime+'</td>';
        strHtml += '<td>'+endTime+'</td>';
        strHtml += '<td>'+data.details[i].course_total_count+'</td>';
        strHtml += '<td>￥'+data.details[i].former_sum_price+'</td>';
        strHtml += '</tr>';
    }

    strHtml += '</table>';
    strHtml += '<table border="0" width="660px">';
    strHtml += '<tr height="15px">';
    strHtml += '<td style="font-weight:900;">优惠金额：'+(data.sum_price-data.actual_price)+'</td>';
    strHtml += '<td style="font-weight:900;">实际需缴费金额：￥'+data.actual_price+'</td>';
    strHtml += '<td style="font-weight:900;">已缴费金额：￥'+data.actual_price+'</td>';
    strHtml += '<td style="font-weight:900;">APP账号：'+  (data.studentInfo.login_no ? data.studentInfo.login_no : "") +'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px">';
    for(var i = 0 ; i < data.payment.details.length ; i++){
        strHtml += '<tr height="15px">';
        strHtml += '<td style="font-weight:900;">缴费明细：</td>';
        strHtml += '<td>'+ convertPayName(data.payment.details[i].payment_way) + '</td>';
        strHtml += '<td>￥'+(data.payment.details[i].staffappprem?data.payment.details[i].staffappprem:0)+'</td>';
        strHtml += '<td>'+(data.payment.details[i].org_name?data.payment.details[i].org_name:"")+'</td>';
        if(data.payment.details[i].device_code){
            strHtml += '<td>'+data.payment.details[i].device_code+'</td>';
        }
        strHtml += '<td>'+(data.payment.details[i].createTime?data.payment.details[i].createTime:"")+'</td>';
        strHtml += '</tr>';
    }
    if(data.bu_id==12){
        strHtml += '<tr height="15px"  style="font-weight:900;"><td colspan="6">以上优惠均需报整期课程并消耗完毕，若产生退费/冻结，则优惠取消</td></tr>';
    }else{
        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    }
    for(var i = 0 ; i < 9-data.payment.details.length-data.payment.details.length ; i++){
        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    }
    strHtml += '</table></td></tr>';
    strHtml += '</table>';
    strHtml += '</body>';

    KlxxPrint(strHtml);

}

function CreatePrintPageXiamen(data) {
    //01报班

    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px;}';
    strHtml += 'tr td{ height:15px; line-height:15px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto ;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + data.branch_name.replace('个性化','').replace('培英精品班','').replace('大小班','') + '	                 日期:' + Format("yyyy-MM-dd", new Date(data.create_time)) + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr height="15px" style="font-weight:900;">';
    strHtml += '<td align="center">学员姓名</td>';
    strHtml += '<td width="33%" align="left">业务类型</td>';
    strHtml += '<td width="33%" align="left">APP账号</td>';
    strHtml += '</tr>';
    strHtml += '<tr>';
    strHtml += '<td align="center"  >'+data.student_name+'</td>';
    strHtml += '<td width="33%"  align="left">报班</td>';
    strHtml += '<td width="33%"  align="left">' + (data.studentInfo.login_no ? data.studentInfo.login_no : "") + '</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" height="15px" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    strHtml += '<td>报班总金额</td>';
    strHtml += '</tr>';
    strHtml += '<tr>';
    strHtml += '<td>'+1+'</td>';
    strHtml += '<td>￥'+data.actual_price+'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px">';
    strHtml += '<tr height="15px">';
    strHtml += '<td style="font-weight:900;">优惠金额：'+0+'</td>';
    strHtml += '<td style="font-weight:900;">实际需缴费金额：￥'+data.actual_price+'</td>';
    strHtml += '<td style="font-weight:900;">已缴费金额：￥'+data.actual_price+'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px">';
    strHtml += '<tr height="15px">';
    strHtml += '<td style="font-weight:900;">缴费明细：</td>';
    strHtml += '<td>1</td>';
    strHtml += '<td>￥'+data.actual_price+'</td>';
    strHtml += '<td>'+data.branch_name.replace('个性化','').replace('培英精品班','').replace('大小班','')+'</td>';
    strHtml += '<td>'+ Format("yyyy-MM-dd", new Date(data.create_time))+'</td>';
    strHtml += '</tr>';
    if(data.bu_id==12){
        strHtml += '<tr height="15px"  style="font-weight:900;"><td colspan="6">以上优惠均需报整期课程并消耗完毕，若产生退费/冻结，则优惠取消</td></tr>';
    }else{
        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    }
    for(var i = 0 ; i < 9-data.payment.details.length-data.details.length ; i++){
        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    }
    strHtml += '</table></td></tr>';
    strHtml += '</table>';
    strHtml += '</body>';

    KlxxPrint(strHtml);
}

function CreatePrintPageGxhYdyBb(data) {
    //01个性化1对1报班
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px;}';
    strHtml += 'tr td{ height:15px; line-height:15px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto ;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr height="15px" style="font-weight:900;">';
    strHtml += '<td>学员编码</td>';
    strHtml += '<td>学员APPID</td>';
    strHtml += '<td>学员姓名</td>';
    strHtml += '</tr>';
    strHtml += '<tr>';
    strHtml += '<td>'+data.studentInfo.encoding+'</td>';
    strHtml += '<td>' + (data.studentInfo.login_no ? data.studentInfo.login_no : "") + '</td>';
    strHtml += '<td>'+data.studentInfo.student_name+'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table style="margin-top:10px" border="0" width="660px" align="center">';
    strHtml += '<tr height="15px" style="font-weight:900;">';
    strHtml += '<td>单据编码</td>';
    strHtml += '<td>业务类型</td>';
    strHtml += '<td>业务校区</td>';
    strHtml += '<td>经办人</td>';
    strHtml += '<td>业务日期</td>';
    strHtml += '</tr>';
    strHtml += '<tr>';
    strHtml += '<td>'+data.encoding+'</td>';
    strHtml += '<td>报班</td>';
    strHtml += '<td> ' + data.branch_name + '</td>';
    strHtml += '<td> ' + data.employee_name + '</td>';
    strHtml += '<td> ' + Format("yyyy-MM-dd", new Date(data.create_time)) + '</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table style="margin-top:10px" border="0" width="660px" align="center">';
    strHtml += '<tr align="left" height="15px" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    strHtml += '<td>课程商品名称</td>';
    strHtml += '<td>报班课时</td>';
    strHtml += '<td>报班总金额</td>';
    strHtml += '</tr>';
    $.each(data.details,function(i,n) {
        strHtml += '<tr>';
        strHtml += '<td>'+ (i+1) +'</td>';
        strHtml += '<td>'+n.course_name +'</td>';
        strHtml += '<td>'+n.course_total_count+'</td>';
        strHtml += '<td>￥'+n.discount_sum_price+'</td>';
        strHtml += '</tr>';
    });
    strHtml += '</table>';

    strHtml += '<table style="margin-top:10px" border="0" width="660px">';
    strHtml += '<tr height="15px">';
    strHtml += '<td style="font-weight:900;">优惠金额：'+ (data.sum_price - data.actual_price)+'</td>';
    strHtml += '<td style="font-weight:900;">实际需缴费金额：￥'+data.sum_price+'</td>';
    strHtml += '<td style="font-weight:900;">已缴费金额：￥'+data.actual_price+'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table style="margin-top:10px" border="0" width="660px">';
    strHtml += '<tr height="15px">';
    strHtml += '<td style="font-weight:900;">缴费明细：</td>';
    strHtml += '</tr>';
    $.each(data.payment.details,function(i,n) {
            strHtml += '<tr height="15px">';
            strHtml += '<td style="font-weight:900;">' + n.payment_way_str + '</td>';
            strHtml += '<td >' + n.staffappprem + '</td>';
            strHtml += '</tr>';
    });
    // if(data.payment.cashPrice && data.payment.cashPrice != 0) {
    //     strHtml += '<tr height="15px">';
    //     strHtml += '<td style="font-weight:900;">现金</td>';
    //     strHtml += '<td >' + data.payment.cashPrice + '</td>';
    //     strHtml += '</tr>';
    // }
    //
    // if(data.payment.cardPrice && data.payment.cardPrice != 0) {
    //     strHtml += '<tr height="15px">';
    //     strHtml += '<td style="font-weight:900;">刷卡</td>';
    //     strHtml += '<td >' + data.payment.cardPrice + '</td>';
    //     strHtml += '</tr>';
    // }
    // if(data.payment.transferPrice && data.payment.transferPrice != 0) {
    //     strHtml += '<tr height="15px">';
    //     strHtml += '<td style="font-weight:900;">转账</td>';
    //     strHtml += '<td >' + data.payment.transferPrice + '</td>';
    //     strHtml += '</tr>';
    // }
    // if(data.payment.accountPrice && data.payment.accountPrice != 0) {
    //     strHtml += '<tr height="15px">';
    //     strHtml += '<td style="font-weight:900;">储值</td>';
    //     strHtml += '<td >' + data.payment.accountPrice + '</td>';
    //     strHtml += '</tr>';
    // }
    // if(data.payment.frozenAccountPrice && data.payment.frozenAccountPrice != 0) {
    //     strHtml += '<tr height="15px">';
    //     strHtml += '<td style="font-weight:900;">冻结</td>';
    //     strHtml += '<td >' + data.payment.frozenAccountPrice + '</td>';
    //     strHtml += '</tr>';
    // }
    strHtml += '</table></td></tr>';
    strHtml += '</table>';
    strHtml += '</body>';

    KlxxPrint(strHtml);
}


function CreatePrintPage04(data) {
//04充值  对公报表处还有
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
    strHtml += 'tr td{ height:24px; line-height:24px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block" border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + data[0].rechargeInfo.ORG_NAME + '	经办人:' + data[0].rechargeInfo.EMPLOYEE_NAME + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center" style="font-weight:900;">';
    strHtml += '<td width="150">学员编号</td>';
    strHtml += '<td width="66">学员姓名</td>';
    strHtml += '<td width="185">单据编号</td>';
    strHtml += '<td width="68">业务类型</td>';
//	strHtml += '<td width="135">业务校区</td>';
//	strHtml += '<td width="54">经办人</td>';
    strHtml += '<td width="76">业务日期</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>'+data[0].rechargeInfo.S_ENCODING+'</td>';
    strHtml += '<td>'+data[0].rechargeInfo.STUDENT_NAME+'</td>';
    strHtml += '<td>'+data[0].rechargeInfo.R_ENCODING+'</td>';
    strHtml += '<td>充值</td>';
//	strHtml += '<td>'+data.rechargeInfo.ORG_NAME+'</td>';
//	strHtml += '<td>'+data.rechargeInfo.EMPLOYEE_NAME+'</td>';
    strHtml += '<td>'+data[0].rechargeInfo.INPUT_TIME+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="left">';
    strHtml += '<td colspan="7">充值信息：</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px" style="margin-top:15px">';
    strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    // strHtml += '<td>操作账户</td>';
    strHtml += '<td>方式</td>';
    strHtml += '<td>操作金额</td>';
    strHtml += '<td>备注</td>';
    strHtml += '</tr>';
    for(var i=0;i<data.length;i++){
        strHtml += '<tr align="center">';
        strHtml += '<td>' + (i + 1) + '</td>';
        // strHtml += '<td>'+data[i].rechargeInfo.NAME+'</td>';
        strHtml += '<td>'+data[i].rechargeInfo.PAY_NAME+'</td>';//缴费方式
        strHtml += '<td>￥'+data[i].rechargeInfo.MONEY+'</td>';
        strHtml += '<td>'+ fitlerEmptyReturn(data[i].rechargeInfo.REMARK, '')+'</td>';
        strHtml += '</tr>';
    }
    strHtml += '</table></td></tr>';
    strHtml += '</table>';
    strHtml += '</body>';
    KlxxPrint(strHtml);
}

function CreatePrintPage04Xiamen(data) {
//04充值  对公报表处还有
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
    strHtml += 'tr td{ height:24px; line-height:24px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center;">';
    strHtml += '<table width="660px" style="display:inline-block;"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + data[0].rechargeInfo.ORG_NAME.replace('个性化','').replace('培英精品班','').replace('大小班','') + '	经办人:' + data[0].rechargeInfo.EMPLOYEE_NAME + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center" style="font-weight:900;">';
    strHtml += '<td width="66">学员姓名</td>';
    strHtml += '<td width="68">业务类型</td>';
//	strHtml += '<td width="135">业务校区</td>';
//	strHtml += '<td width="54">经办人</td>';
    strHtml += '<td width="76">业务日期</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>'+data[0].rechargeInfo.STUDENT_NAME+'</td>';
    strHtml += '<td>充值</td>';
//	strHtml += '<td>'+data.rechargeInfo.ORG_NAME+'</td>';
//	strHtml += '<td>'+data.rechargeInfo.EMPLOYEE_NAME+'</td>';
    strHtml += '<td>'+data[0].rechargeInfo.INPUT_TIME+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="left">';
    strHtml += '<td colspan="7">充值信息：</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px" style="margin-top:15px">';
    strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    // strHtml += '<td>操作账户</td>';
    strHtml += '<td>方式</td>';
    strHtml += '<td>操作金额</td>';
    strHtml += '</tr>';
    for(var i=0;i<data.length;i++){
        strHtml += '<tr align="center">';
        strHtml += '<td>' + (i + 1) + '</td>';
        // strHtml += '<td>'+data[i].rechargeInfo.NAME+'</td>';
        strHtml += '<td>'+data[i].rechargeInfo.PAY_NAME+'</td>';//缴费方式
        strHtml += '<td>￥'+data[i].rechargeInfo.MONEY+'</td>';
        strHtml += '</tr>';
    }
    strHtml += '</table></td></tr>';
    strHtml += '</table>';
    strHtml += '</body>';
    KlxxPrint(strHtml);
}

function CreatePrintPage05(data) {
//05转账
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
    strHtml += 'tr td{ height:24px; line-height:24px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto ;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + data.transferInfo.ORG_NAME + '	经办人:' + data.transferInfo.EMPLOYEE_NAME + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center" style="font-weight:900;">';
    strHtml += '<td width="150">学员编号</td>';
    strHtml += '<td width="66">学员姓名</td>';
    strHtml += '<td width="185">单据编号</td>';
    strHtml += '<td width="68">业务类型</td>';
//	strHtml += '<td width="135">业务校区</td>';
//	strHtml += '<td width="54">经办人</td>';
    strHtml += '<td width="76">业务日期</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>'+data.transferInfo.S_ENCODING+'</td>';
    strHtml += '<td>'+data.transferInfo.STUDENT_NAME+'</td>';
    strHtml += '<td>'+data.transferInfo.D_ENCODING+'</td>';
    strHtml += '<td>转账</td>';
//	strHtml += '<td>'+data.transferInfo.ORG_NAME+'</td>';
//	strHtml += '<td>'+data.transferInfo.EMPLOYEE_NAME+'</td>';
    strHtml += '<td>'+data.transferInfo.INPUT_TIME+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="left">';
    strHtml += '<td colspan="7">转账信息：</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px" style="margin-top:15px">';
    strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    strHtml += '<td>转出账户</td>';
    strHtml += '<td>转入学员</td>';
    strHtml += '<td>转入账户</td>';
    strHtml += '<td>操作金额</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>1</td>';
    strHtml += '<td>'+data.transferInfo.OUTPUT_PRODUCT_LINE+'</td>';
    strHtml += '<td>'+data.transferInfo.INPUT_STU_NAME+'</td>';
    strHtml += '<td>'+data.transferInfo.INPUT_PRODUCT_LINE+'</td>';
    strHtml += '<td>￥'+data.transferInfo.MONEY+'</td>';
    strHtml += '</tr>';
    strHtml += '</table></td></tr>';

    strHtml += '</table>';
    strHtml += '</body>';

    KlxxPrint(strHtml);
}

function CreatePrintPage06(data) {
//06理赔
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
    strHtml += 'tr td{ height:24px; line-height:24px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto ;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + data.claimInfo.ORG_NAME + '	经办人:' + data.claimInfo.EMPLOYEE_NAME + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center" style="font-weight:900;">';
    strHtml += '<td width="160">学员编号</td>';
    strHtml += '<td width="66">学员姓名</td>';
    strHtml += '<td width="185">单据编号</td>';
    strHtml += '<td width="68">业务类型</td>';
//	strHtml += '<td width="140">业务校区</td>';
//	strHtml += '<td width="54">经办人</td>';
    strHtml += '<td width="76">业务日期</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>'+data.claimInfo.S_ENCODING+'</td>';
    strHtml += '<td>'+data.claimInfo.STUDENT_NAME+'</td>';
    strHtml += '<td>'+data.claimInfo.D_ENCODING+'</td>';
    strHtml += '<td>理赔</td>';
//	strHtml += '<td>'+data.claimInfo.ORG_NAME+'</td>';
//	strHtml += '<td>'+data.claimInfo.EMPLOYEE_NAME+'</td>';
    strHtml += '<td>'+data.claimInfo.INPUT_TIME+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="left">';
    strHtml += '<td colspan="7">理赔信息：</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px" style="margin-top:15px">';
    strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    strHtml += '<td>理赔金额</td>';
    strHtml += '<td>账户</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>1</td>';
    strHtml += '<td>￥'+data.claimInfo.MONEY+'</td>';
    strHtml += '<td>'+data.claimInfo.PRODUCT_LINE+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="left">';
    strHtml += '<td colspan="3">理赔原因：'+data.claimInfo.REMARK+'</td>';
    strHtml += '</tr>';

    strHtml += '</table></td></tr>';
    strHtml += '</table>';
    strHtml += '</body>';

    KlxxPrint(strHtml);

}

function CreatePrintPage06Xiamen(data) {
//06理赔
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
    strHtml += 'tr td{ height:24px; line-height:24px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + data.claimInfo.ORG_NAME.replace('个性化','').replace('培英精品班','').replace('大小班','') + '	经办人:' + data.claimInfo.EMPLOYEE_NAME + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center" style="font-weight:900;">';
    strHtml += '<td width="66">学员姓名</td>';
    strHtml += '<td width="68">业务类型</td>';
//	strHtml += '<td width="140">业务校区</td>';
//	strHtml += '<td width="54">经办人</td>';
    strHtml += '<td width="76">业务日期</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>'+data.claimInfo.S_ENCODING+'</td>';
    strHtml += '<td>'+data.claimInfo.STUDENT_NAME+'</td>';
    strHtml += '<td>'+data.claimInfo.D_ENCODING+'</td>';
    strHtml += '<td>理赔</td>';
//	strHtml += '<td>'+data.claimInfo.ORG_NAME+'</td>';
//	strHtml += '<td>'+data.claimInfo.EMPLOYEE_NAME+'</td>';
    strHtml += '<td>'+data.claimInfo.INPUT_TIME+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="left">';
    strHtml += '<td colspan="7">理赔信息：</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px" style="margin-top:15px">';
    strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
    strHtml += '<td>编号</td>';
    strHtml += '<td>理赔金额</td>';
    strHtml += '<td>账户</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="center">';
    strHtml += '<td>1</td>';
    strHtml += '<td>￥'+data.claimInfo.MONEY+'</td>';
    strHtml += '<td>'+data.claimInfo.PRODUCT_LINE+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr align="left">';
    strHtml += '<td colspan="3">理赔原因：'+data.claimInfo.REMARK+'</td>';
    strHtml += '</tr>';

    strHtml += '</table></td></tr>';

    strHtml += '</table>';
    strHtml += '</body>';
    KlxxPrint(strHtml);

}

//退费
function CreatePrintPageForRefund (refund){
    var strHtml = '<style type="text/css">';
    strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; }';
    strHtml += 'tr.Line td{ border-top:1px;}';
    strHtml += 'tr td{ height:15px; line-height:15px;}';
    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    strHtml += '</style>';
    strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    strHtml += '<tr><td>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" style="font-weight:900;">';
    strHtml += '<td colspan="5">业务校区:' + refund.branch_name + '	                 日期:' + Format("yyyy-MM-dd", new Date(refund.create_time)) + '</td>';
    strHtml += '</tr>';
    strHtml += '<tr height="15px" style="font-weight:900;">';
    strHtml += '<td align="center">学员姓名</td>';
    strHtml += '<td width="63%" align="left">业务类型</td>';
    strHtml += '</tr>';
    strHtml += '<tr>';
    strHtml += '<td align="center"  >'+ refund.student_name + '(' + refund.student_encoding + ')' +'</td>';
    strHtml += '<td width="63%"  align="left">退费</td>';
    strHtml += '</tr>';
    strHtml += '</table>';

    strHtml += '<table border="0" width="660px" align="center">';
    strHtml += '<tr align="left" height="15px" style="font-weight:900;">';
    strHtml += '<td>单据编号</td>';
    strHtml += '<td>退费总金额</td>';
    strHtml += '</tr>';
    strHtml += '<tr>';
    strHtml += '<td>'+ refund.encoding +'</td>';
    strHtml += '<td>￥'+ refund.fee_amount +'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';
    strHtml += '</body>';

    KlxxPrint(strHtml);
}
// 一对一考勤打印
function CreatePrintPageYdyAttendance(data) {

    var strHtml ='<body>';
    strHtml +='<table style="width:700px;font-size: 14px;height:30px"><tr><td></td></tr></table>';
    strHtml +='<table style="width:600px;font-size: 14px;line-height:16px;font-weight: 500;margin:0 0 0 30px;">';
    strHtml +='<tr>';
    strHtml +='<td>单据编号：</td>';
    strHtml +='<td>'+data[0].encoding+'</td>';
    strHtml +='<td>教师姓名：</td>';
    strHtml +='<td>'+data[0].attTeacherName.substr(0,4)+'</td>';
    strHtml +='<td>科目：</td>';
    strHtml +='<td>'+data[0].subject_name+'</td>';
    strHtml +='<td style="width:70px"></td>'
    strHtml +='</tr>';
    strHtml += '<tr>';
    strHtml +='<td>课程：</td>';
    strHtml += '<td>'+data[0].course_name.substr(0,13)+'</td>';
    strHtml +='<td></td>';
    strHtml +='<td></td>';
    strHtml += '<td>学管师：</td>';
    strHtml +='<td>'+data[0].counselor_name.substr(0,4)+'</td>';
    strHtml +='</tr>';
    strHtml +='<tr>';
    strHtml +='<td>上课日期：</td>';
    strHtml +='<td>'+(data[0].course_date+'').substring(0, 4)+'-'+(data[0].course_date+'').substring(4, 6)+'-'+(data[0].course_date+'').substring(6, 8)+'</td>';
    strHtml += '<td>上课时间：</td>';
    strHtml +='<td>'+data[0].start_time+'</td>';
    strHtml +='<td>下课时间：</td>';
    strHtml += '<td>'+data[0].end_time+'</td>';
    strHtml += '</tr>';
    strHtml += '<tr>';
    strHtml +='<td>学生姓名：</td>';
    strHtml +='<td>'+data[0].student_name+'</td>';
    strHtml +='<td>年级：</td>';
    strHtml +='<td>'+data[0].grade_name+'</td>';
    strHtml +='<td></td>';
    strHtml +='<td></td>';
    strHtml += '</tr>';
    strHtml += '</table>';
    strHtml +='<table style="width:700px;font-size: 14px;height:80px"><tr><td></td></tr></table>';
    strHtml +='<table style="width:700px;font-size: 14px;line-height:16px;font-weight: 500; margin:0 0 0 30px">';
    strHtml +='<tr>';
    strHtml +='<td>单据编号：</td>';
    strHtml +='<td>'+data[0].encoding+'</td>';
    strHtml +='<td>教师姓名：</td>';
    strHtml +='<td>'+data[0].attTeacherName.substr(0,4)+'</td>';
    strHtml +='<td>科目：</td>';
    strHtml +='<td>'+data[0].subject_name+'</td>';
    strHtml +='</tr>';
    strHtml += '<tr>';
    strHtml += '<td>课程：</td>';
    strHtml += '<td>'+data[0].course_name.substr(0,13)+'</td>';
    strHtml +='<td></td>';
    strHtml += '<td></td>';
    strHtml +='<td>学管师：</td>';
    strHtml +='<td>'+data[0].counselor_name.substr(0,4)+'</td>';
    strHtml +='</tr>';
    strHtml +='<tr>';
    strHtml += '<td>上课日期：</td>';
    strHtml +='<td>'+(data[0].course_date+'').substring(0, 4)+'-'+(data[0].course_date+'').substring(4, 6)+'-'+(data[0].course_date+'').substring(6, 8)+'</td>';
    strHtml +='<td>上课时间：</td>';
    strHtml +='<td>'+data[0].start_time+'</td>';
    strHtml +='<td>下课时间：</td>';
    strHtml += '<td>'+data[0].end_time+'</td>';
    strHtml +='</tr>';
    strHtml +='<tr>';
    strHtml +='<td>学生姓名：</td>';
    strHtml +=  '<td>'+data[0].student_name.substr(0,8)+'</td>';
    strHtml += '<td>年级：</td>';
    strHtml += '<td>'+data[0].grade_name+'</td>';
    strHtml += '</tr>';
    strHtml += '</table>';
    strHtml +='<table style="width:700px;font-size: 14px;height:270px"><tr><td></td></tr></table>';
    strHtml +='<table style="width:700px;font-size: 14px;line-height:16px;font-weight: 500;margin:0 0 0 30px">';
    strHtml += '<tr>';
    strHtml +=  '<td>学生姓名：</td>';
    strHtml +='<td>'+data[0].student_name.substr(0,8)+'</td>';
    strHtml += '<td style="padding-left: 50px">教师姓名：</td>';
    strHtml += '<td>'+data[0].attTeacherName.substr(0,4)+'</td>';
    strHtml +=  '<td >日期：</td>';
    strHtml += '<td>'+(data[0].course_date+'').substring(0, 4)+'-'+(data[0].course_date+'').substring(4, 6)+'-'+(data[0].course_date+'').substring(6, 8)+'</td>';
    strHtml += '<td>科目：</td>';
    strHtml += '<td>'+data[0].subject_name+'</td>';
    strHtml += '</tr>';
    strHtml +='<tr>';
    strHtml +=' <td>学管师：</td>';
    strHtml +='<td>'+data[0].counselor_name+'</td>';
    strHtml +='<td style="padding-left: 50px">单据编号：</td>';
    strHtml +='<td >'+data[0].encoding+'</td>';
    strHtml += '<td></td>';
    strHtml += '<td></td>';
    strHtml +='<td>时间：</td>';
    strHtml +='<td>'+data[0].start_time+'-'+data[0].end_time+'</td>';
    strHtml +='</tr>';
    strHtml += '</table>';
    strHtml +='</body>';
    ydyAttendanceQrcode(strHtml,data);
}
//批量打印
function CreatePrintPageMoreYdyAttendance(data) {
    var array=[];
    for(var i=0;i<data.length;i++){
    var strHtml ='<body>';
        strHtml +='<table style="width:700px;font-size: 14px;height:30px"><tr><td></td></tr></table>';
        strHtml +='<table style="width:600px;font-size: 14px;line-height:16px;font-weight: 500;margin:0 0 0 30px;">';
        strHtml +='<tr>';
        strHtml +='<td>单据编号：</td>';
        strHtml +='<td>'+data[i].encoding+'</td>';
        strHtml +='<td>教师姓名：</td>';
        strHtml +='<td>'+data[i].attTeacherName.substr(0,4)+'</td>';
        strHtml +='<td>科目：</td>';
        strHtml +='<td>'+data[i].subject_name+'</td>';
        strHtml +='<td style="width:70px"></td>'
        strHtml +='</tr>';
        strHtml += '<tr>';
        strHtml +='<td>课程：</td>';
        strHtml += '<td>'+data[i].course_name.substr(0,13)+'</td>';
        strHtml +='<td></td>';
        strHtml +='<td></td>';
        strHtml += '<td>学管师：</td>';
        strHtml +='<td>'+data[i].counselor_name.substr(0,4)+'</td>';
        strHtml +='</tr>';
        strHtml +='<tr>';
        strHtml +='<td>上课日期：</td>';
        strHtml +='<td>'+(data[i].course_date+'').substring(0, 4)+'-'+(data[i].course_date+'').substring(4, 6)+'-'+(data[i].course_date+'').substring(6, 8)+'</td>';
        strHtml += '<td>上课时间：</td>';
        strHtml +='<td>'+data[i].start_time+'</td>';
        strHtml +='<td>下课时间：</td>';
        strHtml += '<td>'+data[i].end_time+'</td>';
        strHtml += '</tr>';
        strHtml += '<tr>';
        strHtml +='<td>学生姓名：</td>';
        strHtml +='<td>'+data[i].student_name+'</td>';
        strHtml +='<td>年级：</td>';
        strHtml +='<td>'+data[i].grade_name+'</td>';
        strHtml +='<td></td>';
        strHtml +='<td></td>';
        strHtml += '</tr>';
        strHtml += '</table>';
        strHtml +='<table style="width:700px;font-size: 14px;height:80px"><tr><td></td></tr></table>';
        strHtml +='<table style="width:700px;font-size: 14px;line-height:16px;font-weight: 500; margin:0 0 0 30px">';
        strHtml +='<tr>';
        strHtml +='<td>单据编号：</td>';
        strHtml +='<td>'+data[i].encoding+'</td>';
        strHtml +='<td>教师姓名：</td>';
        strHtml +='<td>'+data[i].attTeacherName.substr(0,4)+'</td>';
        strHtml +='<td>科目：</td>';
        strHtml +='<td>'+data[i].subject_name+'</td>';
        strHtml +='</tr>';
        strHtml += '<tr>';
        strHtml += '<td>课程：</td>';
        strHtml += '<td>'+data[i].course_name.substr(0,13)+'</td>';
        strHtml +='<td></td>';
        strHtml += '<td></td>';
        strHtml +='<td>学管师：</td>';
        strHtml +='<td>'+data[i].counselor_name.substr(0,4)+'</td>';
        strHtml +='</tr>';
        strHtml +='<tr>';
        strHtml += '<td>上课日期：</td>';
        strHtml +='<td>'+(data[i].course_date+'').substring(0, 4)+'-'+(data[i].course_date+'').substring(4, 6)+'-'+(data[i].course_date+'').substring(6, 8)+'</td>';
        strHtml +='<td>上课时间：</td>';
        strHtml +='<td>'+data[i].start_time+'</td>';
        strHtml +='<td>下课时间：</td>';
        strHtml += '<td>'+data[i].end_time+'</td>';
        strHtml +='</tr>';
        strHtml +='<tr>';
        strHtml +='<td>学生姓名：</td>';
        strHtml +=  '<td>'+data[i].student_name.substr(0,8)+'</td>';
        strHtml += '<td>年级：</td>';
        strHtml += '<td>'+data[i].grade_name+'</td>';
        strHtml += '</tr>';
        strHtml += '</table>';
        strHtml +='<table style="width:700px;font-size: 14px;height:270px"><tr><td></td></tr></table>';
        strHtml +='<table style="width:700px;font-size: 14px;line-height:16px;font-weight: 500;margin:0 0 0 30px">';
        strHtml += '<tr>';
        strHtml +=  '<td>学生姓名：</td>';
        strHtml +='<td>'+data[i].student_name.substr(0,8)+'</td>';
        strHtml += '<td style="padding-left: 50px">教师姓名：</td>';
        strHtml += '<td>'+data[i].attTeacherName.substr(0,4)+'</td>';
        strHtml +=  '<td >日期：</td>';
        strHtml += '<td>'+(data[i].course_date+'').substring(0, 4)+'-'+(data[i].course_date+'').substring(4, 6)+'-'+(data[i].course_date+'').substring(6, 8)+'</td>';
        strHtml += '<td>科目：</td>';
        strHtml += '<td>'+data[i].subject_name+'</td>';
        strHtml += '</tr>';
        strHtml +='<tr>';
        strHtml +=' <td>学管师：</td>';
        strHtml +='<td>'+data[i].counselor_name+'</td>';
        strHtml +='<td style="padding-left: 50px">单据编号：</td>';
        strHtml +='<td >'+data[i].encoding+'</td>';
        strHtml += '<td></td>';
        strHtml += '<td></td>';
        strHtml +='<td>时间：</td>';
        strHtml +='<td>'+data[i].start_time+'-'+data[i].end_time+'</td>';
        strHtml +='</tr>';
        strHtml += '</table>';
        strHtml +='</body>';
    array.push(strHtml);
        }
    ydyAttendanceMoreQrcode(array,data);
    }

angular.module('ework-ui')
  .factory('$uibMsgbox', ['$uibModal', $uibMsgbox])
  .filter('trustHtml', function ($sce) {
        return function (input) {
            return $sce.trustAsHtml(input);
        }
    })

function $uibMsgbox($uibModal) {
  
  function openDialog(conf) {
    return $uibModal.open({
      animation: true,
      // size: 'sm',
      backdrop: 'static',
      controllerAs: '$ctrl',
      template: '<div class="msgbox"><div class="modal-header">'
            + '<h3 class="modal-title" id="modal-title"><i class="iconfont {{iconCls}} mr5"></i>{{title}}<button type="button" class="close" ng-click="$dismiss()"><span aria-hidden="true">×</span>  </button></h3>'
        + '</div>'
        + '<div class="modal-body" id="modal-body">'
            + '<div class="content" ng-bind-html="content|trustHtml"></div>'
        + '</div>'
        + '<div class="modal-footer" style="text-align:center;">'
            + '<button ng-if="showCancelBtn" class="btn btn-default" ng-click="$ctrl.cancel()">{{cancelText}}</button>'
            + '<button class="btn btn-primary" ng-click="$ctrl.ok()">{{okText}}</button>'
        + '</div></div>',
      resolve: {
        conf: function () {
          return conf
        }
      },
      controller: function ($scope, $uibModalInstance,conf) {
        var $ctrl = this;
        $scope.title = conf.title;
        $scope.content = conf.content;
        $scope.iconCls = conf.iconCls;       
        if (typeof conf.showCancelBtn != 'undefined') {
          $scope.showCancelBtn = conf.showCancelBtn;
        } else {
          $scope.showCancelBtn = true;
        }
        $scope.okText = conf.okText || '确定';
        $scope.cancelText = conf.cancelText || '取消';

        $ctrl.ok = function () {
          $uibModalInstance.close('yes')
        }
        $ctrl.cancel = function () {
          $uibModalInstance.dismiss('cancel')
        }
      }
    }).result.then(function () {
      conf.callback('yes')
    }, function () {
      conf.callback('cancel')
    })
  }

  return {
    alert: function () {
      var content = arguments[0] || '';
      var title = typeof arguments[1] == 'string' ? arguments[1] : '提示'
      var callback = typeof arguments[1] == 'function' ? arguments[1]
        : typeof arguments[2] == 'function' ? arguments[2]
        : function () {}
      openDialog({
        type: 'alert',
        content: content,
        title: title || '提示',
        showCancelBtn: false,
        iconCls: 'icon-public_reminder i-text-primary',
        callback: callback
      })
    },
    success: function () {
      var content = arguments[0] || '';
      var title = typeof arguments[1] == 'string' ? arguments[1] : '成功'
      var callback = typeof arguments[1] == 'function' ? arguments[1]
        : typeof arguments[2] == 'function' ? arguments[2]
        : function () {}
      openDialog({
        type: 'success',
        showCancelBtn: false,
        iconCls: 'icon-public_succeed i-text-success',
        content: content,
        title: title || '成功',
        callback: callback
      })
    },
    confirm: function () {
      var content = '',
        title = '提示',
        cancelText = '取消',
        okText = '确定',
        callback = null,
        showCancelBtn = true;

      if (typeof arguments[0] == 'object') {
        var conf = arguments[0]
        content = conf.content;
        title = conf.title || title;
        cancelText = conf.cancelText || cancelText;
        okText = conf.okText || okText;
        if (typeof conf.showCancelBtn != 'undefined') {
          showCancelBtn = conf.showCancelBtn;
        }
        callback = conf.callback || function () {}
      } else {
        var content = arguments[0] || '';
        var title = typeof arguments[1] == 'string' ? arguments[1] : '提示'
        var callback = typeof arguments[1] == 'function' ? arguments[1]
          : typeof arguments[2] == 'function' ? arguments[2]
          : function () {}
      }

      openDialog({
        type: 'confirm',
        iconCls: 'icon-public_warning i-text-warning',
        content: content,
        title: title,
        cancelText: cancelText,
        okText: okText,
        showCancelBtn: showCancelBtn,
        callback: callback
      })
    },
    warn: function () {
      var content = arguments[0] || '';
      var title = typeof arguments[1] == 'string' ? arguments[1] : '警告'
      var callback = typeof arguments[1] == 'function' ? arguments[1]
        : typeof arguments[2] == 'function' ? arguments[2]
        : function () {}
      openDialog({
        type: 'warn',
        iconCls: 'icon-public_warning i-text-warning',
        content: content,
        title: title,
        showCancelBtn: false,
        callback: callback
      })
    },
    error: function () {
      var content = arguments[0] || '';
      var title = typeof arguments[1] == 'string' ? arguments[1] : '错误'
      var callback = typeof arguments[1] == 'function' ? arguments[1]
        : typeof arguments[2] == 'function' ? arguments[2]
        : function () {}
      openDialog({
        type: 'warn',
        iconCls: 'icon-public_warning i-text-danger',
        content: content,
        title: title,
        showCancelBtn: false,
        callback: callback
      })
    },
    // waiting 
    waiting: function (content) {
      var uibModalInstance = null;
      content = content || '操作中，请稍候...'
      var modalInstance = $uibModal.open({
        animation: true,
        size: 'sm',
        backdrop: 'static',
        controllerAs: '$ctrl',
        template: '<div class="modal-body" id="modal-body">'
              + '<div class="content">{{content}}</div>'
          + '</div>',
        resolve: {
          conf: function () {
            return {
              content: content
            }
          }
        },
        controller: function ($scope, $uibModalInstance,conf) {
          var $ctrl = this;
          $scope.content = conf.content;
        }
      })
      return modalInstance
    },
    // 进度条
    progress: function () {
      return {
        setProgress: function () {

        }
      }
    },
    // TODO
    prompt: function (title, defaultValue, callback){
      var title = arguments[0] || '';
      var defaultValue = typeof arguments[1] == 'string' ? arguments[1] : ''
      var callback = typeof arguments[1] == 'function' ? arguments[1]
        : typeof arguments[2] == 'function' ? arguments[2]
        : function () {}
      openDialog({
        type: 'warn',
        iconCls: 'icon-public_reminder i-text-primary',
        content: content,
        title: title,
        callback: callback
      })
    }
  }
}
/**
 * 通用分页处理器
 * @author wCong
 * 	
 * 初始化
 * var test = new PageObj(.....);
 * test.init();
 * 
 * 变更条件查询
 * test.param.XX = YY;
 * test.page = 1; 从第一页开始
 * test.initPage();
 * 
 * 首页、上、下、末页
 * test.begin();
 * test.up();
 * test.down();
 * test.end();
 * 
 */
var PageObj = function(){
	var url = null;				//地址
	this.param = null;
	this.rows = null; 			//每页行数
	var totalIndex = null;   	//显示页码数 (偶数)
	this.page = null; 			//当前页
	var totalPage = null; 		//总页数
	var dataListDOM = null;		//数据DOM
	var parseMethod = null;  	//处理数据
	
	this.init = function(_url, _param, _parseMethod, _rows, _totalIndex, _page, _dataListDOM, _beginDOM, _upDOM, _downDOM, _endDOM){
		url = _url;
		this.param = _param;
		parseMethod = _parseMethod;
		if(_rows == null || _rows == undefined || _rows.length == 0)
			_rows = 8;//默认为每页8行数据
		if(_totalIndex == null || _totalIndex == undefined || _totalIndex.length == 0)
			_totalIndex = 10;//默认显示10个页码
		if(_page == null || _page == undefined || _page.length == 0)
			_page = 1;//默认当前页为第一页
		this.rows = _rows;
		totalIndex = _totalIndex;
		this.page = _page;
		dataListDOM = _dataListDOM;
		this.initAction(_beginDOM, _upDOM, _downDOM, _endDOM);
		this.initPage();
	};
	
	var pageCallBack = function(data){
		var appendList = "";
		var appendIndex = "";
		//总页数
		totalPage = data.totalPage;
		
		appendList = parseMethod(data);
		
		for(var i=1;i<totalIndex+1;i++){
			//总页数和显示页码数 比较
			var differ = totalPage - totalIndex;
			//当前 前(totalIndex/2)页
			var front = this.page - (totalIndex / 2);
			//当前 后(totalIndex/2)页
			var behind = this.page + (totalIndex / 2);
			var j = i;
			if(differ > 0 && front > 0){
				j +=  front;
			}
			if(j > totalPage)
				break;
			appendIndex += '<li onclick="this.selectPage(' + j + ')" class="pageIndex"><span>'+ j + '</span></li>';
		}
		
		//展示数据
		dataListDOM.html(appendList);
		//清除原页码 新增新页码
		$('.pageIndex').remove();
//		$('#up').after(appendIndex);
		//展示记录数
		/*$('#floor').html('第【'  + this.page + '】页 共【' + data.totalPage + '】页  总计【' + data.total + '】条记录');*/
	};
	
	this.initPage = function(){
		this.param.page = this.page;
		this.param.rows = this.rows;
		toolAjax(url, 'post', this.param, pageCallBack, 'json')
	};
	
	this.initAction = function(beginDOM, upDOM, downDOM, endDOM){
		try {
			beginDOM.bind('click', this.begin);
			upDOM.bind('click', this.up);
			downDOM.bind('click', this.down);
			endDOM.bind('click', this.end);
		} catch (e) {
		}
	};
	
	this.begin = function(){
		//首页
		this.page = 1;
		this.initPage();
	};
	this.up = function(){
		//上一页
		if(this.page == 1){
			return;
		}
		this.page = this.page - 1;
		this.initPage();
	};
	this.down = function(){
		//下一页
		if(this.page == totalPage){
			return;
		}
		this.page = this.page + 1;
		this.initPage();
	};
	this.end = function(){
		//末页
		this.page = totalPage;
		this.initPage();
	};
	this.selectPage = function(_page){
		//当前选中页
		this.page = _page;
		this.initPage();
	};
	
};
var LODOP = null;
/**
 * 打印一段html
 * @param strHtml
 */
function KlxxPrint(strHtml) {
	LODOP = getLodop();
	if (LODOP.PRINT_INIT && LODOP.ADD_PRINT_HTM && LODOP.PREVIEW) {
		LODOP.PRINT_INIT();
		LODOP.ADD_PRINT_HTM(0, 0, "210mm", 680, strHtml);
		LODOP.PREVIEW();
	}
}
//单选打印
var ydyAttendanceQrcode = function(strHtml,infos) {
    LODOP = getLodop();
    if (LODOP.PRINT_INIT && LODOP.ADD_PRINT_HTM && LODOP.PREVIEW) {
        LODOP.PRINT_INIT();
        LODOP.ADD_PRINT_HTM(0, 0, "210mm", 680, strHtml);
        LODOP.ADD_PRINT_BARCODE(30,630,120,120,"QRCode",infos[0].encoding);
        LODOP.PREVIEW();
    }

}
//批量打印
var ydyAttendanceMoreQrcode = function(array,infos) {
    LODOP = getLodop();
    if (LODOP.PRINT_INIT && LODOP.ADD_PRINT_HTM && LODOP.PREVIEW) {
        LODOP.PRINT_INIT();
        for (var i=0;i<infos.length;i++){
            LODOP.ADD_PRINT_HTM(0, 0, "210mm", 680, array[i]);
            LODOP.ADD_PRINT_BARCODE(30,630,120,120,"QRCode",infos[i].encoding);
            LODOP.NEWPAGE();//强制分页
        }
        LODOP.PREVIEW();
    }
    }



var	PrintUtil = {
		LODOP: null,

		printPage01: function(data){
			LODOP=getLodop(document.getElementById('LODOP_OB'),document.getElementById('LODOP_EM'));
			//01报班
				var strHtml = '<style type="text/css">';
				strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
				strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
				strHtml += 'tr td{ height:15px; line-height:15px;}';
				 strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
				strHtml += '</style>';
				strHtml += '<table width="660px" style="margin:180px 0 0 90px;" height="600px" border="0" cellspacing="0" cellpadding="0">';
				strHtml += '<tr height="300px"><td ></td></tr>';
				strHtml += '<tr height="330px"><td>';

				strHtml += '<table border="0" width="660px" height="48" align="center">';
				strHtml += '<tr align="left" style="font-weight:900;">';
				strHtml += '<td colspan="5">业务校区:' + data.orderInfo.ORG_NAME + '	经办人:' + data.orderInfo.EMPLOYEE_NAME + '</td>';
				strHtml += '</tr>';
				strHtml += '<tr align="center" style="font-weight:900;">';
				strHtml += '<td width="150">学员编号</td>';
				strHtml += '<td width="66">学员姓名</td>';
				strHtml += '<td width="185">单据编号</td>';
				strHtml += '<td width="68">业务类型</td>';
//				strHtml += '<td width="135">业务校区</td>';
//				strHtml += '<td width="54">经办人</td>';
				strHtml += '<td width="76">业务日期</td>';
				strHtml += '</tr>';
				strHtml += '<tr align="center">';
				strHtml += '<td>'+data.orderInfo.ENCODING+'</td>';
				strHtml += '<td>'+data.orderInfo.STUDENT_NAME+'</td>';
				strHtml += '<td>'+data.orderInfo.ORDER_CODE+'</td>';
				strHtml += '<td>报班</td>';
//				strHtml += '<td>'+data.orderInfo.ORG_NAME+'</td>';
//				strHtml += '<td>'+data.orderInfo.EMPLOYEE_NAME+'</td>';
				strHtml += '<td>'+data.orderInfo.CREATE_TIME+'</td>';
				strHtml += '</tr>';
				strHtml += '</table>';

				strHtml += '<table border="0" width="660px" height="48">';
				strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
				strHtml += '<td>编号</td>';
				strHtml += '<td>课程商品名称</td>';
//				strHtml += '<td>课程说明</td>';
				strHtml += '<td>上课时间</td>';
				strHtml += '<td>下课时间</td>';
				strHtml += '<td>报班课时</td>';
				strHtml += '<td>报班总金额</td>';
				strHtml += '</tr>';
				for(var i = 0 ; i < data.orderDetailList.length ; i++){
					strHtml += '<tr align="center">';
					strHtml += '<td>'+(i+1)+'</td>';
					strHtml += '<td>'+data.orderDetailList[i].COURSE_NAME+'</td>';
//					strHtml += '<td>'+data.orderDetailList[i].REMARK+'</td>';
					strHtml += '<td>'+data.orderDetailList[i].START_TIME+'</td>';
					strHtml += '<td>'+data.orderDetailList[i].END_TIME+'</td>';
					strHtml += '<td>'+data.orderDetailList[i].COURSE_TOTAL_COUNT+'</td>';
					strHtml += '<td>￥'+data.orderDetailList[i].SUM_PRICE+'</td>';
					strHtml += '</tr>';
				}

				strHtml += '</table>';

				strHtml += '<table border="0" width="660px" height="24">';
				strHtml += '<tr height="15px">';
				strHtml += '<td style="font-weight:900;">优惠金额：'+(data.orderInfo.SUM_PRICE-data.orderInfo.ACTUAL_PRICE)+'</td>';
				strHtml += '<td style="font-weight:900;">实际需缴费金额：￥'+data.orderInfo.ACTUAL_PRICE+'</td>';
				strHtml += '<td style="font-weight:900;">已缴费金额：￥'+data.orderInfo.ACTUAL_PRICE+'</td>';
				strHtml += '</tr>';
				strHtml += '</table>';

				strHtml += '<table border="0" width="660px" height="24">';
				for(var i = 0 ; i < data.payDetailList.length ; i++){
					strHtml += '<tr height="15px">';
					strHtml += '<td style="font-weight:900;">缴费明细：</td>';
					strHtml += '<td>'+ convertPayName(data.payDetailList[i].PAYMENT_WAY) + '</td>';
					//strHtml += '<td>'+ convertPayName(data.payDetailList[i].PAY_NAME) + '</td>';
					strHtml += '<td>￥'+data.payDetailList[i].STAFFAPPPREM+'</td>';
					strHtml += '<td>'+data.payDetailList[i].ORG_NAME+'</td>';
//					strHtml += '<td>'+ fitlerEmpty(data.payDetailList[i].CLIENT_CARD_NO) + '</td>';
					strHtml += '<td>'+data.payDetailList[i].CREATE_TIME+'</td>';
					strHtml += '</tr>';
				}
				for(var i = 0 ; i < 10-data.payDetailList.length-data.orderDetailList.length ; i++){
					strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
				}
				strHtml += '</table></td></tr>';
				strHtml += '</table>';

				LODOP.ADD_PRINT_HTM(0,0,"210mm",680,strHtml);
				// LODOP.PRINT();
				LODOP.PREVIEW();
		},
		printPage03: function(data){
			LODOP=getLodop(document.getElementById('LODOP_OB'),document.getElementById('LODOP_EM'));

			//03充值
				var strHtml = '<style type="text/css">';
				strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
				strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
				strHtml += 'tr td{ height:24px; line-height:24px;}';
				 strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
				strHtml += '</style>';
				strHtml += '<table width="660px" style="margin:80px 0 0 90px;" height="600px" border="0" cellspacing="0" cellpadding="0">';
				strHtml += '<tr height="300px"><td ></td></tr>';
				strHtml += '<tr height="330px"><td>';

				strHtml += '<table border="0" width="660px" height="48" align="center">';
				strHtml += '<tr align="left" style="font-weight:900;">';
				strHtml += '<td colspan="5">业务校区:' + data.rechargeInfo.ORG_NAME + '	经办人:' + data.rechargeInfo.EMPLOYEE_NAME + '</td>';
				strHtml += '</tr>';
				strHtml += '<tr align="center" style="font-weight:900;">';
				strHtml += '<td width="150">学员编号</td>';
				strHtml += '<td width="66">学员姓名</td>';
				strHtml += '<td width="185">单据编号</td>';
				strHtml += '<td width="68">业务类型</td>';
//				strHtml += '<td width="135">业务校区</td>';
//				strHtml += '<td width="54">经办人</td>';
				strHtml += '<td width="76">业务日期</td>';
				strHtml += '</tr>';
				strHtml += '<tr align="center">';
				strHtml += '<td>'+data.rechargeInfo.S_ENCODING+'</td>';
				strHtml += '<td>'+data.rechargeInfo.STUDENT_NAME+'</td>';
				strHtml += '<td>'+data.rechargeInfo.R_ENCODING+'</td>';
				strHtml += '<td>充值</td>';
//				strHtml += '<td>'+data.rechargeInfo.ORG_NAME+'</td>';
//				strHtml += '<td>'+data.rechargeInfo.EMPLOYEE_NAME+'</td>';
				strHtml += '<td>'+data.rechargeInfo.INPUT_TIME+'</td>';
				strHtml += '</tr>';
				strHtml += '<tr align="left">';
				strHtml += '<td colspan="7">充值信息：</td>';
				strHtml += '</tr>';
				strHtml += '</table>';

				strHtml += '<table border="0" width="660px" height="48" style="margin-top:15">';
				strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
				strHtml += '<td>编号</td>';
				strHtml += '<td>操作账户</td>';
				strHtml += '<td>方式</td>';
				strHtml += '<td>操作金额</td>';
				strHtml += '<td>备注</td>';
				strHtml += '</tr>';
				strHtml += '<tr align="center">';
				strHtml += '<td>1</td>';
				strHtml += '<td>'+data.rechargeInfo.NAME+'</td>';
				strHtml += '<td>'+convertPayName(data.rechargeInfo.PAY_NAME)+'</td>';
				strHtml += '<td>￥'+data.rechargeInfo.MONEY+'</td>';
				strHtml += '<td>'+ fitlerEmptyReturn(data.rechargeInfo.REMARK, '')+'</td>';
				strHtml += '</tr>';
				strHtml += '</table></td></tr>';

				strHtml += '</table>';

				LODOP.ADD_PRINT_HTM(0,0,"210mm",680,strHtml);
				// LODOP.PRINT();
				LODOP.PREVIEW();
		}
};


/*打印付款方式转换 1指代”现金“，2指代”转账“，3指代“刷卡”，4指代“储值账户”*/ /*外账打印*/
function convertPayName(pay_name){
	var new_pay = pay_name;
	if('现金' == pay_name){
		new_pay = 1;
	}else if('银行转账' == pay_name){
		new_pay = 2;
	}else if('刷卡' == pay_name){
		new_pay = 3;
	}else if('储值账户' == pay_name){
		new_pay = 4;
	}
	return new_pay;
}
/*打印付款方式转换 1指代”现金“，2指代”转账“，3指代“刷卡”，4指代“储值账户”*/
function convertPayId(pay_id){
	var new_pay = null;
	if(1 == pay_id){
		new_pay = '现金';
	}else if(2 == pay_id){
		new_pay = '银行转账';
	}else if(3 == pay_id){
		new_pay = '刷卡';
	}else if(4 == pay_id){
		new_pay = '储值账户';
	}
	return new_pay;
}

function fitlerEmpty(str){
	if(isEmpty(str)){
		return '无';
	}
	return str;
}
/*!
* screenfull
* v3.3.1 - 2017-07-07
* (c) Sindre Sorhus; MIT License
*/

!function(){"use strict";var a="undefined"!=typeof window&&void 0!==window.document?window.document:{},b="undefined"!=typeof module&&module.exports,c="undefined"!=typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,d=function(){for(var b,c=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],d=0,e=c.length,f={};d<e;d++)if((b=c[d])&&b[1]in a){for(d=0;d<b.length;d++)f[c[0][d]]=b[d];return f}return!1}(),e={change:d.fullscreenchange,error:d.fullscreenerror},f={request:function(b){var e=d.requestFullscreen;b=b||a.documentElement,/5\.1[.\d]* Safari/.test(navigator.userAgent)?b[e]():b[e](c&&Element.ALLOW_KEYBOARD_INPUT)},exit:function(){a[d.exitFullscreen]()},toggle:function(a){this.isFullscreen?this.exit():this.request(a)},onchange:function(a){this.on("change",a)},onerror:function(a){this.on("error",a)},on:function(b,c){var d=e[b];d&&a.addEventListener(d,c,!1)},off:function(b,c){var d=e[b];d&&a.removeEventListener(d,c,!1)},raw:d};if(!d)return void(b?module.exports=!1:window.screenfull=!1);Object.defineProperties(f,{isFullscreen:{get:function(){return Boolean(a[d.fullscreenElement])}},element:{enumerable:!0,get:function(){return a[d.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return Boolean(a[d.fullscreenEnabled])}}}),b?module.exports=f:window.screenfull=f}();
!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(){n(this,e)}return r(e,[{key:"createContentNode",value:function(){var e=document.createElement("pre");return e.style.position="absolute",e.style.left="-9999px",e.style.top="-9999px",e.style.width="5px",e.style.height="5px",document.body.appendChild(e),e}},{key:"copy",value:function(e,t){var n=t||{};try{var r=this.createContentNode();r.innerHTML=e;var o=window.getSelection(),a=document.createRange();a.selectNodeContents(r),o.removeAllRanges(),o.addRange(a);var c=document.execCommand("copy");return this.destroy(r),this.copyHandle(c?n.success:n.error),c}catch(i){return this.copyHandle(n.error),!1}}},{key:"copyHandle",value:function(e){e&&e.call()}},{key:"destroy",value:function(e){document.body.removeChild(e)}},{key:"bind",value:function(e,t){var n=this,r=function(e){var r=function(e){var r=e.target.attributes["data-copy-content"]||{};n.copy(r.value,t)};e.addEventListener?e.addEventListener("click",function(e){r.call(n,e)}):e.attachEvent&&e.attachEvent("onClick",function(e){r.call(n,e)})};if(e){var o=e;if("string"==typeof o&&(o=document.querySelectorAll(o)),o.length>0)for(var a=0;a<o.length;a++)o[a]instanceof HTMLElement&&r(o[a]);else r(o)}}}]),e}(),a=new o;window.superClipBoard=a,t["default"]=a}]);
//# sourceMappingURL=superClipBoard.min.js.map
/**
 * 给定时间刻度控件的定义
 * @param scope 范围
 * @param param 参数
 */
function TimeLine(scope, param,funCallBack) {
	/*
	 * 生成给定月份的下一个月份。
	 * 注意：这里的月份是1~12，不是0~11
	 * @month 给定的月份
	 */
	function nextMonth(month) {
		if (month == 12) {
			return 1;
		} else {
			return month + 1;
		}
	}
	
	/*
	 * 获取给定月份的第一天的日期
	 * @yyyy 给定月份所在年
	 * @MM 给定的月份：0~11
	 */
	function genMonthFirstDate(year, month) {
		var firstDate = new Date();
		firstDate.setFullYear(year);
		firstDate.setMonth(month);
		firstDate.setDate(1);
		firstDate.setHours(0);
		firstDate.setMinutes(0);
		firstDate.setSeconds(0);
		firstDate.setMilliseconds(1);
		return firstDate;
	}
	/*
	 * 计算两个日期间的天数 
	 * @begin:计算起始日
	 * @end：计算截止日期
	 */
	function genDays(begin, end) {
		var length = (end.getTime() - begin.getTime()) / (24 * 60 * 60 * 1000);
		if (length < 0) {
			length = length * (-1);
		}
		length = Math.round(length);
		return length;
	}
	/*
	 * 获取两个日期间的月份，同一月份的，不返回月份
	 * @返回结构：[1,2,...,11,12]
	 * @begin:计算起始日期
	 * @end：计算截止日
	 */
	function genMonths(begin, end) {
		// 由当前月推算下个月
		var yyyy = begin.getFullYear();
		var MM = begin.getMonth();
		var endYYYY = end.getFullYear();
		var endMM = end.getMonth();

		var months = [];
		while (yyyy != endYYYY || MM != endMM) {
			months.push({
				name : MM + 1
			});
			if (MM + 1 == 12) {
				MM = 0;
				yyyy = yyyy + 1;
			} else {
				MM += 1;
			}
		}
		months.push({
			name : MM + 1
		});
		return months;
	}

	/*
	 * 获取给定日期对应的月份的天数
	 * @da：获取给定的日期所在月份的天数
	 */
	function genMonthsDays(da) {
		if (!da && !(da instanceof Date)) {
			da = new Date();
		}
		// 由当前月推算下个月
//		var yyyy = da.getFullYear();
//		var MM = da.getMonth();
//		var nextMonth = 0;
//		var nextYYYY = yyyy;
//		if (MM == 11) {
//			nextMonth = 0;
//			nextYYYY = yyyy + 1;
//		} else {
//			nextMonth = MM + 1;
//			nextYYYY = yyyy;
//		}

		// 获取月初
		// var firstDate = genStartDay(da);
		// 获取下一个月的月初
		var lastDate = nextMonthDay(da);

		// 计算当月初距离下个月的月初之间的天数
		return genDays(da, lastDate);
	}
    /*获取月初*/
    function genStartDay(da){
        var day = new Date();
        day.setFullYear(da.getFullYear());
        day.setMonth(da.getMonth());
        day.setDate(1);
        day.setHours(0);
        day.setMinutes(0);
        day.setSeconds(0);
        day.setMilliseconds(0);
        return day;
    }
    /*获取下一个月的同一天*/
    function nextMonthDay(beginDate){
        var endDate = nextDay(beginDate);
        while(endDate.getDate()!=beginDate.getDate()){
            endDate = nextDay(endDate);
        }
        return endDate;
    }

    /*获取下一日*/
    function nextDay(date){
        var dat = new Date();
        dat.setTime(date.getTime()+24*60*60*1000);
        return dat;
    }

	/*
	 * 获取给定的日期，到月初的占比
	 * @dates 给定的日期
	 */
	function genDateLength(dates) {
		var monthLength = genMonthsDays(dates);
		var days = dates.getDate();

		return (1.0 * days) / monthLength;
	}
	/*
	 * 计算给定日期距离初始日期的left值
	 * @date:待计算的日期
	 * @beginDate：起始日期
	 * @monthLength：一个月的刻度
	 */
	function genDateLeft(date, beginDate, monthLength) {
		var months = genMonths(beginDate, date);
		return ((1.0 / 13) * ((months.length - 1) + genDateLength(date) - genDateLength(beginDate)));
	}

	// 对Date的扩展，将 Date 转化为指定格式的String
	// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
	// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
	// 例子：
	// (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
	// (new Date()).Format("yyyy-M-d h:m:s.S") ==> 2006-7-2 8:9:4.18
	var Format = function(fmt, date) { // author: meizz
		var o = {
			"M+" : date.getMonth() + 1, // 月份
			"d+" : date.getDate(), // 日
			"h+" : date.getHours(), // 小时
			"m+" : date.getMinutes(), // 分
			"s+" : date.getSeconds(), // 秒
			"q+" : Math.floor((date.getMonth() + 3) / 3), // 季度
			"S" : date.getMilliseconds()
		// 毫秒
		};
		if (/(y+)/.test(fmt))
			fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
		for ( var k in o)
			if (new RegExp("(" + k + ")").test(fmt))
				fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k])
						: (("00" + o[k]).substr(("" + o[k]).length)));
		return fmt;
	}

	/* 获取初始值 */
	function genInitialModel() {
		var date = new Date();
		var year = date.getFullYear();
		var before = new Date();
		before.setFullYear(year - 1);
		return {
			beginDate : null,
			endDate : null,
			width : '',
			selectBeginDate : date,
			selectBeginDateString : '',
			selectEndDate : date,
			selectEndDateString : '',
			months : [],
			year : 0,
			width : 1000,
			marginLeft : 0,
			selectBeginDateLeft : 0,
			selectEndDateLeft : 0,
			selfEndDate : date,
			selfBeginDate : before,
			inputSelfBeginDate : Format('yyyy-MM.dd', before),
			inputSelfEndDate : Format('yyyy-MM.dd', date)
		};
	}
	/* 以当前日期为截止日 */
	function genEndDate() {
		var endDate = new Date();
		return endDate;
	}
	/* 将输入字符串转换为日期 */
	function genDateByString(inputString) {
		if (!inputString) {
			return null;
		} else {
			var pattern = /^[1-9][0-9]{3}[-]{1}[0-9]{1,2}[.]{1}[0-9]{1,2}$/;
			if (!inputString.match(pattern)) {
				return null;
			} else {
				var temp = inputString;
				temp = temp.replace("-", "/");
				temp = temp.replace(".", "/");
				return new Date(temp);
			}
		}
	}
	/* 移动指定的天数 */
	function moveDays(number, key) {

		if (key == 'timeSlider1') {
			scope.model.selectBeginDate = moveDate(scope.model.selectBeginDate,
					number);

		} else {
			scope.model.selectEndDate = moveDate(scope.model.selectEndDate,
					number);

		}

		if (Format('yyyy/MM/dd HH:mm:ss', scope.model.selectBeginDate) < Format(
				'yyyy/MM/dd HH:mm:ss', scope.model.selectEndDate)) {

		} else {
			var temp = scope.model.selectEndDate;
			scope.model.selectEndDate = scope.model.selectBeginDate;
			scope.model.selectBeginDate = temp;

		}

		if (scope.model.selectBeginDate > new Date()) {
			scope.model.selectBeginDate = new Date();
			scope.model.selectEndDate = new Date();
		}
		if (scope.model.selectEndDate > new Date()) {
			scope.model.selectEndDate = new Date();
		}
		scope.model.selectBeginDateLeft = genDateLeft(
				scope.model.selectBeginDate, beginDate, lengthMonth);
		scope.model.selectEndDateLeft = genDateLeft(scope.model.selectEndDate,
				beginDate, lengthMonth);
		scope.model.timeSlider1 = scope.model.selectBeginDateLeft;
		scope.model.timeSlider2 = scope.model.selectEndDateLeft;
		scope.model.selectBeginDateString = Format('MM.dd',
				scope.model.selectBeginDate);
		scope.model.selectEndDateString = Format('MM.dd',
				scope.model.selectEndDate);
		scope.model.inputSelectBeginDate = Format('yyyy-MM.dd',
				scope.model.selectBeginDate);
		scope.model.inputSelectEndDate = Format('yyyy-MM.dd',
				scope.model.selectEndDate);
	}
	/* 移动若干天 */
	function moveDate(date, number) {
		var time = date.getTime();
		time += number * 24 * 60 * 60 * 1000;
		var newDate = new Date();
		newDate.setTime(time);
		return newDate;
	}
	/*回调函数*/
	function callBack(){
		try{
			/*回调函数*/
			if(funCallBack instanceof Function){
				funCallBack();
			}
		}catch(e){
			
		}
		
	}

	// 获取初始值
	scope.model = $.extend({}, genInitialModel());

	/* 获取当前时间 */
	var endDate = genEndDate();
	scope.model.endDate = endDate;

	/* 获取当前选择的时间段 */
	scope.model.selectBeginDate = endDate;
	scope.model.selectEndDate = endDate;

	/* 设置初始化参数 */
	if (param) {
		scope.model = $.extend({}, scope.model, param);
		if (scope.model.selectEndDate > new Date()) {
			scope.model.selectEndDate = new Date();
		}
		if (scope.model.selectBeginDate > scope.model.selectEndDate) {
			scope.model.selectBeginDate = scope.model.selectEndDate;
		}
	}

	/* 获取当前的年度 */
	scope.model.year = endDate.getFullYear();

	/* 获取开始时间 */
	var beginDate = new Date();
	beginDate.setFullYear(endDate.getFullYear() - 1);
	scope.model.beginDate = beginDate;

	/* 生成刻度 */
	scope.model.months = genMonths(beginDate, endDate);

	/* 计算月度宽度 */
	var lengthMonth = 100;
	var beginDaysMonthLength = 0;

	/* 计算月初应该要marginLeft的值 */
	if (scope.model.width) {
		lengthMonth = scope.model.width / 13;
		beginDaysMonthLength = lengthMonth * genDateLength(beginDate);
		scope.model.marginLeft = beginDaysMonthLength * -1;
		scope.model.monthLength = lengthMonth;
	}

	// 当前选择的开始时间，距离截止时间的left
	var selectBeginDate = scope.model.selectBeginDate;
	scope.model.selectBeginDateLeft = genDateLeft(selectBeginDate, beginDate,
			lengthMonth);
	scope.model.timeSlider1 = scope.model.selectBeginDateLeft;

	scope.model.selectBeginDateString = Format('MM.dd',
			scope.model.selectBeginDate);
	scope.model.inputSelectBeginDate = Format('yyyy-MM.dd',
			scope.model.selectBeginDate);

	// 计算当前选则的截止时间的left
	var selectEndDate = scope.model.selectEndDate;
	scope.model.selectEndDateLeft = genDateLeft(selectEndDate, beginDate,
			lengthMonth);
	scope.model.timeSlider2 = scope.model.selectEndDateLeft;

	scope.model.selectEndDateString = Format('MM.dd', scope.model.selectEndDate);
	scope.model.inputSelectEndDate = Format('yyyy-MM.dd',
			scope.model.selectEndDate);
	scope.model.dayWidth = scope.model.width * 1.0
			/ genDays(beginDate, endDate);
	
	
	/* 修改开始日期 */
	scope.changeInputSelectBeginDate = function() {
		var inputSelectBeginDate = genDateByString(scope.model.inputSelectBeginDate);
		if (!inputSelectBeginDate) {
			scope.model.inputSelectBeginDate = Format('yyyy-MM.dd',
					scope.model.selectBeginDate);
		} else {
			var temp = Format('yyyy/MM/dd', inputSelectBeginDate);

			var beginDate = Format('yyyy/MM/dd', scope.model.beginDate);
			var endDate = Format('yyyy/MM/dd', scope.model.endDate);

			if (temp < beginDate) {
				scope.model.selectBeginDate = scope.model.beginDate;
			} else if (temp > endDate) {
				scope.model.selectBeginDate = scope.model.endDate;
			} else {
				var date = new Date(temp);
				scope.model.selectBeginDate = date;
				scope.model.inputSelectBeginDate = Format('yyyy-MM.dd',
						scope.model.selectBeginDate);
				if (scope.model.inputSelectEndDate < scope.model.inputSelectBeginDate) {
					scope.model.selectBeginDate = scope.model.selectEndDate;
				}
			}
			TimeLine(scope, {
				selectBeginDate : scope.model.selectBeginDate,
				selectEndDate : scope.model.selectEndDate,
				width:scope.model.width
			},funCallBack);
		}
	}

	/* 修改截止日期 */
	scope.changeInputSelectEndDate = function() {
		var inputSelectEndDate = genDateByString(scope.model.inputSelectEndDate);
		if (!inputSelectEndDate) {
			scope.model.inputSelectEndDate = Format('yyyy-MM.dd',
					scope.model.selectEndDate);
		} else {
			var temp = Format('yyyy/MM/dd', inputSelectEndDate);

			var beginDate = Format('yyyy/MM/dd', scope.model.beginDate);
			var endDate = Format('yyyy/MM/dd', scope.model.endDate);

			if (temp < beginDate) {
				scope.model.selectEndDate = scope.model.beginDate;
			} else if (temp > endDate) {
				scope.model.selectEndDate = scope.model.endDate;
			} else {
				var date = inputSelectEndDate;
				scope.model.selectEndDate = date;
				scope.model.inputSelectEndDate = Format('yyyy-MM.dd',
						scope.model.selectEndDate);
				if (scope.model.inputSelectEndDate < scope.model.inputSelectBeginDate) {
					scope.model.selectEndDate = scope.model.selectBeginDate;
				}

			}
			TimeLine(scope, {
				selectBeginDate : scope.model.selectBeginDate,
				selectEndDate : scope.model.selectEndDate,
				width:scope.model.width
			},funCallBack);
		}
	}

	/* 鼠标按下后开始移动 */
	scope.timeLineBeginSelectDown = function($event, key) {
		scope.model.selectSliperKey = key;
		scope.model.selectSliperPageX = $event.pageX;
		scope.model.selectMoved = 0;
	}

	/* 监听鼠标释放事件 */
	scope.timeLineBeginSelectUp = function($event, key) {
		if(scope.model.selectSliperKey){
			callBack();
		}
		scope.model.selectSliperKey = undefined;
		scope.model.selectSliperPageX = undefined;
	}

	/* 监听移动事件 */
	scope.timeLineBeginSelectMove = function($event, key) {
		if (scope.model.selectSliperPageX) {
			var delta = $event.pageX - scope.model.selectSliperPageX;
			scope.model.selectSliperPageX = $event.pageX;

			var number = Math.round(delta / scope.model.dayWidth);
			if (number) {
				moveDays(number, scope.model.selectSliperKey);
			}

		}
	}
	
	/* 设置为今天 */
	scope.timeLingToday = function() {
		TimeLine(scope, {
			selectBeginDate : new Date(),
			selectEndDate : new Date(),
			width:scope.model.width
		},funCallBack);
	}

	/* 设置为最近一周 */
	scope.timeLingWeek = function() {
		var today = new Date();
		today.setMilliseconds(0);
		var weekBeforeTime = today.getTime() - 24 * 60 * 60 * 1000 * 7;

		var before = new Date();
		before.setMilliseconds(0);
		before.setTime(weekBeforeTime);

		TimeLine(scope, {
			selectBeginDate : before,
			selectEndDate : today,
			width:scope.model.width
		},funCallBack);
	}

	/* 设置为最近一月 */
	scope.timeLingMonth = function() {
		var today = new Date();
		var month = today.getMonth();
		today.setMilliseconds(0);

		var before = new Date();
		if (month == 0) {
			month = 12;
		} else {
			month = month - 1;
		}
		before.setMonth(month);
		before.setMilliseconds(0);

		TimeLine(scope, {
			selectBeginDate : before,
			selectEndDate : today,
			width:scope.model.width
		},funCallBack);
	}

	/* 设置为最近一年 */
	scope.timeLingYear = function() {
		var today = new Date();
		var year = today.getFullYear();
		today.setMilliseconds(0);

		var before = new Date();
		year = year - 1;
		before.setFullYear(year);
		before.setMilliseconds(0);

		TimeLine(scope, {
			selectBeginDate : before,
			selectEndDate : today,
			width:scope.model.width
		},funCallBack);
	}
	/* 一年前 */
	scope.timeLingYearBefore = function() {
		scope.model.type = 'before';
	}

	/* 今年 */
	scope.timeLingYearThis = function() {
		scope.model.type = undefined;
	}

	/* 自定义开始时间的修改 */
	scope.changeInputSelfBeginDate = function() {
		var inputSelfBeginDate = genDateByString(scope.model.inputSelfBeginDate);
		if (!inputSelfBeginDate) {
			scope.model.inputSelfBeginDate = Format('yyyy-MM.dd',
					scope.model.selfBeginDate);
		} else {
			var temp = Format('yyyy/MM/dd', inputSelfBeginDate);
			var endDate = Format('yyyy/MM/dd', scope.model.selfEndDate);

			if (temp > endDate) {
				scope.model.selfEndDate = inputSelfBeginDate;
			}
			scope.model.selfBeginDate = inputSelfBeginDate;
			scope.model.inputSelfBeginDate = Format('yyyy-MM.dd',
					scope.model.selfBeginDate);
			scope.model.inputSelfEndDate = Format('yyyy-MM.dd',
					scope.model.selfEndDate);
		}
		callBack();
	}

	/* 自定义截止时间的修改 */
	scope.changeInputSelfEndDate = function() {
		var inputSelfEndDate = genDateByString(scope.model.inputSelfEndDate);
		if (!inputSelfEndDate) {
			scope.model.inputSelfEndDate = Format('yyyy-MM.dd',
					scope.model.selfEndDate);
		} else {
			var temp = Format('yyyy/MM/dd', inputSelfEndDate);
			var beginDate = Format('yyyy/MM/dd', scope.model.selfBeginDate);

			if (temp < beginDate) {
				scope.model.selfBeginDate = inputSelfEndDate;
			}
			scope.model.selfEndDate = inputSelfEndDate;
			scope.model.inputSelfBeginDate = Format('yyyy-MM.dd',
					scope.model.selfBeginDate);
			scope.model.inputSelfEndDate = Format('yyyy-MM.dd',
					scope.model.selfEndDate);
		}
		callBack();
	}

	/* 获取开始日期 */
	scope.genTimeLineBeginDate = function(pattern) {
		var beginDate = null;
		if (scope.model.type) {
			beginDate = scope.model.selfBeginDate;
		} else {
			beginDate = scope.model.selectBeginDate;
		}
		if (pattern) {
			return Format(pattern, beginDate);
		} else {
			return beginDate;
		}
	}

	/* 获取截止日期 */
	scope.genTimeLineEndDate = function(pattern) {
		var endDate = null;
		if (scope.model.type) {
			endDate = scope.model.selfEndDate;
		} else {
			endDate = scope.model.selectEndDate;
		}
		if (pattern) {
			return Format(pattern, endDate);
		} else {
			return endDate;
		}
	}
	
	/*回调*/
	callBack();

}
/**
 * Created by Liyong.zhu on 2016/4/6.
 */
'use strict';
angular.module('ework-ui').factory('ProjectService', [ '$resource', ProjectService ]);

angular.module('ework-ui').factory('MenusService', [ '$resource', MenusService ]);

angular.module('ework-ui').factory('CompanyService', [ '$resource', CompanyService ]);

angular.module('ework-ui').factory('OrdersService', [ '$resource', OrdersService ]);

angular.module('ework-ui').factory('OrderCoursesService', [ '$resource', OrderCoursesService ]);

angular.module('ework-ui').factory('ERPCourseStudentListService', [ '$resource', ERPCourseStudentListService ]);

angular.module('ework-ui').factory('PUBCourseStudentListService', [ '$resource', PUBCourseStudentListService ]);

//充值单据查询
angular.module('ework-ui').factory('RechargesService', [ '$resource', RechargesService ]);

angular.module('ework-ui').factory('CoursesInfoService', [ '$resource', CoursesInfoService ]);

angular.module('ework-ui').factory('CourseTimesService', [ '$resource', CourseTimesService ]);

angular.module('ework-ui').factory('BranchsService', [ '$resource', BranchsService ]);

angular.module('ework-ui').factory('TeacherListService', [ '$resource', TeacherListService ]);

angular.module('ework-ui').factory('TeacherScheduleService', [ '$resource', TeacherScheduleService ]);

angular.module('ework-ui').factory('StudentListService', [ '$resource', StudentListService ]);

angular.module('ework-ui').factory('StudentScheduleService', [ '$resource', StudentScheduleService ]);

angular.module('ework-ui').factory('TeacherAttendanceService', [ '$resource', TeacherAttendanceService ]);

angular.module('ework-ui').factory('AuditLogService', [ '$resource', AuditLogService ]);

angular.module('ework-ui').factory('AccountService', [ '$resource', AccountService ]);

angular.module('ework-ui').factory('BranchTreeService', [ '$resource', BranchTreeService ]);

angular.module('ework-ui').factory('ReportService', [ '$resource', ReportService]);

angular.module('ework-ui').factory('FileUploadService', [ '$resource', FileUploadService ]);

angular.module('ework-ui').factory('FileUploadDataService', [ '$resource', FileUploadDataService ]);

angular.module('ework-ui').factory('OrdersPubService', [ '$resource', OrdersPubService ]);

angular.module('ework-ui').factory('StudentQueryService', [ '$resource', StudentQueryService ]);

angular.module('ework-ui').factory('SubjectService', [ '$resource', SubjectService ]);

angular.module('ework-ui').factory('SeasonService', [ '$resource', SeasonService ]);

angular.module('ework-ui').factory('GradeService', [ '$resource', GradeService ]);

angular.module('ework-ui').factory('CourseService', [ '$resource', CourseService ]);

angular.module('ework-ui').factory('StudentAccountService', [ '$resource', StudentAccountService ]);

angular.module('ework-ui').factory('ProductService', [ '$resource', ProductService ]);

angular.module('ework-ui').factory('PosService', [ '$resource', PosService ]);

angular.module('ework-ui').factory('CompanyAccountService', [ '$resource', CompanyAccountService ]);

angular.module('ework-ui').factory('RefundService', [ '$resource', RefundService ]);

angular.module('ework-ui').factory('StudentCourseTimeStateService', [ '$resource', StudentCourseTimeStateService ]);

angular.module('ework-ui').factory('TransferClassService', [ '$resource', TransferClassService ]);

angular.module('ework-ui').factory('PUBAttendanceCourseService', [ '$resource', PUBAttendanceCourseService ]);

angular.module('ework-ui').factory('PUBAttendanceCourseTimeService', [ '$resource', PUBAttendanceCourseTimeService ]);

angular.module('ework-ui').factory('PUBAttendanceCoursetimeStudentService', [ '$resource', PUBAttendanceCoursetimeStudentService ]);

angular.module('ework-ui').factory('PUBStudentAccountChangeService', [ '$resource', PUBStudentAccountChangeService ]);

angular.module('ework-ui').factory('PUBStudentAccountTransferService', [ '$resource', PUBStudentAccountTransferService ]);

angular.module('ework-ui').factory('PUBStudentAccountWithDrawService', [ '$resource', PUBStudentAccountWithDrawService ]);

angular.module('ework-ui').factory('PUBStudentAccountSettlementOfClaimsService', [ '$resource', PUBStudentAccountSettlementOfClaimsService ]);

angular.module('ework-ui').factory('PUBSuchService', [ '$resOrgServiceource', PUBSuchService ]);

angular.module('ework-ui').factory('PUBExportService', [ '$resource', PUBExportService ]);

angular.module('ework-ui').factory('PUBORGService', [ '$resource', PUBORGService ]);

angular.module('ework-ui').factory('PUBORGSelectedService', [ '$resource', PUBORGSelectedService ]);

angular.module('ework-ui').factory('PUBSystemParamService', [ '$resource', PUBSystemParamService ]);

angular.module('ework-ui').factory('PUBEmployeeService', [ '$resource', PUBEmployeeService ]);

angular.module('ework-ui').factory('PUBAccountService', [ '$resource', PUBAccountService ]);

angular.module('ework-ui').factory('JudgePasswordService', [ '$resource', JudgePasswordService ]);

angular.module('ework-ui').factory('klxxedu_LoginEmployeeService', [ '$resource', klxxedu_LoginEmployeeService ]);


/**
 * 报表数据查询服务
 * @returns {*}
 * @constructor
 */
function ReportService($resource){
    return $resource('report/:reportType', {reportType:'@reportType'}, {
        query: {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 项目定义信息
 * @param $resource
 * @returns {*}
 * @constructor
 */
function ProjectService($resource){
    return $resource('data/project.json', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 左侧导航菜单
 * @param $resource
 * @returns {*}
 * @constructor
 */
function MenusService($resource){
    return $resource('common/rightservice', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 公司信息服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function CompanyService($resource){
    return $resource('dic/queryCompanyDatas', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        update :{
        	url:'system/organization/homeSchoolAreas',
            method : 'PUT',
            params : {},
            isArray : false
        },
        queryAreas:{
        	url:'system/organization/queryAreas',
        	method : 'GET',
            params : {},
            isArray : false
        },
        
        querySubOrg:{
        	url:'system/organization/querySubOrg',
        	method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * ERP订单查询
 * @param $resource
 * @returns {*}
 * @constructor
 */
function OrdersService($resource){
    return $resource('order/page', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post :{
            method : 'POST',
            params : {},
            isArray : false
        },
        comments:{
        	url:'order/comments',
        	 params : {},
        	 method:'POST',
             isArray : false
        },
        sync:{
        	 url:'order/sync',
        	 params : {},
        	 method:'POST',
             isArray : false
        },
        //导出数据
        exports:{
        	 url:'excels/output/:modelId',
        	 params : {modelId:'orders_01'},
        	 method:'GET',
             isArray : false
        }
    });
}

/**
 * 获取订单详单信息
 * @param $resource
 * @returns {*}
 * @constructor
 */
function OrderCoursesService($resource){
    return $resource('order/queryOrderCourses', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}


/**
 * 获取ERP系统的课程学生信息列表
 * @param $resource
 * @returns {*}
 * @constructor
 */
function ERPCourseStudentListService($resource){
    return $resource('order/queryStudentsDetail', {}, {
        query : {
            method : 'GET',
            params : {type:1},
            isArray : false
        }
    });
}
/**
 * 获取外账系统的课程学生信息列表
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBCourseStudentListService($resource){
    return $resource('order/queryStudents', {}, {
        query : {
            method : 'GET',
            params : {type:0},
            isArray : false
        }
    });
}

/**
 * 查询ERP的充值单据信息，包括充值，取款，转账，理赔单据
 * @param $resource
 * @returns {*}
 * @constructor
 */
function RechargesService($resource){
    return $resource('order/rechargePage', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        //充值单批注
        post :{
        	url:'order/rechargeComments',
            method : 'POST',
            params : {},
            isArray : false
        },
        //充值单定时
        rechargeTiming:{
        	url:'order/orderRechargeTiming',
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 查询课程信息
 * @param $resource
 * @returns {*}
 * @constructor
 */
function CoursesInfoService($resource){
    return $resource('course/page', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        saveCourse:{
             url:'course/save',
        	 method : 'PUT',
             params : {},
             isArray : false	
        	
        }
    });
}

/**
 * 查询课次信息
 * @param $resource
 * @returns {*}
 * @constructor
 */
function CourseTimesService($resource){
    return $resource('course/queryScheduling', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 校区查询
 * @param $resource
 * @returns {*}
 * @constructor
 */
function BranchsService($resource){
    return $resource('dic/querySchoolAreaDatas', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 老师查询
 * @param $resource
 * @returns {*}
 * @constructor
 */
function TeacherListService($resource){
    return $resource('teacher/page', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 老师日程查询
 * @param $resource
 * @returns {*}
 * @constructor
 */
function TeacherScheduleService($resource){
    return $resource('course/queryTeacherSchedule', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 查询学生信息列表
 * @param $resource
 * @returns {*}
 * @constructor
 */
function StudentListService($resource){
    return $resource('course/queryStudentsByCourse', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryPostData:{
        	url:'course/queryStudentSchdules',
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 查询单个学生的日程安排的情况
 * @param $resource
 * @returns {*}
 * @constructor
 */
function StudentScheduleService($resource){
    return $resource('course/queryStudentSchdules', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 教师考勤消耗内账外账配比
 * @param $resource
 * @returns {*}
 * @constructor
 */
function TeacherAttendanceService($resource){
    return $resource('teacher/spentCourseTimesPage', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 业务日志查询
 * @param $resource
 * @returns {*}
 * @constructor
 */
function AuditLogService($resource){
    return $resource('log/queryOperaterLogs', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}


/**
 * 账户服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function AccountService($resource){
    return $resource('system/privilege/account/page', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
        	url:'system/privilege/account/save',
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
        	url:'system/privilege/account/update',
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
        	url:'system/privilege/account/forbidden',
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}



/**
 * 查询校区与公司的归属关系
 * @param $resource
 * @returns {*}
 * @constructor
 */
function BranchTreeService($resource){
    return $resource('data/common/branchTree.json', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        queryTree:{
        	 url:'dic/querySchoolTreeModel',
        	  method : 'GET',
              params : {},
              isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

/**
 * 文件上传服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function FileUploadService($resource){
    return $resource('data/common/fileUpload.json', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

FileUploadService.uploadService = "excels/inputview/input";

/**
 * 文件上传数据服务
 * @returns {Object}
 * @constructor
 */
function FileUploadDataService($resource){
    return $resource('data/common/fileUploadDatas.json', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
        	url:'excels/inputview/add/:modelId',
            method : 'POST',
            params : {modelId:'@modelId'},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

/**
 * 对公订单服务
 * query:特殊参数（如果有studentId，则只查询该学员对应的对公报班单据）
 * @param $resource
 * @returns {*}
 * @constructor
 */
function OrdersPubService($resource){
    return $resource('order/orderBJKPage', {}, {
        add :{
        	url:'buissness/bookClass',
            method : 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            params : {},
            isArray : false
        },
        delete :{
        	url:'buissness/invliadBookClassOrder',
            method : 'DELETE',
            params : {},
            isArray : false
        },
        query : {
        	url:'buissness/queryConfilctCourseTimes',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        queryDetails:{
        	url:'buissness/queryOrderDetails/:orderId',
        	method : 'GET',
        	params : {},
        	isArray : false
        }
        
    });
}


/**
 * 学员信息列表
 * @param $resource
 * @returns {*}
 * @constructor
 */
function StudentQueryService($resource){
    return $resource('buissness/queryStudents', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 科目服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function SubjectService($resource){
    return $resource('buissness/queryCourseSubjects', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 课程季服务
 * @returns {Object}
 * @constructor
 */
function SeasonService($resource){
    return $resource('buissness/queryCourseSeasons', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

 /**
 * 年级服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function GradeService($resource){
    return $resource('buissness/queryCourseGrades', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 课程服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function CourseService($resource){
    return $resource('course/queryCourses', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryCourseTimes : {
        	url:'course/queryCourseTimes/:courseId',
            method : 'GET',
            params : {courseId:'@courseId'},
            isArray : false
        },
        get:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 学员账户查询服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function StudentAccountService($resource){
    return $resource('data/pub/student-account.json', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function StudentAccountService($resource){
    return $resource('buissness/queryStudentAccount/:studentId', {studentId:'@studentId'}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 产品线服务
 * @returns {Object}
 * @constructor
 */
function ProductService($resource){
    return $resource('buissness/queryProductLines', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * pos服务
 * @returns {Object}
 * @constructor
 */
function PosService($resource){
    return $resource('buissness/queryPos', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 公司账号服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function CompanyAccountService($resource){
    return $resource('buissness/queryCompanyAccounts', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 退费服务
 * @param $resource
 * @constructor
 */
function RefundService($resource){
    return $resource('order/orderRefundPage', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        },
        post:{
        	url:'buissness/refundFees',
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 学生课程课次状态信息
 * @param $resource
 * @returns {*}
 * @constructor
 */
function StudentCourseTimeStateService($resource){
    return $resource('buissness/queryStudentCourseTimes/:studentId/:courseId/:orderCourseId',
    		{studentId:'@studentId',courseId:'@courseId',orderCourseId:'orderCourseId'}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 对公转班服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function TransferClassService($resource){
    return $resource('order/orderTransferPage', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
        	url:'buissness/transferClass',
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 对公考勤课程服务
 * @returns {Object}
 * @constructor
 */
function PUBAttendanceCourseService($resource){
    return $resource('query/course/queryAllCourse/:busiType', {busiType:'@busiType'}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 课程课次考勤信息服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBAttendanceCourseTimeService($resource){
    return $resource('query/course/QueryAllTimes/:courseId', {courseId:'@courseId'}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 对公课程课时考勤学员服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBAttendanceCoursetimeStudentService($resource){
    return $resource('', {schedulingId:'@schedulingId'}, {
        query : {
        	url:'query/course/queryCourseTimeStudents/:schedulingId',
            method : 'GET',
            params : {},
            isArray : false
        },
        update:{
        	url:'attendance/batchAttendance',
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}

/**
 * 学员账户变动流水
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBStudentAccountChangeService($resource){
    return $resource('', {}, {
        query : {
        	url:'account/query/dynamic',
            method : 'GET',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        saveForCash:{
        	url:'account/recharge/cash',
            method : 'POST',
            params : {},
            isArray : false
        },
        saveForCard:{
        	url:'account/recharge/card',
            method : 'POST',
            params : {},
            isArray : false
        },
        saveForTransfer:{
        	url:'account/recharge/transfer',
            method : 'POST',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}
/**
 * 对公账户学员转账服务
 * @param $resource
 * @constructor
 */
function PUBStudentAccountTransferService($resource){
    return $resource('data/pub/student_account_change.json', {}, {
        post:{
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 对公账户学员取款服务
 * @param $resource
 * @constructor
 */
function PUBStudentAccountWithDrawService($resource){
    return $resource('account/save/dynamic', {}, {
        withDraw:{
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 对公理赔服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBStudentAccountSettlementOfClaimsService($resource){
    return $resource('data/pub/student_account_change.json', {}, {
        post:{
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}
/**
 * 外账点名表数据服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBSuchService($resource){
    return $resource('bussiness/queryAttendances', {}, {
        query:{
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 文件导出服务：参数1，模板ID
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBExportService($resource){
    return $resource('data/pub/BSsuch-mgr.json', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 外账系统组织结构服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBORGService($resource){
    return $resource('common/orgservice', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        put:{
            method : 'PUT',
            params : {
                id:'@id'
            },
            isArray : false
        },
        queryOrgsList:{
        	url:'common/orgservice/list',
            method : 'GET',
            params : {},
            isArray : false
        }, 
        queryBranchs:{
        	url:'common/orgservice/branchs',
            method : 'GET',
            params : {},
            isArray : false
        }, 
        queryBu:{
        	url:'common/orgservice/bu',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 查询当前选中的组织节点
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBORGSelectedService($resource){
    return $resource('common/orgservice/selected', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 查询系统参数
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PUBSystemParamService($resource){
    return $resource('common/system_param', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 员工个人信息服务
 * @returns {Object}
 * @constructor
 */
function PUBEmployeeService($resource){
    return $resource('common/employeeservice', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        put:{
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}
/**
 * 员工个人信息服务
 * @returns {Object}
 * @constructor
 */
function klxxedu_LoginEmployeeService($resource){
    return $resource('common/employeeservice', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        put:{
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}

/**
 * 个人账户服务
 * @returns {Object}
 * @constructor
 */
function PUBAccountService($resource){
    return $resource('/erp/common/accountservice', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        put:{
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}
/**
 * 判断输入的密码是否正确
 * @param $resource
 * @returns
 */
function JudgePasswordService($resource){
	  return $resource('common/accountservice/judgePassword', {}, {
	        query:{
	            method : 'GET',
	            params : {},
	            isArray : false
	        }
	    });
}

/**
 * Created by jimboi on 2017/5/6.
 * erp http请求拦截器服务
 * 使用方式：在请求参数中添加modal:true
 */
/**
 * 模态框显示个数，如果modalCount=0则允许新建modal，modal=1允许销毁
 * @type {number}
 */
var modalCount = 0;
var modalDiv = "<div id='erp_grobal_ajax_modal' style='position:fixed;left:0;top:0;bottom:0;right:0;background:#ccc;opacity: 0.5;z-index:1000;margin:0 auto;text-align:center;padding-top:20%'>" +
    "<div style='display:inline-block;width:300px;height:50px;font-size:16px'>数据加载中...</div>" +
    "</div>";
/**
 * 处理http拦截器响应操作
 * @param response http拦截器响应数据
 * @param modalCount 模态框显示个数
 * @returns {*}
 */
function clearCookie(){
    var keys=document.cookie.match(/[^ =;]+(?=\=)/g);
    if (keys) {
        for (var i = keys.length; i--;)
            document.cookie=keys[i]+'=0;expires=' + new Date( 0).toUTCString()
    }
}
var httpInterceptorHandler = function(response,modalCount) {
    //判断响应的数据是否是登录页面
    if(response.data) {
        var temp = response.data.toString();
        var re = /body ng-controller="LoginCtrl" style="height: 100%;"/i;
        if(re.test(temp)) {
            clearCookie();
            location.href = location.hostname;
        }
    }
    if(response.config.params && response.config.params.modal && response.config.params.modal == true) {
        if(1 >= modalCount) {
            $("#erp_grobal_ajax_modal").remove();
            modalCount = 0 ;
        } else {
            modalCount -- ;
        }
    }
}

angular.module("ework-ui").factory('httpInterceptor', ['$q', '$injector', function ($q, $injector) {
        var httpInterceptor = {
            'responseError': function (response) {
                httpInterceptorHandler(response,modalCount);
                return $q.reject(response);
            },
            'response': function (response) {
                httpInterceptorHandler(response,modalCount)
                return response;
            },
            'request': function (config) {
                if(config.params && config.params.modal && config.params.modal == true) {
                    if(modalCount <= 0) {
                        $(modalDiv).prependTo($(document.body));
                        modalCount =1 ;
                    } else {
                        modalCount ++ ;
                    }
                }
                return config;
            },
            'requestError': function (config) {
                return $q.reject(config);
            }
        }
        return httpInterceptor;
    }]);

angular.module("ework-ui")
    .config(['$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push('httpInterceptor');
    }]);
angular.module('ework-ui').factory('erp_printService', [ 'erp_studentPrintService', erp_printService ]);

function erp_printService(erp_studentPrintService) {
	var services = {};
	services.printAccountDynamic = function(printParam,  hidePanelId) {
		if (hidePanelId) {
        	$("#" + hidePanelId).modal('hide');
        }
		
		erp_studentPrintService.query(printParam, function(resp){
            if(!resp.error) {
            	if (printParam.printType && printParam.printType == '05') {
                    var useragent = navigator.userAgent;
                    if(useragent.indexOf('Android') > -1 || useragent.indexOf('Adr') > -1){
                    	if(location.href.indexOf('klxuexi.org')>0) {
                            window.open("/printhtml/print_transfer.html?" + printParam.dynamicId + "&" + printParam.printType);
                        }else{
                            window.open("/klxxedu/printhtml/print_transfer.html?" + printParam.dynamicId + "&" + printParam.printType);
						}
					}
                    else {
            			createPrintPage05(resp.data);} //转账打印
            	}
            	if (printParam.printType && printParam.printType == '04') {
            		CreatePrintPage03(resp.data);  //取款打印
            	}
            	if (printParam.printType && printParam.printType == '01') {//报班打印
					if(resp.data.business_type == 2) {//1对1
						CreatePrintPageGxhYdyBb(resp.data);
					} else if(resp.data.business_type == 1) {//班级课
						if (resp.data.city_id == 3) {
							CreatePrintPageXiamen(resp.data);
						} else {
							CreatePrintPage(resp.data);
						}
					} else {
						CreatePrintPage(resp.data);
					}
            	}
            	if (printParam.printType && printParam.printType == '03') {//充值打印
					if(resp.data.rechargeInfo.CITY_ID == 3){
						CreatePrintPage04Xiamen([resp.data]);
					}else{
						CreatePrintPage04([resp.data]);
					}
            	}
            	if (printParam.printType && printParam.printType == '02') {//退费打印
						CreatePrintPageForRefund(resp.data);
            	}
            } else {
                alert(resp.message);
            }
        });
	}

	function CreatePrintPage03(data) {
	    //03取款
		var strHtml = '<style type="text/css">';
		strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
		strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
		strHtml += 'tr td{ height:24px; line-height:24px;}'; 
		 strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}'; 
		strHtml += '</style>';
		strHtml += '<body style="margin:0 auto ;padding-top:350px;text-align:center">';
		strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
		strHtml += '<tr><td>';

		strHtml += '<table border="0" width="660px" align="center">';
		strHtml += '<tr align="left" style="font-weight:900; >';
		strHtml += '<td colspan="5">业务校区:' + data.withdrawing.BUNAME + '	经办人:' + data.withdrawing.USERNAME + '</td>';
		strHtml += '</tr>'; 
		strHtml += '<tr align="center" style="font-weight:900; >';
		strHtml += '<td width="150">学员编号</td>'; 
		strHtml += '<td width="66">学员姓名</td>'; 
		strHtml += '<td width="185">单据编号</td>'; 
		strHtml += '<td width="68">业务类型</td>'; 
//		strHtml += '<td width="135">业务校区</td>'; 
//		strHtml += '<td width="54">经办人</td>'; 
		strHtml += '<td width="76">业务日期</td>'; 
		strHtml += '</tr>'; 
		strHtml += '<tr align="center" >';
		strHtml += '<td>'+data.withdrawing.STUENCODING+'</td>';
		strHtml += '<td>'+data.withdrawing.STUDENTNAME+'</td>';
		strHtml += '<td>'+data.withdrawing.ENCODING+'</td>';
		strHtml += '<td>取款</td>'; 
//		strHtml += '<td>'+data.withdrawing.BUNAME+'</td>'; 
//		strHtml += '<td>'+data.withdrawing.USERNAME+'</td>'; 
		strHtml += '<td>'+data.withdrawing.INPUTTIME+'</td>';
		strHtml += '</tr>'; 
		strHtml += '<tr align="left">';
		strHtml += '<td colspan="7">取款信息：</td>';  
		strHtml += '</tr>';
		strHtml += '</table>'; 

		strHtml += '<table border="0" width="660px" style="margin-top:15px">';
		strHtml += '<tr height="15px" align="center" style="font-weight:900; >';
		strHtml += '<td>编号</td>'; 
		strHtml += '<td>操作账户</td>'; 
		strHtml += '<td>操作金额</td>'; 
		strHtml += '<td>手续费</td>'; 
		strHtml += '<td>取款金额</td>'; 
		strHtml += '</tr>'; 
		strHtml += '<tr align="center" ">';
		strHtml += '<td>1</td>'; 
		strHtml += '<td>'+data.withdrawing.PRODUCTLINE+'</td>';
		strHtml += '<td>￥'+data.withdrawing.PREAMOUNT+'</td>';
		strHtml += '<td>￥'+data.withdrawing.MONEY_FEE+'</td>';
		strHtml += '<td>￥'+data.withdrawing.MONEY+'</td>';
		strHtml += '</tr>';
		strHtml += '</table></td></tr>'; 

		strHtml += '</table>'; 
		strHtml += '</body>';
		KlxxPrint(strHtml)
	}
	
    
	function createPrintPage05 (data) {
   	//05转账
		var strHtml = '<style type="text/css">'; 
		strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }'; 
		strHtml += 'tr.Line td{ border-top:1px dashed #000;}'; 
		strHtml += 'tr td{ height:24px; line-height:24px;}'; 
		 strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}'; 
		strHtml += '</style>';
		strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
		strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
		strHtml += '<tr><td>';

		strHtml += '<table border="0" width="660px" align="center">';
		strHtml += '<tr align="left" style="font-weight:900;">';
		strHtml += '<td colspan="5">业务校区:' + data.transferInfo.ORG_NAME + '	经办人:' + data.transferInfo.EMPLOYEE_NAME + '</td>'; 
		strHtml += '</tr>'; 
		strHtml += '<tr align="center" style="font-weight:900;">'; 
		strHtml += '<td width="150">学员编号</td>'; 
		strHtml += '<td width="66">学员姓名</td>'; 
		strHtml += '<td width="185">单据编号</td>'; 
		strHtml += '<td width="68">业务类型</td>';
		strHtml += '<td width="76">业务日期</td>'; 
		strHtml += '</tr>'; 
		strHtml += '<tr align="center">'; 
		strHtml += '<td>'+data.transferInfo.S_ENCODING+'</td>'; 
		strHtml += '<td>'+data.transferInfo.STUDENT_NAME+'</td>'; 
		strHtml += '<td>'+data.transferInfo.D_ENCODING+'</td>'; 
		strHtml += '<td>转账</td>';
		strHtml += '<td>'+data.transferInfo.INPUT_TIME+'</td>'; 
		strHtml += '</tr>'; 
		strHtml += '<tr align="left">'; 
		strHtml += '<td colspan="7">转账信息：</td>';  
		strHtml += '</tr>';
		strHtml += '</table>'; 

		strHtml += '<table border="0" width="660px" style="margin-top:15px">';
		strHtml += '<tr height="15px" align="center" style="font-weight:900;">'; 
		strHtml += '<td>编号</td>';
		strHtml += '<td>转出学员</td>'; 
		strHtml += '<td>转出账户</td>'; 
		strHtml += '<td>转入学员</td>'; 
		strHtml += '<td>转入账户</td>'; 
		strHtml += '<td>操作金额</td>'; 
		strHtml += '</tr>'; 
		strHtml += '<tr align="center">'; 
		strHtml += '<td>1</td>'; 
		strHtml += '<td>'+data.transferInfo.STUDENT_NAME+'</td>'; 
		strHtml += '<td>'+data.transferInfo.OUTPUT_PRODUCT_LINE+'</td>';
		strHtml += '<td>'+data.transferInfo.INPUT_STU_NAME+'</td>'; 
		strHtml += '<td>'+data.transferInfo.INPUT_PRODUCT_LINE+'</td>';
		strHtml += '<td>￥'+data.transferInfo.MONEY+'</td>'; 
		strHtml += '</tr>';
		strHtml += '</table></td></tr>'; 
		strHtml += '</table>'; 
		strHtml += '</body>';
		KlxxPrint(strHtml)
    }

	return services;
}

angular.module('ework-ui').controller('blocks_avatarUploadController', [
  '$rootScope',
  '$scope',
  '$uibMsgbox',
  '$uibModalInstance',
  'erp_studentsService',
  'onUploadImg',
  blocks_avatarUploadController
])

function blocks_avatarUploadController(
  $rootScope,
  $scope,
  $uibMsgbox,
  $uibModalInstance,
  erp_studentsService,
  onUploadImg
) {
  $scope.originImgSrc = null;
  $scope.imgSrc = null;
  $scope.result = null;
  $scope.resultBlob = null;
  $scope.initCrop = false;

  $scope.fileChanged = function(e) {
    var files = e.target.files;
    var fileReader = new FileReader();
    fileReader.readAsDataURL(files[0]);
    fileReader.onload = function(e) {
      $scope.originImgSrc = this.result;
      $scope.imgSrc = this.result;
      $scope.$apply();
    };
  }

  $scope.cropImage = function() {
    $scope.initCrop = true;
  }

  $scope.uploadImage = function(result) {
    if ($scope.result) {
            onUploadImg(result, $uibModalInstance)
    } else {
      $uibMsgbox.alert("请检查图像是否已经上传并裁切！");
    }
  }

  $scope.reCrop = function() {
    $scope.imageCropStep = 2;
    delete $scope.result;
    delete $scope.resultBlob;
  }
}

/**
 * Created by ezgoing on 14/9/2014.
 */

"use strict";
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else {
        factory(jQuery);
    }
}(function ($) {
    var cropbox = function(options, el){
        var el = el || $(options.imageBox),
            obj =
            {
                state : {},
                ratio : 1,
                options : options,
                imageBox : el,
                thumbBox : el.find(options.thumbBox),
                spinner : el.find(options.spinner),
                image : new Image(),
                getDataURL: function ()
                {
                    var width = this.thumbBox.width(),
                        height = this.thumbBox.height(),
                        canvas = document.createElement("canvas"),
                        dim = el.css('background-position').split(' '),
                        size = el.css('background-size').split(' '),
                        dx = parseInt(dim[0]) - el.width()/2 + width/2,
                        dy = parseInt(dim[1]) - el.height()/2 + height/2,
                        dw = parseInt(size[0]),
                        dh = parseInt(size[1]),
                        sh = parseInt(this.image.height),
                        sw = parseInt(this.image.width);

                    canvas.width = width;
                    canvas.height = height;
                    var context = canvas.getContext("2d");
                    context.drawImage(this.image, 0, 0, sw, sh, dx, dy, dw, dh);
                    var imageData = canvas.toDataURL('image/png');
                    return imageData;
                },
                getBlob: function()
                {
                    var imageData = this.getDataURL();
                    var b64 = imageData.replace('data:image/png;base64,','');
                    var binary = atob(b64);
                    var array = [];
                    for (var i = 0; i < binary.length; i++) {
                        array.push(binary.charCodeAt(i));
                    }
                    return  new Blob([new Uint8Array(array)], {type: 'image/png'});
                },
                zoomIn: function ()
                {
                    this.ratio*=1.1;
                    setBackground();
                },
                zoomOut: function ()
                {
                    this.ratio*=0.9;
                    setBackground();
                }
            },
            setBackground = function()
            {
                var w =  parseInt(obj.image.width)*obj.ratio;
                var h =  parseInt(obj.image.height)*obj.ratio;

                var pw = (el.width() - w) / 2;
                var ph = (el.height() - h) / 2;

                el.css({
                    'background-image': 'url(' + obj.image.src + ')',
                    'background-size': w +'px ' + h + 'px',
                    'background-position': pw + 'px ' + ph + 'px',
                    'background-repeat': 'no-repeat'});
            },
            imgMouseDown = function(e)
            {
                e.preventDefault();
                e.stopImmediatePropagation();

                obj.state.dragable = true;
                if( "touchstart" ===e.type){

                    obj.state.mouseX = event.touches[0].clientX;
                    obj.state.mouseY = event.touches[0].clientY;

                }else{
                    obj.state.mouseX = e.clientX;
                    obj.state.mouseY = e.clientY;
                }

            },
            imgMouseMove = function(e)
            {
                e.preventDefault();
                e.stopImmediatePropagation();

                if (obj.state.dragable)
                {
                    var x =  0;
                    var y = 0;

                    if("touchmove" ===e.type){
                        x = event.touches[0].clientX - obj.state.mouseX;
                        y = event.touches[0].clientY - obj.state.mouseY;
                    }else{
                        x = e.clientX - obj.state.mouseX;
                        y = e.clientY - obj.state.mouseY;
                    }


                    var bg = el.css('background-position').split(' ');

                    var bgX = x + parseInt(bg[0]);
                    var bgY = y + parseInt(bg[1]);

                    el.css('background-position', bgX +'px ' + bgY + 'px');


                    if("touchmove" === e.type){
                        obj.state.mouseX = event.touches[0].clientX;
                        obj.state.mouseY = event.touches[0].clientY;
                    }else{
                        obj.state.mouseX = e.clientX;
                        obj.state.mouseY = e.clientY;
                    }
                }


            },
            imgMouseUp = function(e)
            {
                e.preventDefault();
                e.stopImmediatePropagation();
                obj.state.dragable = false;
            },
            zoomImage = function(e)
            {
                e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0 ? obj.ratio*=1.1 : obj.ratio*=0.9;
                setBackground();
            }

        obj.spinner.show();
        obj.image.onload = function() {
            obj.spinner.hide();

            setBackground();

            el.bind('mousedown', imgMouseDown);
            el.bind('mousemove', imgMouseMove);
            $(window).bind('mouseup', imgMouseUp);

            el.bind('touchstart', imgMouseDown);
            el.bind('touchmove', imgMouseMove);
            el.bind('touchend', imgMouseUp);

            el.bind('mousewheel DOMMouseScroll', zoomImage);
        };
        obj.image.src = options.imgSrc;
        el.on('remove', function(){$(window).unbind('mouseup', imgMouseUp)});

        return obj;
    };

    jQuery.fn.cropbox = function(options){
        return new cropbox(options, this);
    };
}));

/**
 * Created by Liyong.zhu on 2016/4/6.
 */
angular
    .module('ework-ui')
    .service('frPaperBank', frPaperBankService)
    .controller('LeftNavCtrl', ['$scope', '$rootScope','$location','$log','$state','$cookieStore', '$uibMsgbox', 'frPaperBank', 'erp_studentsService', LeftNavCtrl]);

function LeftNavCtrl($scope,$rootScope,$location,$log,$state,$cookieStore, $uibMsgbox, frPaperBank, erp_studentsService) {
    window.sss = $scope;
    $scope.curNavSystem = null;
    $scope.subjectList = []
    $scope.gradeList = []
    $scope.student = null
    $scope.$watch('selectedSubject', function(newValue, oldValue) {
        if (!newValue) { return }
        $rootScope.selectedSubject = newValue;
    })

    $scope.$watch('selectedGrade', function(newValue, oldValue) {
        if (!newValue) { return }
        $rootScope.selectedGrade = newValue;
    })

    //var pattern = new RegExp("/tr/");
    //pattern.test(location.hash)
    if(true) {
        //- 获取学科列表
        frPaperBank.getSubjects()
            .then(function(data) {
                if (data.error) {
                    console.log('请求学科失败');
                    return ;
                }
                $scope.subjectList = data.data && data.data.subjectList;
                if ($scope.subjectList.length) {
                    $rootScope.selectedSubject = $scope.subjectList[0].id
                }
            }, function(error) {
                console.log('frPaperBankError: ' + error);
            })
        //- 获取年级列表
        frPaperBank.getGrades()
            .then(function(data) {
                if (data.error) {
                    console.log('请求年段失败');
                    return ;
                }
                $scope.gradeList = data.data && data.data.gradeList;
                if ($scope.gradeList.length) {
                    $rootScope.selectedGrade = $scope.gradeList[0].id
                }
            }, function(error) {
                console.log('frPaperBankError: ' + error);
            })
    }

    $('.left_nav').mCustomScrollbar({
        theme: 'klxx'
    });

    function queryStudentInfo(){
        erp_studentsService.query({
            row_num: 20,
            studentId: $scope.studentId
        }, function(resp){
            if(!resp.error && resp.data.length){
                $scope.student = resp.data[0];
            }
        });
    }

    $scope.selectNav = function(menu){
        if($scope.curNavSystem){
            $scope.curNavSystem.active = 'false';
        }
        $scope.curNavSystem = menu;

        // 学生ID
        if (menu.href) {
            $scope.studentId = $("#rootIndex_studentId").val()
            if ($scope.studentId) {
                queryStudentInfo()
            } else {
                $scope.student = null
            }
        }

        if($scope.curNavSystem){
            if(menu.menus&&menu.menus.length){
                if(menu.open){
                    menu.open = false;
                }else{
                    closeAllMenus();
                    menu.open = true;
                }
            } else {
                $scope.curNavSystem.active = 'true';
            }

            if(menu.type == '$state'|| menu.value){
                $state.go(menu.value, menu);
                if(!menu.href && menu.menus){
                    $scope.selectNav(menu.menus[0]);
                }
            }
        }
    }
    $rootScope.selectNav = $scope.selectNav;
    $scope.isNavDown = false;
    $scope.downNav = function(){
        if($scope.isNavDown){
            $scope.isNavDown = false;
        }else{
            $scope.isNavDown = true;
        }
    }

    $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
        /**
         * Fixed Bug 点击菜单后，要点两次才会展开
         * 原因：通过点击菜单栏进行跳转的，已经对菜单栏进行initial$location操作，
         * 同时对$scope.curNavSystem 进行了赋值操作，因此监听路由变化时，如果
         * $scope.curNavSystem中的key与toState的name一致，则不是需要再重新初始化菜单栏
         */
        if ($scope.curNavSystem && $scope.curNavSystem.key && $scope.curNavSystem.key != toState.name) {
            initial$location();
        }
    })
    $scope.$watch('$parent.curSystem',function(newValue,oldValue, scope){
        $scope.studentId = $("#rootIndex_studentId").val()
        if ($scope.studentId) {
            queryStudentInfo()
        } else {
            $scope.student = null
        }
        initial$location();
    });

    function closeAllMenus() {
        if ($scope.$parent.curSystem && $scope.$parent.curSystem.menus) {
            var menus = $scope.$parent.curSystem.menus
            for (var i = menus.length - 1; i >= 0; i--) {
                menus[i].open = false;
            }
        }
    }

    function initial$location(){
        var pathLocation  =  $location.path();
        $log.info("$location path is " + pathLocation);
        if(pathLocation){
            $log.log("sub menu path is "+pathLocation);
            if($scope.$parent.curSystem){
                var menu = genMenu($scope.$parent.curSystem.menus,pathLocation);
                if(menu){
                    $log.log("found menu is "+menu.name);
                    $scope.selectNav(menu);
                }
            }
        }
    }


    /**
     * 查询根菜单
     * @param menus
     * @param pathStr
     * @returns {*}
     */
    function genMenu(menus,pathStr){
        if(menus&&menus.length){
            var menu = null;
            $.each(menus,function(i,m){
                if(pathStr == m.path){
                    menu = m;
                }

                if(menu){
                    return ;
                }

                else {
                    if(m.menus){
                        menu = genMenu(m.menus,pathStr);
                        if(menu){
                            $log.log("found sub menu,so open parent menu "+ m.name);
                            $scope.selectNav(m);
                        }
                    }
                }
            });
            return menu;
        }
        return null;
    }
}

/**
 * erp v5 -> paperBank management
 * subjects list
 * grade list
 */
frPaperBankService.$inject = ['$http', '$q', '$log']
function frPaperBankService($http, $q, $log) {
    return {
        getSubjects: getSubjects,
        getGrades: getGrades
    }

    function getSubjects() {
        return $http.get('/erp/tr/subject/list', {})
            .then(getSubjectsComplete)
            .catch(getSubjectsFailed);

        function getSubjectsComplete(response) {
            return response.data;
        }

        function getSubjectsFailed(error) {
            $log.error('XHR Failed for getSubjects.' + error);
            return $q.reject(error);
        }
    }

    function getGrades() {
        return $http.get('/erp/tr/grade/list', {})
            .then(getGradesComplete)
            .catch(getGradesFailed);

        function getGradesComplete(response) {
            return response.data;
        }

        function getGradesFailed(error) {
            $log.error('XHR Failed for getGrades.' + error);
            return $q.reject(error);
        }
    }
}
/**
 * Created by Liyong.zhu on 2016/4/6.
 */
angular.module('ework-ui')
    .controller('TopHeadCtrl', [
        '$rootScope',
        '$scope',
        '$state',
        '$log',
        '$cookies',
        '$uibMsgbox',
        'PUBORGService',
        'PUBORGSelectedService',
        'PUBSystemParamService',
        'PUBEmployeeService',
        'LogoutService',
        TopHeadCtrl]);

function TopHeadCtrl(
        $rootScope,
        $scope ,
        $state,
        $log,
        $cookies,
        $uibMsgbox,
        PUBORGService,
        PUBORGSelectedService,
        PUBSystemParamService,
        PUBEmployeeService,
        LogoutService
    )
{
    $scope.selectedNode = {};
    $rootScope.orgRootNode = {};
    $scope.systemParam = {};
    $scope.version = 'v 5.0.1'

    $scope.toChangeOrg = function(){
        queryOrg();
    }
    $scope.logout = function(){
        LogoutService.query({},function(resp){

        });
        return true;
    }

    function queryOrg(){
        PUBORGService.get({},function(resp){
            if(resp.error == false){
                $rootScope.orgRootNode = resp.data;
                $("#org_tree").jstree({
                    "plugins" : ["types"],
                    "types" : {
                        "menus" : {
                            "icon" : "fa fa-folder-o"
                        },
                        "leaf" : {
                            "icon" : "fa fa-file-text-o"
                        }
                    },
                    'core' : {
                        'data' : $rootScope.orgRootNode,
                        "check_callback" : function (operation, node, parent, position, more) {
                            //TODO
                            console.log(operation)
                        }
                    }
                });

                $("#org_tree").bind('click.jstree', function(event) {
                    var eventNodeName = event.target.text;
                    var node = {
                    }
                    node.id = event.target.id.replace("_anchor","");
                  if(event.target.id&&event.target.id!='')
                   checkedOrg(node);
                })
                //双击  确定jstree.js中已经添加双击事件
                $("#org_tree").bind('dblclick.jstree',function(event){
                    var eventNodeName = event.target.text;
                    $log.log(eventNodeName);
                    var node = {
                    }
                    node.id = event.target.id.replace("_anchor","");
                    checkedOrg(node);
                });
                $log.log("组织机构加载成功!");
            }
        })
    }

    function checkedOrg(node){
        PUBORGService.put(node,function(resp){
            // Fixed: Bug#1723 【功能】在学员主页切换团队，抛出404异常
            // Fixed By baiqb@klxuexi.org

            window.location = '?#/index'
            location.reload(true)

            // Comment by baiqb@klxuexi.org
            // if (resp.changeTeam && location.href && location.href.indexOf('studentId') != -1) {
            //     window.location = '/klxxedu/#/students/studentsSearch'
            // } else {
            //     location.reload(true);
            // }
            // End Comment
            // End Fixed: bug#1723
        })
    }

    function querySelectedOrg(){
        PUBORGSelectedService.query({},function(resp){
            if(!resp.error){
                $scope.selectedNode = resp.data;
                $rootScope.selectedOrg = resp.data;
                if (!$scope.selectedNode) {
                    $uibMsgbox.alert('您还没选择校区/团队，请选择校区或团队！', function() {
                        setTimeout(function() {
                            $('.btn-group.sel-org.pull-left').addClass('open');
                        }, 300);
                    })
                }
                if ($scope.selectedNode.text && $scope.selectedNode.text.length > 8) {
                    $scope.selectedNode.text = $scope.selectedNode.text.substring(0, 7) + '...'
                }
            }
        })
    }

    function querySystemParam(){
        PUBSystemParamService.query({},function(resp){
            if(!resp.error){
                $scope.systemParam = resp.data;
            }
        })
    }

    function queryEmployee(){
        PUBEmployeeService.query({},function(resp){
            if(!resp.error){
                $scope.employee = resp.data;
            }
        });
    }

    queryOrg();
    querySelectedOrg();
    querySystemParam();
    queryEmployee();
}
angular.module('ework-ui').controller('modal_courseMultiSelectController', [
  '$rootScope',
  '$scope',
  '$uibMsgbox',
  'erp_studentBuOrgsService',
  'PUBORGSelectedService',
  'erp_timeSeasonService',
  'erp_subjectService',
  'erp_gradeService',
  'erp_courseService',
  'selectedCourseList',
  modal_courseMultiSelectController
]);

function modal_courseMultiSelectController(
  $rootScope,
  $scope,
  $uibMsgbox,
  erp_studentBuOrgsService,
  PUBORGSelectedService,
  erp_timeSeasonService,
  erp_subjectService,
  erp_gradeService,
  erp_courseService,
  selectedCourseList
) {
  $scope.business_type = 1
  $scope.tableConf = {
    selectAll: false
  }
  $scope.selectedTimeSeason = null
  $scope.selectedGrade = null
  $scope.selectedSubject = null
  $scope.branchList = []
  $scope.timeSeasonList = []
  $scope.gradeList = []
  $scope.subjectList = []
  $scope.selectedCourseList = [];
  _.forEach(selectedCourseList, function (item) {
    $scope.selectedCourseList.push(item.course)
  })
  $scope.business_types = [{
    value: 1,
    label: '培英班课程'
  }, {
    value: 2,
    label: '一对一课程'
  }, {
    value: 3,
    label: '晚辅导课程'
  }]
  init();
  $scope.onCheckAllChange = function () {
    _.forEach($scope.toSelectingCourseList, function (item) {
      item.checked = $scope.tableConf.selectAll
    })
  }

  $scope.onCourseCheckedChange = function (course) {
    $scope.tableConf.selectAll = _.every($scope.toSelectingCourseList, {checked: true})
  }
  /**
   * 选择校区
   * @param branch
   */
  $scope.selectBranch = function(branch) {
    $scope.selectedBranch = branch;
    querySubject();
    queryGrade();
    $scope.querySelectingCourse();
  }

  /**
   * 选择课程季
   * @param season
   */
  $scope.selectSeason = function(season) {
    $scope.selectedTimeSeason = season;
    querySubject();
    queryGrade();
    $scope.querySelectingCourse();
  }

  /**
   * 选择年级
   * @param grade
   */
  $scope.selectGrade = function(grade) {
    $scope.selectedGrade = grade;
    querySubject();
    $scope.querySelectingCourse();
  }

  /**
   * 选择科目
   * @param subject
   */
  $scope.selectSubject = function(subject) {
    $scope.selectedSubject = subject;
    $scope.querySelectingCourse();
  }

  $scope.selectBusinessType = function (business_type) {
    $scope.business_type = business_type
    $scope.querySelectingCourse();
  }

  $scope.onOk = function () {
    let checkedCourseList = _.filter($scope.toSelectingCourseList, {checked: true})
    if (!checkedCourseList || checkedCourseList.length <= 0) {
      $uibMsgbox.alert('请至少选择一门课程！')
      return
    }
    $scope.$close(checkedCourseList)
  }
  /**
   * 查询课程
   */
  $scope.querySelectingCourse = function() {
    var param = {
      branch_id: $scope.selectedBranch.id,
      season_id: $scope.selectedTimeSeason ? $scope.selectedTimeSeason.id : -1,
      grade_id: $scope.selectedGrade ? $scope.selectedGrade.id : -1,
      subject_id: $scope.selectedSubject ? $scope.selectedSubject.id : -1,
      business_type: $scope.business_type,
      status : 1, //只查询上架课程
      search_info: $("#courseSearchInfo").val()
    };
    $scope.isQuerySelectingCourse = 'isQuerySelectingCourse';
    erp_courseService.query(param, function(resp) {
      $scope.toSelectingCourseList = [];
      $scope.isQuerySelectingCourse = '';
      if (!resp.error) {
        var toSelectingCourseList = _.differenceBy(resp.data, $scope.selectedCourseList, 'id')
        _.forEach(toSelectingCourseList, function (item) {
          item.checked = false
          $scope.toSelectingCourseList.push(item)
        })
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  // 初始化
  function init() {
    queryBuOrgs()
      .then(function () {
        return querySelectedOrg()
      })
      .then(function () {
        return queryTimeSeason()
      })
      .then(function () {
        return querySubject()
      })
      .then(function () {
        return queryGrade()
      })
      .then(function () {
        $scope.querySelectingCourse()
      })
  }
  // 查询已选择的组织
  function querySelectedOrg() {
    return PUBORGSelectedService.query({})
      .$promise.then(function(resp) {
        if (!resp.error) {
          $scope.selectedOrg = resp.data;
          if ($scope.selectedOrg && $scope.selectedOrg.id && $scope.selectedOrg.type == "4") {
            $.each($scope.branchList, function(i, b) {
              if (b.id == $scope.selectedOrg.id) {
                $scope.selectedBranch = b;
              }
            });
          } else {
            $uibMsgbox.warn("请选择校区!");
          }
        } else {
          $uibMsgbox.error(resp.message);
        }
      })
  }
  // 查询团队
  function queryBuOrgs() {
    return erp_studentBuOrgsService.queryAll({})
      .$promise.then(function(resp) {
        if (!resp.error) {
          $scope.branchList = resp.data;
          querySelectedOrg();
        }
      })
  }

   /**
   * 查询课程季
   */
  function queryTimeSeason() {
    return erp_timeSeasonService.list({})
      .$promise.then(function(resp) {
        if (!resp.error) {
          $scope.timeSeasonList = resp.data;
        }
      })
  }

    /**
   * 查询科目
   */
  function querySubject() {
    return erp_subjectService.querySelectDatas({
      branch_id: $scope.selectedBranch ? $scope.selectedBranch.id : -1,
      season_id: $scope.selectedTimeSeason ? $scope.selectedTimeSeason.id : -1,
      grade_id: $scope.selectedGrade ? $scope.selectedGrade.id : -1
    }).$promise.then(function(resp) {
      if (!resp.error) {
        $scope.subjectList = resp.data;
      }
    })
  }

  /**
   * 查询年级
   */
  function queryGrade() {
    return erp_gradeService.querySelectDatas({
      branch_id: $scope.selectedBranch ? $scope.selectedBranch.id : -1,
      season_id: $scope.selectedTimeSeason ? $scope.selectedTimeSeason.id : -1
    }).$promise.then(function(resp) {
      if (!resp.error) {
        $scope.gradeList = resp.data;
        if ($scope.student && $scope.student.grade_id) {
          $.each($scope.gradeList, function(i, grade) {
            if (grade.id == $scope.student.grade_id) {
              $scope.selectedGrade = grade;
            }
          })
        }
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }
}

angular.module('ework-ui').controller('modal_courseQueueDetailController', [
	'$rootScope',
	'$scope',
	'$uibMsgbox',
	'erp_sortNumService',
	'course',
	'courseSeqDetail',
	modal_courseQueueDetailController
]);

function modal_courseQueueDetailController(
	$rootScope,
	$scope,
	$uibMsgbox,
	erp_sortNumService,
	course,
	courseSeqDetail
) {
	// 课程信息
	$scope.course = course;
	// 课次信息
	$scope.courseSeqDetail = courseSeqDetail;
	// 课次排号列表
	$scope.courseQueueList = []

	$scope.goToOrders = function (studentId) {
		window.open("?studentId=" + studentId + "#/orders/ordersMgr/ordersMgrOrders");
	}
	function getDetailList() {
		erp_sortNumService.query({
			courseId: course.id,
			seq: courseSeqDetail.seq
		}, function (resp) {
			if (!resp.error) {
				$scope.courseQueueList = resp.data;
			}
		})
	}

	$scope.cancelQueue = function(detail) {
		$uibMsgbox.confirm('确认取消排号？', function(res) {
			if (res == 'yes') {
				erp_sortNumService.cancelSortNum({
					courseId: $scope.course.id,
					studentId: detail.studentId,
					seq: detail.seq
				}, function (resp) {
					if (!resp.error) {
						getDetailList();
					} else {
						$uibMsgbox.error(resp.message);
					}
				}, function (resp) {
					$uibMsgbox.error('请求失败！错误码：' + resp.status);
				})
			}
		})
	}
	getDetailList();
}

angular.module('ework-ui').controller('modal_imageUploadController', [
  '$rootScope',
  '$scope',
  '$uibMsgbox',
  '$uibModalInstance',
  'erp_studentsService',
  'onUploadImg',
  modal_imageUploadController
])

function modal_imageUploadController(
  $rootScope,
  $scope,
  $uibMsgbox,
  $uibModalInstance,
  erp_studentsService,
  onUploadImg
) {
  $scope.result = null;
}

angular.module('ework-ui').controller(
		'orderWorkflowModalController',
		[ '$scope',
		  '$uibModalInstance',
		  '$uibMsgbox',
		  'erp_workflowTaskTodoService',
	      'erp_workflowTaskService',
	      'orderId',
	      orderWorkflowModalController ])

function orderWorkflowModalController($scope, $uibModalInstance, $uibMsgbox,
		erp_workflowTaskTodoService, erp_workflowTaskService, orderId) {
	$scope.orderId = orderId;
	$scope.taskDetail = null;
	
	$scope.queryWorkflowInfo = function() {
		var param = {orderId : orderId};
		erp_workflowTaskTodoService.queryByOrderId(param, function(resp) {
			if (!resp.error && resp.data) {
				param.taskId = resp.data.id;
				erp_workflowTaskService.query(param, function(resp) {
		            if(!resp.error) {
		                var taskDetailInfo = resp;
		                if(taskDetailInfo && taskDetailInfo.task &&  taskDetailInfo.task.createTime){
		                    var dt = new Date();
		                    dt.setTime(taskDetailInfo.task.createTime);
		                    taskDetailInfo.task.createTime = Format('yyyy-MM-dd hh:mm:ss', dt);
		                }
		                if(taskDetailInfo && taskDetailInfo.task && taskDetailInfo.task.extData && taskDetailInfo.task.extData.businessDetailInfo){
		                    taskDetailInfo.task.extData.businessDetailInfo = taskDetailInfo.task.extData.businessDetailInfo.split("$$$$").join("");
		                }

		                if(taskDetailInfo && taskDetailInfo.historyTasks){
		                    $.each( taskDetailInfo.historyTasks,function(i,historyTask){
		                        if(historyTask.createTime){
		                            var dt = new Date();
		                            dt.setTime(historyTask.createTime);
		                            historyTask.createTime = Format('yyyy-MM-dd hh:mm:ss',dt);
		                        }
		                    });
		                }

		                $scope.taskDetail = taskDetailInfo;
		            }else{
		            	$uibMsgbox.alert(resp.message);
		            }
		        });
			} else {
				if (resp.message) {
					$uibMsgbox.alert(resp.message);
				} else if (!resp.data) {
					$uibMsgbox.alert("该订单没有审批流程信息");
					$uibModalInstance.close();
				}
			}
		});
	}
	
	$scope.queryWorkflowInfo();
}

/*!
 * ng-image-input-with-preview v0.0.6
 * https://github.com/deiwin/ngImageInputWithPreview
 *
 * A FileReader based directive to easily preview and upload image files.
 *
 * Copyright 2015, Deiwin Sarjas <deiwin.sarjas@gmail.com>
 * Released under the MIT license
 */
(function(angular, undefined) {
  'use strict';

  // src/js/fileReader.service.js
  (function() {
    'use strict';
    var module = angular.module('fileReaderService', []);
  
    // Copied from the following link with onProgress excluded because it's not needed
    // http://odetocode.com/blogs/scott/archive/2013/07/03/building-a-filereader-service-for-angularjs-the-service.aspx
    module.factory('fileReader', ['$q',
      function($q) {
        var onLoad = function(reader, deferred, scope) {
          return function() {
            scope.$apply(function() {
              deferred.resolve(reader.result);
            });
          };
        };
  
        var onError = function(reader, deferred, scope) {
          return function() {
            scope.$apply(function() {
              deferred.reject(reader.result);
            });
          };
        };
  
        var getReader = function(deferred, scope) {
          var reader = new FileReader();
          reader.onload = onLoad(reader, deferred, scope);
          reader.onerror = onError(reader, deferred, scope);
          return reader;
        };
  
        var readAsDataURL = function(file, scope) {
          var deferred = $q.defer();
  
          var reader = getReader(deferred, scope);
          reader.readAsDataURL(file);
  
          return deferred.promise;
        };
  
        return {
          readAsDataUrl: readAsDataURL
        };
      }
    ]);
  })();

  // src/js/imageWithPreview.directive.js
  /*jshint -W072 */
  // ^ ignore jshint warning about link method having too many parameters
  (function() {
    'use strict';
    var module = angular.module('ngImageInputWithPreview', [
      'fileReaderService',
    ]);
  
    module.directive('imageWithPreview', ['fileReader', '$q',
      function(fileReader, $q) {
        var DEFAULT_MIMETYPES = 'image/png,image/jpeg';
        var NOT_AN_IMAGE = 'this-is-not-an-image';
  
        var isAnAllowedImage = function(allowedTypes, file) {
          if (!allowedTypes) {
            allowedTypes = DEFAULT_MIMETYPES;
          }
          var allowedTypeArray = allowedTypes.split(',');
          return allowedTypeArray.some(function(allowedType) {
            if (allowedType === file.type) {
              return true;
            }
            var allowedTypeSplit = allowedType.split('/');
            var fileTypeSplit = file.type.split('/');
            return allowedTypeSplit.length === 2 && fileTypeSplit.length === 2 && allowedTypeSplit[1] === '*' &&
              allowedTypeSplit[0] === fileTypeSplit[0];
          });
        };
        var createResolvedPromise = function() {
          var d = $q.defer();
          d.resolve();
          return d.promise;
        };
  
        return {
          restrict: 'A',
          require: 'ngModel',
          scope: {
            image: '=ngModel',
            allowedTypes: '@accept',
            dimensionRestrictions: '&dimensions',
          },
          link: function($scope, element, attrs, ngModel) {
            element.bind('change', function(event) {
              var file = (event.srcElement || event.target).files[0];
              // the following link recommends making a copy of the object, but as the value will only be changed
              // from the view, we don't have to worry about making a copy
              // https://docs.angularjs.org/api/ng/type/ngModel.NgModelController#$setViewValue
              ngModel.$setViewValue(file, 'change');
            });
            ngModel.$parsers.push(function(file) {
              if (!file) {
                return file;
              }
              if (!isAnAllowedImage($scope.allowedTypes, file)) {
                return NOT_AN_IMAGE;
              }
              return {
                fileReaderPromise: fileReader.readAsDataUrl(file, $scope),
              };
            });
            $scope.$watch('image', function(value) {
              if (value && typeof value === 'string') {
                $scope.image = {
                  src: value,
                  isPath: true,
                };
              }
            });
            ngModel.$validators.image = function(modelValue, viewValue) {
              var value = modelValue || viewValue;
              return value !== NOT_AN_IMAGE;
            };
            ngModel.$asyncValidators.parsing = function(modelValue, viewValue) {
              var value = modelValue || viewValue;
              if (!value || !value.fileReaderPromise) {
                return createResolvedPromise();
              }
              // This should help keep the model value clean. At least I hope it does
              value.fileReaderPromise.finally(function() {
                delete value.fileReaderPromise;
              });
              return value.fileReaderPromise.then(function(dataUrl) {
                value.src = dataUrl;
              }, function() {
                return $q.reject('Failed to parse');
              });
            };
            ngModel.$asyncValidators.dimensions = function(modelValue, viewValue) {
              if (!attrs.dimensions) {
                return createResolvedPromise();
              }
              var value = modelValue || viewValue;
              if (!value || !value.fileReaderPromise) {
                return createResolvedPromise();
              }
              var deferred = $q.defer();
              value.fileReaderPromise.then(function(dataUrl) {
                // creating an image lets us find out its dimensions after it's loaded
                var image = document.createElement('img');
                image.addEventListener('load', function() {
                  var valid = $scope.dimensionRestrictions({
                    width: image.width,
                    height: image.height,
                  });
                  $scope.$apply(function() {
                    if (valid) {
                      deferred.resolve();
                    } else {
                      deferred.reject('Invalid dimensions');
                    }
                  });
                });
                image.addEventListener('error', function() {
                  $scope.$apply(function() {
                    deferred.reject('Failed to detect dimensions. Not an image!');
                  });
                });
                image.src = dataUrl;
              }, function() {
                deferred.reject('Failed to detect dimensions');
              });
              return deferred.promise;
            };
          }
        };
      }
    ]);
  })();
})(window.angular);

angular.module('ework-ui').directive('klImageUpload', [
  '$log',
  '$uibModal',
  '$uibMsgbox',
  klImageUpload
]);

function klImageUpload(
  $log,
  $uibModal,
  $uibMsgbox
) {
  return {
    restrict: 'EA',
    replace: true,
    scope: {
      imgUrls: '=?',
      multiple: '=?',
      onImageAdd: '&?',
      onImageDelete: '&?'
    },
    template: '<div class="kl-image-upload">'
      +   '<div class="list-item image-preview" ng-repeat="url in imgUrls track by $index">'
      +     '<img src="{{url}}">'
      +     '<div class="image-wrapper" ng-click="delImage($index)"><i class="iconfont icon-delete"></i></div>'
      +   '</div>'
      +   '<div class="list-item image-add" ng-click="addImage()" '
      +     ' ng-show="multiple || imgUrls.length <= 0">'
      +     '<i class="iconfont icon-operation_add"></i>'
      +   '</div>'
      + '</div>',
    link: function (scope, element, attrs) {
      scope.imgUrls = scope.imgUrls || []
      scope.delImage = function (index) {
        $uibMsgbox.confirm('确认删除该图片？', function (res) {
          if (res == 'yes') {
            var _imgUrl = _.cloneDeep(scope.imgUrls[index])
            scope.imgUrls.splice(index, 1)
            if (scope.onImageDelete) {
              scope.onImageDelete({img: _imgUrl})
            }
          }
        })
      }
      scope.addImage = function () {
        var modalInstance = $uibModal.open({
          templateUrl: 'templates/block/modal/image-upload.modal.html',
          controller: 'modal_imageUploadController',
          resolve: {
            onUploadImg: function() {
              return function(imageUrl, $uibModalInstance) {
                $uibModalInstance.close(imageUrl);
              }
            }
          }
        });
        modalInstance.result.then(function(imageUrl) {
          scope.imgUrls.push(imageUrl)
          if (scope.onImageAdd) {
            scope.onImageAdd({img: imageUrl})
          }
        }, function() {
          $log.info('DrawModal dismissed at: ' + new Date());
        })
      }
    }
  }
}
/**
 * 团队下拉框选择指令
 * <kl-branch-select bu-id="buId" branch-id="branchId"></kl-branch-select>
 */
angular.module('ework-ui').directive('klBranchSelect',[
	'PUBORGService',
	'erp_organizationService',
	klBranchSelect
]);

function klBranchSelect(
	PUBORGService,
	erp_organizationService
) {
	return {
		restrict: 'EA',
		replace: true,
		scope: {
			buId: '=buId',
			branchId: '=?branchId',
			hideOptionAll: '=?',
      queryAll: '=?',
			onBranchChange: '&?'
		},
		template: '<select ng-model="branchId" class="form-control" ng-change="handleBranchChange(branchId)"'
		+ ' ng-options="branch.id as branch.org_name for branch in branchList">'
    + '<option value="" ng-if="!hideOptionAll">全部</option>'
		+ '</select>',
		link: function (scope, element, attrs) {
			scope.branchList = []

			if (scope.buId) {
				getBranchList();
			}
			
			scope.handleBranchChange = function (branchId) {
				var branch = _.find(scope.branchList, {id: branchId})
				if (!!branch && _.isFunction(scope.onBranchChange)) {
					scope.onBranchChange({
						branch: branch
					})
				}
			}
			scope.$watch('branchId', function (newValue, oldValue) {
				scope.branchId = isNaN(+scope.branchId) || scope.branchId <= 0 ? null : +scope.branchId
				if (!!scope.branchId) {
					scope.handleBranchChange(scope.branchId)
				}
			})
			scope.$watch('buId', function (newValue, oldValue) {
				scope.buId = isNaN(+scope.buId) || scope.buId <= 0 ? null : +scope.buId
				if (newValue && newValue != oldValue) {
					getBranchList();
				}
			})

			function getBranchList() {
				return erp_organizationService.branchList({
					p_buId: scope.buId,
					p_queryAll: scope.queryAll
				}, function(resp) {
	        if (!resp.error) {
	          scope.branchList = resp.data;
	          _.remove(scope.branchList, function(n) {
	          	return n.parent_id != scope.buId;
						})
						if (scope.branchId) {
							scope.handleBranchChange(scope.branchId)
						}
	        }
	      })
			}
		}
	}
}

/**
 * 团队下拉框选择指令
 * <kl-bu-select bu-id="buId"></kl-bu-select>
 */
angular.module('ework-ui').directive('klBuSelect',[
	'PUBORGService',
	'PUBORGSelectedService',
	klBuSelect
]);

function klBuSelect(
	PUBORGService,
	PUBORGSelectedService
) {
	return {
		restrict: 'EA',
		replace: true,
		scope: {
			buId: '=?buId'
		},
		template: '<select ng-model="buId" class="form-control"'
		+ ' ng-options="bu.buId as bu.text for bu in buList">'
		+ '</select>',
		link: function (scope, element, attrs) {
			scope.buList = []

            scope.buId = isNaN(+scope.buId)|| scope.buId <= 0 ?null : scope.buId
			if (!scope.buId) {
				PUBORGSelectedService.query({}, function(resp) {
					if (!resp.error) {
						scope.buId = resp.data.buId;
					} else  {
						console.log(resp.message)
					}
				})
			}

			PUBORGService.queryBu({}, function(resp) {
				if (!resp.error) {
				  scope.buList = resp.data;
				}
		 	})

			scope.$watch('buId', function ( newValude, oldValue) {
                scope.buId = isNaN(+scope.buId)|| scope.buId <= 0 ? null : +scope.buId
            })
		}
	}
}

/**
 * 优惠券下拉框
 */
angular.module('ework-ui').directive('klCouponSelect', [
  'erp_ebCouponService',
  klCouponSelect
])

function klCouponSelect(
  erp_ebCouponService
) {
  return {
    restrict: 'EA',
    replace: true,
    scope: {
      coupon: '='
    },
    template: '<select class="form-control" '
    + ' ng-model="coupon" ng-options="coupon.id as coupon.name for coupon in couponList">'
    + '</select>',
    link: function (scope, element, attrs) {
      console.log(scope.coupon)
      scope.couponList = []
      erp_ebCouponService.query({
        currentPage: 1,
        pageSize: 999
      }, function (resp) {
        if (!scope.error) {
          scope.couponList = resp.data
        }
      })
    }
  }
}
/**
 * 团队下拉框选择指令
 * <kl-bu-select bu-id="buId"></kl-bu-select>
 */
angular.module('ework-ui').directive('klDictSelect',[
	'erp_dictService',
	klDictSelect
]);

function klDictSelect(
    erp_dictService
) {
	return {
		restrict: 'EA',
		replace: true,
		scope: {
			dictType: '=?',
			bindData: '=?'
		},
		template: '<select ng-model="bindData" class="form-control"'
		+ ' ng-options="dictData.code as dictData.name for dictData in dictDataList">'
    + '<option value="" ng-if="!hideOptionAll">全部</option>'
		+ '</select>',
		link: function (scope, element, attrs) {
			scope.dictDataList = [];
			if (scope.dictType) {
        erp_dictService.query({
					code: scope.dictType
				}, function(resp) {
					if (!resp.error) {
						scope.dictDataList = resp.data;
					} else  {
						console.log(resp.message)
					}
				});
			}
		}
	}
}

/**
 * 年级下拉框
 * @author baiqb@klxuexi.org
 * @date 2017/5/25 19:58:51
 */
angular.module('ework-ui').directive('klGradeSelect', [
	'erp_gradeService',
	klGradeSelect
]);

function klGradeSelect(
	erp_gradeService
) {
	return {
		restrict: 'EA',
		replace: true,
		scope: {
			gradeId: '=?',
			gradeName: '=?',
			grade: '=?'
		},
		template: '<select class="form-control" ng-model="grade"'
		+ 	'ng-options="grade.grade_name for grade in gradeList" ng-required="required" >'
		+ '</select>',
		link: function (scope, element, attrs) {
			scope.grade = scope.grade || {}
			scope.gradeId = Number(scope.gradeId || 0)
			scope.gradeName = scope.gradeName || ''
			scope.required = attrs.required
			scope.gradeList = []
			scope.$watch('grade', function (newValue, oldValue) {
				if (newValue && newValue.id) {
					scope.gradeId = newValue.id
					scope.gradeName = newValue.grade_name
				}
			})
			scope.$watch('gradeId', function (newValue, oldValue) {
				if (newValue) {
					scope.grade = _.find(scope.gradeList, {id: newValue})
				}
			})
			erp_gradeService.query({
				pageSize: 999
			}, function (resp) {
				if (!resp.error) {
					scope.gradeList = resp.data;
					if (scope.gradeId) {
						scope.grade = _.find(scope.gradeList, {id: scope.gradeId})
					}
				}
			})
		}
	}
}
/**
 * 科目下拉框
 * @author baiqb@klxuexi.org
 * @date 2017/5/25 20:12:35
 */
angular.module('ework-ui').directive('klSubjectSelect', [
	'erp_subjectService',
	klSubjectSelect
])

function klSubjectSelect(
	erp_subjectService
) {
	return {
		restrict: 'EA',
		replace: true,
		scope: {
			subject: '=?',
			subjectId: '=?',
			subjectName: '=?'
		},
		template: '<select class="form-control" '
		+ ' ng-model="subject" ng-options="subject.name for subject in subjectList">'
		+ ' </select>',
		link: function (scope, element, attrs) {
			scope.subject = scope.subject || {}
			scope.subjectId = scope.subjectId || null
			scope.subjectName = scope.subjectName || ''
			scope.subjectList = [];
			scope.$watch('subject', function (newVal, oldVal) {
				if (newVal && newVal.id && newVal.name) {
					scope.subjectId = newVal.id
					scope.subjectName = newVal.name
				}
			})
			scope.$watch('subjectId', function (newVal, oldVal) {
				if (newVal != scope.subject.id) {
					scope.subject = _.find(scope.subjectList, {id: newVal})
				}
			})
			erp_subjectService.query({
				pageSize: 999
			}, function(resp) {
				if (!resp.error) {
					scope.subjectList = resp.data;
					if (scope.subjectId) {
						scope.subject = _.find(scope.subjectList, {id: scope.subjectId})
					}
				}
			})
		}
	}
}
/**
 * 教研组下拉框
 * @author yans@klxuexi.org
 * @date 2017/12/21 16:50:35
 */
angular.module('ework-ui').directive('klTeacherGroupSelect', [
	'erp_teacherGroupService',
	klTeacherGroupSelect
])

function klTeacherGroupSelect(
	erp_teacherGroupService
) {
	return {
		restrict: 'EA',
		replace: true,
		scope: {
			group: '=?',
			teachGroupId: '=?',
			teachGroupName: '=?'
		},
		template: '<select class="form-control" '
		+ ' ng-model="group" ng-options="group.teach_group_name for group in teachGroupList">'
		+ ' </select>',
		link: function (scope, element, attrs) {
			scope.group = scope.group || {}
			scope.teachGroupId = scope.teachGroupId || null
			scope.teachGroupName = scope.teachGroupName || ''
			scope.teachGroupList = [];
			scope.$watch('group', function (newVal, oldVal) {
				if (newVal && newVal.id && newVal.teach_group_name) {
					scope.teachGroupId = newVal.id
					scope.teachGroupName = newVal.teach_group_name
				}
			})
			scope.$watch('teachGroupId', function (newVal, oldVal) {
				if (newVal != scope.group.id) {
					scope.group = _.find(scope.teachGroupList, {id: newVal})
				}
			})
			 // 获取教研组
			erp_teacherGroupService.queryList({}, function (resp) {
				if (!resp.error) {
					scope.teachGroupList = resp.data;
					if (scope.teachGroupId) {
						scope.group = _.find(scope.teachGroupList, { id: scope.teachGroupId })
					}
				} else {
					$uibMsgbox.error(resp.message)
				}
			})
		}
	}
}
/**
 * 课程季选择列表
 */
angular.module('ework-ui').directive('klTimeseasonSelect',[
	'erp_timeSeasonService',
	klTimeseasonSelect
])

function klTimeseasonSelect(
	erp_timeSeasonService
) {
	return {
		restrict: 'EA',
		replace: true,
		scope: {
			timeSeason: '=timeSeason'
		},
		template: '<select ng-model="timeSeason" class="form-control"'
		+		' ng-options="timeSeason.course_season_name for timeSeason in timeSeasonList">'
		+ '</select>',
		link: function(scope, element, attrs) {
			scope.timeSeasonList = []
			erp_timeSeasonService.query({}, function (resp) {
				if (!resp.error) {
					scope.timeSeasonList = resp.data;
					scope.timeSeasonList.unshift({id:null,course_season_name:'全部'});
					scope.timeSeason = scope.timeSeasonList[0];
				}
			})
		}
	}
}
/**
 * 选择业务团队和业务校区组件
 */
angular.module('ework-ui')
  .directive('rdBranch', ['PUBORGService', rdBranch]);

function rdBranch(
  PUBORGService
) {
  return {
    restrict: 'EA',
    replace: true,
    transclude: true,
    scope: {
      buId: '=?ngBuId',
      branchId: '=?ngBranchId',
      onChange: '&ngValueChange'
    },
    template: '<div class="form-inline">'
      + '<div class="form-group">'
      +   '团队：<kl-bu-select bu-id="buId"></kl-bu-select>'
      + '</div>'
      + '<div class="form-group">'
      +   '校区：<kl-branch-select bu-id="buId" branch-id="branchId">'
      + '</kl-branch-select>'
      + '</div>'
      + '<ng-transclude></ng-transclude>'
      + '</div>',
    link: function (scope, element, attrs) {
      scope.$watch('buId', function () {
        scope.onChange();
      })
      // 监听校区变化
      scope.$watch('branchId', function () {
        scope.onChange();
      })
    }
  }
}

'use strict';

// angular.module('ework-ui')
  // .directive('bsSwitch', function ($parse, $timeout) {
  //   return {
  //     restrict: 'A',
  //     require: 'ngModel',
  //     link: function link(scope, element, attrs, controller) {
  //       var isInit = false;

  //       /**
  //        * Return the true value for this specific checkbox.
  //        * @returns {Object} representing the true view value; if undefined, returns true.
  //        */
  //       var getTrueValue = function() {
  //         if (attrs.type === 'radio') {
  //           return attrs.value || $parse(attrs.ngValue)(scope) || true;
  //         }
  //         var trueValue = ($parse(attrs.ngTrueValue)(scope));
  //         if (angular.isUndefined(trueValue)) {
  //           trueValue = true;
  //         }
  //         return trueValue;
  //       };

  //       /**
  //        * Get a boolean value from a boolean-like string, evaluating it on the current scope.
  //        * @param value The input object
  //        * @returns {boolean} A boolean value
  //        */
  //       var getBooleanFromString = function(value) {
  //         return scope.$eval(value) === true;
  //       };

  //       /**
  //        * Get a boolean value from a boolean-like string, defaulting to true if undefined.
  //        * @param value The input object
  //        * @returns {boolean} A boolean value
  //        */
  //       var getBooleanFromStringDefTrue = function(value) {
  //         return (value === true || value === 'true' || !value);
  //       };

  //       /**
  //        * Returns the value if it is truthy, or undefined.
  //        *
  //        * @param value The value to check.
  //        * @returns the original value if it is truthy, {@link undefined} otherwise.
  //        */
  //       var getValueOrUndefined = function (value) {
  //         return (value ? value : undefined);
  //       };

  //       /**
  //        * Returns a function that executes the provided expression
  //        *
  //        * @param value The string expression
  //        * @return a function that evaluates the expression
  //        */
  //       var getExprFromString = function (value) {
  //         if (angular.isUndefined(value)) {
  //           return angular.noop;
  //         }
  //         return function () {
  //           scope.$evalAsync(value);
  //         };
  //       };

  //       /**
  //        * Get the value of the angular-bound attribute, given its name.
  //        * The returned value may or may not equal the attribute value, as it may be transformed by a function.
  //        *
  //        * @param attrName  The angular-bound attribute name to get the value for
  //        * @returns {*}     The attribute value
  //        */
  //       var getSwitchAttrValue = function(attrName) {
  //         var map = {
  //           'switchRadioOff': getBooleanFromStringDefTrue,
  //           'switchActive': function(value) {
  //             return !getBooleanFromStringDefTrue(value);
  //           },
  //           'switchAnimate': getBooleanFromStringDefTrue,
  //           'switchLabel': function(value) {
  //             return value ? value : '&nbsp;';
  //           },
  //           'switchIcon': function(value) {
  //             if (value) {
  //               return '<span class=\'' + value + '\'></span>';
  //             }
  //           },
  //           'switchWrapper': function(value) {
  //             return value || 'wrapper';
  //           },
  //           'switchInverse': getBooleanFromString,
  //           'switchReadonly': getBooleanFromString,
  //           'switchChange': getExprFromString
  //         };
  //         var transFn = map[attrName] || getValueOrUndefined;
  //         return transFn(attrs[attrName]);
  //       };

  //       /**
  //        * Set a bootstrapSwitch parameter according to the angular-bound attribute.
  //        * The parameter will be changed only if the switch has already been initialized
  //        * (to avoid creating it before the model is ready).
  //        *
  //        * @param element   The switch to apply the parameter modification to
  //        * @param attr      The name of the switch parameter
  //        * @param modelAttr The name of the angular-bound parameter
  //        */
  //       var setSwitchParamMaybe = function(element, attr, modelAttr) {
  //         if (!isInit) {
  //           return;
  //         }
  //         var newValue = getSwitchAttrValue(modelAttr);
  //         element.bootstrapSwitch(attr, newValue);
  //       };

  //       var setActive = function() {
  //         setSwitchParamMaybe(element, 'disabled', 'switchActive');
  //       };

  //       /**
  //        * If the directive has not been initialized yet, do so.
  //        */
  //       var initMaybe = function() {
  //         // if it's the first initialization
  //         if (!isInit) {
  //           var viewValue = (controller.$modelValue === getTrueValue());
  //           isInit = !isInit;
  //           // Bootstrap the switch plugin
  //           element.bootstrapSwitch({
  //             radioAllOff: getSwitchAttrValue('switchRadioOff'),
  //             disabled: getSwitchAttrValue('switchActive'),
  //             state: viewValue,
  //             onText: getSwitchAttrValue('switchOnText'),
  //             offText: getSwitchAttrValue('switchOffText'),
  //             onColor: getSwitchAttrValue('switchOnColor'),
  //             offColor: getSwitchAttrValue('switchOffColor'),
  //             animate: getSwitchAttrValue('switchAnimate'),
  //             size: getSwitchAttrValue('switchSize') || 'small',
  //             labelText: attrs.switchLabel ? getSwitchAttrValue('switchLabel') : getSwitchAttrValue('switchIcon'),
  //             wrapperClass: getSwitchAttrValue('switchWrapper'),
  //             handleWidth: getSwitchAttrValue('switchHandleWidth'),
  //             labelWidth: getSwitchAttrValue('switchLabelWidth'),
  //             inverse: getSwitchAttrValue('switchInverse'),
  //             readonly: getSwitchAttrValue('switchReadonly')
  //           });
  //           if (attrs.type === 'radio') {
  //             controller.$setViewValue(controller.$modelValue);
  //           } else {
  //             controller.$setViewValue(viewValue);
  //           }
  //         }
  //       };

  //       var switchChange = getSwitchAttrValue('switchChange');

  //       /**
  //        * Listen to model changes.
  //        */
  //       var listenToModel = function () {

  //         attrs.$observe('switchActive', function (newValue) {

  //           var active = getBooleanFromStringDefTrue(newValue);
  //           // if we are disabling the switch, delay the deactivation so that the toggle can be switched
  //           if (!active) {
  //             $timeout(setActive);
  //           } else {
  //             // if we are enabling the switch, set active right away
  //             setActive();
  //           }
  //         });

  //         // When the model changes
  //         controller.$render = function () {
  //           initMaybe();
  //           var newValue = controller.$modelValue;
  //           if (newValue !== undefined && newValue !== null) {
  //             element.bootstrapSwitch('state', newValue === getTrueValue(), true);
  //           } else {
  //             element.bootstrapSwitch('indeterminate', true, true);
  //             controller.$setViewValue(undefined);
  //           }
  //           // switchChange();
  //         };

  //         // angular attribute to switch property bindings
  //         var bindings = {
  //           'switchRadioOff': 'radioAllOff',
  //           'switchOnText': 'onText',
  //           'switchOffText': 'offText',
  //           'switchOnColor': 'onColor',
  //           'switchOffColor': 'offColor',
  //           'switchAnimate': 'animate',
  //           'switchSize': 'size',
  //           'switchLabel': 'labelText',
  //           'switchIcon': 'labelText',
  //           'switchWrapper': 'wrapperClass',
  //           'switchHandleWidth': 'handleWidth',
  //           'switchLabelWidth': 'labelWidth',
  //           'switchInverse': 'inverse',
  //           'switchReadonly': 'readonly'
  //         };

  //         var observeProp = function(prop, bindings) {
  //           return function() {
  //             attrs.$observe(prop, function () {
  //               setSwitchParamMaybe(element, bindings[prop], prop);
  //             });
  //           };
  //         };

  //         // for every angular-bound attribute, observe it and trigger the appropriate switch function
  //         for (var prop in bindings) {
  //           attrs.$observe(prop, observeProp(prop, bindings));
  //         }
  //       };

  //       /**
  //        * Listen to view changes.
  //        */
  //       var listenToView = function () {

  //         if (attrs.type === 'radio') {
  //           // when the switch is clicked
  //           element.on('change.bootstrapSwitch', function (e) {
  //             // discard not real change events
  //             if ((controller.$modelValue === controller.$viewValue) && (e.target.checked !== $(e.target).bootstrapSwitch('state'))) {
  //               // $setViewValue --> $viewValue --> $parsers --> $modelValue
  //               // if the switch is indeed selected
  //               if (e.target.checked) {
  //                 // set its value into the view
  //                 controller.$setViewValue(getTrueValue());
  //               } else if (getTrueValue() === controller.$viewValue) {
  //                 // otherwise if it's been deselected, delete the view value
  //                 controller.$setViewValue(undefined);
  //               }
  //               switchChange();
  //             }
  //           });
  //         } else {
  //           // When the checkbox switch is clicked, set its value into the ngModel
  //           element.on('switchChange.bootstrapSwitch', function (e) {
  //             // $setViewValue --> $viewValue --> $parsers --> $modelValue
  //             controller.$setViewValue(e.target.checked);
  //             switchChange();
  //           });
  //         }
  //       };

  //       // Listen and respond to view changes
  //       listenToView();

  //       // Listen and respond to model changes
  //       listenToModel();

  //       // On destroy, collect ya garbage
  //       scope.$on('$destroy', function () {
  //         element.bootstrapSwitch('destroy');
  //       });
  //     }
  //   };
  // })
  // .directive('bsSwitch', function () {
  //   return {
  //     restrict: 'E',
  //     require: 'ngModel',
  //     template: '<input bs-switch>',
  //     replace: true
  //   };
  // });

  angular.module('ework-ui')
  .directive('bsSwitch', function(){
    return {
      restrict: 'AE'
    , replace: true
    , transclude: true
    , template: function(element, attrs) {
        if (typeof attrs.ngTrueValue == 'undefined') {
          attrs.ngTrueValue = true
        }
        if (typeof attrs.ngFalseValue == 'undefined') {
          attrs.ngFalseValue = false
        }  
        var html = '';
        html += '<span';
        html +=   ' class="switch' + (attrs.class ? ' ' + attrs.class : '') + '"';
        html +=   attrs.ngModel ? ' ng-click="' + attrs.disabled + ' ? ' + attrs.ngModel + ' : ' + attrs.ngModel + '=(' + attrs.ngModel + ' == ' + attrs.ngFalseValue + '?' 
          + attrs.ngTrueValue + ':' + attrs.ngFalseValue + ')' + (attrs.switchChange ? '; ' + attrs.switchChange + '()"' : '"') : '';
        html +=   ' ng-class="{ checked:' + attrs.ngModel + '==' + attrs.ngTrueValue + ', disabled:' + attrs.disabled + ' }"';
        html +=   '>';
        html +=   '<small></small>';
        html +=   '<input type="checkbox"';
        html +=     attrs.id ? ' id="' + attrs.id + '"' : '';
        html +=     attrs.name ? ' name="' + attrs.name + '"' : '';
        html +=     attrs.ngModel ? ' ng-model="' + attrs.ngModel + '"' : '';
        html +=     ' style="display:none" />';
        html +=     '<span class="switch-text">'; /*adding new container for switch text*/
        html +=     attrs.on ? '<span class="on">'+attrs.on+'</span>' : ''; /*switch text on value set by user in directive html markup*/
        html +=     attrs.off ? '<span class="off">'+attrs.off + '</span>' : ' ';  /*switch text off value set by user in directive html markup*/
        html += '</span>';
        return html;
      }
    }
  });
/**
 * DatePickerPopup Directive
 */
angular.module('ework-ui')
  .directive('rdDatePickerPopup', ['$filter','uibDateParser',rdDatePickerPopup]);

function rdDatePickerPopup(
    $filter,
    uibDateParser
  ) {
  return {
    restrict: 'EA',
    replace: false,
    transclue: true,
    require: '?ngModel',
    scope: {
      ngModel: '=',
      required: '=required',
      disabled: '=?',
      ngMinDate: '=?',
      ngMaxDate: '=?',
    },
    template: 
        '<div class="input-group">'
      +   '<input type="text" ng-disabled="disabled" class="form-control" readonly="true"'
      +       'uib-datepicker-popup '
      +       'datepicker-options="datepickerOptions"'
      +       'ng-model="date" is-open="isopened" '
      +       'datepicker-options = "dateOptions"' 
      +       'ng-required="required" '
      +       'clear-text="清空"'
      +       'current-text="今天"'
      +       'on-open-focus="true" '
      +        'close-text="关闭" style="background:#fff;">'
      +   '<span class="input-group-btn">'
      +     '<button class="btn btn-default" ng-click="open()" ng-disabled="disabled">'
      +       '<i class="glyphicon glyphicon-calendar"></i>'
      +     '</button>'
      +   '</span>'
      + '</div>',
    link: function (scope, element, attrs, ngModel) {
      scope.isopened = false;
      scope.datepickerOptions = {
        showWeeks: false,
        maxDate: new Date(scope.ngMaxDate),
        minDate: new Date(scope.ngMinDate),
      }
      // Specify how UI should be updated
      ngModel.$render = function () {
        scope.date = uibDateParser.parse(ngModel.$viewValue, 'yyyy-MM-dd')
      }

      scope.open = function () {
        scope.isopened = true;
      }

      scope.$watch('date', function () {
        ngModel.$setViewValue($filter('date')(scope.date, 'yyyy-MM-dd'))
      })
    }
  }
}
angular.module('ework-ui')
  .directive('rdDatePickerRange', ['$timeout',rdDatePickerRange]);

function rdDatePickerRange(
    $timeout
  ) {
    return {
      restrict: 'E',
      replace: true,
      transclude: true,
      scope: {
        start_date: '=?ngStartDate',
        end_date: '=?ngEndDate',
        disabled: '=?',
        disableInit: '=?disableInit',
        onDateChange: '&ngDateChange',
        labelName:'=?',
        dateRange: '=?ngDefaultRange',
        btnTag: '=?ngBtnTag',//hidden为隐藏
        future: '=?ngFuture',
        minDate: '=?ngMinDate',
        maxDate: '=?ngMaxDate',
      },
      template: '<form class="form-inline"> '
          +'<div class="form-group"> '
            +'<span class="input-label">{{labelName || \'起止日期\'}}：</span>	<rd-date-picker-popup ng-model="start_date" ng-min-date="minDate" ng-max-date="maxDate" disabled="disabled"></rd-date-picker-popup> '
            +'&nbsp;-&nbsp;<rd-date-picker-popup ng-model="end_date" ng-min-date="minDate" ng-max-date="maxDate" disabled="disabled"></rd-date-picker-popup> '
            +'<button class="btn {{btnTag}}" '
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'today\']" '
              +'ng-click="handleChangeDateRange(\'today\')">今天</button> '
            +'<button class="btn {{btnTag}}" '
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'curMonth\']" '
              +'ng-click="handleChangeDateRange(\'curMonth\')">本月</button> '
            +'<button class="btn {{btnTag}}" '
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'lastWeek\']" '
              +'ng-click="handleChangeDateRange(\'lastWeek\')">最近一周</button> '
            +'<button class="btn {{btnTag}}"'
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'lastMonth\']" '
              +'ng-click="handleChangeDateRange(\'lastMonth\')">最近一个月</button> '
            +'<button class="btn {{btnTag}}" '
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'lastYear\']" '
              +'ng-click="handleChangeDateRange(\'lastYear\')">最近一年</button> '
            +'<button ng-if="future" class="btn" '
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'today\']" '
              +'ng-click="handleChangeDateRange(\'today\')">今天</button> '
            +'<button ng-if="future" class="btn"'
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'nextTwoDays\']" '
              +'ng-click="handleChangeDateRange(\'nextTwoDays\')">今明天</button> '
            +'<button ng-if="future" class="btn" '
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'nextWeek\']" '
              +'ng-click="handleChangeDateRange(\'nextWeek\')">未来一周</button> '
            +'<button ng-if="future" class="btn"'
              +'ng-class="{true: \'btn-primary\', false: \'\'}[dateRange==\'nextMonth\']" '
              +'ng-click="handleChangeDateRange(\'nextMonth\')">未来一个月</button> '
          +'</div> '
          + '<div class="form-group" ng-transclude></div>'
        +'</form>',
      link: function (scope, element, attrs/*, ngModel*/) {
        if (!scope.start_date && !scope.disableInit) {
          scope.dateRange = scope.dateRange || 'lastMonth';
          if (scope.dateRange == 'curMonth') {
            scope.start_date = moment().startOf('month').format('YYYY-MM-DD');
            scope.end_date = moment().endOf('month').format('YYYY-MM-DD');
          } else {
            scope.start_date = getDateByType(scope.dateRange);
            scope.end_date = scope.end_date || getCurrentDate();
          }
        }
        scope.dateRangeObj = {
          start_date: scope.start_date,
          end_date: scope.end_date
        }

        scope.handleChangeDateRange = function (dateType) {
          scope.dateRange = dateType;
          if (dateType == 'curMonth') {
            scope.start_date = moment().startOf('month').format('YYYY-MM-DD');
            scope.end_date = moment().endOf('month').format('YYYY-MM-DD');
          } else if(scope.future==true){
            scope.end_date = getDateByType(dateType);
            scope.start_date = getCurrentDate();
          }else {
            scope.end_date = getCurrentDate();
            scope.start_date = getDateByType(dateType);
          }
        }
        
        scope.$watch('start_date', function () {
          scope.dateRangeObj.start_date = scope.start_date
        })

        scope.$watch('end_date', function () {
          scope.dateRangeObj.end_date = scope.end_date
        })

        scope.$watch('dateRangeObj', function(newVal, oldVal) {
          if (newVal.start_date != oldVal.start_date 
            || newVal.end_date != oldVal.end_date) {
            scope.onDateChange();
          }
        }, true)

        function getDateByType(dateType) {
          if (dateType == 'today') {
            return getCurrentDate();
          } else if (dateType == 'lastWeek') {
            return getLatestWeek();
          } else if (dateType == 'lastMonth') {
            return getLatestMonth();
          } else if (dateType == 'lastYear') {
            return getLatestYear();
          } else if (dateType == 'nextTwoDays') {
            return getNextTwoDays();
          } else if (dateType == 'nextWeek') {
            return getNextWeek();
          } else if (dateType == 'nextMonth') {
            return getNextMonth();
          } else {
            scope.dateRange = 'lastMonth';
            return getLatestMonth();
          }
        }
      }
    }
}
/**
 * AngularJS Directive - Image Crop v1.1.0
 * Copyright (c) 2014 Andy Shora, andyshora@gmail.com, andyshora.com
 * Licensed under the MPL License [http://www.nihilogic.dk/licenses/mpl-license.txt]
 */
(function() {

  /*
   * DEPENDENCY
   * Javascript BinaryFile
   * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
   * Licensed under the MPL License [http://www.nihilogic.dk/licenses/mpl-license.txt]
   */

  var BinaryFile = function(strData, iDataOffset, iDataLength) {
    var data = strData;
    var dataOffset = iDataOffset || 0;
    var dataLength = 0;

    this.getRawData = function() {
      return data;
    }

    if (typeof strData == "string") {
      dataLength = iDataLength || data.length;

      this.getByteAt = function(iOffset) {
        return data.charCodeAt(iOffset + dataOffset) & 0xFF;
      }

      this.getBytesAt = function(iOffset, iLength) {
        var aBytes = [];

        for (var i = 0; i < iLength; i++) {
          aBytes[i] = data.charCodeAt((iOffset + i) + dataOffset) & 0xFF
        };

        return aBytes;
      }
    } else if (typeof strData == "unknown") {
      dataLength = iDataLength || IEBinary_getLength(data);

      this.getByteAt = function(iOffset) {
        return IEBinary_getByteAt(data, iOffset + dataOffset);
      }

      this.getBytesAt = function(iOffset, iLength) {
        return new VBArray(IEBinary_getBytesAt(data, iOffset + dataOffset, iLength)).toArray();
      }
    }

    this.getLength = function() {
      return dataLength;
    }

    this.getSByteAt = function(iOffset) {
      var iByte = this.getByteAt(iOffset);
      if (iByte > 127)
        return iByte - 256;
      else
        return iByte;
    }

    this.getShortAt = function(iOffset, bBigEndian) {
      var iShort = bBigEndian ?
        (this.getByteAt(iOffset) << 8) + this.getByteAt(iOffset + 1) : (this.getByteAt(iOffset + 1) << 8) + this.getByteAt(iOffset)
      if (iShort < 0)
        iShort += 65536;
      return iShort;
    }
    this.getSShortAt = function(iOffset, bBigEndian) {
      var iUShort = this.getShortAt(iOffset, bBigEndian);
      if (iUShort > 32767)
        return iUShort - 65536;
      else
        return iUShort;
    }
    this.getLongAt = function(iOffset, bBigEndian) {
      var iByte1 = this.getByteAt(iOffset),
        iByte2 = this.getByteAt(iOffset + 1),
        iByte3 = this.getByteAt(iOffset + 2),
        iByte4 = this.getByteAt(iOffset + 3);

      var iLong = bBigEndian ?
        (((((iByte1 << 8) + iByte2) << 8) + iByte3) << 8) + iByte4 : (((((iByte4 << 8) + iByte3) << 8) + iByte2) << 8) + iByte1;
      if (iLong < 0)
        iLong += 4294967296;
      return iLong;
    }
    this.getSLongAt = function(iOffset, bBigEndian) {
      var iULong = this.getLongAt(iOffset, bBigEndian);
      if (iULong > 2147483647)
        return iULong - 4294967296;
      else
        return iULong;
    }

    this.getStringAt = function(iOffset, iLength) {
      var aStr = [];

      var aBytes = this.getBytesAt(iOffset, iLength);
      for (var j = 0; j < iLength; j++) {
        aStr[j] = String.fromCharCode(aBytes[j]);
      }
      return aStr.join("");
    }

    this.getCharAt = function(iOffset) {
      return String.fromCharCode(this.getByteAt(iOffset));
    }
    this.toBase64 = function() {
      return window.btoa(data);
    }
    this.fromBase64 = function(strBase64) {
      data = window.atob(strBase64);
    }
  };
  /*
   * DEPENDENCY
   * Javascript EXIF Reader 0.1.6
   * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
   * Licensed under the MPL License [http://www.nihilogic.dk/licenses/mpl-license.txt]
   */
  var EXIF = (function() {

    var debug = false;

    var ExifTags = {

      // version tags
      0x9000: "ExifVersion", // EXIF version
      0xA000: "FlashpixVersion", // Flashpix format version

      // colorspace tags
      0xA001: "ColorSpace", // Color space information tag

      // image configuration
      0xA002: "PixelXDimension", // Valid width of meaningful image
      0xA003: "PixelYDimension", // Valid height of meaningful image
      0x9101: "ComponentsConfiguration", // Information about channels
      0x9102: "CompressedBitsPerPixel", // Compressed bits per pixel

      // user information
      0x927C: "MakerNote", // Any desired information written by the manufacturer
      0x9286: "UserComment", // Comments by user

      // related file
      0xA004: "RelatedSoundFile", // Name of related sound file

      // date and time
      0x9003: "DateTimeOriginal", // Date and time when the original image was generated
      0x9004: "DateTimeDigitized", // Date and time when the image was stored digitally
      0x9290: "SubsecTime", // Fractions of seconds for DateTime
      0x9291: "SubsecTimeOriginal", // Fractions of seconds for DateTimeOriginal
      0x9292: "SubsecTimeDigitized", // Fractions of seconds for DateTimeDigitized

      // picture-taking conditions
      0x829A: "ExposureTime", // Exposure time (in seconds)
      0x829D: "FNumber", // F number
      0x8822: "ExposureProgram", // Exposure program
      0x8824: "SpectralSensitivity", // Spectral sensitivity
      0x8827: "ISOSpeedRatings", // ISO speed rating
      0x8828: "OECF", // Optoelectric conversion factor
      0x9201: "ShutterSpeedValue", // Shutter speed
      0x9202: "ApertureValue", // Lens aperture
      0x9203: "BrightnessValue", // Value of brightness
      0x9204: "ExposureBias", // Exposure bias
      0x9205: "MaxApertureValue", // Smallest F number of lens
      0x9206: "SubjectDistance", // Distance to subject in meters
      0x9207: "MeteringMode", // Metering mode
      0x9208: "LightSource", // Kind of light source
      0x9209: "Flash", // Flash status
      0x9214: "SubjectArea", // Location and area of main subject
      0x920A: "FocalLength", // Focal length of the lens in mm
      0xA20B: "FlashEnergy", // Strobe energy in BCPS
      0xA20C: "SpatialFrequencyResponse", //
      0xA20E: "FocalPlaneXResolution", // Number of pixels in width direction per FocalPlaneResolutionUnit
      0xA20F: "FocalPlaneYResolution", // Number of pixels in height direction per FocalPlaneResolutionUnit
      0xA210: "FocalPlaneResolutionUnit", // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
      0xA214: "SubjectLocation", // Location of subject in image
      0xA215: "ExposureIndex", // Exposure index selected on camera
      0xA217: "SensingMethod", // Image sensor type
      0xA300: "FileSource", // Image source (3 == DSC)
      0xA301: "SceneType", // Scene type (1 == directly photographed)
      0xA302: "CFAPattern", // Color filter array geometric pattern
      0xA401: "CustomRendered", // Special processing
      0xA402: "ExposureMode", // Exposure mode
      0xA403: "WhiteBalance", // 1 = auto white balance, 2 = manual
      0xA404: "DigitalZoomRation", // Digital zoom ratio
      0xA405: "FocalLengthIn35mmFilm", // Equivalent foacl length assuming 35mm film camera (in mm)
      0xA406: "SceneCaptureType", // Type of scene
      0xA407: "GainControl", // Degree of overall image gain adjustment
      0xA408: "Contrast", // Direction of contrast processing applied by camera
      0xA409: "Saturation", // Direction of saturation processing applied by camera
      0xA40A: "Sharpness", // Direction of sharpness processing applied by camera
      0xA40B: "DeviceSettingDescription", //
      0xA40C: "SubjectDistanceRange", // Distance to subject

      // other tags
      0xA005: "InteroperabilityIFDPointer",
      0xA420: "ImageUniqueID" // Identifier assigned uniquely to each image
    };

    var TiffTags = {
      0x0100: "ImageWidth",
      0x0101: "ImageHeight",
      0x8769: "ExifIFDPointer",
      0x8825: "GPSInfoIFDPointer",
      0xA005: "InteroperabilityIFDPointer",
      0x0102: "BitsPerSample",
      0x0103: "Compression",
      0x0106: "PhotometricInterpretation",
      0x0112: "Orientation",
      0x0115: "SamplesPerPixel",
      0x011C: "PlanarConfiguration",
      0x0212: "YCbCrSubSampling",
      0x0213: "YCbCrPositioning",
      0x011A: "XResolution",
      0x011B: "YResolution",
      0x0128: "ResolutionUnit",
      0x0111: "StripOffsets",
      0x0116: "RowsPerStrip",
      0x0117: "StripByteCounts",
      0x0201: "JPEGInterchangeFormat",
      0x0202: "JPEGInterchangeFormatLength",
      0x012D: "TransferFunction",
      0x013E: "WhitePoint",
      0x013F: "PrimaryChromaticities",
      0x0211: "YCbCrCoefficients",
      0x0214: "ReferenceBlackWhite",
      0x0132: "DateTime",
      0x010E: "ImageDescription",
      0x010F: "Make",
      0x0110: "Model",
      0x0131: "Software",
      0x013B: "Artist",
      0x8298: "Copyright"
    };

    var GPSTags = {
      0x0000: "GPSVersionID",
      0x0001: "GPSLatitudeRef",
      0x0002: "GPSLatitude",
      0x0003: "GPSLongitudeRef",
      0x0004: "GPSLongitude",
      0x0005: "GPSAltitudeRef",
      0x0006: "GPSAltitude",
      0x0007: "GPSTimeStamp",
      0x0008: "GPSSatellites",
      0x0009: "GPSStatus",
      0x000A: "GPSMeasureMode",
      0x000B: "GPSDOP",
      0x000C: "GPSSpeedRef",
      0x000D: "GPSSpeed",
      0x000E: "GPSTrackRef",
      0x000F: "GPSTrack",
      0x0010: "GPSImgDirectionRef",
      0x0011: "GPSImgDirection",
      0x0012: "GPSMapDatum",
      0x0013: "GPSDestLatitudeRef",
      0x0014: "GPSDestLatitude",
      0x0015: "GPSDestLongitudeRef",
      0x0016: "GPSDestLongitude",
      0x0017: "GPSDestBearingRef",
      0x0018: "GPSDestBearing",
      0x0019: "GPSDestDistanceRef",
      0x001A: "GPSDestDistance",
      0x001B: "GPSProcessingMethod",
      0x001C: "GPSAreaInformation",
      0x001D: "GPSDateStamp",
      0x001E: "GPSDifferential"
    };

    var StringValues = {
      ExposureProgram: {
        0: "Not defined",
        1: "Manual",
        2: "Normal program",
        3: "Aperture priority",
        4: "Shutter priority",
        5: "Creative program",
        6: "Action program",
        7: "Portrait mode",
        8: "Landscape mode"
      },
      MeteringMode: {
        0: "Unknown",
        1: "Average",
        2: "CenterWeightedAverage",
        3: "Spot",
        4: "MultiSpot",
        5: "Pattern",
        6: "Partial",
        255: "Other"
      },
      LightSource: {
        0: "Unknown",
        1: "Daylight",
        2: "Fluorescent",
        3: "Tungsten (incandescent light)",
        4: "Flash",
        9: "Fine weather",
        10: "Cloudy weather",
        11: "Shade",
        12: "Daylight fluorescent (D 5700 - 7100K)",
        13: "Day white fluorescent (N 4600 - 5400K)",
        14: "Cool white fluorescent (W 3900 - 4500K)",
        15: "White fluorescent (WW 3200 - 3700K)",
        17: "Standard light A",
        18: "Standard light B",
        19: "Standard light C",
        20: "D55",
        21: "D65",
        22: "D75",
        23: "D50",
        24: "ISO studio tungsten",
        255: "Other"
      },
      Flash: {
        0x0000: "Flash did not fire",
        0x0001: "Flash fired",
        0x0005: "Strobe return light not detected",
        0x0007: "Strobe return light detected",
        0x0009: "Flash fired, compulsory flash mode",
        0x000D: "Flash fired, compulsory flash mode, return light not detected",
        0x000F: "Flash fired, compulsory flash mode, return light detected",
        0x0010: "Flash did not fire, compulsory flash mode",
        0x0018: "Flash did not fire, auto mode",
        0x0019: "Flash fired, auto mode",
        0x001D: "Flash fired, auto mode, return light not detected",
        0x001F: "Flash fired, auto mode, return light detected",
        0x0020: "No flash function",
        0x0041: "Flash fired, red-eye reduction mode",
        0x0045: "Flash fired, red-eye reduction mode, return light not detected",
        0x0047: "Flash fired, red-eye reduction mode, return light detected",
        0x0049: "Flash fired, compulsory flash mode, red-eye reduction mode",
        0x004D: "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
        0x004F: "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
        0x0059: "Flash fired, auto mode, red-eye reduction mode",
        0x005D: "Flash fired, auto mode, return light not detected, red-eye reduction mode",
        0x005F: "Flash fired, auto mode, return light detected, red-eye reduction mode"
      },
      SensingMethod: {
        1: "Not defined",
        2: "One-chip color area sensor",
        3: "Two-chip color area sensor",
        4: "Three-chip color area sensor",
        5: "Color sequential area sensor",
        7: "Trilinear sensor",
        8: "Color sequential linear sensor"
      },
      SceneCaptureType: {
        0: "Standard",
        1: "Landscape",
        2: "Portrait",
        3: "Night scene"
      },
      SceneType: {
        1: "Directly photographed"
      },
      CustomRendered: {
        0: "Normal process",
        1: "Custom process"
      },
      WhiteBalance: {
        0: "Auto white balance",
        1: "Manual white balance"
      },
      GainControl: {
        0: "None",
        1: "Low gain up",
        2: "High gain up",
        3: "Low gain down",
        4: "High gain down"
      },
      Contrast: {
        0: "Normal",
        1: "Soft",
        2: "Hard"
      },
      Saturation: {
        0: "Normal",
        1: "Low saturation",
        2: "High saturation"
      },
      Sharpness: {
        0: "Normal",
        1: "Soft",
        2: "Hard"
      },
      SubjectDistanceRange: {
        0: "Unknown",
        1: "Macro",
        2: "Close view",
        3: "Distant view"
      },
      FileSource: {
        3: "DSC"
      },
      Components: {
        0: "",
        1: "Y",
        2: "Cb",
        3: "Cr",
        4: "R",
        5: "G",
        6: "B"
      }
    };

    function addEvent(element, event, handler) {
      if (element.addEventListener) {
        element.addEventListener(event, handler, false);
      } else if (element.attachEvent) {
        element.attachEvent("on" + event, handler);
      }
    }

    function imageHasData(img) {
      return !!(img.exifdata);
    }

    function getImageData(img, callback) {
      BinaryAjax(img.src, function(http) {
        var data = findEXIFinJPEG(http.binaryResponse);
        img.exifdata = data || {};
        if (callback) {
          callback.call(img)
        }
      });
    }

    function findEXIFinJPEG(file) {
      if (file.getByteAt(0) != 0xFF || file.getByteAt(1) != 0xD8) {
        return false; // not a valid jpeg
      }

      var offset = 2,
        length = file.getLength(),
        marker;

      while (offset < length) {
        if (file.getByteAt(offset) != 0xFF) {
          if (debug)
            console.log("Not a valid marker at offset " + offset + ", found: " + file.getByteAt(offset));
          return false; // not a valid marker, something is wrong
        }

        marker = file.getByteAt(offset + 1);

        // we could implement handling for other markers here,
        // but we're only looking for 0xFFE1 for EXIF data

        if (marker == 22400) {
          if (debug)
            console.log("Found 0xFFE1 marker");

          return readEXIFData(file, offset + 4, file.getShortAt(offset + 2, true) - 2);

          // offset += 2 + file.getShortAt(offset+2, true);

        } else if (marker == 225) {
          // 0xE1 = Application-specific 1 (for EXIF)
          if (debug)
            console.log("Found 0xFFE1 marker");

          return readEXIFData(file, offset + 4, file.getShortAt(offset + 2, true) - 2);

        } else {
          offset += 2 + file.getShortAt(offset + 2, true);
        }

      }

    }


    function readTags(file, tiffStart, dirStart, strings, bigEnd) {
      var entries = file.getShortAt(dirStart, bigEnd),
        tags = {},
        entryOffset, tag,
        i;

      for (i = 0; i < entries; i++) {
        entryOffset = dirStart + i * 12 + 2;
        tag = strings[file.getShortAt(entryOffset, bigEnd)];
        if (!tag && debug)
          console.log("Unknown tag: " + file.getShortAt(entryOffset, bigEnd));
        tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
      }
      return tags;
    }


    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
      var type = file.getShortAt(entryOffset + 2, bigEnd),
        numValues = file.getLongAt(entryOffset + 4, bigEnd),
        valueOffset = file.getLongAt(entryOffset + 8, bigEnd) + tiffStart,
        offset,
        vals, val, n,
        numerator, denominator;

      switch (type) {
        case 1: // byte, 8-bit unsigned int
        case 7: // undefined, 8-bit byte, value depending on field
          if (numValues == 1) {
            return file.getByteAt(entryOffset + 8, bigEnd);
          } else {
            offset = numValues > 4 ? valueOffset : (entryOffset + 8);
            vals = [];
            for (n = 0; n < numValues; n++) {
              vals[n] = file.getByteAt(offset + n);
            }
            return vals;
          }

        case 2: // ascii, 8-bit byte
          offset = numValues > 4 ? valueOffset : (entryOffset + 8);
          return file.getStringAt(offset, numValues - 1);

        case 3: // short, 16 bit int
          if (numValues == 1) {
            return file.getShortAt(entryOffset + 8, bigEnd);
          } else {
            offset = numValues > 2 ? valueOffset : (entryOffset + 8);
            vals = [];
            for (n = 0; n < numValues; n++) {
              vals[n] = file.getShortAt(offset + 2 * n, bigEnd);
            }
            return vals;
          }

        case 4: // long, 32 bit int
          if (numValues == 1) {
            return file.getLongAt(entryOffset + 8, bigEnd);
          } else {
            vals = [];
            for (var n = 0; n < numValues; n++) {
              vals[n] = file.getLongAt(valueOffset + 4 * n, bigEnd);
            }
            return vals;
          }

        case 5: // rational = two long values, first is numerator, second is denominator
          if (numValues == 1) {
            numerator = file.getLongAt(valueOffset, bigEnd);
            denominator = file.getLongAt(valueOffset + 4, bigEnd);
            val = new Number(numerator / denominator);
            val.numerator = numerator;
            val.denominator = denominator;
            return val;
          } else {
            vals = [];
            for (n = 0; n < numValues; n++) {
              numerator = file.getLongAt(valueOffset + 8 * n, bigEnd);
              denominator = file.getLongAt(valueOffset + 4 + 8 * n, bigEnd);
              vals[n] = new Number(numerator / denominator);
              vals[n].numerator = numerator;
              vals[n].denominator = denominator;
            }
            return vals;
          }

        case 9: // slong, 32 bit signed int
          if (numValues == 1) {
            return file.getSLongAt(entryOffset + 8, bigEnd);
          } else {
            vals = [];
            for (n = 0; n < numValues; n++) {
              vals[n] = file.getSLongAt(valueOffset + 4 * n, bigEnd);
            }
            return vals;
          }

        case 10: // signed rational, two slongs, first is numerator, second is denominator
          if (numValues == 1) {
            return file.getSLongAt(valueOffset, bigEnd) / file.getSLongAt(valueOffset + 4, bigEnd);
          } else {
            vals = [];
            for (n = 0; n < numValues; n++) {
              vals[n] = file.getSLongAt(valueOffset + 8 * n, bigEnd) / file.getSLongAt(valueOffset + 4 + 8 * n, bigEnd);
            }
            return vals;
          }
      }
    }


    function readEXIFData(file, start) {
      if (file.getStringAt(start, 4) != "Exif") {
        if (debug)
          console.log("Not valid EXIF data! " + file.getStringAt(start, 4));
        return false;
      }

      var bigEnd,
        tags, tag,
        exifData, gpsData,
        tiffOffset = start + 6;

      // test for TIFF validity and endianness
      if (file.getShortAt(tiffOffset) == 0x4949) {
        bigEnd = false;
      } else if (file.getShortAt(tiffOffset) == 0x4D4D) {
        bigEnd = true;
      } else {
        if (debug)
          console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
        return false;
      }

      if (file.getShortAt(tiffOffset + 2, bigEnd) != 0x002A) {
        if (debug)
          console.log("Not valid TIFF data! (no 0x002A)");
        return false;
      }

      if (file.getLongAt(tiffOffset + 4, bigEnd) != 0x00000008) {
        if (debug)
          console.log("Not valid TIFF data! (First offset not 8)", file.getShortAt(tiffOffset + 4, bigEnd));
        return false;
      }

      tags = readTags(file, tiffOffset, tiffOffset + 8, TiffTags, bigEnd);

      if (tags.ExifIFDPointer) {
        exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);
        for (tag in exifData) {
          switch (tag) {
            case "LightSource":
            case "Flash":
            case "MeteringMode":
            case "ExposureProgram":
            case "SensingMethod":
            case "SceneCaptureType":
            case "SceneType":
            case "CustomRendered":
            case "WhiteBalance":
            case "GainControl":
            case "Contrast":
            case "Saturation":
            case "Sharpness":
            case "SubjectDistanceRange":
            case "FileSource":
              exifData[tag] = StringValues[tag][exifData[tag]];
              break;

            case "ExifVersion":
            case "FlashpixVersion":
              exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
              break;

            case "ComponentsConfiguration":
              exifData[tag] =
                StringValues.Components[exifData[tag][0]] + StringValues.Components[exifData[tag][1]] + StringValues.Components[exifData[tag][2]] + StringValues.Components[exifData[tag][3]];
              break;
          }
          tags[tag] = exifData[tag];
        }
      }

      if (tags.GPSInfoIFDPointer) {
        gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);
        for (tag in gpsData) {
          switch (tag) {
            case "GPSVersionID":
              gpsData[tag] = gpsData[tag][0] + "." + gpsData[tag][1] + "." + gpsData[tag][2] + "." + gpsData[tag][3];
              break;
          }
          tags[tag] = gpsData[tag];
        }
      }

      return tags;
    }


    function getData(img, callback) {
      if (!img.complete)
        return false;
      if (!imageHasData(img)) {
        getImageData(img, callback);
      } else {
        if (callback) {
          callback.call(img);
        }
      }
      return true;
    }

    function getTag(img, tag) {
      if (!imageHasData(img))
        return;
      return img.exifdata[tag];
    }

    function getAllTags(img) {
      if (!imageHasData(img))
        return {};
      var a,
        data = img.exifdata,
        tags = {};
      for (a in data) {
        if (data.hasOwnProperty(a)) {
          tags[a] = data[a];
        }
      }
      return tags;
    }

    function pretty(img) {
      if (!imageHasData(img))
        return "";
      var a,
        data = img.exifdata,
        strPretty = "";
      for (a in data) {
        if (data.hasOwnProperty(a)) {
          if (typeof data[a] == "object") {
            if (data[a] instanceof Number) {
              strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
            } else {
              strPretty += a + " : [" + data[a].length + " values]\r\n";
            }
          } else {
            strPretty += a + " : " + data[a] + "\r\n";
          }
        }
      }
      return strPretty;
    }

    function readFromBinaryFile(file) {
      return findEXIFinJPEG(file);
    }


    return {
      readFromBinaryFile: readFromBinaryFile,
      pretty: pretty,
      getTag: getTag,
      getAllTags: getAllTags,
      getData: getData,
      Tags: ExifTags,
      TiffTags: TiffTags,
      GPSTags: GPSTags,
      StringValues: StringValues
    };

  })();

  angular.module('ImageCropper', [])
    .directive('imageCrop', function() {

      return {
        template: '<div id="image-crop-{{ rand }}" class="ng-image-crop ng-image-crop--{{ shape }}" ng-style="moduleStyles"><section ng-style="sectionStyles" ng-show="step==1"></section><section ng-style="sectionStyles" ng-show="step==2"><canvas class="cropping-canvas" width="{{ canvasWidth }}" height="{{ canvasHeight }}" ng-mousemove="onCanvasMouseMove($event)" ng-mousedown="onCanvasMouseDown($event)"></canvas><div ng-style="croppingGuideStyles" class="cropping-guide"></div><div class="zoom-handle" ng-mousemove="onHandleMouseMove($event)" ng-mousedown="onHandleMouseDown($event)" ng-mouseup="onHandleMouseUp($event)"><span>&larr; zoom &rarr;</span></div></section><section ng-style="sectionStyles" class="image-crop-section-final" ng-show="step==3"><img class="image-crop-final" ng-src="{{ croppedDataUri }}" /></section></div>',
        replace: true,
        restrict: 'AE',
        scope: {
          crop: '=',
          width: '@',
          height: '@',
          shape: '@',
          src: '=',
          resultBlob: '=',
          result: '=',
          step: '=',
          padding: '@',
          maxSize: '@'
        },
        link: function(scope, element, attributes) {

          var padding = scope.padding ? Number(scope.padding) : 200;

          scope.rand = Math.round(Math.random() * 99999);
          scope.step = scope.step || 1;
          scope.shape = scope.shape || 'circle';
          scope.width = parseInt(scope.width, 10) || 300;
          scope.height = parseInt(scope.height, 10) || 300;

          scope.canvasWidth = scope.width + padding;
          scope.canvasHeight = scope.height + padding;

          var $elm = element[0];

          var $canvas = $elm.getElementsByClassName('cropping-canvas')[0];
          var $handle = $elm.getElementsByClassName('zoom-handle')[0];
          var $finalImg = $elm.getElementsByClassName('image-crop-final')[0];
          var $img = new Image();
          var fileReader = new FileReader();

          var maxLeft = 0,
            minLeft = 0,
            maxTop = 0,
            minTop = 0,
            imgLoaded = false,
            imgWidth = 0,
            imgHeight = 0;
          var currentX = 0,
            currentY = 0,
            dragging = false,
            startX = 0,
            startY = 0,
            zooming = false;
          var newWidth = imgWidth,
            newHeight = imgHeight;
          var targetX = 0,
            targetY = 0;
          var zoom = 1;
          var maxZoomGestureLength = 0;
          var maxZoomedInLevel = 0,
            maxZoomedOutLevel = 2;
          var minXPos = 0,
            maxXPos = (padding / 2),
            minYPos = 0,
            maxYPos = (padding / 2); // for dragging bounds     
          var maxSize = scope.maxSize ? Number(scope.maxSize) : null; //max size of the image in px

          var zoomWeight = .6;
          var ctx = $canvas.getContext('2d');
          var exif = null;
          var files = [];

          // ---------- INLINE STYLES ----------- //
          scope.moduleStyles = {
            width: (scope.width + padding) + 'px',
            height: (scope.height + padding) + 'px'
          };

          scope.sectionStyles = {
            width: (scope.width + padding) + 'px',
            height: (scope.height + padding) + 'px'
          };

          scope.croppingGuideStyles = {
            width: scope.width + 'px',
            height: scope.height + 'px',
            top: (padding / 2) + 'px',
            left: (padding / 2) + 'px'
          };

          function handleSize(base64ImageSrc) {

            return new Promise(function(resolve, reject) {

              if (!maxSize) {
                return resolve(base64ImageSrc);
              }

              var img = new Image();
              img.src = base64ImageSrc;

              img.onload = function() {

                var height = img.height;
                var width = img.width;

                //if the size is already ok, just return the image
                if (height <= maxSize && width <= maxSize) {
                  return resolve(base64ImageSrc);
                }

                var ratio = width / height;

                if (ratio > 1) {
                  width = maxSize;
                  height = maxSize / ratio;
                } else {
                  width = maxSize * ratio;
                  height = maxSize;
                }

                width = Math.round(width);
                height = Math.round(height);

                var canvas = document.createElement("canvas");
                canvas.width = width;
                canvas.height = height;

                var context = canvas.getContext("2d");

                context.drawImage(img, 0, 0, img.width, img.height, // source
                  0, 0, canvas.width, canvas.height); // destination   

                context.save();

                var dataUrl = canvas.toDataURL();

                resolve(dataUrl);

              };

            });

          }

          function handleEXIF(base64ImageSrc, exif) {

            return new Promise(function(resolve, reject) {

              var img = new Image();
              img.src = base64ImageSrc;

              img.onload = function() {

                var canvas = document.createElement("canvas");

                if (exif.Orientation >= 5) {
                  canvas.width = img.height;
                  canvas.height = img.width;
                } else {
                  canvas.width = img.width;
                  canvas.height = img.height;
                }

                var context = canvas.getContext("2d");

                // change mobile orientation, if required
                switch (exif.Orientation) {
                  case 1:
                    // nothing
                    break;
                  case 2:
                    // horizontal flip
                    context.translate(img.width, 0);
                    context.scale(-1, 1);
                    break;
                  case 3:
                    // 180 rotate left
                    context.translate(img.width, img.height);
                    context.rotate(Math.PI);
                    break;
                  case 4:
                    // vertical flip
                    context.translate(0, img.height);
                    context.scale(1, -1);
                    break;
                  case 5:
                    // vertical flip + 90 rotate right
                    context.rotate(0.5 * Math.PI);
                    context.scale(1, -1);
                    break;
                  case 6:
                    // 90 rotate right
                    context.rotate(0.5 * Math.PI);
                    context.translate(0, -img.height);
                    break;
                  case 7:
                    // horizontal flip + 90 rotate right
                    context.rotate(0.5 * Math.PI);
                    context.translate(img.width, -img.height);
                    context.scale(-1, 1);
                    break;
                  case 8:
                    // 90 rotate left                                
                    context.rotate(-0.5 * Math.PI);
                    context.translate(-img.width, 0);
                    break;
                  default:
                    break;
                }

                context.drawImage(img, 0, 0);
                context.save();

                var dataUrl = canvas.toDataURL();

                resolve(dataUrl);

              };

            });

          }

          function loadImage(base64ImageSrc) {

            //get the EXIF information from the image
            var byteString = atob(base64ImageSrc.split(',')[1]);
            var binary = new BinaryFile(byteString, 0, byteString.length);
            exif = EXIF.readFromBinaryFile(binary);

            //handle image size
            handleSize(base64ImageSrc).then(function(base64ImageSrc) {

              //if the image has EXIF orientation..
              if (exif && exif.Orientation && exif.Orientation > 1) {
                return handleEXIF(base64ImageSrc, exif);
              }
              //otherwise, just return the image without any treatment
              else {
                return base64ImageSrc;
              }

            }).then(function(base64ImageSrc) {

              $img.src = base64ImageSrc;

            }).catch(function(error) {
              console.log(error);
            });

          };

          // ---------- EVENT HANDLERS ---------- //
          fileReader.onload = function(e) {

            loadImage(this.resultBlob);

          };

          $img.onload = function() {

            scope.step = 2;
            scope.$apply();

            ctx.drawImage($img, 0, 0);

            imgWidth = $img.width;
            imgHeight = $img.height;

            minLeft = (scope.width + padding) - this.width;
            minTop = (scope.height + padding) - this.height;
            newWidth = imgWidth;
            newHeight = imgHeight;

            if (imgWidth >= imgHeight) {
              maxZoomedInLevel = ($canvas.height - padding) / imgHeight;
            } else {
              maxZoomedInLevel = ($canvas.width - padding) / imgWidth;
            }

            maxZoomGestureLength = to2Dp(Math.sqrt(Math.pow($canvas.width, 2) + Math.pow($canvas.height, 2)));

            updateDragBounds();

            var initialX = Math.round((minXPos + maxXPos) / 2);
            var initialY = Math.round((minYPos + maxYPos) / 2);

            moveImage(initialX, initialY);

          };

          function reset() {
            files = [];
            zoom = 1;
            currentX = 0;
            currentY = 0;
            dragging = false;
            startX = 0;
            startY = 0;
            zooming = false;
            ctx.clearRect(0, 0, $canvas.width, $canvas.height);
            $img.src = '';
          }

          // ---------- PRIVATE FUNCTIONS ---------- //
          function moveImage(x, y) {

            x = x < minXPos ? minXPos : x;
            x = x > maxXPos ? maxXPos : x;
            y = y < minYPos ? minYPos : y;
            y = y > maxYPos ? maxYPos : y;

            targetX = x;
            targetY = y;

            ctx.clearRect(0, 0, $canvas.width, $canvas.height);
            ctx.drawImage($img, x, y, newWidth, newHeight);

            return x == minXPos || x == maxXPos || y == minYPos || y == maxYPos;
          }

          function to2Dp(val) {
            return Math.round(val * 1000) / 1000;
          }

          function updateDragBounds() {
            // $img.width, $canvas.width, zoom

            minXPos = $canvas.width - ($img.width * zoom) - (padding / 2);
            minYPos = $canvas.height - ($img.height * zoom) - (padding / 2);

          }

          function zoomImage(val) {

            if (!val) {
              return;
            }

            var proposedZoomLevel = to2Dp(zoom + val);

            if ((proposedZoomLevel < maxZoomedInLevel) || (proposedZoomLevel > maxZoomedOutLevel)) {
              // image wont fill whole canvas
              // or image is too far zoomed in, it's gonna get pretty pixelated!
              return;
            }

            zoom = proposedZoomLevel;
            // console.log('zoom', zoom);

            updateDragBounds();

            newWidth = $img.width * zoom;
            newHeight = $img.height * zoom;

            var newXPos = currentX * zoom;
            var newYPos = currentY * zoom;

            // check if we've exposed the gutter
            if (newXPos < minXPos) {
              newXPos = minXPos;
            } else if (newXPos > maxXPos) {
              newXPos = maxXPos;
            }

            if (newYPos < minYPos) {
              newYPos = minYPos;
            } else if (newYPos > maxYPos) {
              newYPos = maxYPos;
            }

            // check if image is still going to fit the bounds of the box
            ctx.clearRect(0, 0, $canvas.width, $canvas.height);
            ctx.drawImage($img, newXPos, newYPos, newWidth, newHeight);
          }

          function calcZoomLevel(diffX, diffY) {

            var hyp = Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2));
            var zoomGestureRatio = to2Dp(hyp / maxZoomGestureLength);
            var newZoomDiff = to2Dp((maxZoomedOutLevel - maxZoomedInLevel) * zoomGestureRatio * zoomWeight);
            return diffX > 0 ? -newZoomDiff : newZoomDiff;

          }

          function dataURItoBlob(dataURI) {
            var byteString,
              mimestring;

            if (dataURI.split(',')[0].indexOf('base64') !== -1) {
              byteString = atob(dataURI.split(',')[1]);
            } else {
              byteString = decodeURI(dataURI.split(',')[1]);
            }

            mimestring = dataURI.split(',')[0].split(':')[1].split(';')[0];

            var content = new Array();
            for (var i = 0; i < byteString.length; i++) {
              content[i] = byteString.charCodeAt(i);
            }

            return new Blob([new Uint8Array(content)], { type: mimestring });
          }

          // ---------- SCOPE FUNCTIONS ---------- //

          scope.$watch('src', function() {
            if (scope.src) {
              if (scope.step != 3) {
                if (typeof(scope.src) == 'Blob') {
                  fileReader.readAsDataURL(scope.src);
                } else {
                  loadImage(scope.src);
                }
              }
            } else {
              scope.step = 1;
              reset();
            }
          });

          scope.$watch('crop', function() {
            if (scope.crop) {
              scope.doCrop();
              scope.crop = false;
            }
          });

          $finalImg.onload = function() {
            var tempCanvas = document.createElement('canvas');
            tempCanvas.width = this.width - padding;
            tempCanvas.height = this.height - padding;
            tempCanvas.style.display = 'none';

            var tempCanvasContext = tempCanvas.getContext('2d');
            tempCanvasContext.drawImage($finalImg, -(padding / 2), -(padding / 2));

            $elm.getElementsByClassName('image-crop-section-final')[0].appendChild(tempCanvas);

            var dataUrl = tempCanvas.toDataURL();

            scope.result = dataUrl;
            scope.resultBlob = dataURItoBlob(dataUrl);

            scope.$apply();
          };

          scope.doCrop = function() {
            scope.croppedDataUri = $canvas.toDataURL();
            scope.step = 3;
          };

          scope.onCanvasMouseUp = function(e) {

            if (!dragging) {
              return;
            }

            e.preventDefault();
            e.stopPropagation(); // if event was on canvas, stop it propagating up

            startX = 0;
            startY = 0;
            dragging = false;
            currentX = targetX;
            currentY = targetY;

            removeBodyEventListener('mouseup', scope.onCanvasMouseUp);
            removeBodyEventListener('touchend', scope.onCanvasMouseUp);
            removeBodyEventListener('mousemove', scope.onCanvasMouseMove);
            removeBodyEventListener('touchmove', scope.onCanvasMouseMove);
          };

          $canvas.addEventListener('touchend', scope.onCanvasMouseUp, false);

          scope.onCanvasMouseDown = function(e) {
            startX = e.type === 'touchstart' ? e.changedTouches[0].clientX : e.clientX;
            startY = e.type === 'touchstart' ? e.changedTouches[0].clientY : e.clientY;
            zooming = false;
            dragging = true;

            addBodyEventListener('mouseup', scope.onCanvasMouseUp);
            addBodyEventListener('mousemove', scope.onCanvasMouseMove);
          };

          $canvas.addEventListener('touchstart', scope.onCanvasMouseDown, false);

          function addBodyEventListener(eventName, func) {
            document.documentElement.addEventListener(eventName, func, false);
          }

          function removeBodyEventListener(eventName, func) {
            document.documentElement.removeEventListener(eventName, func);
          }

          scope.onHandleMouseDown = function(e) {

            e.preventDefault();
            e.stopPropagation(); // if event was on handle, stop it propagating up

            startX = lastHandleX = (e.type === 'touchstart') ? e.changedTouches[0].clientX : e.clientX;
            startY = lastHandleY = (e.type === 'touchstart') ? e.changedTouches[0].clientY : e.clientY;
            dragging = false;
            zooming = true;

            addBodyEventListener('mouseup', scope.onHandleMouseUp);
            addBodyEventListener('touchend', scope.onHandleMouseUp);
            addBodyEventListener('mousemove', scope.onHandleMouseMove);
            addBodyEventListener('touchmove', scope.onHandleMouseMove);

          };

          $handle.addEventListener('touchstart', scope.onHandleMouseDown, false);

          scope.onHandleMouseUp = function(e) {

            // this is applied on the whole section so check we're zooming
            if (!zooming) {
              return;
            }

            e.preventDefault();
            e.stopPropagation(); // if event was on canvas, stop it propagating up

            startX = 0;
            startY = 0;
            zooming = false;
            currentX = targetX;
            currentY = targetY;

            removeBodyEventListener('mouseup', scope.onHandleMouseUp);
            removeBodyEventListener('touchend', scope.onHandleMouseUp);
            removeBodyEventListener('mousemove', scope.onHandleMouseMove);
            removeBodyEventListener('touchmove', scope.onHandleMouseMove);
          };

          $handle.addEventListener('touchend', scope.onHandleMouseUp, false);

          scope.onCanvasMouseMove = function(e) {

            e.preventDefault();
            e.stopPropagation();

            if (!dragging) {
              return;
            }

            var diffX = startX - ((e.type === 'touchmove') ? e.changedTouches[0].clientX : e.clientX); // how far mouse has moved in current drag
            var diffY = startY - ((e.type === 'touchmove') ? e.changedTouches[0].clientY : e.clientY); // how far mouse has moved in current drag
            /*targetX = currentX - diffX; // desired new X position
            targetY = currentY - diffY; // desired new X position*/

            moveImage(currentX - diffX, currentY - diffY);

          };

          $canvas.addEventListener('touchmove', scope.onCanvasMouseMove, false);

          var lastHandleX = null,
            lastHandleY = null;

          scope.onHandleMouseMove = function(e) {

            e.stopPropagation();
            e.preventDefault();

            // this is applied on the whole section so check we're zooming
            if (!zooming) {
              return false;
            }

            var diffX = lastHandleX - ((e.type === 'touchmove') ? e.changedTouches[0].clientX : e.clientX); // how far mouse has moved in current drag
            var diffY = lastHandleY - ((e.type === 'touchmove') ? e.changedTouches[0].clientY : e.clientY); // how far mouse has moved in current drag

            lastHandleX = (e.type === 'touchmove') ? e.changedTouches[0].clientX : e.clientX;
            lastHandleY = (e.type === 'touchmove') ? e.changedTouches[0].clientY : e.clientY;

            var zoomVal = calcZoomLevel(diffX, diffY);
            zoomImage(zoomVal);

          };

          $handle.addEventListener('touchmove', scope.onHandleMouseMove, false);

          scope.onHandleMouseWheel = function(e) {
            e.preventDefault();

            zoomImage(e.deltaY > 0 ? -0.05 : 0.05);
          };

          $canvas.addEventListener('mousewheel', scope.onHandleMouseWheel);
          $handle.addEventListener('mousewheel', scope.onHandleMouseWheel);

        }
      };
    });


})();

angular.module('ework-ui')
  .directive('klSearchModal',[klSearchModal])

function klSearchModal() {
  return {
    restrict: 'EA',
    scope: {
      klShowModal: '=klShowModal',
      klModalTitle: '=klModalTitle'
    },
    template: 
      '<div class="search-panel"> '
      +'<div class="content"> '
        +'<div class="heading"> '
          +'<div class="panel-title text-center">教师搜索</div> '
        +'</div> '
        +'<div class="body"> '
          +'<div class="form"> '
            +'<div class="input-group"> '
              +'<input type="text" class="form-control"> '
              +'<span class="input-group-btn"> '
                +'<div class="btn btn-default"><i class="fa fa-search"></i></div> '
              +'</span> '
            +'</div> '
          +'</div> '
        +'</div> '
        +'<div class="body">'
        +'</div> '
      +'</div> '
    +'</div> '
  }
}
angular.module('ework-ui')
  .directive('klSpanRequired', ['$scope', klSpanRequired])

function klSpanRequired($scope) {
  return {
    restrict: 'E',
    replace: true,
    template: '<span class="text-danger">*</span>',
    link: function (scope, element, attrs){

    }
  }
}
angular.module('ework-ui')
  .directive('klSteps', [klSteps])

function klSteps() {
  return {
    restrict: 'EA',
    scope: {
      current: '=klCurrent',
      steps: '=klSteps'
    },
    template: 
       '<div class="kl-progress-title flex-box">'
      + '<div class="flex_1 text-center" ng-repeat="step in steps">'
      +   '<i ng-if="step.iconCls" class="{{step.iconCls}}"></i>{{step.title}}</div>'
      +'</div>'
      +'<div class="progress kl-progress">'
      + '<div class="progress-bar progress-bar-info" '
        + 'role="progressbar" aria-valuenow="20" aria-valuemin="0" '
        + 'aria-valuemax="100" style="width: {{(current / steps.length) * 100}}%">'
      + '</div>'
    + '</div>'
  }
}
angular.module('ework-ui').directive('klTable', [
	klTable
])

function klTable() {
	return {
		restrict: 'EA',
		replace: true,
		transclude: true,
		template: '<table class="table table-striped table-hover" ng-transclude></table>'
	}	
}
angular.module('ework-ui')
  .directive('klTimepicker', [
    '$filter',
    'uibDateParser',
    klTimepicker
  ])

function klTimepicker(
    $filter,
    uibDateParser
  ) {
  return {
    restrict: 'EA',
    replace: false,
    transclude: true,
    require:  '^ngModel',
    scope: {
      ngModel: '=',
      disabled: '=',
      width: '=?'
    },
    template: '<div class="input-group" style="position: relative;" ng-style="{width: width}">'
      +'<input type="text" readonly="readonly" ng-disabled="disabled" class="form-control"'
        +'ng-click="toggle()" value="{{time | date: \'HH:mm\'}}" style="background:#fff;">'
      +'<div class="kl-timepicker-wrapper" ng-show="showEndTime" '
        +'style="width: 200px;">'
        +'<div uib-timepicker ng-model="time" minute-step="5" show-meridian="showMeridian"></div>'
        +'<div class="btn-group pull-left">'
          +'<button class="btn btn-primary btn-sm" ng-click="now()">现在</button>'
          +'<button class="btn btn-danger btn-sm" ng-click="clear()">清除</button>'
        +'</div>'
        +'<button class="btn btn-success btn-sm pull-right" ng-click="close()">确定</button>'
        +'<div class="clearfix"></div>'
      +'</div>'
      +'<span class="input-group-btn">'
        +'<button class="btn btn-default" ng-click="toggle()" ng-disabled="disabled"><i class="glyphicon glyphicon-time"></i></button>'
      +'</span>'
    +'</div>',
    link: function(scope, element, attrs, ngModel) {
      scope.showMeridian = false;
      ngModel.$render = function () {
        scope.time = uibDateParser.parse(ngModel.$viewValue, 'HH:mm')
      }

      scope.$watch('time', function () {
        ngModel.$setViewValue($filter('date')(scope.time, 'HH:mm'))
      })
      
      scope.now = function () {
        scope.time = new Date()
      }

      scope.clear = function () {
        scope.time = null
      }

      scope.toggle = function () {
        scope.showEndTime = !scope.showEndTime
      }

      scope.close = function () {
        scope.showEndTime = false;
      }
    }
  }
}
angular.module('ework-ui')
  .directive('latex', function() {
    return {
      restrict: 'AE',
      link: function(scope, element) {
        var newDom = element.clone();
        element.replaceWith(newDom);
        scope.$watch(function() {
          return element.html();
        }, function() {
          newDom.html(element.html());
          window.MathJax.Hub.Typeset(newDom[0]);
        });
      }
    }
  });

/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('ework-ui')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        transclude: true,
        template: 
        		'<div class="modal fade in" style ="display:block;background: rgba(0,0,0,.6); top: 0;">'
        	+ 	'<div class="modal-dialog modal-sm" style="top: 130px;"><div class="modal-content">'
        	+ 		'<div class="modal-content" style="box-shadow: 0 5px 15px rgba(0,0,0,.3);">'
        	+   		'<div class="text-center" style="padding: 20px;" ng-transclude>'
        	+			'</div>'
        	+ 	'</div'
        	+	'</div>'
    };
    return directive;
};
angular.module('ework-ui')
  .directive('rdModal', ['$uibModal', rdModal]);

function rdModal(
    $uibModal
  ) {
  return {
    restrict: 'AE',
    transclude: {
      title: '?rdModalTitle',
      body: 'rdModalBody',
      footer: '?rdModalFooter'
    },
    template: '<div class="klxx-modal-primary"><div class="modal-header">'
      + '  <button type="button" class="close" ng-click="$dismiss()">'
      + '    <span aria-hidden="true">&times;</span>'
      + '  </button>'
      + '  <h3 class="modal-title" ng-transclude="title">信息</h3>'
      + '</div>'
      + '<div class="modal-body" ng-transclude="body"></div>'
      + '<div class="modal-footer" ng-transclude="footer"></div></div>'
  }
}
angular.module('ework-ui').directive('ngEnter', function () {
	return {
		restrict: 'A',
		require: '?ngModel',
		link: function(scope, element, attrs) {
			element.bind("keydown keypress", function (event) {
          if (event.which === 13) {
              scope.$apply(function () {
                  scope.$eval(attrs.ngEnter);
              });
              event.preventDefault();
          }
      });
		}
	}
})
/**
 * name: ng-pagination
 * Version: 1.0.0 beta
 */
angular
  .module('ework-ui')
  .directive('ngPagination', ngPagination);

function ngPagination(){
    return {
        restrict: 'EA',
        template: 
        '<div class="container-fluid"><div class="row">' +
            '<div class="col-md-3 hidden-xs hidden-sm text-left">' + 
                '<div class="page-total pagination" ng-show="conf.totalItems > 0 && conf.showInfos">' +
                    '每页&nbsp;' + 
                    '<select class="form-control2" style="display:inline-block;width:auto;" ng-model="conf.itemsPerPage" ' +
                        'ng-options="option for option in conf.perPageOptions" ' +
                        'ng-change="changeItemsPerPage()">' +
                    '</select>' + '&nbsp;条/共<strong>{{ conf.totalItems }}</strong>条' +
                    // '跳至第&nbsp;<input class="form-control2" style="display:inline-block;" type="text" size="3" ng-model="jumpPageNum" ng-keyup="jumpPageKeyUp($event)" ng-blur="jumpToPage()"/>&nbsp;页' +
                '</div>' +
            '</div>'+
            '<div class="{{conf.showInfos ? \'col-md-6\': \'\'}} col-xs-12 text-center">' +
                '<ul class="pagination" ng-show="conf.totalItems > 0">' +
                    '<li ng-show="conf.showFirstAndLast" ng-class="{disabled: conf.currentPage == 1}" ng-click="prevPage()"><span>&laquo;</span></li>' +
                    '<li ng-repeat="item in pageList track by $index" ng-class="{active: item == conf.currentPage, separate: item == \'...\'}" ' +
                        'ng-click="changeCurrentPage(item)">' +
                        '<span>{{ item }}</span>' +
                    '</li>' +
                    '<li ng-show="conf.showFirstAndLast" ng-class="{disabled: conf.currentPage == conf.numberOfPages}" ng-click="nextPage()"><span>&raquo;</span></li>' +
                '</ul>' + 
            '</div>' +
            '<div class="col-xs-12 text-center" ng-show="conf.totalItems <= 0"> <div class="no-data"></div> 暂无数据</div>' +
        '</div></div>',
        replace: true,
        scope: {
            conf: '='
        },
        link: function(scope, element, attrs) {
            scope.jumpPageNum = 1;
            var conf = scope.conf || {};
            // 默认分页长度
            var defaultPagesLength = 9;

            // 默认分页选项可调整每页显示的条数
            var defaultPerPageOptions = [10, 15, 20, 30, 50];

            // 默认每页的个数
            var defaultPerPage = 10;
            // 获取分页长度
            if(conf.pagesLength) {
                // 判断一下分页长度
                conf.pagesLength = parseInt(conf.pagesLength, 10);

                if(!conf.pagesLength) {
                    conf.pagesLength = defaultPagesLength;
                }

                // 分页长度必须为奇数，如果传偶数时，自动处理
                if(conf.pagesLength % 2 === 0) {
                    conf.pagesLength += 1;
                }

            } else {
                conf.pagesLength = defaultPagesLength
            }

            if (conf.showInfos == undefined || conf.showInfos == null) {
                conf.showInfos = true
            } else {
                conf.showInfos = conf.showInfos
            }
            // 分页选项可调整每页显示的条数
            if(!conf.perPageOptions){
                conf.perPageOptions = defaultPerPageOptions;
            }

            // 获取当前页
            if (!conf.currentPage) {
                conf.currentPage = 1;
            }
            if (!conf.showFirstAndLast) {
                conf.showFirstAndLast = false
            }
            // pageList数组
            function getPagination(newValue, oldValue) {
                
                // conf.currentPage
                if(conf.currentPage) {
                    conf.currentPage = parseInt(scope.conf.currentPage, 10);
                }

                if(!conf.currentPage) {
                    conf.currentPage = 1;
                }

                // conf.totalItems
                if(conf.totalItems) {
                    conf.totalItems = parseInt(conf.totalItems, 10);
                }

                // conf.totalItems
                if(!conf.totalItems) {
                    conf.totalItems = 0;
                    return;
                }
                
                // conf.itemsPerPage 
                if(conf.itemsPerPage) {
                    conf.itemsPerPage = parseInt(conf.itemsPerPage, 10);
                }
                if(!conf.itemsPerPage) {
                    conf.itemsPerPage = defaultPerPage;
                }

                // numberOfPages
                conf.numberOfPages = Math.ceil(conf.totalItems/conf.itemsPerPage);

                // 如果分页总数>0，并且当前页大于分页总数
                if(scope.conf.numberOfPages > 0 && scope.conf.currentPage > scope.conf.numberOfPages){
                    scope.conf.currentPage = scope.conf.numberOfPages;
                }

                // 如果itemsPerPage在不在perPageOptions数组中，就把itemsPerPage加入这个数组中
                var perPageOptionsLength = scope.conf.perPageOptions.length;

                // 定义状态
                var perPageOptionsStatus;
                for(var i = 0; i < perPageOptionsLength; i++){
                    if(conf.perPageOptions[i] == conf.itemsPerPage){
                        perPageOptionsStatus = true;
                    }
                }
                // 如果itemsPerPage在不在perPageOptions数组中，就把itemsPerPage加入这个数组中
                if(!perPageOptionsStatus){
                    conf.perPageOptions.push(conf.itemsPerPage);
                }

                // 对选项进行sort
                conf.perPageOptions.sort(function(a, b) {return a - b});
                

                // 页码相关
                scope.pageList = [];
                if(conf.numberOfPages <= conf.pagesLength){
                    // 判断总页数如果小于等于分页的长度，若小于则直接显示
                    for(i =1; i <= conf.numberOfPages; i++){
                        scope.pageList.push(i);
                    }
                }else{
                    // 总页数大于分页长度（此时分为三种情况：1.左边没有...2.右边没有...3.左右都有...）
                    // 计算中心偏移量
                    var offset = (conf.pagesLength - 1) / 2;
                    if(conf.currentPage <= offset){
                        // 左边没有...
                        for(i = 1; i <= offset + 1; i++){
                            scope.pageList.push(i);
                        }
                        scope.pageList.push('...');
                        scope.pageList.push(conf.numberOfPages);
                    }else if(conf.currentPage > conf.numberOfPages - offset){
                        scope.pageList.push(1);
                        scope.pageList.push('...');
                        for(i = offset + 1; i >= 1; i--){
                            scope.pageList.push(conf.numberOfPages - i);
                        }
                        scope.pageList.push(conf.numberOfPages);
                    }else{
                        // 最后一种情况，两边都有...
                        scope.pageList.push(1);
                        scope.pageList.push('...');

                        for(i = Math.ceil(offset / 2) ; i >= 1; i--){
                            scope.pageList.push(conf.currentPage - i);
                        }
                        scope.pageList.push(conf.currentPage);
                        for(i = 1; i <= offset / 2; i++){
                            scope.pageList.push(conf.currentPage + i);
                        }

                        scope.pageList.push('...');
                        scope.pageList.push(conf.numberOfPages);
                    }
                }

                scope.$parent.conf = conf;
            }

            // prevPage
            scope.prevPage = function() {
                if(conf.currentPage > 1){
                    conf.currentPage -= 1;
                    getPagination();
                    if(conf.onChange) {
                        conf.onChange();
                    }
                }
            };

            // nextPage
            scope.nextPage = function() {
                if(conf.currentPage < conf.numberOfPages){
                    conf.currentPage += 1;
                    getPagination();
                    if(conf.onChange) {
                        conf.onChange();
                    }
                }
            };

            // 变更当前页
            scope.changeCurrentPage = function(item) {
                
                if(item == '...' || conf.currentPage == item){
                    return;
                }else{
                    conf.currentPage = item;
                    getPagination();
                    // conf.onChange()函数
                    if(conf.onChange) {    
                        conf.onChange();
                    }
                }
            };

            // 修改每页展示的条数
            scope.changeItemsPerPage = function() {

                // 一发展示条数变更，当前页将重置为1
                conf.currentPage = 1;

                getPagination();
                // conf.onChange()函数
                if(conf.onChange) {    
                    conf.onChange();
                }
            };

            // 跳转页
            scope.jumpToPage = function() {
                num = scope.jumpPageNum;
                if(num.match(/\d+/)) {
                    num = parseInt(num, 10);
                
                    if(num && num != conf.currentPage) {
                        if(num > conf.numberOfPages) {
                            num = conf.numberOfPages;
                        }

                        // 跳转
                        if (conf.currentPage != num) {
                            conf.currentPage = num;
                            getPagination();
                            // conf.onChange()函数
                            if(conf.onChange) {    
                                conf.onChange();
                            }
                            scope.jumpPageNum = num;
                        }
                    }
                }
                
            };

            scope.jumpPageKeyUp = function(e) {
                var keycode = window.event ? e.keyCode :e.which;
                var value = e.target.value;
                value = value.replace(/\D/g,'')
                if (Number.isNaN(value)) {
                  scope.jumpPageNum = value;
                }
                if(keycode == 13) {
                    scope.jumpToPage();
                }
            }

            scope.$watch('conf.totalItems', function(value, oldValue) {
                // 在无值或值相等的时候，去执行onChange事件
                if(value && value != oldValue && oldValue != 0) {
                    if(conf.onChange) {
                        conf.currentPage = 1;    
                        conf.onChange();
                    }
                }
                getPagination();
            })
            
        }
    };
}

"use strict"

angular.module('ework-ui')
  .directive('rdTablePanel',[rdTablePanel]);

function rdTablePanel() {
  return {
    restrict: 'EA',
    replace: true,
    transclude: {
      title: '?rdPanelHeader',
      toolbar: '?rdPanelToolbar',
      searchbar: '?rdPanelSearchbar',

    },
    scope: {

    }
  }
}
/**
 * Widget Body Directive
 */

angular
    .module('ework-ui')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 */

angular
    .module('ework-ui')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('ework-ui')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header container-fluid"><div class="row"><div class="col-xs-12 col-sm-12"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="col-xs-12 col-sm-12" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('ework-ui')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
/**
 * 团队下拉框选择指令 <crm-branch-select bu-id="buId" branch-id="branchId"></crm-branch-select>
 */
angular.module('ework-ui').directive('crmBranchSelect',
		[ 'crm_queryInputRightBranch', 'crm_querySelectedBranch',crmBranchSelect ]);

function crmBranchSelect(crm_queryInputRightBranch,crm_querySelectedBranch) {
	return {
		restrict : 'EA',
		replace : true,
		scope : {
			branchId : '=?branchId'
		},
		template : '<select ng-model="branchId" class="form-control"  id="branch_obj"'
				+ ' ng-options="branch.id as branch.text for branch in branchList">'
				+ '</select>',
		link : function(scope, element, attrs) {
			scope.branchList = []

			function getBranchList() {
				crm_queryInputRightBranch.query({}, function(resp) {
					if (!resp.error) {
						scope.branchList = resp.data;
						if(scope.branchList != null && scope.branchList.length >0){
							crm_querySelectedBranch.query({}, function(resp) {
								if (!resp.error) {
										scope.branchId = resp.branchs[0].id;
								}
							})
						}
					}
				})
			}
			
			getBranchList();
		}
	}
}

/**
 * 团队下拉框选择指令 <crm-bu-select bu-id="buId"></crm-bu-select>
 */
angular.module('ework-ui').directive('crmBuSelect',
		[ 'PUBORGService', 'PUBORGSelectedService', crmBuSelect ]);

function crmBuSelect(PUBORGService, PUBORGSelectedService) {
	return {
		restrict : 'EA',
		replace : true,
		scope : {
			buId : '=?buId'
		},
		template : '<select ng-model="buId" class="form-control" id="bu_obj"'
				+ ' ng-options="bu.buId as bu.text for bu in buList">'
				+ '</select>',
		link : function(scope, element, attrs) {
			scope.buList = []

			if (!scope.buId) {
				PUBORGSelectedService.query({}, function(resp) {
					if (!resp.error) {
						scope.buId = resp.data.buId;
					} else {
						console.log(resp.message)
					}
				})
			}

			PUBORGService.queryBu({}, function(resp) {
				if (!resp.error) {
					scope.buList = resp.data;
				}
			})
		}
	}
}

/**
 * 选择业务团队和业务校区组件
 */
angular.module('ework-ui')
  .directive('crmBranch', ['PUBORGService', crmBranch]);

function crmBranch(
  PUBORGService
) {
  return {
    restrict: 'EA',
    replace: true,
    transclude: true,
    scope: {
      buId: '=?ngBuId',
      branchId: '=?ngBranchId',
      onChange: '&ngValueChange'
    },
    template:'<div class="col-lg-4">'  
        + '<div class="form-group">'
        + '<label class="col-sm-4 label_name control-label">业务团队： </label>'
        + '<div class="col-sm-8">'
        + '<kl-bu-select bu-id="buId"></kl-bu-select>'
        + '</div>'
        + '<ng-transclude></ng-transclude>'
        + '</div>'
        + '</div>',
    link: function (scope, element, attrs) {
      scope.$watch('buId', function () {
        scope.onChange();
      })
      // 监听校区变化
      scope.$watch('branchId', function () {
        scope.onChange();
      })
    }
  }
}

angular.module('ework-ui')
  .directive('klCouponDropdown', ['erp_ebCouponService', '$uibMsgbox', klCouponDropdown])

function klCouponDropdown(
  erp_ebCouponService,
  $uibMsgbox
) {
  return {
    restrict: 'EA',
    transclude: true,
    scope: {
      multi: '=?',
      klSelected: '&'
    },
    template: '<div class="input-group kl-choose-teacher" '
        + 'auto-close="disabled" uib-dropdown is-open="isopen" on-toggle="onToggle(open)"> '
        + '<div uib-dropdown-menu class="dropdown-menu {{floatdir}}" style="width: 420px;"> '
          + '<form class="form" align="center" style="margin-bottom: 15px;"> '
            + '<div class="form-group"> '
              + '<div class="input-group">'
              + '<input type="text" class="form-control" ng-model="search_info" ng-change="changeSearchInfo()" /> '
              + '<span class="input-group-btn" ng-click="changeSearchInfo()"><button class="btn btn-default"><i class="fa fa-search"></i></button></span>'
              + '</div>'
            + '</div> '
          + '</form> '
          + '<div class="list-wrapper" >'
           + '<div class="text-center" '
              + 'ng-if="isLoading != \'isLoading\' && (!couponList || !couponList.length)"> '
              + '<span>暂无优惠券</span>'
            + '</div> '
            +'<table class="table table-hover" ng-if="isLoading != \'isLoading\' && couponList && couponList.length"> '
            + '<tr ng-repeat="coupon in couponList"> '
              +'<td class="cur" uib-popover="优惠券名称：{{coupon.name}}，优惠券编码：【{{coupon.encoding}}】，优惠券类型：【{{coupon.type_name}}】" '
              +' popover-trigger="\'mouseenter\'" ng-click="selectedCoupon(coupon)">'
                + ' {{coupon.name}} 【{{coupon.type_name}}】'
              +'</td> '
            + '</tr> '
            + '<tr ng-if="isLoading == \'isLoading\'"> '
              + '<td align="center"><img src="img/erp/loading2.gif"></td> '
            + '</tr> '
          + '</table>'
          + '</div>'
          + '<div class="row" ng-show="multi == true">'
            +'<div class="col-sm-12 text-center">'
            +   '<button class="btn btn-danger btn-sm">取消</button> '
            +'<button class="btn btn-primary btn-sm">确定</button>'
            +'</div>'
          +'</div>'
        + '</div> '
        + '<span class="input-group-btn" uib-dropdown-toggle ng-transclude> '
        + '</span> '
      + '</div> ',
    link: function (scope, element, attrs) {
      scope.searchparam = scope.searchparam || {}
      if (attrs.coursetype) {
        scope.searchparam.business_type = attrs.coursetype
      }
      scope.floatdir = attrs.floatdir == 'pull-left' ? 'pull-left':'pull-right' 
      scope.isopen = false
      scope.search_info = ''
      scope.couponList = []
      scope.isLoading = ''
      scope.choosenCouponList = []

      // TODO 优化右边滚动条 baiqb@klxuexi.org

      scope.changeSearchInfo = function () {
        scope.searchparam.p_name = scope.search_info
        // scope.searchparam.status=1;
        scope.searchparam.pageSize=100;
        scope.isLoading = 'isLoading';
        erp_ebCouponService.query(scope.searchparam,function(resp){
          scope.isLoading = '';
          if(!resp.error){
            scope.couponList = resp.data;
          }else{
            $uibMsgbox.error(resp.message);
          }
        })
      },

      // 在指令中，调用父scope方法，传参需要以对象的形式传入
      // 对象传入的属性名称和controller中方法传入的参数名称一致
      scope.selectedCoupon = function (coupon) {
        if (!scope.multi) {
          scope.klSelected({
            coupon: coupon
          })
          scope.isopen = false
          return
        }

        if (_.findIndex(scope.choosenCouponList, coupon) != -1) {
          scope.choosenCouponList.push(coupon)
        } else {
          _.remove(scope.choosenCouponList, course)
        }
      }
      
      scope.changeSearchInfo()
    }
  }
}
angular.module('ework-ui')
  .directive('klCourseDropdown', ['erp_courseService', '$uibMsgbox', klCourseDropdown])

function klCourseDropdown(
  erp_courseService,
  $uibMsgbox
) {
  return {
    restrict: 'EA',
    transclude: true,
    scope: {
      multi: '=',
      klSelected: '&'
    },
    template: '<div class="input-group kl-choose-teacher" '
        + 'auto-close="disabled" uib-dropdown is-open="isopen" on-toggle="onToggle(open)"> '
        + '<div uib-dropdown-menu class="dropdown-menu {{floatdir}}" style="width: 420px;"> '
          + '<form class="form" align="center" style="margin-bottom: 15px;"> '
            + '<div class="form-group"> '
              + '<div class="input-group">'
              + '<input type="text" class="form-control" ng-model="search_info" ng-change="changeSearchInfo()" /> '
              + '<span class="input-group-btn"><button class="btn btn-default"><i class="fa fa-search"></i></button></span>'
              + '</div>'
            + '</div> '
          + '</form> '
          + '<div class="list-wrapper" >'
           + '<div class="text-center" '
              + 'ng-if="isLoading != \'isLoading\' && (!courseList || !courseList.length)"> '
              + '<span>暂无课程</span>'
            + '</div> '
            +'<table class="table table-hover" ng-if="isLoading != \'isLoading\' && courseList && courseList.length"> '
            + '<tr ng-repeat="course in courseList"> '
              +'<td class="cur" uib-popover="课程名称：{{course.course_name}}，课程编码：【{{course.course_no}}】，教师名称：【{{course.teacher_name}}】，年级：【{{course.grade_name}}】" '
              +' popover-trigger="\'mouseenter\'" ng-click="selectedCourse(course)">'
                + ' {{course.course_name}}'
              +'</td> '
            + '</tr> '
            + '<tr ng-if="isLoading == \'isLoading\'"> '
              + '<td align="center"><img src="img/erp/loading2.gif"></td> '
            + '</tr> '
          + '</table>'
          + '</div>'
          + '<div class="row" ng-show="multi == true">'
            +'<div class="col-sm-12 text-center">'
            +   '<button class="btn btn-danger btn-sm">取消</button> '
            +'<button class="btn btn-primary btn-sm">确定</button>'
            +'</div>'
          +'</div>'
        + '</div> '
        + '<span class="input-group-btn" uib-dropdown-toggle ng-transclude> '
        + '</span> '
      + '</div> ',
    link: function (scope, element, attrs) {
      scope.searchparam = scope.searchparam || {}
      if (attrs.coursetype) {
        scope.searchparam.business_type = attrs.coursetype
      }

      if (attrs.ydyladder) {
          scope.searchparam.ydyLadder = attrs.ydyladder
      }
      scope.floatdir = attrs.floatdir == 'pull-left' ? 'pull-left':'pull-right' 
      scope.isopen = false
      scope.search_info = ''
      scope.courseList = []
      scope.isLoading = ''
      scope.choosenCourseList = []

      // TODO 优化右边滚动条 baiqb@klxuexi.org
      
      scope.changeSearchInfo = function () {
        scope.searchparam.search_info = scope.search_info
        scope.searchparam.status=1;
        scope.searchparam.pageSize=100;
        scope.isLoading = 'isLoading';
        erp_courseService.query(scope.searchparam,function(resp){
          scope.isLoading = '';
          if(!resp.error){
            scope.courseList = resp.data;
          }else{
            $uibMsgbox.error(resp.message);
          }
        })
      },

      // 在指令中，调用父scope方法，传参需要以对象的形式传入
      // 对象传入的属性名称和controller中方法传入的参数名称一致
      scope.selectedCourse = function (course) {
        if (!scope.multi) {
          scope.klSelected({
            course: course
          })
          scope.isopen = false
          return
        }

        if (_.findIndex(scope.choosenCourseList, course) != -1) {
          scope.choosenCourseList.push(course)
        } else {
          _.remove(scope.choosenCourseList, course)
        }
      }
      
      scope.changeSearchInfo()
    }
  }
}
angular.module('ework-ui').directive('klHeaderGoBack', [
	'$state',
	klHeaderGoBack
])

function klHeaderGoBack(
	$state
) {
	return {
		restrict: 'EA',
		scope: {},
		template: '<span><span class="cur text-primary" ng-click="goback()">< 返回</span> | </span>',
		link: function (scope, element) {
			scope.goback = function () {
				history.go(-1);
			}
		}
	}
}
angular.module('ework-ui').directive('klMultiTags', [
	klMultiTags
])

function klMultiTags(
) {
	return {
		restrict: 'EA',
		transclude: true,
		scope:{
		},
		template: '<div class="multi-tags">'
			+ 	'<div class="tags-container" ng-transclude>'
			+ 	'</div>'
			+		'<a ng-hide="open" href="javascript:void(0);" class="show-more" ng-click="showMore()">更多</a>'
			+		'<a ng-show="open" href="javascript:void(0);" class="show-more" ng-click="hideMore()">收起</a>'
			+	'</div>',
		link: function (scope, element, attrs) {
			scope.open = true;
			var $el = $('.multi-tags',element[0]);			
			var $c = $('.tags-container', $el);

			scope.showMore = function() {
				scope.open = true;
				$el.css('height', 'auto')
			}

			scope.hideMore = function() {
				scope.open = false;
				$el.css('height', '30px')
			}

			scope.showMore();
		}
	}
}

/* 
onSearch: 输入搜索时调用的查询方法 
  <kl-teacher-dropdown on-search="onSearch(search_info)">
  $scope.onSearch = function (search_info) {
    var searchparam = {
      search_info: search_info
    }
    return erp_teacherService.page(scope.searchparam).$promise;
  }
*/
angular.module('ework-ui')
  .directive('klTeacherDropdown', ['erp_teacherService', '$uibMsgbox', klTeacherDropdown])

function klTeacherDropdown(
  erp_teacherService,
  $uibMsgbox
) {
  return {
    restrict: 'EA',
    transclude: true,
    scope: {
      searchparam: '=?',
      seachTag: '=?',
      multi: '=?',
      onSearch: '&?',
      klSelected: '&'
    },
    template: '<div class="input-group kl-choose-teacher" '
        + 'auto-close="disabled" uib-dropdown is-open="isopen" on-toggle="onToggle(open)"> '
        + '<div uib-dropdown-menu class="dropdown-menu floatdir"> '
          + '<form class="form" align="center" style="margin-bottom: 15px;"> '
            + '<div class="form-group"> '
              + '<div class="input-group">'
              + '<input type="text" class="form-control" ng-model="search_info" ng-change="changeSearchInfo()" /> '
              + '<span class="input-group-btn"><button class="btn btn-default"><i class="fa fa-search"></i></button></span>'
              + '</div>'
            + '</div> '
          + '</form> '
          + '<div class="list-wrapper" >'
           + '<div class="text-center" '
              + 'ng-if="isLoadingTeacherList != \'isLoadingTeacherList\' && (!teacherList || !teacherList.length)"> '
              + '<span>暂无老师</span>'
            + '</div> '
            +'<table class="table table-hover" ng-if="isLoadingTeacherList != \'isLoadingTeacherList\' && teacherList && teacherList.length"> '
            + '<tr ng-repeat="teacher in teacherList"> '
              +'<td class="cur" popover-class="uib-popover"   uib-popover="姓名：{{teacher.teacher_name}}，编码：{{teacher.encoding}}" '
                + ' popover-trigger="\'mouseenter\'" ng-click="selectedTeacher(teacher)">'
                + ' {{teacher.teacher_name}}，{{teacher.encoding}} '
              +'</td> '
            + '</tr> '
            + '<tr ng-if="isLoadingTeacherList == \'isLoadingTeacherList\'"> '
              + '<td align="center"><img src="img/erp/loading2.gif"></td> '
            + '</tr> '
          + '</table>'
          + '</div>'
          + '<div class="row" ng-show="multi == true">'
            +'<div class="col-sm-12 text-center">'
            +   '<button class="btn btn-danger btn-sm">取消</button> '
            +'<button class="btn btn-primary btn-sm">确定</button>'
            +'</div>'
          +'</div>'
        + '</div> '
        + '<span class="input-group-btn" uib-dropdown-toggle ng-transclude> '
        + '</span> '
      + '</div> ',
    link: function (scope, element, attrs) {
      scope.searchparam = scope.searchparam || {};
      scope.isopen = false;
      scope.search_info = '';
      scope.teacherList = []
      scope.isLoadingTeacherList = '';
      scope.choosenTeacherList = [];

      if (!_.isFunction(scope.onSearch)) {
        scope.onSearch = function (search_info) {
          var searchparam = {
            search_info: search_info
          }
          scope.searchparam.onlyValidTeacher = 'Y'
          return erp_teacherService.page(scope.searchparam).$promise;
        }
      }

      // TODO 优化右边滚动条 baiqb@klxuexi.org
      scope.floatdir = attrs.floatdir == 'pull-left' ? 'pull-left':'pull-right' 
      
      scope.changeSearchInfo = function () {
        scope.searchparam.search_info = scope.search_info;
        scope.isLoadingTeacherList = 'isLoadingTeacherList';
        // erp_teacherService.page(scope.searchparam,function(resp){
        //   scope.isLoadingTeacherList = '';
        //   if(!resp.error){
        //     scope.teacherList = resp.data;
        //   }else{
        //     $uibMsgbox.error(resp.message);
        //   }
        // })
        scope.onSearch({search_info: scope.search_info}).then(function (resp) {
          scope.isLoadingTeacherList = '';
          if(!resp.error){
            scope.teacherList = resp.data;
          }else{
            $uibMsgbox.error(resp.message);
          }
        })
      }
      // 在指令中，调用父scope方法，传参需要以对象的形式传入
      // 对象传入的属性名称和controller中方法传入的参数名称一致
      scope.selectedTeacher = function (teacher) {
        if (!scope.multi) {
          scope.klSelected({
            teacher: teacher
          })
          scope.isopen = false
          return
        }

        if (_.findIndex(scope.choosenTeacherList, teacher) != -1) {
          scope.choosenTeacherList.push(teacher)
        } else {
          _.remove(scope.choosenTeacherList, teacher)
        }
      }
      scope.$watch('seachTag', function ( newValude, oldValue) {
        scope.changeSearchInfo()
      })
      scope.changeSearchInfo()
    }
  }
}
/**
 * Created by Liyong.zhu on 2016/6/1.
 */
angular.module('ework-ui').controller('DatepickerDemoCtrl', ['$scope','$log', function($scope,$log) {
    $scope.today = function() {
        $scope.dt = new Date();
    };

    $scope.clear = function () {
        $scope.dt = null;
    };

    // Disable weekend selection
    $scope.disabled = function(date, mode) {
        return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
    };

    $scope.toggleMin = function() {
        $scope.minDate = $scope.minDate ? null : new Date();
    };
    $scope.toggleMin();

    $scope.open = function($event) {
        $event.preventDefault();
        $event.stopPropagation();

        $scope.opened = true;
    };

    $scope.dateOptions = {
        formatYear: 'yy',
        startingDay: 1,
        class: 'datepicker'
    };

    $scope.initDate = new Date();
    $scope.formats = ['yyyy-MM-dd', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.format = $scope.formats[0];
}]);


angular.module('ework-ui')
    .directive('datetimepickerNeutralTimezone', function() {
        return {
            restrict: 'A',
            priority: 1,
            require: 'ngModel',
            link: function (scope, element, attrs, ctrl) {
                ctrl.$formatters.push(function (value) {
                    var date = new Date(Date.parse(value));
                    date = new Date(date.getTime() + (60000 * date.getTimezoneOffset()));
                    return date;
                });

                ctrl.$parsers.push(function (value) {
                    var date = new Date(value.getTime() - (60000 * value.getTimezoneOffset()));
                    return date;
                });
            }
        };
    });
/**
 * Master Controller
 */

angular.module('ework-ui')
    .controller('MasterCtrl', ['$scope','$rootScope','$location', '$log','$state','ProjectService','MenusService','klxx_accountService','klxxedu_LoginEmployeeService', MasterCtrl]);

function MasterCtrl($scope,$rootScope,$location, $log,$state,ProjectService,MenusService,klxx_accountService,klxxedu_LoginEmployeeService) {
    $scope.topMenus = {};
    $scope.topBodyURL = 'templates/block/top.html?_='+(new Date()).getTime();
    $scope.leftNavURL = 'templates/block/left_nav.html?_='+(new Date()).getTime();
    $scope.screenfull = screenfull
    $scope.onFullScreenToggle = function () {
        if (screenfull.enabled) {
            screenfull.toggle();
        } else {
            // Ignore or do something else
        }
    }
    function queryAccount(){
        klxx_accountService.query({},function(resp){
            if(!resp.error){
                $rootScope.curAccount = resp.data;
            }else{
                alert(resp.message);
            }
        });
    }

    function queryEmployeeInfo(){
        klxxedu_LoginEmployeeService.query({},function(resp){
            if(!resp.error){
                $rootScope.curEmployee = resp.data;
            }else{
                alert(resp.message);
            }
        });
    }

    queryAccount();
    queryEmployeeInfo();


    if(MenusService){
        $log.info("found service MenusService.");
        MenusService.get({},function(res){
            $log.info("found service result.");
            $scope.topMenus = res.menus;
            $log.info("found service result."+res);
            $.each($scope.topMenus,function(i,menu){
                if(menu.active=='true'){
                    $scope.curSystem = menu;
                    $log.info("menu active is " + menu.name);
                }
            });
            //刷新动作，初始化已经选中的菜单,从而确保左侧导航正确选中
            initial$location();
            
            $scope.userMenus = genMenu($scope.topMenus,"/userManagerment");
            
            $log.info("userMenus found. ");
        },function(resp){
            location.href = "/klxxedu?_="+(new Date()).getTime();
        });
    };
    
    $rootScope.genMenu = function(path){
        return genMenu($scope.topMenus,path);
    }
    
    $rootScope.selectSystem = function(sys){
        if(!sys){return}
    	if($scope.curSystem)
            $scope.curSystem.active = 'false';
        $scope.curSystem = sys;
        $scope.curSystem.active = 'true';
        if(sys.type=='$state'){
            // $state.go(sys.value,$scope.curSystem);
            if($scope.curSystem.key!='index' && $scope.curSystem.menus){
                if (window.location.href.indexOf('studentId') != -1) {
                    window.location.href = "?_t="+new Date().getTime()+"#" + $scope.curSystem.menus[0].path;
                } else {
                    $state.go($scope.curSystem.menus[0].value,$scope.curSystem.menus[0]);
                }
            }else if($scope.curSystem.key=='index' ){
                if (window.location.href.indexOf('studentId') != -1) {
                    window.location.href = "?_t="+new Date().getTime()+"#" + $scope.curSystem.path;
                } else {
                    $state.go($scope.curSystem.value,$scope.curSystem);
                }
            }
        }
    };

    $scope.selectSystem = function(sys){
        if(!sys){return}
        if($scope.curSystem)
            $scope.curSystem.active = 'false';
        $scope.curSystem = sys;
        $scope.curSystem.active = 'true';
        if(sys.type=='$state'){
            // $state.go(sys.value,$scope.curSystem);
            if($scope.curSystem.key!='index' && $scope.curSystem.menus){
                if (window.location.href.indexOf('studentId') != -1) {
                    window.location.href = "?_t="+new Date().getTime()+"#" + $scope.curSystem.menus[0].path;
                } else {
                    $state.go($scope.curSystem.menus[0].value,$scope.curSystem.menus[0]);
                }
            }else if($scope.curSystem.key=='index' ){
                if (window.location.href.indexOf('studentId') != -1) {
                    window.location.href = "?_t="+new Date().getTime()+"#" + $scope.curSystem.path;
                } else {
                    $state.go($scope.curSystem.value,$scope.curSystem);
                }
            }
        }
    };



    function queryProjectInfo(){
        ProjectService.get({},function(resp){
            if(resp.error == 'false'){
                $scope.project = resp;
                $("title").text($scope.project.name);
            }
        });
    }

    queryProjectInfo();

    function initial$location(){
        var pathLocation  =  $location.path();
        $log.info("$location path is " + pathLocation);
        if(pathLocation){
            var subPath = pathLocation.split("/");
            $log.log(subPath.join(","));
            if(subPath.length<2||!subPath[1]){
                return;
            }
            var pathString = "/"+subPath[1];
            $log.log("sub menu path is "+pathString);
            var menu = genTopMenu($scope.topMenus,pathString);
            if(menu){
                $log.log("found menu is "+menu.name+",href is " + menu.href);
                if($scope.curSystem){
                    $scope.curSystem.active = 'false';
                }
                $scope.curSystem = menu;
                $scope.curSystem.active = 'true';
                $log.log("$location end,menu is " + menu.name);
            }else{
                $log.log("$location end,menu is not found,see  pathString is " + pathString);
            }


        }else{
            $state.go("index",{});
        }
    }


    /**
     * 查询根菜单
     * @param menus
     * @param pathStr
     * @returns {*}
     */
    function genMenu(menus,pathStr){
        if(menus&&menus.length){
            var menu = null;
            for(var index=0;index<menus.length;index++){
            	if(pathStr == menus[index].path){
                    menu = menus[index];
                    break;
                }else{
                    if(menus[index].menus){
                        menu = genMenu(menus[index].menus,pathStr);
                    }
                }
            }
            
            return menu;
        }
        return null;
    }

    /**
     * 查询根菜单
     * @param menus
     * @param pathStr
     * @returns {*}
     */
    function genTopMenu(menus,pathStr){
        if(menus&&menus.length){
            var menu = null;
            $.each(menus,function(i,m){
                if(pathStr == m.path){
                    menu = m;
                }
            });
            return menu;
        }
        return null;
    }


    /**
     * 获取数组
     * @param n
     * @returns {Array}
     */
    $scope.getNumber = function(n){
        var list = new Array();
        for (var index = 0;index<n;index++){
            list.push(index+1);
        }
        return list;
    }

    /**
     * 选择行
     * @param row
     */
    $scope.checked = function(row){
        if(row.checked){
            row.checked = false;
        }else{
            row.checked = true;
        }
    }


    

    $scope.selectUserNav = function(menu){

        if($scope.curNavSystem){
            $scope.curNavSystem.active = 'false';

        }
        $scope.curNavSystem = menu;
        if($scope.curNavSystem)
        $scope.curNavSystem.active = 'true';
        if(menu.menus&&menu.menus.length){
            if(menu.open){
                menu.open = false;
            }else{
                menu.open = true;
            }
        }

        if(menu.type=='$state'||menu.value){
            if($scope.curSystem){
                $scope.curSystem.active = 'false';
                $scope.curSystem = $scope.userMenus;
                $scope.curSystem.active = 'true';
            }
            $state.go(menu.value,menu);
        }
    }



}

/**
 * 分页组件
 */

angular.module('ework-ui')
    .controller('PaginationDemoCtrl', ['$scope', '$log',PaginationDemoCtrl]);
function PaginationDemoCtrl($scope, $log){
	  $scope.$parent.$watch('loaded', function(value){loadData()});
	  $scope.viewby = 5;
	  $scope.currentPage = 4;
	  $scope.itemsPerPage = $scope.viewby;
	  $scope.maxSize = 50; 
	  $scope.setPage = function (pageNo) {
	    $scope.currentPage = pageNo;
	  };
	  $scope.pageChanged = function() {
		  if($scope.$parent.datas)
			  $scope.child.currentPage= $scope.currentPage;
		      $scope.child.itemsPerPage= $scope.itemsPerPage;
	  };
	  $scope.selectPage=function(){
			 $scope.child.itemsPerPage= $scope.itemsPerPage;
	  }
	  $scope.setItemsPerPage = function(num) {
		  $scope.itemsPerPage = num;
		  $scope.currentPage = 1;
		}
	  function loadData(){
			//加载完之后执行赋值
		    if($scope.loaded==true){
		    	 $scope.data=$scope.$parent.datas;
			     $scope.totalItems = $scope.data.length;
				 $scope.child.currentPage= $scope.currentPage;
				 $scope.child.itemsPerPage= $scope.itemsPerPage;
		    }
		}
	
}

angular.module('ework-ui').controller('TooltipDemoCtrl', ['$scope', '$sce', function ($scope, $sce) {
  $scope.dynamicTooltip = '此字段不能为空!';
  $scope.dynamicTooltipText = 'dynamic';
  $scope.htmlTooltip = $sce.trustAsHtml('I\'ve been made <b>bold</b>!');
  $scope.placement = {
    options: [
      'top',
      'top-left',
      'top-right',
      'bottom',
      'bottom-left',
      'bottom-right',
      'left',
      'left-top',
      'left-bottom',
      'right',
      'right-top',
      'right-bottom'
    ],
    selected: 'top'
  };
}]);
/**
 * Created by Liyong.zhu on 2016/6/12.
 */
angular.module('ework-ui')
    .controller('AccountCtrl', [
        '$scope',
        '$log',
        '$state',
        'RoleService',
        'CompanyService',
        'BranchsService',
        'AccountService',
        'BranchTreeService',
        AccountCtrl]);


function AccountCtrl(
    $scope,
    $log,
    $state,
    RoleService,
    CompanyService,
    BranchsService,
    AccountService,
    BranchTreeService
    ){

    //列表当前页码
    $scope.currentPage = 1;
    //列表当前总页码
    $scope.totalPage = 1;
    //列表当前页行数
    $scope.pageSize = 50;

    //账户列表
    $scope. accountList = [];
    //公司列表
    $scope. companyList = [];
    //校区列表
    $scope.branchsList = [];
    //操作类型
    $scope.operateType = '';
    //当前选中的角色
    $scope.curAccountRole = {};
    $scope.role_search_info='';
    $scope.rolePage = {
    		roleCompany:null,
    		roleBranch:null,
            roleSearchInfo:''
        }

    /**
     * 查询账户
     */
    $scope.queryAccount = function(){
        var param = {};
        if($scope.selectedCompany){
            param.p_selectedCompany = $scope.selectedCompany.id;
        }
        if($scope.branch){
            param.p_selectedBranch = $scope.branch.id;
        }
      $log.log("selectedBranch="+ param.p_selectedBranch);  
        if($scope.search_info){
            param.p_searchInfo = $scope.search_info;
        }
        param.pageSize = $scope.pageSize;
        param.currentPage = $scope.currentPage;
        param.totalPage = $scope.totalPage;
        $scope.isLoading = 'loading...';
        $scope.curAccount = null;

        AccountService.get(param,function(resp){
            $scope.isLoading = '';
            if(resp.error ==  'false'){
                $scope. accountList = resp.data;
                $scope.currentPage = resp.currentPage;
                $scope.totalPage = resp.totalPage;
                $scope.pageSize = resp.pageSize;
            }
        });
    }

    /**
     * 去添加账户
     */
    $scope.toAddAccountPanel = function(){
        $scope.operateType = 'addAccount';
        $scope.curAccount = {};
        $("#accountMgrPanel").modal('show');
    }

    /**
     * 去修改账户
     * @param account
     */
    $scope.toUpdateAccountPanel = function(account){
        $scope.curAccount = account;
        $scope.operateType = 'updateAccount';
        $("#accountMgrPanel").modal('show');
    }

    /**
     * 去删除账户
     * @param account
     */
    $scope.toDeleteAccountPanel = function(account){
        $scope.curAccount = account;
        $scope.operateType = 'deleteAccount';
        $scope.comfirmAccount();
    }

    /**
     * 去添加角色
     */
    $scope.toAddRolePanel = function(){
        if(!$scope.curAccount){
            alert("请选择账户！");
            return;
        }
        $scope.curAccountRole = {};
        $("#accountMgrRolePanel").modal('show');
        queryAllRole();
    }

    /**
     * 查询角色
     */
    $scope.queryAllRole = function(){
        queryAllRole();
    }

    /**
     * 账户确认
     */
    $scope.comfirmAccount = function(){
        if($scope.operateType == 'addAccount'){
            addAccount($scope.curAccount);
        } else if ($scope.operateType == 'updateAccount'){
            updateAccount($scope.curAccount);
        } else if ($scope.operateType == 'deleteAccount'){
            deleteAccount($scope.curAccount);
        }
    }

    /**
     * 移除角色
     * @param role
     */
    $scope.removeRole = function(role){
        if(!$scope.curAccount){
            alert("请选择账户！");
            return;
        }
        if($scope.curAccount.roleList){
            var roleList = [];
            $.each($scope.curAccount.roleList,function(i,r){
                if(r.id != role.id){
                    roleList.push(r);
                }
            });
            $scope.curAccount.roleList = roleList;
        }

    }


    /**
     * 选择行
     * @param row
     */
    $scope.checked = function(row){
    	if($scope.curAccount&& $scope.curAccount.hasOwnProperty('checked'))
        $scope.curAccount.checked=false;
        if(row.checked){
            row.checked = false;
        }else{
            row.checked = true;
            $scope.curAccount = row;
            //查询角色
            queryRole(row);
            //查询校区权限树
            queryBranchTree(row);
        }
    }

    /**
     * 选择角色
     * @param role
     */
    $scope.selectedRole = function(role){
        if(!$scope.curAccount){
            alert("请选择账户！");
        }
        if(!$scope.curAccount.roleList){
            $scope.curAccount.roleList = [];
        }
        $scope.curAccount.roleList.push(role);

        //查询角色
        queryAllRole();
    }

    /**
     * 更新账户
     */
    $scope.updateAccount = function(){
        if(!$scope.curAccount){
           alert("请选择账户！");
            return;
        }
        updateAccount($scope.curAccount);
    }
    
    
    $scope.queryBranchsWithId= function (company){
    	var param={};
    	if( company.id)
    	param.companyId=company.id;
    	else{
    		param.companyId=company;
    	}
        BranchsService.get(param,function(resp){
            if(resp.error == 'false'||resp.error==false){
                $scope.branchsList = resp.data;
            }
        });
    }

    function deleteAccount(account){
        var param = {};
        param.accountId=account.id;
        AccountService.delete(param,function(resp){
            if(resp.error ==  'false'){
                alert("禁用成功！");
                $scope.queryAccount();
            }else{
                alert("删除失败："+resp.message+",请截图反馈给ERP客服！");
            }
        })
    }

    function updateAccount(account){
        var param = account;
        var selected = [];

        param.selectedBranch = genSelectedMenus();
        if(!param.selectedBranch||  param.selectedBranch.length==0)
        	{
        	 alert("未选择任何的账户校区!");
        	 return;
        	}
        AccountService.update(param,function(resp){
            if(resp.error ==  'false'){
                alert("修改成功！");
            }else{
                alert("修改失败："+resp.message+",请截图反馈给ERP客服！");
            }
        })
    }

    function addAccount(account){
        var param = account;
        if($scope.curAccount.selectedCompany)
        	param.companyId=$scope.curAccount.selectedCompany.id;
        AccountService.add(param,function(resp){
            if(resp.error ==  'false'){
                alert("添加成功！");
                $scope. accountList.push(account);
            }else{
                alert("添加失败："+resp.message+",请截图反馈给ERP客服！");
            }
        })
    }

    function queryRole(account){
        var param = {};
        param.accountId = account.id;
        $scope.isLoadingRole = 'loading...';
        RoleService.queryRoleWithAccount(param,function(resp){
            $scope.isLoadingRole = '';
           if(resp.error ==  'false'){
               account.roleList = resp.data;
           }
        });
    }

    function queryAllRole(){
        var param = {};
        $scope.isLoadingRoleList = 'loading...';
        if($scope.rolePage.roleCompany)
        param.p_selectedCompany= $scope.rolePage.roleCompany;
        if($scope.rolePage.roleBranch)
        param.p_selectedBranch= $scope.rolePage.roleBranch;
        param.p_searchInfo = $scope.rolePage.roleSearchInfo;
        param.p_accountId=$scope.curAccount.id;//当前选中的账户编码传递至后台过滤出选中账户拥有过的角色
        RoleService.get(param,function(resp){
            $scope.isLoadingRoleList = '';
            if(resp.error ==  'false'){
                var roleList = [];
                $.each(resp.data,function(i,role){
                    var exist = false;
                    $.each($scope.curAccount.roleList,function(ii,r){
                        if(role.id == r.id){
                            exist = true;
                        }
                    });
                    if(!exist){
                        roleList.push(role);
                    }
                });
                $scope.roleList = roleList;
            }
        });
    }

    function queryBranchTree(account){
    	$('#branchTree').jstree("destroy").empty();
        var param = {};
        param.accountId = account.id;
        BranchTreeService.queryTree(param,function(resp){
                account.branchTree = resp.data;
                $('#branchTree').jstree({
                    "plugins" : ["types","checkbox"],
                    "types" : {
                        "menus" : {
                            "icon" : "fa fa-folder-o"
                        },
                        "leaf" : {
                            "icon" : "fa fa-file-text-o"
                        }
                    },
                    'core' : {
                        'data' : account.branchTree,
                        "check_callback" : function (operation, node, parent, position, more) {
                            //TODO
                        }
                    }
                });
        })
    }

    

    function genSelectedMenus(){
        var instance = $('#branchTree').jstree(true);
        var selectedMenus = instance.get_selected(true);
        var selected = [];
        for(var key in selectedMenus){
        	var type=selectedMenus[key].type;
        	if(type=='leaf')
            selected.push(selectedMenus[key].id);
        }
        return selected;
    }
    
    /**
     * 查询归属公司
     */
    function queryCompany(){
        CompanyService.get({},function(resp){
            if(resp.error == 'false'){
                $scope.companyList = resp.data;
            }
        })
    }

    /**
     * 查询归属校区
     */
    function queryBranchs(){
        BranchsService.get({},function(resp){
            if(resp.error == 'false'){
                $scope.branchsList = resp.data;
            }
        })
    }

    $scope.queryAccount();

    queryCompany();

    queryBranchs();

}
/**
 * Created by Lyk on 2016/7/19.
 */
angular.module('ework-ui').controller(
		'AccountSecurityCtrl',
		[ '$scope', '$log', '$state', 'PUBAccountService',
				'JudgePasswordService','$uibMsgbox', AccountSecurityCtrl ]);

function AccountSecurityCtrl($scope, $log, $state, PUBAccountService,
		JudgePasswordService,$uibMsgbox) {
	$scope.currentAccount = null;
	$scope.nextJudgePassword = null;
	$scope.nowPassword = null;
	// 显示当前账户信息
	function showCurrentAccount() {
		PUBAccountService.query({}, function(resp) {
			//if (resp.error == 'false') {
				$log.log(resp.data);
				$scope.currentAccount = resp.data;
			//}
		});
		
	}
	// 更新当前的账户信息

	$scope.clickUpdateCurrentAccount = function() {
		JudgePassword();
	}
	function doConfirm(){
		var nextJudgePassword = $scope.nextJudgePassword;
		if (nextJudgePassword == "true") {
			var newAccountPassword = $scope.newAccountPassword;
			if (newAccountPassword != null && newAccountPassword != "") {
				var confirmPassword = $scope.confirmPassword;
				if (newAccountPassword == confirmPassword) {
					$scope.currentAccount.password=newAccountPassword;
					updateCurrentAccount();
				} else {
					$uibMsgbox.alert("请输入相同的密码");
				}
			} else {
				$uibMsgbox.alert("请输入新的密码");
			}
		}else{
			$uibMsgbox.alert("当前登录密码输入错误");
		}
		
	}
	/**
	 * 判断当前用户输入的密码是否正确
	 */
	function JudgePassword() {
		var params = {};
		params.nowPassword = $scope.nowPassword;
		JudgePasswordService.get(params, function(resp) {
			if(!resp.error) {
				$log.log(resp.data);
				$scope.nextJudgePassword = resp.data;
				if($scope.nextJudgePassword!='false'){
					doConfirm()
				} else {
					$uibMsgbox.alert("原密码错误");
				}
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}
	/**
	 * 修改密码
	 */
	function updateCurrentAccount() {
		//$scope.currentAccount.id=0;
		$log.log("new password is:"+$scope.currentAccount.password);
		PUBAccountService.put($scope.currentAccount, function(resp) {
				$uibMsgbox.alert("修改成功！");
		}),function(err){
			$uibMsgbox.alert("修改失败：" + resp.message + ",请截图反馈给ERP客服！");
		}
	}
	
	showCurrentAccount();

}
/**
 * 公司设备
 */
"use strict";
angular.module('ework-ui').controller('erp_companyAccountController', [
    '$rootScope',
    '$scope',
    '$log',
    'erp_companyAccountService',
    erp_companyAccountController
    ]);


function erp_companyAccountController(
    $rootScope,
    $scope,
    $log,
    erp_companyAccountService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索的科目名称
    $scope.searchParam = {
        device_code: '',
        account_num: ''
    };
    // 明细列表
    $scope.companyAccountList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.companyAccountDetail = {
        id: 0,
        account_name: '',
        account_num: '',
        description: ''
    };
    
 // 状态列表
    $scope.statusList = [{"key" : 1, "value" : "有效"},
                         {"key" : 2, "value" : "无效"}];

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function(){
            $scope.query()
        }
    };

    $scope.paginationBars = [];

    // 处理【添加】按钮点击事件
    $scope.handleAddAccount = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        $('#erpSystemDictAccountPanel').modal('show');
    };

    // 处理【删除】按钮点击事件
    $scope.handleDeleteAccount = function (id) {
        var r = window.confirm('确定删除选中公司账户？')
        if (r == true) {
            $scope.delete(id)
        }
    };
    
    // 处理【修改】按钮点击事件
    $scope.handlePutAccount = function (account) {
        $scope.optype = 'put';
        $scope.companyAccountDetail = {
            id: account.ID,
            status:account.STATUS,
            account_name: account.ACCOUNT_NAME,
            account_num: account.ACCOUNT_NUM,
            description: account.DESCRIPTION
        };
        $("#erpSystemDictAccountPanel").modal('show');
    };

    // 处理【查询】按钮点击事件
    $scope.handleQueryAccount = function () {
        $scope.query();
    };

    // 处理【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemDictAccountPanel').modal('hide');
    };

    // 处理【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
        if ($scope.optype == 'add') {
            // 添加的内容
            $scope.add();
        } else if ($scope.optype == 'put') {
            $scope.put();
        }
        $('#erpSystemDictAccountPanel').modal('hide');
    };
    // 状态变化
    $scope.onStatusChange = function (device) {
        erp_deviceService.changeStatus({
            deviceId: device.id,
            status: device.status
        }, function (resp) {
            if (!resp.error) {
                $scope.query();
            } else {
                alert(resp.message)
            }
        })
    }
    // 添加
    $scope.add = function () {
    	erp_companyAccountService.add({
    		 account_name: $scope.companyAccountDetail.account_name,
             account_num: $scope.companyAccountDetail.account_num,
             description: $scope.companyAccountDetail.description
        }, function (resp) {
            if (!resp.error) {
                window.alert('添加成功！');
                $scope.query();
            } else {
                window.alert(resp.message);
            }
        })
    };

    // 修改
    $scope.put = function () {
    	erp_companyAccountService.update({
            id: $scope.companyAccountDetail.id,
            status:$scope.companyAccountDetail.status,
            account_name: $scope.companyAccountDetail.account_name,
            account_num: $scope.companyAccountDetail.account_num,
            description: $scope.companyAccountDetail.description
        }, function (resp) {
            if (!resp.error) {
                window.alert('修改成功！');
                $scope.query();
            } else {
                window.alert(resp.message);
            }
        })
    };

    // 删除
    $scope.delete = function (id) {
    	erp_companyAccountService.delete({
    		id: id
        }, function (resp) {
            if (!resp.error) {
                window.alert('删除成功！');
                $scope.query();
            } else {
                window.alert(resp.message);
            }
        })
    };

    // 查询
    $scope.query = function () {
    	erp_companyAccountService.query({
            pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            p_account_name: $scope.searchParam.account_name,
            p_account_num: $scope.searchParam.account_num
        }, function (resp) {
            if (!resp.error) {
                $scope.companyAccountList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                alert(resp.message)
            }
        })
    };

    // 重置表单
    $scope.resetForm = function () {
        //$("#erpSystemCommonDevicePanel form")[0].reset()
        $scope.companyAccountDetail = {};
    };

    $scope.query();
}

/**
 * Created by Lyk on 2016/7/19.
 */
angular.module('ework-ui')
    .controller('EmployeeInfoCtrl', [
    		'$rootScope',
        '$scope',
        '$log',
        '$state',
        'PUBEmployeeService',
         EmployeeInfoCtrl]);


function EmployeeInfoCtrl(
    $rootScope,
    $scope,
    $log,
    $state,
    PUBEmployeeService
    ){
  $rootScope.currentEmployee = null;
	$scope.currentEmployee=null;
	$scope.all=true
	$scope.readonly="编辑";
	//显示当前账户信息
	function showCurrentEmployee(){
		PUBEmployeeService.query({},function(resp){
           /* if(resp.error ==  'false'){*/
            	$log.log(resp.data)
              $rootScope.currentEmployee = resp.data;
            	$scope.currentEmployee=resp.data;
            //}
        });
	}
	$scope.updateReadonly=function(){
		if($scope.all){
			$scope.all=false;
			$scope.readonly="返回";
		}else{
			$scope.all=true;
			$scope.readonly="编辑";
		}
	};
	
	$scope.updateCurrentEmployee=function(){
		updateCurrentEmployee();
		
	}
	//更新当前的账户信息
	function updateCurrentEmployee(){
        PUBEmployeeService.put($scope.currentEmployee,function(resp){
            if(resp.error ==  'false'||resp.error == false){
                alert("修改成功！");
            }else{
                alert("修改失败："+resp.message+",请截图反馈给ERP客服！");
            }
        });
	}
   
	showCurrentEmployee();
}
/**
 * Alerts Controller
 */

angular.module('ework-ui').controller(
		'crmAlertsCtrl',
		[ '$rootScope', '$scope', '$sce', '$interval', 'crm_AlertService',
				crmAlertsCtrl ]);

function crmAlertsCtrl($rootScope, $scope, $sce, $interval, crm_AlertService) {
	$scope.operWait = false;
	function queryReminders() {
		if ($scope.operWait)
			return;
		$scope.operWait = true;
		crm_AlertService.query({
			action : 'queryReminders'
		}, function(Res) {
			$scope.noticeResult = [];
			$scope.reminderResult = [];
			if (Res.error == false) {
				if (Res.data) {
					for (var i = 0; i < Res.data.length; i++) {
						if (1 == Res.data[i].remind_type) {
							$scope.noticeResult.push(Res.data[i]);
						}
						if (2 == Res.data[i].remind_type) {
							$scope.reminderResult.push(Res.data[i]);
						}
					}
				}
			}
			$scope.operWait = false;
		});
	}
	queryReminders();
//	$interval(queryReminders, 1000 * 60);

	$scope.closeNotice = function() {
		$scope.noticeResult = [];
	}
	$scope.closeReminder = function() {
		$scope.reminderResult = [];
	}

}
/**
 * Created by Liyong.zhu on 2016/9/12.
 */
'use strict';
/**
 * 团队查询服务
 */
angular.module('ework-ui').factory('crm_buService',
		[ '$resource', crm_buService ]);
/**
 * 校区查询服务
 */
angular.module('ework-ui').factory('crm_branchService',
		[ '$resource', crm_branchService ]);
/**
 * 渠道统计服务
 */
angular.module('ework-ui').factory('crm_channelService',
		[ '$resource', crm_channelService ]);
/**
 * 渠转化率统计服务
 */
angular.module('ework-ui').factory('crm_convertRateService',
		[ '$resource', crm_convertRateService ]);
/**
 * 平均单笔统计服务
 */
angular.module('ework-ui').factory('crm_avgachieveService',
		[ '$resource', crm_avgachieveService ]);
/**
 * 业绩总额统计服务
 */
angular.module('ework-ui').factory('crm_achievetotalService',
		[ '$resource', crm_achievetotalService ]);
/**
 * 校区业绩排名服务
 */
angular.module('ework-ui').factory('crm_orderedsortService',
		[ '$resource', crm_orderedsortService ]);
/**
 * 业绩资源对比服务
 */
angular.module('ework-ui').factory('crm_performancegcService',
		[ '$resource', crm_performancegcService ]);
/**
 * 业绩资源对比服务
 */
angular.module('ework-ui').factory('crm_excavategcService',
		[ '$resource', crm_excavategcService ]);

/**
 * 约访率统计
 */
angular.module('ework-ui').factory('crm_planVisitService',
		[ '$resource', crm_planVisitService ]);

/**
 * 现场成单率
 */
angular.module('ework-ui').factory('crm_sceneService',
		[ '$resource', crm_sceneService ]);

/**
 * 资源转化率
 */
angular.module('ework-ui').factory('crm_resConvationGcService',
		[ '$resource', crm_resConvationGcService ]);

function crm_buService($resource) {
	return $resource('/gxhcrm/common/buservice', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_branchService($resource) {
	return $resource('/gxhcrm/common/branchservice', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_channelService($resource) {
	return $resource('/gxhcrm/report/queryPage/channelPage', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_convertRateService($resource) {
	return $resource('/gxhcrm/report/query/convertrate', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_avgachieveService($resource) {
	return $resource('/gxhcrm/report/query/avgachieve', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_achievetotalService($resource) {
	return $resource('/gxhcrm/report/query/achievetotal', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_orderedsortService($resource) {
	return $resource('/gxhcrm/report/queryPage/orderedsortPage', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_performancegcService($resource) {
	return $resource('/gxhcrm/report/query/performancegc', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_excavategcService($resource) {
	return $resource('/gxhcrm/report/query/excavategc', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_planVisitService($resource) {
	return $resource('/gxhcrm/report/query/planVisit', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}
function crm_sceneService($resource) {
	return $resource('/gxhcrm/report/query/scene', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function crm_resConvationGcService($resource) {
	return $resource('/gxhcrm/report/query/resConvationGc', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

"use strict";
angular.module('ework-ui').controller('crmDictController', [
  '$rootScope',
  '$scope',
  'crm_queryDictDataService',
  'crm_queryBranchsService',
  'crm_queryGradesService',
  'crm_querySingleRescRecService',
  'crm_queryRescRecProcService',
  'crm_queryAschListService',
  'crm_queryCnselorListService',
  'crm_queryRescRecListService',
  'crm_GxhCrmDictService',
  'crm_DictDataService',
  'crm_DictTypeService',
  crmDictController
]);

function crmDictController(
  $rootScope,
  $scope,
  queryDictDataService,
  queryBranchsService,
  queryGradesService,
  querySingleRescRecService,
  queryRescRecProcService,
  queryAschListService,
  queryCnselorListService,
  queryRescRecListService,
  GxhCrmDictService,
  DictDataService,
  DictTypeService
) {
  $scope.DictType = {}; // 字典类型
  $scope.DictData = {}; // 字典条码

  // 分页_start
  $scope.DictType.PageObj = new PageObj();
  $scope.DictData.PageObj = new PageObj();
  $scope.DictType.pageLoading = '';
  $scope.DictData.pageLoading = '';
  // 字典类型分页数据请求回调
  $scope.DictType.pageCallBack = function(data) {
      $scope.DictType.pageLoading = '';
      $scope.DictType.pageResults = [];
      var newArray = new Array();
      for (var i = 0; i < data.rows.length; i++) {
        data.rows[i].selected = '';
        newArray.push(data.rows[i]);
      }
      if (!$scope.$$phase) {
        $scope
          .$apply(function() {
            $scope.DictType.pageResults = newArray;
            $scope.DictType.PageObj.totalPage = data.totalPage;
          });
      } else {
        $scope.DictType.pageResults = newArray;
        $scope.DictType.PageObj.totalPage = data.totalPage;
      }

      var type_ids = '';
      for (var i = 0; i < $scope.DictType.pageResults.length; i++) {
        if (type_ids.length > 0) {
          type_ids += ",";
        }
        type_ids += $scope.DictType.pageResults[i].id;
      }

      $scope.DictData.PageObj.param.p_type_id = null;
      $scope.DictData.PageObj.param.p_type_ids = type_ids;
      $scope.DictData.searchPage();
    }
    // 字典条码分页数据请求回调
  $scope.DictData.pageCallBack = function(data) {
    $scope.DictData.pageLoading = '';
    $scope.DictData.pageResults = [];
    var newArray = [];
    for (var i = 0; i < data.rows.length; i++) {
      data.rows[i].selected = '';
      newArray.push(data.rows[i]);
    }
    if (!$scope.$$phase) {
      $scope
        .$apply(function() {
          $scope.DictData.pageResults = newArray;
          $scope.DictData.PageObj.totalPage = data.totalPage;
        });
    } else {
      $scope.DictData.pageResults = newArray;
      $scope.DictData.PageObj.totalPage = data.totalPage;
    }
  }

  $scope.DictType.pageLoading = 'loading...';

  $scope.DictType.PageObj.init("/gxhcrm/dict/type/page", {},
    $scope.DictType.pageCallBack, 10, 7, 1, $(''));

  $scope.DictData.pageLoading = 'loading...';
  $scope.DictData.PageObj.init("/gxhcrm/dict/data/page", {},
    $scope.DictData.pageCallBack, 8, 7, 1, $(''));

  $scope.DictType.begin = function() {
    $scope.DictType.pageLoading = 'loading...';
    $scope.DictType.PageObj.begin();
  }
  $scope.DictType.up = function() {
    if ($scope.DictType.PageObj.page > 1) {
      $scope.DictType.pageLoading = 'loading...';
    }
    $scope.DictType.PageObj.up();
  }
  $scope.DictType.down = function() {
    if ($scope.DictType.PageObj.page < $scope.DictType.PageObj.totalPage) {
      $scope.DictType.pageLoading = 'loading...';
    }
    $scope.DictType.PageObj.down();
  }
  $scope.DictType.end = function() {
    $scope.DictType.pageLoading = 'loading...';
    $scope.DictType.PageObj.end();
  }
  $scope.DictData.begin = function() {
    $scope.DictData.pageLoading = 'loading...';
    $scope.DictData.PageObj.begin();
  }
  $scope.DictData.up = function() {
    if ($scope.DictData.PageObj.page > 1) {
      $scope.DictData.pageLoading = 'loading...';
    }
    $scope.DictData.PageObj.up();
  }
  $scope.DictData.down = function() {
    if ($scope.DictData.PageObj.page < $scope.DictData.PageObj.totalPage) {
      $scope.DictData.pageLoading = 'loading...';
    }
    $scope.DictData.PageObj.down();
  }
  $scope.DictData.end = function() {
    $scope.DictData.pageLoading = 'loading...';
    $scope.DictData.PageObj.end();
  }
  $scope.DictType.searchPage = function() {
    $scope.DictType.pageLoading = 'loading...';
    $scope.DictType.PageObj.page = 1;
    $scope.DictType.PageObj.initPage();
  }
  $scope.DictData.searchPage = function() {
      $scope.DictData.pageLoading = 'loading...';
      $scope.DictData.PageObj.page = 1;
      $scope.DictData.PageObj.initPage();
    }
    // 分页_end

  // 表格选中_start
  $scope.selectDictType = function(dictType) {
    $scope.DictType.currentData = dictType;
    for (var i = 0; i < $scope.DictType.pageResults.length; i++) {
      $scope.DictType.pageResults[i].selected = '';
    }
    if (dictType) {
      dictType.selected = 'selected';
      if (dictType.id) {
        $scope.DictData.PageObj.param.p_type_ids = null;
        $scope.DictData.PageObj.param.p_type_id = dictType.id;
        $scope.DictData.searchPage();
      }
    }
  }

  $scope.selectDictData = function(dictData) {
      for (var i = 0; i < $scope.DictData.pageResults.length; i++) {
        $scope.DictData.pageResults[i].selected = '';
      }
      if (dictData) {
        dictData.selected = 'selected';
      }
    }
    // 表格选中_end

  // 新增修改_start
  $scope.DictTypeSettingDialog = function(
    setting_type, dictType) {
    $scope.DictType.settingData = {};
    $scope.DictType.currentData = {};
    $scope.DictType.settingData.title = '新增字典类型';
    $scope.DictType.settingData.setting_type = 1;
    if (setting_type == 2) {
      // 修改
      $scope.DictType.settingData.title = '修改字典类型';
      $scope.DictType.settingData.setting_type = 2;
      $scope.DictType.settingData = dictType;
      $scope.DictType.currentData = dictType;
      $scope.selectDictType(dictType);
    }
    $scope.DictType.settingDialog = 'open';
  }
  $scope.DictTypeCloseSettingDialog = function() {
    $scope.DictType.settingDialog = '';
  }

  $scope.DictTypeSetting = function() {
    if ($scope.DictType.settingData.wait) {
      return;
    }
    if (isEmpty($scope.DictType.currentData.name)) {
      $scope.DictType.settingData.msg = '字典名称不可为空';
      return;
    }
    if (isEmpty($scope.DictType.currentData.code)) {
      $scope.DictType.settingData.msg = '字典编码不可为空';
      return;
    }
    $scope.DictType.settingData.wait = false;
    if (!isEmpty($scope.DictType.currentData.id)) {
      delete $scope.DictType.currentData.wait;
      delete $scope.DictType.currentData.selected;
      // 修改功能
      DictTypeService.update(
        $scope.DictType.currentData,
        function(rs) {
          if (rs.status == 1) {
            alert('修改成功！');
            $scope
              .DictTypeCloseSettingDialog();
            $scope.DictType
              .searchPage();
          }
          if (rs.status == 0) {
            $scope.DictType.settingData.msg = rs.errMsg;
          }
        },
        function(rs) {
          $scope.DictType.settingData.msg = rs;
        });
    } else {
      delete $scope.DictType.currentData.wait;
      delete $scope.DictType.currentData.selected;
      // 字典的新增功能
      DictTypeService.add(
        $scope.DictType.currentData,
        function(rs) {
          if (rs.status == 1) {
            alert('新增成功！');
            $scope
              .DictTypeCloseSettingDialog();
            $scope.DictType
              .searchPage();
          }
          if (rs.status == 0) {
            $scope.DictType.settingData.msg = rs.errMsg;
          }
        },
        function(rs) {
          $scope.DictType.settingData.msg = rs;
        }
      );
    }

  }
  $scope.DictTypeClear = function() {
    $scope.DictType.currentData = null;
  }
  // 新增修改_end

  // 新增修改_start
  $scope.DictDataSettingDialog = function(
    setting_type, dictData) {
	  if (!$scope.DictType.currentData) {
			alert('请先选择字典类型');
			return;
		}
    $scope.DictData.currentData = {};
    $scope.DictData.settingData = {};
    $scope.DictData.settingData.title = '新增字典类型';
    $scope.DictData.settingData.setting_type = 1;
    if (setting_type == 2) {
      $scope.selectDictData(dictData);
      $scope.DictData.settingData.title = '修改字典类型';
      $scope.DictData.settingData.setting_type = 2;
      $scope.DictData.settingData = dictData;
      $scope.DictData.currentData = dictData;
    }
    $scope.DictData.settingDialog = 'open';
  }
  
  $scope.DictDataCloseSettingDialog = function() {
    $scope.DictData.settingDialog = '';
  }

  $scope.DictDataSetting = function() {
    if ($scope.DictData.settingData.wait) {
      return;
    }
    if (!$scope.DictType.currentData) {
      $scope.DictData.settingData.msg = '请先选择字典类型';
      return;
    }
    if (isEmpty($scope.DictData.currentData.name)) {
      $scope.DictData.settingData.msg = '条目名称不可为空';
      return;
    }
    if (isEmpty($scope.DictData.currentData.code)) {
      $scope.DictData.settingData.msg = '条目编码不可为空';
      return;
    }
    $scope.DictData.settingData.wait = false;
    $scope.DictData.currentData.type_id = $scope.DictType.currentData.id;
    if (!isEmpty($scope.DictData.currentData.id)) {
      delete $scope.DictData.currentData.wait;
      delete $scope.DictData.currentData.selected;
      /*
       * status 1 ""
       */
      // 修改功能
      DictDataService
        .update(
          $scope.DictData.currentData,
          function(rs) {
            if (rs.status == 1) {
              alert('修改成功！');
              $scope
                .DictDataCloseSettingDialog();
              $scope.DictData
                .searchPage();
            }
            if (rs.status == 0) {
              $scope.DictData.settingData.msg = rs.errMsg;
            }
          },
          function(rs) {
            $scope.DictData.settingData.msg = rs;
          });

    } else {
      delete $scope.DictData.currentData.wait;
      delete $scope.DictData.currentData.selected;
      // 字典的新增功能
      DictDataService
        .add(
          $scope.DictData.currentData,
          function(rs) {
            if (rs.status == 1) {
              alert('新增成功！');
              $scope
                .DictDataCloseSettingDialog();
              $scope.DictData
                .searchPage();
            }
            if (rs.status == 0) {
              $scope.DictData.settingData.msg = rs.errMsg;
            }
          },
          function(rs) {
            $scope.DictData.settingData.msg = rs;
          });
    }
  }
  $scope.DictDataClear = function() {
      $scope.DictData.currentData.name = "";
      $scope.DictData.currentData.code = "";
      $scope.DictData.currentData.descdtl = "";
    }
    // 新增修改_end

  // 搜索_start
  $scope.DictType.name_code_desc = '请输入：名称/编码/描述';
  $scope.DictType.name_code_desc_blur = function() {
    if ($scope.DictType.name_code_desc == '')
      $scope.DictType.name_code_desc = '请输入：名称/编码/描述';
  }
  $scope.DictType.name_code_desc_fous = function() {
    if ($scope.DictType.name_code_desc == '请输入：名称/编码/描述')
      $scope.DictType.name_code_desc = '';
  }
  $scope.DictType.search = function() {
      if ($scope.DictType.name_code_desc == '请输入：名称/编码/描述')
        $scope.DictType.name_code_desc = '';
      $scope.DictType.PageObj.param.p_name_code_desc = $scope.DictType.name_code_desc;
      $scope.DictType.searchPage();
    }
    // 搜索_end
    // data搜索_start
  $scope.DictData.name_code_desc = '请输入：名称/编码/描述';
  $scope.DictData.name_code_desc_blur = function() {
    if ($scope.DictData.name_code_desc == '')
      $scope.DictData.name_code_desc = '请输入：名称/编码/描述';
  }
  $scope.DictData.name_code_desc_fous = function() {
    if ($scope.DictData.name_code_desc == '请输入：名称/编码/描述')
      $scope.DictData.name_code_desc = '';
  }
  $scope.DictData.search = function() {
      if ($scope.DictData.name_code_desc == '请输入：名称/编码/描述')
        $scope.DictData.name_code_desc = '';
      $scope.DictData.PageObj.param.p_name_code_desc = $scope.DictData.name_code_desc;
      $scope.DictData.searchPage();
    }
    // data搜索_end
    // 删除
  $scope.remove = function(id) {
    if (confirm('您确定要删除此条数据？')) {
      DictDataService.remove({
        ids: id
      }, function(rs) {
        if (rs.status == 1) {
          alert('删除成功！');
          $scope.DictData.searchPage();
        }
        if (rs.status == 0) {
          alert('删除失败，原因：' + rs.errMsg + '请联系管理员！');
        }
      }, function(rs) {
        alert('删除失败，原因：' + rs + '请联系管理员！');
      });
    }
  }

  $scope.setting = {
    check: {
      enable: true
    },
    view: {
      selectedMulti: true
    },
    edit: {
      enable: true,
      editNameSelectAll: true,
      showRemoveBtn: false,
      showRenameBtn: false,
    },
    key: {
      name: 'menu_name'
    },
    data: {
      simpleData: {
        enable: true,
        idKey: 'id',
        pIdKey: 'parent_id',
        rootPId: 0
      }
    },
    callback: {}
  };

  $scope.showAuth = function(item) {
    $scope.currentItem = item;
    $scope.menuParam = {};
    if (item) {
      $scope.menuParam.dataId = item.id;
    }
    $('#selectAll').removeAttr('checked');
    zTreeObj($scope, DictDataService);
    $('#auth').modal("toggle");
  }

  $scope.saveAuth = function() {
    DictDataService.auth({
      data_id: $scope.currentItem.id,
      orgMenus: $scope.zTree
        .getCheckedNodes(true)
    }, function(rs) {
      if (rs.status == 1) {
        alert('授权成功！');
        $('#auth').modal('toggle');
        $scope.DictData.searchPage();
      }
      if (rs.status == 0) {
        alert('授权失败！');
        $scope.errMsg = rs.errMsg;
      }
    });
  }

}

"use strict";
angular
    .module('ework-ui')
    .controller('crmRescRecDistributeController',
		[   '$rootScope',
            '$scope',
            'crm_queryDictDataService',
            'crm_queryBranchsService',
		    'crm_querySingleRescRecService',
            'crm_queryRescRecProcService',
            'crm_queryCnselorListService',
		    'crm_loadDataRescRecService',
            '$stateParams',
            crmRescRecDistributeController
        ]);

function crmRescRecDistributeController(
            $rootScope,
            $scope,
            queryDictDataService,
            queryBranchsService,
            querySingleRescRecService,
            queryRescRecProcService,
            queryCnselorListService,
            loadDataRescRecService,
            $stateParams
    ){

    $scope.searchParam = {};

    if($stateParams.name){
        $scope.searchParam.p_searchString = $stateParams.name;
    }
    //资源列表
    $scope.resourceRecsDist = {};
    //		              更多信息窗口
    $scope.popW_more = {};

    //资源更多信息
    $scope.moreInfo ={};

    //		      咨询师列表
    $scope.cnselors=[]

    $scope.selected_cnsl = 0;

    $scope.isLoading='loading...';

    //		      分页
    agPageObject($scope,loadDataRescRecService,$scope.searchParam);

    $scope.init = function(){
        $scope.searchParam.p_isDist = "1";
        $scope.load();
    };

    $scope.pageCallBack = function(data){
        $scope.resourceRecsDist = [];
        var newArray = new Array();
        $scope.isLoading='';
        $.each($scope.items,function(i,model){
            model.is_trace=false;
            newArray.push(model);
            newArray.push({is_trace:true,id:model.id});
        });
        $scope.resourceRecsDist =newArray;
    }

    $scope.isLoading='loading...';

    $scope.init();

    $scope.ctn_cnselor_name = '';

    $scope.$watch('searchParam.p_searchString',function(newNameMp){
        $scope.query();
    });

    $scope.query = function(){
        var url = "/gxhcrm/query/queryRescRec";
        $scope.searchParam.p_isDist = "1";
        $scope.isLoading = 'loading...';
        $scope.resourceRecsDist = [];
        $scope.load();
    }

    //				导出
    $scope.exp = function(){
        var param = "";

        for(var p in $scope.searchParam){
            if(!$scope.searchParam[p]){
                param += p+"="+$scope.searchParam[p]+"&";
            }
        }
        if(confirm("确定要导出?")){
            location.href =   "/gxhcrm/rescRecDist/toExp?" +encodeURI(encodeURI(param)) ;
        }
    };

    //关闭窗口的方法
    $scope.closeMoreInfoWin = function(obj){
        $('#recMoreInfo').hide("slow");
        $('#cnselorlist').hide();
    }

    //				查看更多信息
    $scope.showMoreInfo = function(rec_Id,target){
        querySingleRescRecService.query({recId:rec_Id},$scope.showMoreInfoCallBack);
    };


    //				查看更多信息回调函数
    $scope.showMoreInfoCallBack = function(res){
        $scope.moreInfo = {};
        $scope.moreInfo = res.data;
        //设定窗口的位置
        $("#recMoreInfo").slideToggle("nomal","swing");
    }

    //分配资源
    $scope.distributeResources = function(rec){
        if(!$scope.dist_cnselor_id){
            alert("请在右侧选择咨询师！");
            return;
        }
        $scope.currentRec = rec;
        //分配咨询师
        $scope.toDistribute();
    }

    //选择咨询师
    $scope.selectDistCnselorId = function(cnsl){
        if(cnsl&&cnsl.id){
            $scope.dist_cnselor_id = cnsl.id;
        }
    }

    //
    $scope.setSchools = function(res){
        if(!res.error){
            $scope.schools = res.data;
            if($scope.schools&&$scope.schools.length>0){
                $scope.dist_branch_id = $scope.schools[0].branchId;
            }
        }
    };

    //选择校区
    $scope.selectSchool = function(school){
        $scope.dist_branch_id = school.branchId;
    }

    $scope.change_cnselor_name = function(){
        if($scope.ischeck){
            $scope.dist_cnselor_id =null;
            $scope.ischeck = false;
        }
    }

    $scope.trace_id="";

    //				查看更多信息
    $scope.showTraceInfo = function(rec){
        queryRescRecProcService.query({recId:rec.id},function(res){
            $scope.traceInfo ={};
            $scope.traceInfo = res.data;

            if($scope.trace_id == rec.id){
                $scope.trace_id = "";
            }else{
                $scope.trace_id = rec.id;
            }

        });
    };

    $scope.toDistribute = function(){
        if(isEmpty($scope.dist_branch_id)){
            alert('请选择学校！');
            return;
        }
        if(isEmpty($scope.dist_cnselor_id)){
            alert('请选择咨询师！');
            return;
        }
        var url = "/gxhcrm/rescRecDist/toDistribute";
        $scope.param = {};
        $scope.param.bu_id = $scope.currentRec.bu_id;
        $scope.param.id = $scope.currentRec.id;
        $scope.param.branch_id = $scope.dist_branch_id;
        $scope.param.cnselor_id = $scope.dist_cnselor_id;
        $scope.isRun = 'running';
        toolAjax(url, 'post',$scope.param,$scope.toDistributeCallBack, 'json');
    }

    $scope.toDistributeCallBack = function(data){
        if (data.result == null || data.result == '0') {
    //						保存失败提示错误信息
            alert('分配失败！');
        }else{
            alert('分配成功');
            $scope.resourceRecsDist.splice($scope.currentIdx,1);
        }
        $scope.$apply(function(){
            $scope.isRun = '';
        });
        $scope.init();
    }

    //				查询咨询师
    $scope.enter_search_cnselor = function(event,target){
        if(event.keyCode==13)
        {
            $scope.search_cnselor(target);
            return false;
        }
    }


    $scope.search_cnselor = function(target){
        $scope.ischeck = false;
        queryCnselorListService.query({cnselorName:encodeURIComponent($scope.dist_cnselor_name)},
            function(data){
                $scope.cnselors ={};
                $scope.cnselors = data.cnselorList;
                if(!isEmpty($scope.cnselors) && $scope.cnselors.length == 1){
                    //只查到一条咨询师直接赋值
                    $scope.dist_cnselor_id =$scope.cnselors[0].id;
                    $scope.dist_cnselor_name =$scope.cnselors[0].employee_name;
                    $scope.ischeck = true;
                }else{//没查到显示窗口
                    $scope.selected_cnselor(target);
                }
            }
        );
    }

    //				咨询师查询
    $scope.cnSelorSearch = function(){
        queryCnselorListService.query({
            cnselorName:encodeURIComponent($scope.ctn_cnselor_name),
            branchId:$scope.dist_branch_id
        },$scope.showCnselorCallBack);
    }

    $scope.showCnselorCallBack = function(data){
        $scope.cnselors ={}
        $scope.cnselors = data.cnselorList;
        $scope.selected_cnsl = 0;
    }

    //初始化查询校区
    queryBranchsService.query({buId:null,queryType:"getBranchsByUser"},$scope.setSchools);

}

"use strict";
angular.module('ework-ui')
		.controller(
				'crmRescRecInputController',
				[
						'$rootScope',
						'$scope',
						'crm_queryDictDataService',
						'crm_queryBranchsService',
						'crm_queryGradesService',
						'crm_querySingleRescRecService',
						'crm_queryRescRecProcService',
						'crm_queryAschListService',
						'crm_queryTeacherListService',
						'crm_queryCnselorListService',
						'crm_queryRescRecListService',
						'crm_querySubjectService',
						'crm_queryCurrentUserInfoService',
						'crm_getSequenceNumService',
						'crm_loadDataRescRecService',
						'crm_LoginUserService',
						'$http',
						'$uibMsgbox',
						'crm_isSchoolAdminService',
						'crm_hasInputRightService',
						'crm_BranchsVisibleService',
						'crm_checkRepeatService',
						'crm_RescRecProcService',
						function($rootScope, $scope, crm_queryDictDataService,
								crm_queryBranchsService, crm_queryGradesService,
								crm_querySingleRescRecService,
								crm_queryRescRecProcService, crm_queryAschListService,crm_queryTeacherListService,
								crm_queryCnselorListService,
								crm_queryRescRecListService, crm_querySubjectService,
								crm_queryCurrentUserInfoService,
								crm_getSequenceNumService, crm_loadDataRescRecService,
								crm_LoginUserService,$http,$uibMsgbox,crm_isSchoolAdminService,
								crm_hasInputRightService,crm_BranchsVisibleService,crm_checkRepeatService,crm_RescRecProcService) {
							/*--------------星级插件_strat-----------*/
							$scope.initnumber=function(number){
								$(".my-rating")
								.starRating(
										{	
											starSize : 40,
											initialRating :number,//初始化的星星数量
											useFullStars : true,
											disableAfterRate : false,
											callback : function(
													currentRating, $el) {
												$('#selectnumber').val(currentRating
												.toString());
											}
										});
							}
							/*--------------星级插件_end-------------*/
							$scope.popW_trace = null;

							$scope.searchParam = {};

							// 资源列表
							$scope.resourceRecsInput = {};

							$scope.linksList = [ {
								name : ''
							} ];
							
							$scope.sexs = [
								{id: "1",  text:"男"  },
							    {id: "0",  text:"女"  },
							];

							$scope.newRescRec = {
								ordered : '0'
							};

							$scope.resource = {
								sex : '1'
							};

							$scope.qualitys = [ {
								id : 1,
								name : '高'
							}, {
								id : 2,
								name : '中'
							}, {
								id : 3,
								name : '低'
							} ];
							$scope.isSuc = false;
							// 咨询师列表
							$scope.cnselors = [];
							$scope.aschs = [];
							$scope.selected_cnsl = 0;

							// 联系人数组下标
							$scope.linkIndex = 0;

							// 资源更多信息
							$scope.moreInfo = {};

							// 资源跟踪列表
							$scope.traceInfo = {};
							
							$scope.init = function() {
								$scope.searchParam.p_isInput = "1";
								// 查询当前用户信息
								crm_queryCurrentUserInfoService.query({},function(res) {
									$scope.user = res.user;
									if ($scope.user) {
										$scope.newRescRec.cnselor_id = $scope.user.employeeId;
										$scope.newRescRec.cnselor_name = $scope.user.employeeName;
									}
								});
								
								crm_isSchoolAdminService.query({}, function(res) {
									$scope.isSchoolAdmin=res.flag;
								});
								
								crm_hasInputRightService.query({}, function(res) {
									$scope.hasInputRight=res.flag;
									// console.log($scope.hasInputRight);
								});
								
								// 分页
								agPageObject($scope, crm_loadDataRescRecService,
										$scope.searchParam);
								$scope.totalPage = 0;
							};

							$scope.init();

							$scope.setCurrentUserInfo = function(data) {
								$scope.user = data.user;
								if ($scope.user) {
									$scope.newRescRec.cnselor_id = $scope.user.employeeId;
									$scope.newRescRec.cnselor_name = $scope.user.employeeName;
								}
							};

							$scope.pageCallBack = function() {
								var newArray = new Array();
								$scope.isLoading = '';
								if($scope.items != null) {
									$.each($scope.items, function(i, model) {
										model.is_trace = false;
										newArray.push(model);
										newArray.push({
											is_trace : true,
											id : model.id
										});
									});
								}
								$scope.resourceRecsInput = newArray;
                                $scope.pageConf.totalItems = $scope.total || 0;
							}

							// 清理form
							$scope.clearForm = function() {
								$scope.linksList = [ {
									name : ''
								} ];
								$scope.newRescRec = {
									ordered : '0'
								};
								$scope.resource = {
									sex : '1'
								};
								$scope.ischeck = false;
							};

							// 清理form
							$scope.clearFormFun = function() {
								var serialNo = "";
								if ($scope.newRescRec.id) {
									crm_getSequenceNumService.query({},
											$scope.setSerialNo);
								}
								serialNo = $scope.newRescRec.serial_no;

								$scope.resource = {
									sex : '1'
								};
								$scope.newRescRec = {
									ordered : '0',
									serial_no : serialNo
								};
								$scope.linksList = [ {
									name : ''
								} ];
								$scope.ischeck = false;
							};
							
							$scope.checkform = function() {
								if (!$scope.newRescRec.branch_obj || !$scope.newRescRec.branch_obj.id) {
									$uibMsgbox.error('业务校区必须填写！');
									return false;
								}
								if (!$scope.newRescRec.res_type_obj) {
									$uibMsgbox.error('资源类型必须选择！');
									return false;
								}
								if (isEmpty($scope.newRescRec.visit_time)) {
									$uibMsgbox.error('资源日期必须选择！');
									return false;
								}
								if (isEmpty($scope.resource.rela_id)) {
									$uibMsgbox.error('联系人关系必须填写！');
									return false;
								}
								if (isEmpty($scope.resource.call)) {
									$uibMsgbox.error('联系人称呼必须填写！');
									return false;
								}
								if($scope.rescRecForm.$invalid) {
									$uibMsgbox.error('联系电话格式不对！');
									return false;
								}
								if (isEmpty($scope.resource.attend_sch_name)) {
									$uibMsgbox.error('就读学校必须填写！');
									return false;
								}
								if (!$scope.newRescRec.grade_obj) {
									$uibMsgbox.error('年级必须选择！');
									return false;
								}
								if (!$scope.newRescRec.clue_stage_obj) {
									$uibMsgbox.error('资源进展必须选择！');
									return false;
								}
								if (isEmpty($scope.newRescRec.channel_obj)) {
									$uibMsgbox.error('来源渠道必须选择！');
									return false;
								}
								var flag = true;

								if (!isEmpty($scope.linksList)
										&& $scope.linksList.length == 1
										&& $scope.linksList[0].name == ''
										&& isEmpty($scope.linksList[0].rela_id)
										&& isEmpty($scope.linksList[0].sex)
										&& isEmpty($scope.linksList[0].mp)) {
									$scope.linksList = null;
									$('#linksList').remove();
								}

								$($scope.linksList).each(function() {
									if (isEmpty(this.rela_id)) {
										$uibMsgbox.error('联系人关系必须填写!');
										flag = false;
										return false;
									}

									if (isEmpty(this.name)) {
										$uibMsgbox.error('联系人姓名必须填写！');
										flag = false;
										return false;
									}

									if (isEmpty(this.mp)) {
										$uibMsgbox.error('联系人联系电话必须填写!');
										flag = false;
										return false;
									}
								});

								if (!flag) {
									return false;
								}

								return true;
							};
							$scope.form_input = false;
							$scope.form_upload = false;
							$scope.form_operate = "add";
							// 修改
							$scope.updateResourceRec = function(rec) {
								window.location.href = '#modify'
								if($scope.form_input){
									$uibMsgbox.error('请先关闭修改框！');
									return;
								}
								if (!$scope.form_input) {
									$scope.form_input = true;
								}
								if (!$scope.form_upload) {
									$scope.form_upload = false;
								}
								$scope.form_operate = "update";

								if(rec.resource_quality==null){
									rec.resource_quality=0;
								}
								$scope.initnumber(rec.resource_quality);
								$('#selectnumber').val(rec.resource_quality);							
								$scope.form_input_more = true;
								$scope.ischeck = false;
								$scope.clearForm();
								$scope.newRescRec = rec;
								$scope.newRescRec.Resource_quality=$scope.newRescRec.resource_quality;
								$scope.newRescRec.bu_obj = getSelects(
									$scope.newRescRec.bu_id,
									$scope.bus);
								$scope.newRescRec.branch_obj = getSelects(
									$scope.newRescRec.branch_id,
									$scope.branchs);
								$scope.newRescRec.res_type_obj = getSelects(
										$scope.newRescRec.res_type,
									$scope.resTypes);
								if (!$scope.channels) {
									$scope.changeResType(rec.res_type, true);
								} else {
									$scope.newRescRec.channel_obj = getSelects(
										$scope.newRescRec.channel_id,
										$scope.channels);
								}

								$scope.newRescRec.grade_obj = getSelects(
										$scope.newRescRec.grade_id,
										$scope.grades);
								$scope.newRescRec.clue_stage_obj = getSelects(
										$scope.newRescRec.clue_stage_id,
										$scope.ClueStages);
								$scope.newRescRec.bargain_intent_obj = getSelects(
										$scope.newRescRec.bargain_intent_id,
										$scope.BargainIntents);
								// 资源进展
								$scope.newRescRec.resc.sex_obj = getSelects(
										$scope.newRescRec.resc.sex,
										$scope.sexs);
								
								$scope.copy($scope.resource, rec.resc, true);
								if ($scope.resource.rela_id) {
										$scope.resource.rela_id = "" + $scope.resource.rela_id;
								}
								$scope.copy($scope.linksList,
										rec.resc.rescLinks, true);
								if ($scope.linksList && $scope.linksList.length > 0) {
									$.each($scope.linksList, function(idx, link) {
										if (link.rela_id) {
											link.rela_id = "" + link.rela_id;
										}
									});
								}
								if (!$scope.newRescRec.ordered) {
									$scope.newRescRec.ordered = 0;
								}
							}

							$scope.remove = function(rec) {
								if (!$uibMsgbox.confirm("您确定要删除资源：【" + rec.serial_no + "】?")) {
									return;
								}
								crm_RescRecProcService.remove({
									recId : rec.id
								}, function(data) {
									if (data.status) {
										$uibMsgbox.success(rec.serial_no + '删除成功!');
										// 分页
										$scope.query();
									} else {
										$uibMsgbox.error('请联系管理员！删除失败！原因：' + rs.errMsg);
									}

								}, function(rs) {
									$uibMsgbox.error('请联系管理员！错误原因：' + rs.data);
								});

							}
							

							// 资源录入
							$scope.add = function() {
								if (!$scope.hasInputRight) {
									$uibMsgbox.warn('在当前团队下没有录入权限，请切换团队');
									return;
								}
								if ($scope.form_input) {
									return;
								}
								$scope.form_operate = "add";
								$scope.initnumber(1);
								$('#selectnumber').val(1);
								$scope.form_input = true;
								$scope.form_input_more = false;
								$scope.ischeck = false;
								$scope.clearForm();
								if ($scope.bus && $scope.bus.length > 0) {
									$scope.newRescRec.bu_obj = $scope.bus[0];
								}
								if ($scope.branchs && $scope.branchs.length > 0) {
									$scope.newRescRec.branch_obj = $scope.branchs[0];
								}
								if ($scope.user) {
									$scope.newRescRec.cnselor_id = $scope.user.employeeId;
									$scope.newRescRec.cnselor_name = $scope.user.employeeName;
								}
								$scope.newRescRec.visit_time = moment().format('YYYY-MM-DD');
								$scope.newRescRec.resc = {};
								$scope.newRescRec.resc.sex_obj = getSelects(
										"1",
										$scope.sexs);
								console.log($scope.newRescRec.resc.sex_obj);
								crm_getSequenceNumService.query({},
										$scope.setSerialNo);
								// console.log($scope.newRescRec);
							};
							
							// 资源录入
							$scope.upload = function() {
								if ($scope.form_upload) {
									return;
								}
								$scope.form_operate = "upload";
								$scope.form_upload = true;
								$scope.form_input = false;
							};
							
							
							$scope.fileName = "";
							
							$scope.fileChange = function() {
								// console.log("fileChange");
								var datafile = document.querySelector('input[name=fileupload]').files[0];
								if(typeof(datafile) != "undefined") {
									$scope.fileName = datafile.name;
									// console.log($scope.fileName);
								}
							};
							
							$scope.uploadFile = function() {
								 var fd = new FormData();
							     var datafile = document.querySelector('input[name=fileupload]').files[0];
							     fd.append("file", datafile);
							     $scope.fileName = datafile.name;
							    //  console.log(datafile);
							     $http({
						                method:'POST',
						                url   : '/gxhcrm/rescRecInput/uploadfile',
						                data: fd,
						                headers: {'Content-Type':undefined},
						                transformRequest: angular.identity
						            }).success(function (response) {
						                // console.log(response.result);
						                if(response.result) {
						                	$uibMsgbox.success('数据导入成功！');
						                	$scope.query();
						                	$scope.form_upload = false;
											$scope.form_input = false;
											$scope.fileName = "";
						                }else {
						                	$uibMsgbox.error('数据导入失败！');
						                }
						            }).error(function () {
						            	
						            });
							};
							
							$scope.downloadTempalte = function() {
								location.href = "/gxhcrm/rescRecInput/downloadTemplatefile";
							};

							// 获取资源编号
							$scope.setSerialNo = function(rs) {
								$scope.newRescRec.serial_no = rs.serialNo;
							}

							// 关闭
							$scope.closeForm = function() {
								$scope.clearForm();
								$scope.form_input = false;
								$scope.form_upload = false;
								$scope.form_input_more = false;
//								location.reload();
							};

							$scope.newRescRec.grade_id = null;
							var _uibModalInstance = null;

							// 保存并返回成功或失败
							$scope.save = function() {
								if (!$scope.checkform()) {
									return false;
								}
								
								// 保存数据导数据库
								var data = $('#rescRecForm').serializeArray();
								data.push({
									name:'visit_time',
									value:$scope.newRescRec.visit_time
								});
								if($scope.newRescRec.id != null){
									data.push({
										name:'id',
										value:$scope.newRescRec.id
									});
								}
								if(typeof($scope.newRescRec.resc) != "undefined" && $scope.newRescRec.resc.id != null){
									data.push({
										name:'resc.id',
										value:$scope.newRescRec.resc.id
									});
								}
								if(typeof($scope.resource.mp) != "undefined" && $scope.resource.mp != null){
									data.push({
										name:'resc.mp',
										value:$scope.resource.mp
									});
								}
								_uibModalInstance = $uibMsgbox.waiting('数据保存中，请稍候...');
								toolAjax("/gxhcrm/rescRecInput/toAdd", 'post',
											data,
											$scope.saveFormCallBack, 'json');
								
							};

							$scope.saveFormCallBack = function(data) {
								if (data.result == null || data.result == '0') {
									if(_uibModalInstance != null){
										_uibModalInstance.close();
									}
									// 保存失败提示错误信息
									$uibMsgbox.error('保存失败！');
								} else {
										if(_uibModalInstance != null){
											_uibModalInstance.close();
										}
										$uibMsgbox.success('保存成功');
										$scope.isSuc = true;
										// 保存成功后清除form并管理form区域
										$scope.clearForm();
										$scope.ischeck = false;
										$scope.form_input = false;
									//刷新页面
//									location.reload();
								}
								$scope.query();
							}
							// 分页							
							$scope.pageConf = {
								currentPage: 1,
								totalItems: 0,
								itemsPerPage: 10,
								onChange: function () {
									$scope.query()
								}
							}
							$scope.query = function() {
								var url = "/gxhcrm/query/queryRescRec";
								$scope.searchParam.p_isInput = "1";
								if ($scope.searchParam.resType) {
									$scope.searchParam.p_res_type = $scope.searchParam.resType.id;
								}
								if ($scope.searchParam.channelType) {
									$scope.searchParam.p_channel_type = $scope.searchParam.channelType.id;
								}else {
									$scope.searchParam.p_channel_type = '';
								}
								if ($scope.searchParam.cnselState) {
									$scope.searchParam.p_cnsel_state = $scope.searchParam.cnselState.id;
								}else {
									$scope.searchParam.p_cnsel_state = '';
								}
								if ($scope.searchParam.clue_stage_obj) {
									$scope.searchParam.p_clue_stage_id = $scope.searchParam.clue_stage_obj.id;
								}else {
									$scope.searchParam.p_clue_stage_id = '';
								}
                                $scope.pageSize = $scope.pageConf.itemsPerPage;
								$scope.currentPage = $scope.pageConf.currentPage;
								$scope.isLoading = 'loading...';
								$scope.resourceRecsInput = [];
								$scope.load();
							}

							$scope.isLoading = '';

							$scope.change_cnselor_name = function() {
								if ($scope.ischeck) {
									$scope.newRescRec.cnselor_id = null;
									$scope.ischeck = false;
								}
							}

							// 咨询师窗口宽度
							$scope.cnselor_win_left = 0;

							// 查询咨询师
							$scope.enter_search_cnselor = function(event,
									target) {
								if (event.keyCode == 13) {
									$scope.search_cnselor(target);
									return false;
								}
							}

							$scope.search_btn_cnselor = function(target) {
								$scope.cnselor_win_left = $(target).offset().left
										- $('#cnselor_div').width();
								$scope.search_cnselor(target);
							}

							$scope.search_cnselor = function(target) {
								$scope.ischeck = false;
								crm_queryCnselorListService.query({cnselorName : encodeURIComponent($scope.newRescRec.cnselor_name)},
												function(data) {
													$scope.cnselors = {}
													$scope.cnselors = data.cnselorList;
													if (!isEmpty($scope.cnselors)
															&& $scope.cnselors.length == 1) {// 只查到一条咨询师直接赋值
														$scope.newRescRec.cnselor_id = $scope.cnselors[0].id;
														$scope.newRescRec.cnselor_name = $scope.cnselors[0].employee_name;
														$scope.ischeck = true;
													} else {// 没查到显示窗口
														$scope.selected_cnselor(target);
													}
												});
							}

							// 咨询师窗口
							$scope.selected_cnselor = function(target) {
								$scope.ischeck = false;
								if ($scope.cnselor_win_left == 0) {
									$scope.cnselor_win_left = $(target)
											.offset().left;
								}
								// 设定窗口的位置
								$("#cnselorlist").css("top",
										$(target).offset().top + 18).css(
										"left", $scope.cnselor_win_left)
										.slideToggle("nomal", "swing");
								if (!isEmpty($scope.newRescRec.cnselor_name)) {
									$scope.ctn_cnselor_name = $scope.newRescRec.cnselor_name;
									$scope.cnSelorSearch();
								}
							}

							// 咨询师查询
							$scope.cnSelorSearch = function() {
								crm_queryCnselorListService.query({cnselorName : encodeURIComponent($scope.ctn_cnselor_name)}, $scope.showCnselorCallBack);
							}

							$scope.ctn_cnselor_name = '';

							$scope.checkRepeat = function() {
								// console.log($scope.resource.mp);
								if (!isEmpty($scope.resource.mp)) {
									crm_checkRepeatService.query({p_mp : encodeURIComponent($scope.resource.mp)},
											function(res) {
												if(res.flag) {
													 $uibMsgbox.confirm('根据联系方式查询，该线索已经由'+'<span class="text-danger">【'+res.data.employee_name+'】</span>在【'+res.data.crea_time+'】录入，是否继续录入？', function (rs) {
														//  console.log(rs);
													      if (rs == 'cancel') {
													    	  $scope.closeForm();
													      }
													    })
												}
											});
									}
							}

							$scope.rescRecList = function(res) {
								if (!isEmpty(res) && !isEmpty(res.data)) {
									$scope.clearForm();
									$scope.newRescRec = res.data[0];
									$scope.copy($scope.resource,
											res.data[0].resc, true);
									$scope.copy($scope.linksList,
											res.data[0].resc.rescLinks, true);
									$scope.form_input = true;
								}
							}

							// 学校查询
							$scope.cnAschSearch = function() {
								crm_queryAschListService.query({schoolName : encodeURIComponent($scope.ctn_school_name)}, $scope.showAschCallBack);
							}

							$scope.showAschCallBack = function(res) {
								$scope.aschs = []
								$scope.aschs = res.aschList;
							}
							/* 就读学校_start */
							$scope.resource.attend_sch_name = '';
							$scope.attendSchWait = false;
							$scope.attendSchResult = [];

							$scope.loadAttendSchData = function() {
								if ($scope.attendSchWait)
									return;
								if (isEmpty($scope.resource.attend_sch_name))
									return;

								$scope.attendSchWait = true;
								crm_queryAschListService.query({attend_sch_name : encodeURIComponent($scope.resource.attend_sch_name),row_num : 10},
												function(Res) {
													$scope.attendSchResult = [];
													if (Res.code == 200)
														if (Res.data)
															for (var i = 0; i < Res.data.length; i++)
																$scope.attendSchResult.push(Res.data[i]);
																$scope.attendSchWait = false;
												});
							}
							$scope.getDropInstance = function() {
								$scope.loadInstance = {
									'AttendSch' : $scope.loadDropAttendSchData
								};
							}
							$scope.openDropMenu = function() {
								$scope.loadAttendSchData();
							}
							$scope.closeDropMenu = function() {
								$scope.attendSchResult = [];
							}
							$scope.selectMenu = function(attendSch) {
								$scope.resource.attend_sch_name = attendSch.attend_sch_name;
								$scope.resource.attend_sch_id = attendSch.attend_sch_id;
								$scope.closeDropMenu();
							}
							/* 就读学校_end */
							
							
							/* 老师_start */
							$scope.newRescRec.recommend_teacher = '';
							$scope.teacherWait = false;
							$scope.teacherResult = [];

							$scope.loadTeacherData = function() {
								if ($scope.attendSchWait)
									return;
								if (isEmpty($scope.recommend_teacher))
									return;

								$scope.teacherWait = true;
								crm_queryTeacherListService.query({teacher_name : encodeURIComponent($scope.recommend_teacher),row_num : 10},
												function(Res) {
													$scope.teacherResult = [];
													if (Res.code == 200)
														if (Res.data)
															for (var i = 0; i < Res.data.length; i++)
																$scope.teacherResult.push(Res.data[i]);
																$scope.teacherWait = false;
												});
							};
							$scope.getDropTeacherInstance = function() {
								$scope.loadInstance = {
									'teacher' : $scope.loadTeacherData
								};
							}
							$scope.openDropTeacherMenu = function() {
								$scope.loadTeacherData();
							}
							$scope.closeDropTeacherMenu = function() {
								$scope.teacherResult = [];
							}
							$scope.selectTeacherMenu = function(attendSch) {
								$scope.recommend_teacher = attendSch.teacher_name;
								$scope.recommend_teacher_id = attendSch.id;
								$scope.closeDropTeacherMenu();
							}
							/* 老师_end */

							// 导出
							$scope.exp = function() {
								if($scope.searchParam.p_start_date) {
									
								}
								if (!$scope.searchParam.p_start_date || !$scope.searchParam.p_end_date) {
									$uibMsgbox.error('请先选择资源日期范围！');
									return false;
								}
								var param = "";
								$scope.searchParam.isInput = "1";
								if ($scope.searchParam.resType) {
									$scope.searchParam.p_res_type = $scope.searchParam.resType.id;
								}
								if ($scope.searchParam.channelType) {
									$scope.searchParam.p_channel_type = $scope.searchParam.channelType.id;
								}else {
									$scope.searchParam.p_channel_type = '';
								}
								if ($scope.searchParam.cnselState) {
									$scope.searchParam.p_cnsel_state = $scope.searchParam.cnselState.id;
								}else {
									$scope.searchParam.p_cnsel_state = '';
								}
								
								for ( var p in $scope.searchParam) {
									param += p + "="+ $scope.searchParam[p] + "&";
								}
								if (param && param != '') {
									param += "1=1"
								}
								if (confirm("确定要导出?")) {
									location.href = "/gxhcrm/export/exportResInput?"+ encodeURI(encodeURI(param));
								}
							};

							$scope.addLink = function(idx) {
								$scope.linkIndex++;
								$scope.linksList.splice(idx + 1, 0, {});
							};
							$scope.deleteLink = function(idx) {
								// 删除 通过id去删除
//								toolAjax("/gxhcrm/query/toDelete/"+ $scope.linksList[idx].id, 'post', '',
//										function(data) {
//										}, 'json');
								$scope.linkIndex--;
								$scope.linksList.splice(idx, 1);
							};

							$scope.trace_id = "";

							// 查看更多信息
							$scope.showTraceInfo = function(rec) {
								$scope.traceInfoDetail = rec;
								crm_queryRescRecProcService.query({
									recId : rec.id
								}, function(res) {
									$scope.traceInfo = {};
									$scope.traceInfo = res.data;
									for (var i = 0; i < $scope.resourceRecsInput.length; i++) {
										$scope.resourceRecsInput[i].selected = '';
									}
									if ($scope.trace_id == rec.id) {
										$scope.trace_id = "";
									} else {
										$scope.trace_id = rec.id;
										rec.selected = 'selected';
									}

								});
							};

							$scope.setBranchs = function(res) {
								$scope.branchs = res.branchs;
								if ($scope.branchs && $scope.branchs.length > 0) {
									$scope.newRescRec.branch_obj = $scope.branchs[0];
									$scope.searchParam.p_branchId = $scope.newRescRec.branch_obj.id;
								}
							};

							$scope.setBus = function(res) {
								$scope.bus = [];
								$scope.bus = res.bus;
								if ($scope.bus && $scope.bus.length > 0) {
									$scope.newRescRec.bu_obj = $scope.bus[0];
									crm_BranchsVisibleService.query({}, $scope.setBranchs);
								}
							};

							$scope.setChannelList = function(data, initSelectorValue) {
								$scope.channels = [];
								$scope.channels = data;
								if (initSelectorValue) {
                  $scope.newRescRec.channel_obj = getSelects(
                      $scope.newRescRec.channel_id,
                      $scope.channels);
								}
							};

							$scope.setGradesList = function(data) {
								$scope.grades = [];
								$scope.grades = data;
							}

							$scope.setBargainIntentList = function(data) {
								$scope.BargainIntents = [];
								$scope.BargainIntents = data;
							};
							$scope.setRelationList = function(data) {
								$scope.Relations = [];
								$scope.Relations = data;
							};
							$scope.setResTypeList = function(data) {
								$scope.resTypes = [];
								$scope.resTypes = data;
								
								/* 资源类别_start */
								$scope.resTypesSearch = [];
								$scope.resTypesSearch.push({
									"id" : -1,
									"name" : "全部"
								});
								for (var i = 0; i < data.length; i++) {
									$scope.resTypesSearch.push(data[i]);
								}
								$scope.searchParam.resType = $scope.resTypesSearch[0];
								/* 资源类别_end */
							};
							$scope.setDigResList = function(data) {
								$scope.digRes = [];
								$scope.digRes = data;
							};
							

							//资源进展列表
							$scope.setClueStageList = function(data) {
								$scope.Stages = [];
								$scope.ClueStages = [];
								$scope.Stages = data;
								$scope.ClueStages.push({
									"id" : -1,
									"name" : "全部"
								});
								for (var i = 0; i < data.length; i++) {
									$scope.ClueStages.push(data[i]);
								}
								
								$scope.searchParam.clue_stage_obj = $scope.ClueStages[0];
							};
							//搜索资源进展改变
							$scope.SearchClue = function(cluestage){
								$scope.searchParam.clue_stage_obj = cluestage
							}
							// 查询资源情况
							crm_queryDictDataService.query({
								dictTypeCode : 'BargainIntent'
							}, $scope.setBargainIntentList);
							// 查询关系列表
							crm_queryDictDataService.query({
								dictTypeCode : 'Relation'
							}, $scope.setRelationList);
							// 查询资源情况
							crm_queryDictDataService.query({
								dictTypeCode : 'ClueStage'
							}, $scope.setClueStageList);
							// 资源类型
							crm_queryDictDataService.query({
								dictTypeCode : 'ResType'
							}, $scope.setResTypeList);
							// 挖掘资源
							crm_queryDictDataService.query({
								dictTypeCode : 'DigRes'
							}, $scope.setDigResList);
							// 查询团队
							crm_queryBranchsService.query({
								queryType : "getBusByUser"
							}, $scope.setBus);

							crm_queryDictDataService.query({
								dictTypeCode : 'grade'
							}, $scope.setGradesList);

							$scope.changeResType = function(parentDataId, initSelectorValue) {
                // 查询渠道列表
                crm_queryDictDataService.query({
                  dictTypeCode : 'Channel',
									parentDataId : parentDataId
                }, function(data) {
                	$scope.setChannelList(data, initSelectorValue);
                });
							}

							$scope.changeCompany = function() {
								crm_queryBranchsService.query({
									buId : $scope.newRescRec.bu_obj.id,
									queryType : "getBranchsByUser"
								}, $scope.setBranchs);
							};

							$scope.inputMore = function() {
								if ($scope.form_input_more) {
									$scope.form_input_more = false;
								} else {
									$scope.form_input_more = true;
								}
							}

							/**
							 * 将所有 s 的属性复制给 r
							 * 
							 * @param r
							 *            {Object}
							 * @param s
							 *            {Object}
							 * @param is_overwrite
							 *            {Boolean} 如指定为 false ，则不覆盖已有的值，其它值 包括
							 *            undefined ，都表示 s 中的同名属性将覆盖 r 中的值
							 */
							$scope.copy = function(r, s, is_overwrite) { // TODO:
								if (!s || !r)
									return r;

								for ( var p in s) {
									if (is_overwrite !== false || !(p in r)
											|| p != 'id') {
										r[p] = s[p];
									}
								}
								return r;
							}
							/*
							 * 
							 * 关于select使用的说明：<br/> <p>1、如果select绑定了一个对象数组，那么ng-model对应到这个数组的一个item;</p>
							 * <p>2、如果select绑定了一个对象数组，那么ng-model初始化的时候，必须是这个数组里边的一个item;</p>
							 * <p>3、一个<option>元素，被硬编码塞到select元素中作为空元素，作为未选中状态;</p>
							 * 
							 */
							function getSelects(id, datas) {
								var row;
								$.each(datas, function(i, model) {
									if (id == model.id) {
										row = model;
									}
								});
								return row;
							}

							function Format(fmt, date) { // author: meizz
								var o = {
									"M+" : date.getMonth() + 1, // 月份
									"d+" : date.getDate(), // 日
									"h+" : date.getHours(), // 小时
									"m+" : date.getMinutes(), // 分
									"s+" : date.getSeconds(), // 秒
									"q+" : Math
											.floor((date.getMonth() + 3) / 3), // 季度
									"S" : date.getMilliseconds()
								// 毫秒
								};
								if (/(y+)/.test(fmt))
									fmt = fmt.replace(RegExp.$1, (date
											.getFullYear() + "")
											.substr(4 - RegExp.$1.length));
								for ( var k in o)
									if (new RegExp("(" + k + ")").test(fmt))
										fmt = fmt
												.replace(
														RegExp.$1,
														(RegExp.$1.length == 1) ? (o[k])
																: (("00" + o[k])
																		.substr(("" + o[k]).length)));
								return fmt;
							}
						} ]);

"use strict";
angular
		.module('ework-ui')
		.controller(
				'crmRescRecProcController',
				[
						'$rootScope',
						'$scope',
						'$state',
						'crm_queryDictDataService',
						'crm_querySingleRescRecService',
						'crm_queryRescRecProcService',
						'crm_queryRescinfoService',
						'crm_VisitPlanService',
						'crm_addOrderService',
						'crm_loadDataRescRecService',
						'$stateParams',
						'crm_RescRecProcService',
						'crm_LoginUserService',
						'erp_studentsService',
						'$uibMsgbox','crm_isSchoolAdminService',
						function($rootScope, $scope,$state, crm_queryDictDataService,
								crm_querySingleRescRecService,
								crm_queryRescRecProcService, crm_queryRescinfoService,
								crm_VisitPlanService, crm_addOrderService,
								crm_loadDataRescRecService, $stateParams,
								crm_RescRecProcService, crm_LoginUserService,erp_studentsService,$uibMsgbox,crm_isSchoolAdminService) {

              /*--------------星级插件_strat-----------*/
							$scope.initnumber = function (number) {
								$(".my-rating").starRating({
									starSize: 40,
									initialRating: number,//初始化的星星数量
									useFullStars: true,
									disableAfterRate: false,
									callback: function (
										currentRating, $el) {
										$('#selectnumber').val(currentRating
											.toString());
									}
								});
							}
									/*--------------星级插件_end-------------*/	

							$scope.changeVisitWay = function() {
								if ($scope.currentRec.visit_way.code == 'no_longer_follow') {
									$scope.newProc.next_visit_time = getCurrentDate();
								} else {
                                    $scope.newProc.next_visit_time = '';
								}
							}
							
							$scope.isUpdate = false;
							$scope.userInfo = crm_LoginUserService.get({}, function (response) {
								if (response.flag) {
									$(response.data).each(
										function (i, model) {
											if (model.post_code == 'adviser_admin'
												|| model.post_code == 'counselor_admin'
												|| model.post_code == 'LearningManagementDivision_admin') {
												$scope.isUpdate = true;
											}
										});
								}
							}, function (e) {
								//$scope.logout();
							});

							// 搜索/导出参数
							$scope.searchParam = {};
							// 更多信息窗口
							$scope.popW_more = {};
							// 跟踪窗口
							$scope.popW_trace = {};

							$scope.linksList = [ {
								name : ''
							} ];
							$scope.sexoptions = [{  
						        id: 1,  
						        sex:'男'  
						    },{  
						        id: 0,  
						        sex:'女'  
						    }]; 
							$scope.orderedoptions = [{  
						        id: 1,  
						        name:'是'  
						    },{  
						        id: 0,  
						        name:'否'  
						    }]; 
							$scope.newProc = {};
							$scope.isShow = false;

							// 资源列表
							$scope.rescRecProc = {};
							
							$scope.p_date_types = [
								{id: 1,  text:"资源日期"  },
							    {id: 2,  text:"下次跟进日期"  },
							    {id: 3,  text:"最近一次跟进日期"  }
							];
							
							$scope.sexs = [
								{id: "1",  text:"男"  },
							    {id: "0",  text:"女"  },
							];
							
							
							// 资源更多信息
							$scope.moreInfo = {};

							// 资源跟踪列表
							$scope.traceInfo = {};

							$scope.pageRowList = [ {
								value : 5,
								label : 5
							}, {
								value : 10,
								label : 10
							}, {
								value : 20,
								label : 20
							}, {
								value : 30,
								label : 30
							}, {
								value : 40,
								label : 40
							}, {
								value : 50,
								label : 50
							}, {
								value : 100,
								label : 100
							} ];
							$scope.pageRow = $scope.pageRowList[1];
							$scope.changePageRows = function() {
								$scope.pageSize = $scope.pageRow.value;
								$scope.load();
							}


							$scope.searchParam = {};

							$scope.init = function() {
								$scope.searchParam.p_mp = $scope.mp;
								$scope.searchParam.p_name = $scope.name;
								$scope.searchParam.p_isProc = "1";
								crm_isSchoolAdminService.query({}, function(res) {
									$scope.isSchoolAdmin=res.flag;
								});
//								$scope.load();
								// 分页
								agPageObject($scope, crm_loadDataRescRecService,
										$scope.searchParam);
								$scope.totalPage = 0;

							};

							$scope.pageCallBack = function() {
								var newArray = new Array();
								$scope.isLoading = '';
								if($scope.items != null) {
									$.each($scope.items, function(i, model) {
										model.is_trace = false;
										model.selected = '';
										newArray.push(model);
										newArray.push({
											is_trace : true,
											id : model.id
										});
									});
								}
								$scope.rescRecProc = newArray;
								$scope.pageConf.totalItems = $scope.total || 0;
							};

							$scope.isLoading = '';

//							$scope.$watch('searchParam.p_searchString',
//									function(newNameMp) {
//										$scope.query();
//									});

							if ($stateParams.name) {
								$scope.searchParam.p_searchString = $stateParams.name;
							}

							//分页
							$scope.pageConf = {
								currentPage: 1,
								totalItems: 0,
								itemsPerPage: 10,
								onChange: function () {
								  $scope.query()
								}
							}
							$scope.query = function() {
								var url = "/gxhcrm/query/queryRescRec";
								$scope.searchParam.p_isProc = "1";
								if ($scope.searchParam.clue_stage) {
									$scope.searchParam.p_clue_stage_id = $scope.searchParam.clue_stage.id;
								}
								// console.log($scope.searchParam);
								$scope.pageSize = $scope.pageConf.itemsPerPage;
								$scope.currentPage = $scope.pageConf.currentPage;
								$scope.isLoading = 'loading...';
								$scope.resourceRecsInput = [];
								if ($scope.searchParam.resType) {
									$scope.searchParam.p_res_type = $scope.searchParam.resType.id;
								}
								if ($scope.searchParam.channelType) {
									$scope.searchParam.p_channel_type = $scope.searchParam.channelType.id;
								}else {
									$scope.searchParam.p_channel_type = '';
								}
								if ($scope.searchParam.cnselState) {
									$scope.searchParam.p_cnsel_state = $scope.searchParam.cnselState.id;
								}else {
									$scope.searchParam.p_cnsel_state = '';
								}
								if ($scope.searchParam.clue_stage_obj) {
									$scope.searchParam.p_clue_stage_id = $scope.searchParam.clue_stage_obj.id;
								}else {
									$scope.searchParam.p_clue_stage_id = '';
								}
								$scope.load();
							}

							$scope.init();

							/* 排序_start */
							$scope.next_visit_time_sort = 0;
							$scope.pageSort = function(_seq) {
								if ($scope.next_visit_time_sort == 0) {
									$scope.next_visit_time_sort = 1;
								} else if ($scope.next_visit_time_sort == 1) {
									$scope.next_visit_time_sort = 2;
								} else if ($scope.next_visit_time_sort == 2) {
									$scope.next_visit_time_sort = 1;
								}
								$scope.searchParam.p_next_visit_time_sort = $scope.next_visit_time_sort;
								$scope.query();
							}
							/* 排序_end */

							// 导出
							$scope.exp = function() {
								var param = "";
								$scope.searchParam.isProc = "1";
								for ( var p in $scope.searchParam) {
									if ($scope.searchParam[p]) {
										param += p + "="
												+ $scope.searchParam[p] + "&";
									}
								}
								if (confirm("确定要导出?")) {
									location.href = "/gxhcrm/export/exportResProc?"
											+ encodeURI(encodeURI(param));
								}
							};

							// 清理form
							$scope.clearform = function() {
								$scope.newProc = {};
							};
							// 订单回填清理form
							$scope.orderclearform = function() {
								$scope.order = {};
							};
							// 预约访清理form
							$scope.planclearform = function() {
								$scope.planvisit = {};
							};

							// 预约访
							$scope.form_plan_visit = false;

							// 约访记录
							$scope.form_proc = false;
							// 订单回填
							$scope.form_order = false;

							// 资源处理
							$scope.showProc = function(l_rec) {
								$scope.showTraceForm(l_rec);
								$scope.form_proc = true;
								// 预约访
								$scope.form_plan_visit = false;
								// 订单回填
								$scope.form_order = false;
								
								$scope.closeMoreinfo();
								$scope.currentRec = {};
								$scope.currentRec = l_rec;
								$scope.currentRec.bargain_intent = getSelects(
										$scope.currentRec.bargain_intent_id,
										$scope.BargainIntents);
								$scope.currentRec.clue_stage = getSelects(
										$scope.currentRec.clue_stage_id,
										$scope.ClueStages);
								$scope.newProc.visit_time = new Date();
							};

							// 订单回填
							$scope.showOrder = function(l_rec) {
								$scope.showTraceForm(l_rec);
								$scope.form_order = true;
								// 预约访
								$scope.form_plan_visit = false;
								// 约访记录
								$scope.form_proc = false;

								$scope.closeMoreinfo();
								$scope.currentRec = {};
								$scope.currentRec = l_rec;
                                $scope.changeResType(l_rec.res_type);
							};

                           $scope.studentList = [];

							//报班
							$scope.addOrder = function(l_rec){
								//查询学员信息
								//-1>获取学员联系方式
								var linkPhone = l_rec.resc.mp?"'"+l_rec.resc.mp + "'":'';
								$.each(l_rec.resc.rescLinks,function(i,n) {
									if(n.mp) {
                                        linkPhone = linkPhone + ",'" +  n.mp+ "'";
									}
								});

                            $scope.currentRec = l_rec;
  
								//-2>查询学员是否存在
							erp_studentsService.queryStudentByNameAndPhone({
									phones: linkPhone
								}, function (resp) {
									if (!resp.error) {
										if (resp.data && resp.data.length > 0) {
											$scope.studentList = resp.data;
											$('#studentSelectModal').modal('show');
										} else {
											//-不存在：跳转到学员新增
											$state.go('newStudent', {
												resource_rec_id: l_rec.id,
												"path": "/students/newStudent",
												"href": "templates/erp/student/newStudent.html"
											});
										}
									} else {
										$uibMsgbox.error(resp.message);
									}
								});
							};

							$scope.curStudent = {};
							$scope.setCurStudent = function(student) {
								$.each($scope.studentList, function(idx, stu) {
									if (stu.id != student.id) {
										stu.checked = false;
									}
									$scope.curStudent = student;
								});
							}

							$scope.addOrderForStudent = function() {
								if (!$scope.curStudent || !$scope.curStudent.id) {
									$uibMsgbox.error("请选择一个学员进行报班！");
									return;
								}
								$('#studentSelectModal').modal('hide');
								$state.go('ordersMgrOrders', {
									studentId: $scope.curStudent.id,
									resource_rec_id: $scope.currentRec.id,
									"path": "/orders/ordersMgr/ordersMgrOrders",
									"href": "templates/erp/orders/orders.html"
								});
							}

							$scope.addNewStudent = function () {
								$('#studentSelectModal').modal('hide');
								$state.go('newStudent', {
									resource_rec_id: $scope.currentRec.id,
									"path": "/students/newStudent",
									"href": "templates/erp/student/newStudent.html"
								});
							}

							// 约访
							$scope.showPlanVisit = function(l_rec) {
								$scope.showTraceForm(l_rec);
								$scope.form_plan_visit = true;
								// 约访记录
								$scope.form_proc = false;
								// 订单回填
								$scope.form_order = false;

								$scope.currentRec = {};
								$scope.currentRec = l_rec;
							};
							//搜索资源进展改变
							$scope.SearchClue = function(cluestage){								
								$scope.searchParam.clue_stage_obj = cluestage
							}

							//资源进展改变
							$scope.changeClue = function(cluestage){
								$scope.currentRec.clue_stage = cluestage
							}

							$scope.checkform = function() {
								if (!$scope.currentRec.clue_stage) {
									$uibMsgbox.error('资源进展必须选择！');
									return false;
								}
								if (($scope.currentRec.clue_stage.name == '已上门') && !$scope.newProc.first_visit_time && !$scope.currentRec.first_visit_time) {
									$uibMsgbox.error('首次上门时间必须选择！');
									return false;
								}
								if (!$scope.currentRec.visit_way) {
									$uibMsgbox.error('跟进方式必须选择！');
									return false;
								}
								if (!$scope.newProc.visit_time) {
									$uibMsgbox.error('跟进时间必须填写！');
									return false;
								}
								if (!$scope.newProc.next_visit_time) {
									$uibMsgbox.error('下次跟进时间必须填写！');
									return false;
								}
								if (!($('#talk_content').val())) {
									$uibMsgbox.error('沟通内容必须填写！');
									return false;
								}
								return true;
							}

							// 保存并返回成功或失败
							$scope.save = function() {
								console.log($scope.currentRec.clue_stage.name)
								if (!$scope.checkform()) {
									return false;
								}
								if ($scope.currentRec.clue_stage.name == '无意向') {
									$scope.newProc.visit_time = '';
								}
								
								$scope.newProc.cnsel_state = $scope.currentRec.cnsel_state;
								$scope.newProc.resc_rec_id = $scope.currentRec.id;
								if ($scope.currentRec.visit_way) {
									$scope.newProc.visit_way_name = $scope.currentRec.visit_way.name;
									$scope.newProc.visit_way_id = $scope.currentRec.visit_way.id;
								}
								if ($scope.currentRec.clue_stage) {
									$scope.newProc.clue_stage_name = $scope.currentRec.clue_stage.name;
									$scope.newProc.clue_stage_id = $scope.currentRec.clue_stage.id;
								}
								if ($scope.currentRec.bargain_intent) {
									$scope.newProc.bargain_intent_id = $scope.currentRec.bargain_intent.id;
								}

								if ($scope.currentRec.resc.name) {
									$scope.newProc.studentName = $scope.currentRec.resc.name;
								}

								// 保存数据导数据库
								crm_RescRecProcService.add($scope.newProc,
										$scope.saveFormCallBack);
							};
							$scope.order = {};

							// 订单回填校验
							$scope.ordercheckform = function() {
								if (isEmpty($scope.order.orderNo)) {
									$uibMsgbox.error('报班单号必须填写！');
									return false;
								}
								if (isEmpty($scope.order.feeAmount)) {
									$uibMsgbox.error('订单金额必须填写！');
									return false;
								}
								if (isEmpty($scope.order.courseCount)) {
									$uibMsgbox.error('报班课时必须填写！');
									return false;
								}
								if (isEmpty($scope.order.channel_id)) {
									$uibMsgbox.error('来源渠道必须填写！');
									return false;
								}
								if (isEmpty($scope.order.orderTime)) {
									$uibMsgbox.error('报班时间必须填写！');
									return false;
								}
								

								return true;
							}

							// 订单回填保存并返回成功或失败
							$scope.ordersave = function() {
								if (!$scope.ordercheckform()) {
									return false;
								}
								$scope.ordersave_status=true;
								$scope.order.rescRecId = $scope.currentRec.id;
//								$scope.order.orderTime = $('#orderTime').val();
								$scope.order.student_name=$scope.currentRec.resc.name;
								crm_addOrderService.add($scope.order,
										$scope.orderSaveFormCallBack);
							};

							// 显示删除预约访
							$scope.showPlanVisitRbt = function(trace) {
								trace.showPlanVisit = true;
							}
							// 隐藏删除预防
							$scope.hidePlanVisitRbt = function(trace) {
								trace.showPlanVisit = false;
							}

							// 删除指定预约访问
							$scope.removePlanVisit = function(trace) {
								// 如果是预约访记录，就可以删除
								if (trace.optType == 3) {
									if (confirm('确认删除此约访记录？')) {
										crm_VisitPlanService.remove({
											planId : trace.busiId
										}, $scope.removePlanVisitFormCallBack);
									}
								}
							}

							$scope.removePlanVisitFormCallBack = function(data) {
								if (data.status) {
									$uibMsgbox.success('删除成功！');
								} else {
									$uibMsgbox.error('删除失败，请联系管理员！原因：' + data.errMsg);
								}

								crm_queryRescRecProcService.query({
									recId: $scope.trace_id
								}, function (res) {
									$scope.traceInfo = {};
									$scope.traceInfo = res.data;
									for (var i = 0; i < $scope.rescRecProc.length; i++) {
										$scope.rescRecProc[i].selected = '';
									}
								});
							}

							// 编辑预约访
							$scope.editPlanVisit = function(trace) {
								crm_VisitPlanService.querySingle({
									planId : trace.busiId
								}, $scope.planVisitQuerySingleFormCallBack);
							}

							// 查找到此预预防
							$scope.planVisitQuerySingleFormCallBack = function(
									rs) {
								if (rs.status) {
									$scope.showPlanVisit();

									$scope.planvisit = rs.data;
									// 打开约访记录
									$scope.form_plan_visit = true;
									// 关闭资源处理
									$scope.form_proc = false;
									// 关闭订单回填
									$scope.form_order = false;
								} else {
									$uibMsgbox.error('打开预约访编辑错误！请联系管理员！错误原因：' + rs.errMsg);
								}
							}

							// 预约访校验
							$scope.planvisitcheckform = function() {
								if (isEmpty($scope.planvisit.planVisitTime)) {
									$uibMsgbox.error('预约访时间必须填写！');
									return false;
								}
								return true;
							}
							$scope.planvisit = {};

							// 预约访保存并返回成功或失败
							$scope.plansave = function() {
								if (!$scope.planvisitcheckform()) {
									return false;
								}
								if (!$scope.planvisit.id) {
									$scope.planvisit.rescRecId = $scope.currentRec.id;
								}
								crm_VisitPlanService.add($scope.planvisit,
										$scope.planVisitSaveFormCallBack);
							};

							$scope.saveFormCallBack = function(data) {
								$scope.load();
								if (!data.result) {
									// 保存失败提示错误信息
									$uibMsgbox.error('保存失败:' + data.errMsg);
								} else {
									$uibMsgbox.success('保存成功！');
									// 保存成功后清除form并管理form区域
									$scope.form_proc = false;
									$scope.closeform();
									//刷新页面
									//location.reload();
								}
							},
							// 订单回填回调
							$scope.orderSaveFormCallBack = function(data) {
								$scope.ordersave_status=false;
								if (data.result == null || data.result == '0') {
									// 保存失败提示错误信息
									$uibMsgbox.error('保存失败: ' + data.errMsg);
								} else {
									$uibMsgbox.success('保存成功！');
									// 保存成功后清除form并管理form区域
									$scope.form_order = false;
									$scope.ordercloseform();
								}
								$scope.init();
							},

							// 预约访回填回调
							$scope.planVisitSaveFormCallBack = function(data) {
								if (!data.result) {
									// 保存失败提示错误信息
									$uibMsgbox.error('保存失败:' + data.errMsg);
								} else {
									$uibMsgbox.success('保存成功！');
									// 保存成功后清除form并管理form区域
									$scope.plancloseform();
								}
							},

							// 处理沟通关闭
							$scope.closeform = function() {
								$scope.clearform();
								$scope.closeMoreinfo();
								$scope.form_proc = false;
								$scope.currentRec = {};
								$scope.closeTraceForm();
							};

							// 订单回填关闭
							$scope.ordercloseform = function() {
								$scope.form_order = false;
								$scope.orderclearform();
								$scope.closeMoreinfo();
								$scope.currentRec = {};
								$scope.closeTraceForm();
							};

							// 预约访关闭
							$scope.plancloseform = function() {
								$scope.form_plan_visit = false;
								$scope.planclearform();
								$scope.closeMoreinfo();
								$scope.currentRec = {};
								$scope.closeTraceForm();
							};

							$scope.closeMoreinfo = function() {
								$('#recMoreInfo').hide("slow");
							}

							$scope.remove = function(rec) {
								if (!confirm("您确定要删除资源：" + rec.serial_no + "?")) {
									return;
								}
								crm_RescRecProcService.remove({
									recId : rec.id
								}, function(data) {
									if (data.status) {
										$uibMsgbox.success(rec.serial_no + '删除成功!');
										$scope.init();
									} else {
										$uibMsgbox.error('请联系管理员！删除失败！原因：' + rs.errMsg);
									}

								}, function(rs) {
									$uibMsgbox.error('请联系管理员！错误原因：' + rs.data);
								});

							}

							// 查看更多信息
							$scope.showMoreInfo = function(rec_Id, target) {
								crm_querySingleRescRecService.query({
									recId : rec_Id
								}, $scope.showMoreInfoCallBack);
							};
							// 查看更多信息回调函数
							$scope.showMoreInfoCallBack = function(res) {
								$scope.moreInfo = {};
								$scope.moreInfo = res.data;
								// 设定窗口的位置
								$("#recMoreInfo").slideToggle("nomal", "swing");
							}

							$scope.trace_id = "";

							// 查看更多信息
							/* 下钻信息_start */
							$scope.showTraceInfo = function(rec) {
								$scope.traceInfoDetail = rec;
								if (rec.is_trace)
									return;
								crm_queryRescRecProcService.query({
									recId: rec.id
								}, function (res) {
									$scope.traceInfo = {};
									$scope.traceInfo = res.data;
									for (var i = 0; i < $scope.rescRecProc.length; i++) {
										$scope.rescRecProc[i].selected = '';
									}
									if ($scope.trace_id == rec.id) {
										$scope.trace_id = "";
										$scope.closeAllForm();
									} else {
										$scope.trace_id = rec.id;
										rec.selected = 'selected';
									}
								});
							};
							//报班保存按钮
							$scope.ordersave_status=false;
							$scope.showTraceForm = function(rec) {
								for (var i = 0; i < $scope.rescRecProc.length; i++) {
									$scope.rescRecProc[i].selected = '';
								}
//								if ($scope.trace_id == rec.id) {
//									$scope.closeAllForm();
//								} else {
									$scope.is_form = true;
									$scope.trace_id = rec.id;
									rec.selected = 'selected';
//								}
							}
							$scope.closeAllForm = function() {
								$scope.closeform();
								$scope.ordercloseform();
								$scope.plancloseform();
							}
							$scope.closeTraceForm = function() {
								for (var i = 0; i < $scope.rescRecProc.length; i++) {
									$scope.rescRecProc[i].selected = '';
								}
								$scope.is_form = false;
								$scope.trace_id = "";
							}
							/* 下钻信息_end */

							// 保存 检查表单字段
							$scope.checkforms = function() {
								if (!$scope.newRescRec.branch_id) {
									$uibMsgbox.error('业务学校必须填写！');
									return false;
								}
								if (!$scope.newRescRec.res_type_obj) {
									$uibMsgbox.error('资源类型必须选择！');
									return false;
								}
							
								var visitTime = $("#visit_time").val();
								if (isEmpty(visitTime)) {
									$uibMsgbox.error('资源日期必须选择！');
									return false;
								}
								if (isEmpty($scope.resource.call)) {
									$uibMsgbox.error('称呼必须填写！');
									return false;
								}
								if (isEmpty($scope.resource.mp)) {
									$uibMsgbox.error('联系电话必须填写！');
									return false;
								}
								if (isEmpty($scope.resource.attend_sch_name)) {
									$uibMsgbox.error('就读学校必须填写！');
									return false;
								}
								if (!$scope.newRescRec.grade_obj) {
									$uibMsgbox.error('年级必须选择！');
									return false;
								}
								if (!$scope.newRescRec.clue_stage_obj) {
									$uibMsgbox.error('资源进展必须选择！');
									return false;
								}
								if (isEmpty($scope.newRescRec.channel_obj)) {
									$uibMsgbox.error('来源渠道必须选择！');
									return false;
								}
								var flag = true;

								if (!isEmpty($scope.linksList)
										&& $scope.linksList.length == 1
										&& $scope.linksList[0].name == ''
										&& isEmpty($scope.linksList[0].rela_id)
										&& isEmpty($scope.linksList[0].sex)
										&& isEmpty($scope.linksList[0].mp)) {
									$scope.linksList = null;
									$('#linksList').remove();
								}

								$($scope.linksList).each(function() {
									if (isEmpty(this.rela_obj)) {
										$uibMsgbox.error('联系人关系必须填写!');
										flag = false;
										return false;
									}

									if (isEmpty(this.link_name)) {
										$uibMsgbox.error('联系人姓名必须填写！');
										flag = false;
										return false;
									}

									if (isEmpty(this.mp)) {
										$uibMsgbox.error('联系人联系电话必须填写!');
										flag = false;
										return false;
									}
								});

								if (!flag) {
									return false;
								}

								return true;
							};
							// 联系人数组下标
							$scope.linkIndex = 0;

							$scope.addLink = function(idx) {
								$scope.linkIndex++;
								$scope.linksList.splice(idx + 1, 0, {});
							};
							$scope.deleteLink = function(idx){
								//删除 通过id去删除
//								toolAjax("/gxhcrm/query/toDelete/"+$scope.linksList[idx].id, 'post','',function(data){
//								},'json');
								$scope.linkIndex--;
								$scope.linksList.splice(idx, 1);
							};
							
							// 声明对象
							$scope.newRescRec = {
								ordered : '0'
							};
							// 年级
							$scope.setGradesList = function(data) {
								$scope.grades = [];
								$scope.grades = data;
							}
							// 资源类型
							$scope.setResTypeList = function(data) {
								$scope.resTypes = [];
								$scope.resTypes = data;

								/* 资源类别_start */
								$scope.resTypesSearch = [];
								$scope.resTypesSearch.push({
									"id" : -1,
									"name" : "全部"
								});
								for (var i = 0; i < data.length; i++) {
									$scope.resTypesSearch.push(data[i]);
								}
								$scope.searchParam.resType = $scope.resTypesSearch[0];
							};
							// 第三栏 关系（父子 母子..）

							$scope.setRelationList = function(data) {
								$scope.Relations = [];
								$scope.Relations = data;
							};
							/*-------------修改_strat-------------------*/
							// 点击修改按钮	
							$scope.companylist={};
							$scope.updateResourceRec = function(rec) {
								if($scope.form_input){
									$uibMsgbox.error('请先关闭修改框！');
									return;
								}
								
								if (!$scope.form_input) {
									$scope.form_input = true;
								}
								
								if(rec.resource_quality==null){
									rec.resource_quality=1;
								}
								$scope.initnumber(rec.resource_quality);
								$('#selectnumber').val(rec.resource_quality);		
								$scope.form_input_more = true;
								$scope.ischeck = false;
								$scope.clearForm();
								// 第三栏 基础信息
								crm_queryRescinfoService.query({
									recId : rec.id
								}, function(data) {
									$scope.linksList = data.linkData;
									$scope.companylist=data.compang;
									$.each($scope.linksList, function(i, link) {
										// 成交意向
										link.rela_obj = getSelects(
												link.rela_id,
												$scope.Relations);
										// 成交意向
										link.sex_obj = getSelects(
												link.sex,
												$scope.sexoptions);
									});
//									$scope.linksList = $scope.copy(rec.resc.rescLinks);
								});
								
								// 已经有的可以直接复制
								$scope.newRescRec = rec;
								console.log($scope.newRescRec);
								
								$scope.newRescRec.Resource_quality=$scope.newRescRec.resource_quality;
								// 年级
								$scope.newRescRec.grade_obj = getSelects(
										$scope.newRescRec.grade_id,
										$scope.grades);
								// 资源类别
								$scope.newRescRec.res_type_obj = getSelects(
										$scope.newRescRec.res_type,
										$scope.resTypes);
								// 资源进展
								$scope.newRescRec.clue_stage_obj = getSelects(
										$scope.newRescRec.clue_stage_id,
										$scope.ClueStages);
								
								console.log($scope.newRescRec.resc.sex);
							
								// 资源进展
								$scope.newRescRec.resc.sex_obj = getSelects(
										$scope.newRescRec.resc.sex,
										$scope.sexs);
								
								// 来源渠道
								if (!$scope.channels) {
									$scope.changeResType(rec.res_type, true);
								} else {
									$scope.newRescRec.channel_obj = getSelects(
										$scope.newRescRec.channel_id,
										$scope.channels);
								}

								// 成交意向
								$scope.newRescRec.bargain_intent_obj = getSelects(
										$scope.newRescRec.bargain_intent_id,
										$scope.BargainIntents);
								
								// 是否报名
								$scope.newRescRec.ordered_obj = getSelects(
										$scope.newRescRec.ordered,
										$scope.orderedoptions);
								
								// 称呼
								$scope.resource.call = $scope.newRescRec.resc.call;
								// 就读学校
								$scope.resource.attend_sch_name = $scope.newRescRec.resc.attend_sch_name;
								// 学生姓名
								$scope.resource.name = $scope.newRescRec.resc.name;
								// 联系电话
								$scope.resource.mp = $scope.newRescRec.resc.mp;
								// 班级
								$scope.resource.classinfo = $scope.newRescRec.resc.classinfo;
								$scope.copy($scope.resource, rec.resc, true);
								if ($scope.resource.rela_id) {
									$scope.resource.rela_id = "" + $scope.newRescRec.resc.rela_id;
								}

								if (!$scope.newRescRec.ordered) {
									$scope.newRescRec.ordered = 0;
								}
							}
							$scope.form_input = false;
							// 清理from
							$scope.clearForm = function() {
								$scope.linksList = [ {
									name : ''
								} ];
								$scope.newRescRec = {
									ordered : '0'
								};
								$scope.resource = {
									sex : '1'
								};
								$scope.ischeck = false;
							};
							// 下拉更多
							$scope.inputMore = function() {
								if ($scope.form_input_more) {
									$scope.form_input_more = false;
								} else {
									$scope.form_input_more = true;
								}
							}

							// 保存并返回成功或失败
							$scope.saves = function() {
								if (!$scope.checkforms()) {
									return false;
								}
								console.info($scope.newRescRec);
								// 保存数据导数据库
								toolAjax("/gxhcrm/rescRecInput/toAdd", 'post',
										$('#rescRecForms').serialize(),
										$scope.saveFormCallBack, 'json');
								$scope.form_input = false;
								$scope.form_input_more = false;
							};
							// 关闭
							$scope.closeForm = function() {
								$scope.clearForm();
								$scope.form_input = false;
								$scope.form_input_more = false;
								$scope.currentRec = {};
								$scope.closeTraceForm();
//								location.reload();
							};

							$scope.newRescRec.grade_id = null;
							// 重置
						/*	$scope.clearFormFun = function() {
								var serialNo = "";
								if ($scope.newRescRec.id) {
									getSequenceNumService.query({},
											$scope.setSerialNo);
								}
								serialNo = $scope.newRescRec.serial_no;

								$scope.resource = {
									sex : '1'
								};
								$scope.newRescRec = {
									ordered : '0',
									serial_no : serialNo
								};
								$scope.linksList = [ {
									name : ''
								} ];
								$scope.ischeck = false;
							};*/

							// 保存
							// 保存并返回成功或失败
					/*		$scope.save = function() {
								if (!$scope.checkform()) {
									return false;
								}
								// 保存数据导数据库
								toolAjax(contextPath
										+ "/gxhcrm/rescRecInput/toAdd", 'post',
										$('#rescRecForm').serialize(),
										$scope.saveFormCallBack, 'json');
								
							};*/

							/*--------------修改_end---------------------------*/

							$scope.closeWindow = function(obj) {
								$(obj).hide("slow");
							};

							$scope.setBranchs = function(data) {
								$scope.branchs = data;
								$scope.branchs.unshift({
									'branchId' : -1,
									'branchName' : '全部'
								});
								$scope.newRescRec.branch_id = $scope.branchs[0].branchId;
							};

							$scope.setBus = function(data) {
								$scope.bus = [];
								$scope.bus = data;

								$scope.newRescRec.bu_id = null;
								$scope.newRescRec.bu_id = $scope.bus[0].buId;
								queryBranchs($scope.newRescRec.bu_id,
										$scope.setBranchs);
							};

							$scope.setClueStageList = function(data) {
								$scope.ClueStages = [];
								$scope.ClueStagesSeach = [];
								$scope.ClueStagesSeach.push({
									"id" : -1,
									"name" : "全部"
								});
								for (var i = 0; i < data.length -1; i++) {
									$scope.ClueStagesSeach.push(data[i]);
									$scope.ClueStages.push(data[i]);
								}
								$scope.searchParam.clue_stage_obj = $scope.ClueStagesSeach[0];
							};
							$scope.setBargainIntentList = function(data) {
								$scope.BargainIntents = [];
								$scope.BargainIntents = data;
							};

							$scope.setVisitwaysList = function(data) {
								$scope.Visitways = [];
								$scope.Visitways = data;
							};
							$scope.setChannelList = function (data, initSelectorValue) {
								$scope.channels = [];
								$scope.channels = data;
								if (initSelectorValue) {
									$scope.newRescRec.channel_obj = getSelects(
										$scope.newRescRec.channel_id,
										$scope.channels);
								}
							};

							// 查询资源情况
							crm_queryDictDataService.query({
								dictTypeCode : 'ClueStage'
							}, $scope.setClueStageList);
							// 成交意向
							crm_queryDictDataService.query({
								dictTypeCode : 'BargainIntent'
							}, $scope.setBargainIntentList);
							// 回访方式
							crm_queryDictDataService.query({
								dictTypeCode : 'Visitway'
							}, $scope.setVisitwaysList);
							/*------------------*/
							// 年级
							crm_queryDictDataService.query({
								dictTypeCode : 'grade'
							}, $scope.setGradesList);
							// 资源类型
							crm_queryDictDataService.query({
								dictTypeCode : 'ResType'
							}, $scope.setResTypeList);
							// 查询关系列表
							crm_queryDictDataService.query({
								dictTypeCode : 'Relation'
							}, $scope.setRelationList);
							
							$scope.changeResType = function (parentDataId, initSelectorValue) {
								// 查询渠道列表
								crm_queryDictDataService.query({
									dictTypeCode: 'Channel',
									parentDataId: parentDataId
								}, function (data) {
									$scope.setChannelList(data, initSelectorValue);
								});
							}
							/*-----------------*/

							$scope.changeCompany = function() {
								queryBranchs($scope.newRescRec.bu_id,
										$scope.setBranchs);
							};
							/**
							 * 将所有 s 的属性复制给 r
							 * 
							 * @param r
							 *            {Object}
							 * @param s
							 *            {Object}
							 * @param is_overwrite
							 *            {Boolean} 如指定为 false ，则不覆盖已有的值，其它值 包括
							 *            undefined ，都表示 s 中的同名属性将覆盖 r 中的值
							 */
							$scope.copy = function(r, s, is_overwrite) { // TODO:
								if (!s || !r)
									return r;

								for ( var p in s) {
									if (is_overwrite !== false || !(p in r)
											|| p != 'id') {
										r[p] = s[p];
									}
								}
								return r;
							}
							/*
							 * 
							 * 关于select使用的说明：<br/> <p>1、如果select绑定了一个对象数组，那么ng-model对应到这个数组的一个item;</p>
							 * <p>2、如果select绑定了一个对象数组，那么ng-model初始化的时候，必须是这个数组里边的一个item;</p>
							 * <p>3、一个<option>元素，被硬编码塞到select元素中作为空元素，作为未选中状态;</p>
							 * 
							 */
							function getSelects(id, datas) {
								var row;
								$.each(datas, function(i, model) {
									if (id == model.id) {
										row = model;
									}
								});
								return row;
							}

							function Format(fmt, date) { // author: meizz
								var o = {
									"M+": date.getMonth() + 1, // 月份
									"d+": date.getDate(), // 日
									"h+": date.getHours(), // 小时
									"m+": date.getMinutes(), // 分
									"s+": date.getSeconds(), // 秒
									"q+": Math
										.floor((date.getMonth() + 3) / 3), // 季度
									"S": date.getMilliseconds()
									// 毫秒
								};
								if (/(y+)/.test(fmt))
									fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "")
										.substr(4 - RegExp.$1.length));
								for (var k in o)
									if (new RegExp("(" + k + ")").test(fmt))
										fmt = fmt.replace(RegExp.$1,(RegExp.$1.length == 1) ? (o[k])
												: (("00" + o[k]).substr(("" + o[k]).length)));
								return fmt;
							}
						} ]);

"use strict";

angular.module('ework-ui').controller('crmRescRecTransferController', [
	'$rootScope',
	'$scope',
	'$log',
	'$uibMsgbox',
	'crm_tranfCnselorFromService',
	'crm_tranfCnselorToService',
	'crm_tranfRescQueryService',
	'crm_tranfSingleToService',
	'crm_tranfBatchService',
	crmRescRecTransferController
	]);

function crmRescRecTransferController(
		$rootScope, $scope, $log, $uibMsgbox,
		crm_tranfCnselorFromService,
		crm_tranfCnselorToService,
		crm_tranfRescQueryService,
		crm_tranfSingleToService,
		crm_tranfBatchService) {
	
	 $scope.resArray = [];
	  $scope.counselorFrom = [];
	  $scope.counselorTo = [];
	  $scope.students = [];
	  $scope.chosenCounselorToId = null;
	  $scope.chosenCounselorToName = '';
	  $scope.searchCounselorFrom = '';
	  $scope.searchCounselorTo = '';
	  $scope.cnselor_from = {};

	$scope.fromPageConf = {
		    currentPage: 1, //当前页
		    totalItems: 0,
		    itemsPerPage: 10,
		    showInfos: false,
		    onChange: function() {
		      $scope.getCounselorFrom()
		    }
		  };

		  $scope.toPageConf = {
		    currentPage: 1,
		    totalItems: 0,
		    itemsPerPage: 10,
		    showInfos: false,
		    onChange: function() {
		      $scope.getCounselorTo()
		    }
		  };
		  
		  // 初始化老师
		  function initResArray() {
		    $scope.resArray.splice(0, $scope.resArray.length)
		    for (var i = 0; i < $scope.counselorFrom.length; i++) {
		      $scope.counselorFrom[i].isStu = false;
		      $scope.counselorFrom[i].showStu = false;
		      $scope.resArray.push($scope.counselorFrom[i]);
		    }
		  };
		  
		  
		// 获取可转移出去的学管师
		  $scope.getCounselorFrom = function(counselor) {
		    var modalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
		    crm_tranfCnselorFromService.query({
		    	page: $scope.fromPageConf.currentPage,
		    	rows: $scope.fromPageConf.itemsPerPage,
		        p_counselor_name: $scope.searchCounselorFrom
		    }, function(resp) {
		      modalInstance.close();
		      if (!resp.error) {
			        $scope.fromPageConf.totalItems = resp.total;
			        $scope.counselorFrom = resp.rows;
			        initResArray();
			      } else {
			        $uibMsgbox.error(resp.message)
			      }
		    })
		  };
		  
		// 批量转移学员
		  $scope.transferAll = function (counselor) {
		    if (!$scope.chosenCounselorToId) {
		      $uibMsgbox.warn('请选择要转入的咨询师！')
		      return
		    }
		    $uibMsgbox.confirm('确定要将<span class="text-danger">【' + counselor.EMPLOYEE_NAME 
		      + '】</span>咨询师的所有资源转移给<span class="text-danger">【'+ $scope.chosenCounselorToName +'】</span>咨询师?', function (res) {
		      if (res == 'yes') {
		        var _modalInstance = $uibMsgbox.waiting('转移中，请稍候...')
		        crm_tranfBatchService.post({
		        	af_cnselor_id: $scope.chosenCounselorToId,
		        	bf_cnselor_id: $scope.cnselor_from.ID
		        }, function (resp) {
		          _modalInstance.close();
		          if (resp.result) {
		            $uibMsgbox.success('转移成功！')
		            $scope.getCounselorFrom();
		          } else {
		            $uibMsgbox.error(resp.msg)
		          }
		        }) 
		      }
		    })
		  }

		  // 转移单个学员
		  $scope.transfer = function (rec) {
		    if (!$scope.chosenCounselorToId) {
		      $uibMsgbox.warn('请选择要转入的咨询师！')
		      return
		    }
		    $uibMsgbox.confirm('确定要将线索<span class="text-danger">【称呼：' + rec.resc.call 
		      + '，学生姓名：' + rec.resc.name + '】</span>转移给<span class="text-danger">【'+ $scope.chosenCounselorToName +'】</span>咨询师?', function (res) {
		      if (res == 'yes') {
		        var _modalInstance = $uibMsgbox.waiting('转移中，请稍候...')
		        crm_tranfSingleToService.post({
		          af_cnselor_id:  $scope.chosenCounselorToId,
		          resc_rec_id:rec.id,
		          bf_cnselor_id:  $scope.cnselor_from.ID
		        }, function (resp) {
		          _modalInstance.close();
		          if (resp.result) {
		            $uibMsgbox.success('转移成功！');
		            $scope.getCounselorFrom();
		          } else {
		            $uibMsgbox.error(resp.msg)
		          }
		        }) 
		      }
		    })
		  }

		  
		  // 显示或隐藏老师底下的学生
		  $scope.toggleRes = function(item) {
		    if (item.isStu) {
		      return
		    }
		    item.showStu = !item.showStu
		    if (item.showStu) {
		      if (item.students) {
		        $scope.showStudents(item)
		      } else {
		        $scope.getStudents(item)
		      }
		    } else {
		      $scope.hideStudents()
		    }
		  };
		  
		  // 隐藏学生
		  $scope.hideStudents = function() {
		    for (var i = $scope.resArray.length - 1; i >= 0; i--) {
		      if ($scope.resArray[i].showStu) {
		        $scope.resArray[i].showStu = false
		      }
		      if($scope.resArray[i].isStu) {
		        console.log($scope.resArray[i])
		        $scope.resArray.splice(i, 1)
		      }
		    }
		  };

		  // 获取学生
		  $scope.getStudents = function (counselor, page) {
		    var modalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
		    $scope.cnselor_from = counselor;
		    page = page || 1
		    crm_tranfRescQueryService.query({
		      p_cnselor_id: counselor.ID
		    }, function(resp){
		      modalInstance.close();
		      if (!counselor.students || !counselor.students.concat) {
		        counselor.students = []
		      } 
		      if (!resp.error) {
		        for (var i = 0; i < resp.datas.length; i++) {
		          resp.datas[i].isStu = true
		          counselor.students.push(resp.datas[i])
		        }
		        $scope.showStudents(counselor)
		      } else {
		        $uibMsgbox.error(resp.message)
		      }
		    })
		  };

		  // 显示学生
		  $scope.showStudents =function(counselor) {
		    $scope.resArray.splice(0, $scope.resArray.length);
		    for (var i = 0; i < $scope.counselorFrom.length; i++) {
		      $scope.resArray.push($scope.counselorFrom[i]);
		      if ($scope.counselorFrom[i].ID == counselor.ID) {
		        $scope.resArray = $scope.resArray.concat(counselor.students);
		      } else {
		        $scope.counselorFrom[i].showStu = false;
		      }
		    }
		  };
		  
		  // 获取可转移进来的学管师
		  $scope.getCounselorTo = function(counselor) {
			  crm_tranfCnselorToService.query({
		      page: $scope.toPageConf.currentPage,
		      rows: $scope.toPageConf.itemsPerPage,
		      p_counselor_name: $scope.searchCounselorTo
		    }, function(resp) {
		      $scope.toPageConf.totalItems = resp.total;
		      $scope.counselorTo = resp.rows
		    })
		  };
		  
		  // 选择要转入的老师
		  $scope.chooseCounselorTo = function(counselor) {
		    $scope.chosenCounselorToId = counselor.id
		    $scope.chosenCounselorToName = counselor.employee_name
		  }
		  
		  $scope.getCounselorFrom();
		  $scope.getCounselorTo();
}


"use strict";
Date.prototype.format = function(format) {
	var o = {
		"M+" : this.getMonth() + 1, // month
		"d+" : this.getDate(), // day
		"h+" : this.getHours(), // hour
		"m+" : this.getMinutes(), // minute
		"s+" : this.getSeconds(), // second
		"q+" : Math.floor((this.getMonth() + 3) / 3), // quarter
		"S" : this.getMilliseconds()
	// millisecond
	}
	if (/(y+)/.test(format))
		format = format.replace(RegExp.$1, (this.getFullYear() + "")
				.substr(4 - RegExp.$1.length));
	for ( var k in o)
		if (new RegExp("(" + k + ")").test(format))
			format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k]
					: ("00" + o[k]).substr(("" + o[k]).length));
	return format;
}

angular.module('ework-ui').controller(
		'crmGradeResourceCtrl',
		[ '$scope', 'crm_GradeResourceService', 'crm_BranchsVisibleService','crm_isSchoolAdminService',
            crmGradeResourceCtrl ]);

function crmGradeResourceCtrl($scope, crm_GradeResourceService, crm_BranchsVisibleService,crm_isSchoolAdminService) {
	
	$scope.params = {};

	$scope.grade_headers = [];

	var flag = true;

	$scope.paramdate = new Date().format("yyyy年MM月");

	$scope.query = function() {
		// console.log($scope.gradeBranch);
		$scope.params.branch_id = $scope.gradeBranch.id;
		$scope.params.p_start_date = $('#cdt_start_date').val();
		crm_GradeResourceService.query(
						$scope.params,
						function(data) {
							if (data.dataList) {
								var grades = [];
								var model_header;
								var tmp;
								// 一列数据，统计数据是个数组
								var model = {
									counts : []
								};
								$(data.dataList).each(function(i, m) {
													if (!tmp) {// 初始化数据
														tmp = m.GRTYPE;
														model.grtype = m.GRTYPE;
													}
													if (tmp != m.GRTYPE) {// 当类型发生改变
														grades.push(model);// 保存上一列数据
														model = {
															counts : []
														};// 创建新的一列
														tmp = m.grtype;
														model.grtype = m.GRTYPE;
														flag = false;
													}
													model.counts.push({
														count : m.count
													});// 保存指定列的统计数据
													if (flag) {
														model_header = {};// 设置表头
														model_header.grade_name = m.GRADE_NAME;
														$scope.grade_headers
																.push(model_header);
													}
													if (i + 1 == data.dataList.length) {
														grades.push(model);
													}
												});

								$scope.items = grades;

								/* 合计_start */
								$scope.grade_headers.push({
									grade_name : '合计'
								});
								// 合计行
								for (var i = 0; i < $scope.items.length; i++) {
									var row = $scope.items[i];
									var total = 0;
									for (var j = 0; j < row.counts.length - 1; j++) {
										total += row.counts[j].count;
									}
									row.counts.push({
										count : total
									});
								}
								// 合计列
								model = {
									counts : [],
									grtype : '合计'
								};
								var allTotal = 0;
								for (var i = 0; i < $scope.grade_headers.length - 1; i++) {
									var total = 0;
									for (var j = 0; j < $scope.items.length; j++) {
										for (var h = 0; h < $scope.items[j].counts.length; h++) {
											if (i == h) {
												total += $scope.items[j].counts[h].count;
												break;
											}
										}
									}
									allTotal = allTotal + total;
									model.counts.push({
										count : total
									});
								}
								model.counts.push({
									count : allTotal
								});
								$scope.items.push(model);
								/* 合计_end */
							}
						}, function(err) {
							alert('请联系管理员！错误：' + err.data);
						});
	}
	

	$scope.refresh = function() {
		$scope.grade_headers = [];
		$scope.items = [];
		flag = true;
		$scope.query();
	}

	$scope.excel = function() {
		var param = "";
		for ( var p in $scope.searchParam) {
			if (!$scope.searchParam[p]) {
				param += p + "=" + $scope.searchParam[p] + "&";
			}
		}
		if (confirm("确定要导出?")) {
			location.href = contextPath
					+ "/gxhcrm/home/gradeResource/exp/toExp?"
					+ encodeURI(encodeURI(param));
		}
	};
	
	$scope.gradeBranchsVisible = [];
	var all_school = {
			'id':"",
			'name':"全部",
			'org_name':"全部"
	};
	/**
	 * 查询当前的可见校区
	 */
	crm_BranchsVisibleService.query({}, function(resp) {
		if (!resp.error) {
//			$scope.gradeBranchsVisible = resp.branchs;
			if ($scope.gradeBranchsVisible) {
				$.each(resp.branchs, function(i, mm) {
					mm.name = mm.org_name;
					$scope.gradeBranchsVisible.push(mm);
				});
				$scope.gradeBranch = $scope.gradeBranchsVisible[0];
				$scope.query();
			}
		}
	});
	
//	crm_isSchoolAdminService.query({}, function(res) {
//		$scope.isSchoolAdmin=res.flag;
//		if($scope.isSchoolAdmin) {
//			$scope.gradeBranchsVisible.unshift(all_school);
//		}
//		if($scope.gradeBranchsVisible.length >1) {
//			$scope.gradeBranch = $scope.gradeBranchsVisible[0].id;
//		}
//		$('#cdt_branch_id').val($scope.gradeBranch);
//		console.log($('#cdt_branch_id').val());
//		$scope.query();
//	});

	$scope.changeBranch2 = function() {
		$scope.refresh();
	}

	$scope.monthSelect = function() {
		$scope.refresh();
	}
}
/**
 * Created by Liyong.zhu on 2015/12/16.
 */
"use strict";
angular.module('ework-ui').controller('crmImportantReminderCtrl',
		[ '$scope', 'crm_ReminderService', crmImportantReminderCtrl ]);

function crmImportantReminderCtrl($scope, crm_ReminderService) {

	$scope.reminderResult = [];
	$scope.queryReminders = function() {
		if ('loading' == $scope.dataLoad)
			return;

		$scope.dataLoad = 'loading';
		$scope.reminderResult = [];
		crm_ReminderService.query({}, function(Res) {
			$scope.dataLoad = '';
			if (Res.error == false) {
				if (Res.resultList) {
					for (var i = 0; i < Res.resultList.length; i++) {
						$scope.reminderResult.push(Res.resultList[i]);
					}
				}
			}
		});
	}

	$scope.fresh = function() {
		$scope.queryReminders();
	}
	$scope.queryReminders();
}
/**
 * Alerts Controller
 */
"use strict";
angular
    .module('ework-ui')
    .controller('crm_IndexCtrl', ['$scope', crm_IndexCtrl]);

function crm_IndexCtrl($scope) {
    $scope.alerts = [{
        type: 'success',
        msg: '通知：个性化CRM系统最新上线，欢迎大家试用!'
    }, {
        type: 'danger',
        msg: '提醒：这周五需要完成寒假班的报班，注意及时进行考勤！'
    }];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}
"use strict";
angular.module('ework-ui').controller(
		'crmMasterCtrl',
		[ '$rootScope', '$scope', '$interval', 'crm_ReminderService',
				'crm_ApprovedService', 'crm_MyOrderedsService',
				'crm_NoRegisterCtrlService', 'crm_LoginUserService',
				crmMasterCtrl ]);

function crmMasterCtrl($rootScope, $scope, $interval, crm_ReminderService,
		crm_ApprovedService, crm_MyOrderedsService, crm_NoRegisterCtrlService,
		crm_LoginUserService) {

	$scope.showInputTip = function() {
		$('#resc_input').popover('show');
		setTimeout(function() {
			$("#resc_input").popover('hide');
		}, 3000);
	};

	// $scope.contextPath = contextPath;

	$scope.Master = {
		meminder : 0,
		approved : 0,
		myOrdereds : 0,
		customerBirthday : 0
	};

	$scope.extendPortlet = '';
	$scope.screen = '';
	/**
	 * 放大
	 * 
	 * @param portlet
	 */
	$scope.extend = function(portlet) {
		$scope.extendPortlet = portlet;
	}

	/**
	 * 全屏显示
	 */
	$scope.fullscreen = function() {

		var docElm = document.documentElement;

		// W3C
		if (docElm.requestFullscreen) {
			docElm.requestFullscreen();
		}

		// FireFox
		else if (docElm.mozRequestFullScreen) {
			docElm.mozRequestFullScreen();
		}

		// Chrome等
		else if (docElm.webkitRequestFullScreen) {
			docElm.webkitRequestFullScreen();
		}

		// IE11
		else if (elem.msRequestFullscreen) {
			elem.msRequestFullscreen();
		}
		$scope.screen = 'fullscreen';
	}

	/**
	 * 退出全屏
	 */
	$scope.resetFullscreen = function() {
		$scope.screen = '';
		if (document.exitFullscreen) {
			document.exitFullscreen();
		}

		else if (document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		}

		else if (document.webkitCancelFullScreen) {
			document.webkitCancelFullScreen();
		}

		else if (document.msExitFullscreen) {
			document.msExitFullscreen();
		}
	}
	function queryReminderService() {
		crm_ReminderService.count({}, function(resp) {
			if (!resp.error) {
				$scope.Master.meminder = parseInt(resp.totalCount);
			}
		})
	}

	function queryApprovedService() {
		crm_ApprovedService.count({}, function(resp) {
			if (!resp.error) {
				$scope.Master.approved = parseInt(resp.totalCount);
			}
		})
	}

	function queryMyOrderedsService() {
		crm_MyOrderedsService.count({}, function(resp) {
			if (!resp.error) {
				$scope.Master.myOrdereds = parseInt(resp.totalCount);
			}
		})
	}
	queryReminderService();
	queryApprovedService();
	queryMyOrderedsService();

	$interval(function() {
		queryReminderService();
		queryApprovedService();
		queryMyOrderedsService();
	}, 1000*600*2);

	$interval(function() {
		if ($rootScope.rootMasterRefush == 1) {
			$rootScope.rootMasterRefush = -1;
			queryReminderService();
			queryApprovedService();
			queryMyOrderedsService();
		}
	}, 1000*600*2);
}
/**
 * Created by Liyong.zhu on 2015/12/16.
 */
"use strict";
angular.module('ework-ui').controller(
		'crmMyOrderedsCtrl',
		[ '$scope', 'crm_MyOrderedsService', 'crm_queryDictDataService','crm_branchService','$uibMsgbox',
				crmMyOrderedsCtrl ]);

function crmMyOrderedsCtrl($scope, crm_MyOrderedsService,
		crm_queryDictDataService,crm_branchService,$uibMsgbox) {
	$scope.params = {};
	
	$scope.searchParam = {};
	$scope.pageCallBack = function() {

	};

	$scope.Master = {};

	crm_MyOrderedsService.count({}, function(resp) {
		if (!resp.error) {
			$scope.Master.myOrdereds = parseInt(resp.totalCount);
		}
	});
	
//	agPageObject($scope, crm_MyOrderedsService, $scope.params);
//	$scope.load();
	
	$scope.initDictflag = false;
	
	$scope.initBranchflag = false;

	/* 搜索_start */
	$scope.query = function() {
		$scope.searchParam.p_restypeId = $scope.searchParam.resType.id;
		$scope.searchParam.p_branchId = $scope.searchParam.branch.id;
		$scope.searchParam.page = $scope.currentPage;
		agPageObject($scope, crm_MyOrderedsService, $scope.searchParam);
		$scope.load();
	};
	$scope.onDateRangeChange = function () {
		$scope.query()
	}
	
	// 资源类型
	crm_queryDictDataService.query({
		dictTypeCode : 'ResType'
	}, function(data) {
		$scope.resTypes = [];
		$scope.resTypes = data;

		/* 资源类别_start */
		$scope.resTypesSearch = [];
		$scope.resTypesSearch.push({
			"id" : -1,
			"name" : "全部"
		});
		for (var i = 0; i < data.length; i++) {
			$scope.resTypesSearch.push(data[i]);
		}
		$scope.searchParam.resType = $scope.resTypesSearch[0];
		$scope.initflag = true;
		if($scope.initflag && $scope.initBranchflag) {
			$scope.query();
			
		}
		/* 资源类别_end */
	});
	
	 crm_branchService.query({
         buId:null
     },function(resp){
         if(!resp.error){
             $scope.branchs = [];
             $scope.branchs.push({
            	"id" : -1,
     			"text" : "全部"});
             for(var i=0;i<resp.data.length;i++) {
            	 $scope.branchs.push(resp.data[i]);
             }
             $scope.searchParam.branch = $scope.branchs[0];
             $scope.initBranchflag = true;
             if($scope.initflag && $scope.initBranchflag) {
     			$scope.query();
     		}
         }
     });

	/* 修改删除_start */
	$scope.order = {};
	$scope.formMsg = '';
	$scope.formWait = false;
	$scope.selectItem = {};
	$scope.update = function(item) {
		for (var i = 0; i < $scope.items.length; i++) {
			$scope.items[i].select = '';
		}
		item.select = 'selected';
		$scope.selectItem = item;

		$scope.order = {};
		$scope.formMsg = '';
		$scope.formWait = false;

		$scope.order.rescRecId = $scope.selectItem.rescRecId;
		$scope.order.id = $scope.selectItem.order_id;
		$scope.order.orderNo = $scope.selectItem.order_no;
		$scope.order.feeAmount = $scope.selectItem.fee_amount;
		$scope.order.courseCount = $scope.selectItem.course_count;
		$scope.order.channel = {
			id : $scope.selectItem.channel_id,
			name : $scope.selectItem.channel_name
		};
		$scope.order.orderTime = $scope.selectItem.order_time;
		$scope.order.remark = $scope.selectItem.remark;
		$('#myOrderedUpdate').modal('toggle');
	}

	$scope.submitOrder = function() {
		if ($scope.formWait)
			return;
		if (isEmpty($scope.order.id)) {
			$scope.formMsg = '订单ID不能为空！';
			return;
		}
		if (isEmpty($scope.order.orderNo)) {
			$scope.formMsg = '报班单号不能为空！';
			return;
		}
		if (isEmpty($scope.order.feeAmount)) {
			$scope.formMsg = '订单金额不能为空！！';
			return;
		}
		if (isEmpty($scope.order.courseCount)) {
			$scope.formMsg = '课时数不能为空！';
			return;
		}
		$scope.order.channel_id = $scope.order.channel.id;
		if (isEmpty($scope.order.channel_id)) {
			$scope.formMsg = '来源渠道不能为空！';
			return;
		}
		$scope.order.orderTime = $('#orderTime').val();
		if (isEmpty($scope.order.orderTime)) {
			$scope.formMsg = '报班日期不能为空！';
			return;
		}
		if (isNotEmpty($scope.order.remark)
				&& $scope.order.remark.length > 4000) {
			$scope.formMsg = '备注字数不可以超过4000字！';
			return;
		}
		$scope.formWait = true;
		$scope.formMsg = '正在处理，请等待。。。。';
		crm_MyOrderedsService.update($scope.order, function(ResMap) {
			$scope.formWait = false;
			$scope.formMsg = '';
			if (ResMap.code == 200) {
				$scope.selectItem.order_no = $scope.order.orderNo;
				$scope.selectItem.fee_amount = $scope.order.feeAmount;
				$scope.selectItem.course_count = $scope.order.courseCount;
				$scope.selectItem.channel_id = $scope.order.channel.id;
				$scope.selectItem.channel_name = $scope.order.channel.name;
				$scope.selectItem.order_time = $scope.order.orderTime;
				$scope.selectItem.remark = $scope.order.remark;
				openDialog.myOrderedUpdateToggle();
			} else
				$scope.formMsg = '操作失败:' + ResMap.msg;
		});
	}

	$scope.remove = function(item) {
		if ($scope.formWait)
			return;
		if (!(window.confirm("是否删除[" + item.serial_no + "]?")))
			return;
		$scope.formWait = true;
		crm_MyOrderedsService.remove({
			order_ids : (item.order_id + ''),
			rescRecId : item.rescRecId
		}, function(ResMap) {
			$scope.formWait = false;
			if (ResMap.code == 200) {
				$scope.load();
			} else {
				$uibMsgbox.error('删除失败：' + ResMap.msg);
			}
		});
	}
	/* 修改删除_end */
	
	/* 二次成单_strat */
	$scope.add = function(item) {
		crm_MyOrderedsService.addagain({
			order_ids : (item.order_id + ''),
			rescRecId : item.rescRecId
		}, function(ResMap) {
			if (ResMap.code == 200) {
				$uibMsgbox.success('二次成单成功，请到资源处理查看！');
				$scope.load();
			} else {
				$uibMsgbox.error('二次成单失败：' + ResMap.msg);
			}
		});
	}
	/* 二次成单_end */

	/* 导出_start */
	$scope.exportMyOrder = function() {
		if (confirm("确定要导出?")) {
			var param = "";
			$scope.searchParam.p_restypeId = $scope.searchParam.resType.id;
			$scope.searchParam.p_branchId = $scope.searchParam.branch.id;
			for ( var p in $scope.searchParam) {
				param += p + "="+ $scope.searchParam[p] + "&";
			}
			if (param && param != '') {
				param += "1=1"
			}
			location.href = "/gxhcrm/export/exportMyOrder?"+ encodeURI(encodeURI(param));
		}
	}
	/* 导出_end */

}
"use strict";
angular.module('ework-ui').controller(
		'crmPerformanceCtrl',
		[ '$scope', '$interval', 'crm_BranchsVisibleService',
				'crm_BranchPerformanceService', crmPerformanceCtrl ]);

function crmPerformanceCtrl($scope, $interval, crm_BranchsVisibleService,
		crm_BranchPerformanceService) {
	$scope.isPerformanceLoading = 'loading...';
	$scope.currnentBranch = {};
	$scope.branchsVisible = [];
	$scope.dataSets = [];
	

	var branchPerformance = {
		"fillColor" : "rgba(135, 206, 250,1)",
		"strokeColor" : "rgba(135, 206, 250,1)",
		"pointColor" : "rgba(255,179,63,1)",
		"pointStrokeColor" : "#fff",
		"pointHighlightFill" : "#fff",
		"pointHighlightStroke" : "rgba(255,179,63,1)",
		"data" : []
	};

	var personalPerformance = {
		"fillColor" : "rgba(255, 127, 80,1)",
		"strokeColor" : "rgba(255, 127, 80,1)",
		"pointColor" : "rgba(84,171,26,1)",
		"pointStrokeColor" : "#fff",
		"pointHighlightFill" : "#fff",
		"pointHighlightStroke" : "rgba(84,171,26,1)",
		"data" : []
	};

	var lineChartData = {};

	function createLine() {
		var ctx = document.getElementById("Performance").getContext("2d");
		var barChart = new Chart(ctx).Bar(lineChartData, {
			responsive : true,
			 //是否绘制柱状条的边框
            barShowStroke: false,
            //柱状条边框的宽度
            barStrokeWidth: 2,
            //柱状条组之间的间距(过大或过小会出现重叠偏移错位的效果，请控制合理数值)
            barValueSpacing: 150,
            //每组柱状条组中柱状条之间的间距
            barDatasetSpacing: 1
		});
		
		$scope.isPerformanceLoading = '';
		console.log(barChart.generateLegend());
	}

	function createLineChart() {
		$scope.isPerformanceLoading = 'loading...';
		// 延迟加载
		var stop = $interval(function() {
			if (document.getElementById("Performance")) {
				createLine();
				if (angular.isDefined(stop)) {
					$interval.cancel(stop);
					stop = undefined;
				}
				$scope.isPerformanceLoading = '';
			}
		}, 100);
	}

	$scope.fresh = function() {
		createLineChart();
	}
	/**
	 * 查询当前的可见校区
	 */
	function queryBranchsVisibleService() {
		crm_BranchsVisibleService.query({}, function(resp) {
			if (!resp.error) {
				$scope.branchsVisible = resp.branchs;
				if ($scope.branchsVisible) {
					$.each($scope.branchsVisible, function(i, mm) {
						mm.name = mm.org_name;
					})
				}
				if ($scope.branchsVisible && $scope.branchsVisible.length > 1) {
					$scope.currnentBranch = $scope.branchsVisible[0];
				} else if ($scope.branchsVisible
						&& $scope.branchsVisible.length == 1) {
					$scope.currnentBranch = $scope.branchsVisible[0];
				}
				queryBranchPerformance($scope.currnentBranch);
			}
		})
	}
	queryBranchsVisibleService();

	$scope.changeBranch = function() {
		queryBranchPerformance();
	}
	/**
	 * 查询给定校区的业绩信息
	 * 
	 * @param branch
	 */
	function queryBranchPerformance(branch) {
		$scope.isPerformanceLoading = 'loading...';
		var val = $(".selectBranchsPerformance").val();
		crm_BranchPerformanceService.query({
			branchId : null == branch ? $scope.branchsVisible[val].id
					: branch.id
		}, function(resp) {
			$scope.isPerformanceLoading = '';
			branchPerformance.data = [];
			var dayLabels = [];
			$scope.productLineAmount = '';
			$scope.productLineName = "业务线总业绩:";
			$scope.schoolAmount = '';
			$scope.schoolName = resp.branchName;
			personalPerformance.data = [];
			if (!resp.error && resp.data) {
				for (var i = 0; i < resp.data.length; i++) {
					branchPerformance.data.push(resp.data[i].schoolAmount);
					personalPerformance.data.push(resp.data[i].personalAmount);
					if(resp.data[i].personalAmount != 0) {
//						resp.dayLabels[i] = resp.data[i].cnselorName+" "+resp.dayLabels[i];
						dayLabels.push(resp.data[i].cnselorName);
					}
					
					$scope.productLineAmount= resp.data[i].productLineAmount;
					$scope.schoolAmount= resp.data[i].schoolAmount;
				}
				branchPerformance.label = resp.branchName;
				personalPerformance.label = "个人业绩";
				lineChartData.datasets = [ branchPerformance,
					personalPerformance ];
				lineChartData.labels = dayLabels;
				$scope.dataSets = lineChartData.datasets;
				$scope.labels = dayLabels;
				createLineChart();
			}

		})
	}

};


'use strict';
var webContext = 'data';
/**
 * 重要提醒查询服务
 */
angular.module('ework-ui').factory('crm_ReminderService',
		[ '$resource', crm_ReminderService ]);
/**
 * 待审批查询服务
 */
angular.module('ework-ui').factory('crm_ApprovedService',
		[ '$resource', crm_ApprovedService ]);
/**
 * 潜在客户查询服务
 */
angular.module('ework-ui').factory('crm_MyOrderedsService',
		[ '$resource', crm_MyOrderedsService ]);

// 年级报表统计
angular.module('ework-ui').factory('crm_GradeResourceService',
		[ '$resource', crm_GradeResourceService ]);
/**
 * 潜在客户查询服务
 */
angular.module('ework-ui').factory('crm_BranchsVisibleService',
		[ '$resource', crm_BranchsVisibleService ]);

/**
 * 是否是校区总监
 */
angular.module('ework-ui').factory('crm_isSchoolAdminService',
		[ '$resource', crm_isSchoolAdminService ]);


/**
 * 是否是有权限录入
 */
angular.module('ework-ui').factory('crm_hasInputRightService',
		[ '$resource', crm_hasInputRightService ]);


/**
 * 线索录入时根据手机号判断是否重复
 */
angular.module('ework-ui').factory('crm_checkRepeatService',
		[ '$resource', crm_checkRepeatService ]);


/**
 * 当前团队下的校区列表
 */
angular.module('ework-ui').factory('crm_queryInputRightBranch',
		[ '$resource', crm_queryInputRightBranch ]);


/**
 * 查询当前选中的默认校区
 */
angular.module('ework-ui').factory('crm_querySelectedBranch',
		[ '$resource', crm_querySelectedBranch ]);

/**
 * 潜在客户查询服务
 */
angular.module('ework-ui').factory('crm_BranchPerformanceService',
		[ '$resource', crm_BranchPerformanceService ]);
/**
 * 日历事件查询服务
 */
angular.module('ework-ui').factory('crm_BranchFullCalendarService',
		[ '$resource', crm_BranchFullCalendarService ]);
/**
 * 未报名客户查询服务
 */
angular.module('ework-ui').factory('crm_NoRegisterCtrlService',
		[ '$resource', crm_NoRegisterCtrlService ]);
/**
 * 通知提醒
 */
angular.module('ework-ui').factory('crm_AlertService',
		[ '$resource', crm_AlertService ]);

// 查询当前用户校区
angular.module('ework-ui').factory('crm_BranchsService',
		[ '$resource', crm_BranchsService ]);


//线索转移左边的咨询师列表
angular.module('ework-ui').factory('crm_tranfCnselorFromService',
		[ '$resource', crm_tranfCnselorFromService ]);


//线索转移右边的咨询师列表
angular.module('ework-ui').factory('crm_tranfCnselorToService',
		[ '$resource', crm_tranfCnselorToService ]);


//线索转移，根据咨询师ID查询名下可以转移的线索
angular.module('ework-ui').factory('crm_tranfRescQueryService',
		[ '$resource', crm_tranfRescQueryService ]);

//线索转移，单个转移
angular.module('ework-ui').factory('crm_tranfSingleToService',
		[ '$resource', crm_tranfSingleToService ]);

//线索转移，批量转移
angular.module('ework-ui').factory('crm_tranfBatchService',
		[ '$resource', crm_tranfBatchService ]);


function crm_tranfCnselorFromService($resource) {
	return $resource('/gxhcrm/query/transf/from', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
};

function crm_tranfCnselorToService($resource) {
	return $resource('/gxhcrm/query/transf/to', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
};

function crm_tranfRescQueryService($resource) {
	return $resource('/gxhcrm/query/transf/resc', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
};

function crm_tranfSingleToService($resource) {
	return $resource('/gxhcrm/rescRecTrsf/toTransfer', {}, {
		post : {
			method : 'POST',
			params : {},
			isArray : false
		}
	});
};

function crm_tranfBatchService($resource) {
	return $resource('/gxhcrm/rescRecTrsf/toBatchTrsf', {}, {
		post : {
			method : 'POST',
			params : {},
			isArray : false
		}
	});
};


angular.module('ework-ui').factory('crm_DictDataService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/dict/data/:actionType/:action', {
				actionType : 'actionType',
				action : '@action'
			}, {
				add : {
					method : 'POST',
					params : {
						actionType : 'add',
						action : 'toAdd'
					},
					isArray : false
				},
				page : {
					method : 'GET',
					params : {
						actionType : 'query',
						action : 'dataPage'
					},
					isArray : false
				},
				tree : {
					method : 'GET',
					params : {
						actionType : 'query',
						action : 'orgTree'
					},
					isArray : false
				},
				remove : {
					method : 'DELETE',
					params : {
						actionType : 'delete',
						action : 'toRemove'
					},
					isArray : false
				},
				update : {
					method : 'PUT',
					params : {
						actionType : 'update',
						action : 'toUpdate'
					},
					isArray : false
				},
				// 机构授权
				auth : {
					method : 'POST',
					params : {
						actionType : 'auth',
						action : 'toAuth'
					},
					isArray : false
				}
			});
		} ]);

angular.module('ework-ui').factory('crm_queryDictDataService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/dict/data', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : true
				}
			});
		} ]);


angular.module('ework-ui').factory('crm_queryBranchsService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/branchs', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				}
			});
		} ]);
/**
 * 查询登录用户的数据
 */
angular.module('ework-ui').factory('crm_LoginUserService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/system/query/loginuser', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				}
			});
		} ]);

function crm_BranchsService($resource) {
	return $resource('/gxhcrm/query/branchs', {}, {
		queryAllBranchsByUser : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}
/**
 * 重要提醒查询：查询当前所有的重要提醒数据
 * 
 * @param $resource
 * @returns {*} 返回对象说明： pageSize:分页尺寸，默认20条 currentPage:当前页，默认1 totalPage:当前总页数
 *          totalCount:总的记录数 resultList:当前记录详情
 * @constructor
 */
function crm_ReminderService($resource) {
	return $resource('/gxhcrm/home/reminder/:actionType/:action', {
		actionType : 'actionType',
		action : '@action'
	}, {
		add : {
			method : 'POST',
			params : {
				actionType : 'add',
				action : 'toAdd'
			},
			isArray : false
		},
		page : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'page'
			},
			isArray : false
		},
		query : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'list'
			},
			isArray : false
		},
		count : {
			method : 'GET',
			params : {
				actionType : 'count',
				action : 'totalNum'
			},
			isArray : false
		},
		remove : {
			method : 'DELETE',
			params : {
				actionType : 'delete',
				action : 'toRemove'
			},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {
				actionType : 'update',
				action : 'toUpdate'
			},
			isArray : false
		}
	});
}

/**
 * 待审批查询：查询当前所有的待审批数据
 * 
 * @param $resource
 * @returns {*} 返回对象说明： pageSize:分页尺寸，默认20条 currentPage:当前页，默认1 totalPage:当前总页数
 *          totalCount:总的记录数 resultList:当前记录详情
 * @constructor
 */
function crm_ApprovedService($resource) {
	return $resource('/gxhcrm/home/pendingTask/:actionType/:action', {
		actionType : 'actionType',
		action : '@action'
	}, {
		add : {
			method : 'POST',
			params : {
				actionType : 'add',
				action : 'toAdd'
			},
			isArray : false
		},
		page : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'page'
			},
			isArray : false
		},
		query : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'list'
			},
			isArray : false
		},
		count : {
			method : 'GET',
			params : {
				actionType : 'count',
				action : 'totalNum'
			},
			isArray : false
		},
		remove : {
			method : 'DELETE',
			params : {
				actionType : 'delete',
				action : 'toRemove'
			},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {
				actionType : 'update',
				action : 'toUpdate'
			},
			isArray : false
		},
		distBranch : {
			method : 'PUT',
			params : {
				actionType : 'update',
				action : 'distBranch'
			},
			isArray : false
		}
	});
}
/**
 * 潜在客户查询服务
 * 
 * @param $resource
 * @returns {*} 返回对象说明： pageSize:分页尺寸，默认20条 currentPage:当前页，默认1 totalPage:当前总页数
 *          totalCount:总的记录数 resultList:当前记录详情
 * @constructor
 */
function crm_MyOrderedsService($resource) {
	return $resource('/gxhcrm/home/myOrdered/:actionType/:action', {
		actionType : 'actionType',
		action : '@action'
	}, {
		add : {
			method : 'POST',
			params : {
				actionType : 'add',
				action : 'toAdd'
			},
			isArray : false
		},
		page : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'page'
			},
			isArray : false
		},
		query : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'list'
			},
			isArray : false
		},
		count : {
			method : 'GET',
			params : {
				actionType : 'count',
				action : 'totalNum'
			},
			isArray : false
		},
		remove : {
			method : 'POST',
			params : {
				actionType : 'delete',
				action : 'removeOrder'
			},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {
				actionType : 'update',
				action : 'updateOrder'
			},
			isArray : false
		},
		addagain : {
			method : 'POST',
			params : {
				actionType : 'add',
				action : 'addnew'
			},
			isArray : false
		},
		pages:{method:'POST',params:{actionType:'query',action:'pages'},isArray:false}
	});
}

function crm_GradeResourceService($resource) {
	return $resource('/gxhcrm/home/gradeResource/:actionType/:action', {
		actionType : 'actionType',
		action : '@action'
	}, {
		add : {
			method : 'POST',
			params : {
				actionType : 'add',
				action : 'toAdd'
			},
			isArray : false
		},
		page : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'page'
			},
			isArray : false
		},
		query : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'list'
			},
			isArray : false
		},
		count : {
			method : 'GET',
			params : {
				actionType : 'count',
				action : 'totalNum'
			},
			isArray : false
		},
		remove : {
			method : 'DELETE',
			params : {
				actionType : 'delete',
				action : 'toRemove'
			},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {
				actionType : 'update',
				action : 'toUpdate'
			},
			isArray : false
		}
	});
}

/**
 * 查询可见校区服务
 * 
 * @param $resource
 * @returns {*} resultList:当前可见校区列表
 * @constructor
 */
function crm_BranchsVisibleService($resource) {
	return $resource('/gxhcrm/home/users/branchs', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}


/**
 * 判断是不是校区总监、课程顾问总监、咨询师总监
 * 
 * @param $resource
 * @returns {*} resultList:true/false
 * @constructor
 */
function crm_isSchoolAdminService($resource) {
	return $resource('/gxhcrm/home/users/isSchoolAdmin', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}


/**
 * 是否有权限录入资源
 * 
 * @param $resource
 * @returns {*} resultList:是否有权限录入资源
 * @constructor
 */
function crm_hasInputRightService($resource) {
	return $resource('/gxhcrm/home/users/hasInputRight', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}


/**
 * 根据输入的手机号 判断是否有重复录入的资源
 * 
 * @param $resource
 * @returns {*} resultList:是否有权限录入资源
 * @constructor
 */
function crm_checkRepeatService($resource) {
	return $resource('/gxhcrm/rescRecInput/add/checkRepeat', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

/**
 * 查询当前团队下的校区列表
 * 
 * @param $resource
 * @returns {*} resultList:查询当前团队下的校区列表
 * @constructor
 */
function crm_queryInputRightBranch($resource) {
	return $resource('/gxhcrm/home/users/queryInputRightBranch', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}


/**
 * 查询当前选中的默认校区
 * 
 * @param $resource
 * @returns {*} resultList:查询当前选中的默认校区
 * @constructor
 */
function crm_querySelectedBranch($resource) {
	return $resource('/gxhcrm/home/users/branchs', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

/**
 * 查询可见校区业绩服务
 * 
 * @param $resource
 * @returns {*} resultList:当前可见校区列表
 * @constructor
 */
function crm_BranchPerformanceService($resource) {
	return $resource('/gxhcrm/home/performance/days', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

/**
 * 校区日历查询
 * 
 * @param $resource
 * @returns {*}
 * @constructor
 */
function crm_BranchFullCalendarService($resource) {
	return $resource('/gxhcrm/home/branchFullcalendar/:action', {
		action : '@action'
	}, {
		query : {
			method : 'GET',
			isArray : false
		},
		save : {
			method : 'POST',
			headers : {
				Accept : 'application/json'
			}
		}
	});
}

/**
 * 未报班查询服务
 * 
 * @param $resource
 * @returns {*} 返回对象说明： pageSize:分页尺寸，默认20条 currentPage:当前页，默认1 totalPage:当前总页数
 *          totalCount:总的记录数 resultList:当前记录详情
 * @constructor
 */
function crm_NoRegisterCtrlService($resource) {
	return $resource('/gxhcrm/home/noRegisterCtrl/:actionType/:action', {
		actionType : 'actionType',
		action : '@action'
	}, {
		add : {
			method : 'POST',
			params : {
				actionType : 'add',
				action : 'toAdd'
			},
			isArray : false
		},
		page : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'page'
			},
			isArray : false
		},
		query : {
			method : 'GET',
			params : {
				actionType : 'query',
				action : 'list'
			},
			isArray : false
		},
		count : {
			method : 'GET',
			params : {
				actionType : 'count',
				action : 'totalNum'
			},
			isArray : false
		},
		remove : {
			method : 'DELETE',
			params : {
				actionType : 'delete',
				action : 'toRemove'
			},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {
				actionType : 'update',
				action : 'toUpdate'
			},
			isArray : false
		}
	});
}

/**
 * 通知提醒
 * 
 * @param $resource
 * @returns {*}
 * @constructor
 */
function crm_AlertService($resource) {
	return $resource('/gxhcrm/home/alert/:action', {
		action : '@action'
	}, {
		query : {
			method : 'GET',
			isArray : false
		},
		save : {
			method : 'POST',
			headers : {
				Accept : 'application/json'
			}
		}
	});
}

angular.module('ework-ui').factory("actionInjector", function() {
	var actionInjector = {
		request : function(config) {
			if (config.data) {
				if (config.data.action) {
					delete config.data.action;
				}
				if (config.data.actionType) {
					delete config.data.actionType;
				}

				if (config.data.selected) {
					delete config.data.selected;
				}
				if (config.data.delFlag) {
					delete config.data.delFlag;
				}
			}
			return config;
		}
	};
	return actionInjector;
});
// 增加过滤器
angular.module('ework-ui').config([ '$httpProvider', function($httpProvider) {
	$httpProvider.interceptors.push('actionInjector');
} ]);


// 查询资源数据
angular.module('ework-ui').factory('crm_loadDataRescRecService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryRescRec', {}, {
				page : {
					method : 'GET',
					params : {},
					isArray : false
				}
			});
		} ]);

// 查询报表数据
angular.module('ework-ui').factory('crm_loadReportDataRecService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/report/query/:reportType', {}, {
				page : {
					method : 'GET',
					params : {},
					isArray : false
				}
			});
		} ]);


// 基础类型
angular.module('ework-ui').factory('crm_DictTypeService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/dict/type/:actionType/:action', {
				actionType : 'actionType',
				action : '@action'
			}, {
				add : {
					method : 'POST',
					params : {
						actionType : 'add',
						action : 'toAdd'
					},
					isArray : false
				},
				page : {
					method : 'GET',
					params : {
						actionType : 'query',
						action : 'dataPage'
					},
					isArray : false
				},
				tree : {
					method : 'GET',
					params : {
						actionType : 'query',
						action : 'orgTree'
					},
					isArray : false
				},
				remove : {
					method : 'DELETE',
					params : {
						actionType : 'delete',
						action : 'toRemove'
					},
					isArray : false
				},
				update : {
					method : 'PUT',
					params : {
						actionType : 'update',
						action : 'toUpdate'
					},
					isArray : false
				},
				// 机构授权
				auth : {
					method : 'POST',
					params : {
						actionType : 'auth',
						action : 'toAuth'
					},
					isArray : false
				},
			});
		} ]);
// 基础字典数据服务
angular.module('ework-ui').factory('crm_DictDataService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/dict/data/:actionType/:action', {
				actionType : 'actionType',
				action : '@action'
			}, {
				add : {
					method : 'POST',
					params : {
						actionType : 'add',
						action : 'toAdd'
					},
					isArray : false
				},
				page : {
					method : 'GET',
					params : {
						actionType : 'query',
						action : 'dataPage'
					},
					isArray : false
				},
				tree : {
					method : 'GET',
					params : {
						actionType : 'query',
						action : 'orgTree'
					},
					isArray : false
				},
				remove : {
					method : 'DELETE',
					params : {
						actionType : 'delete',
						action : 'toRemove'
					},
					isArray : false
				},
				update : {
					method : 'PUT',
					params : {
						actionType : 'update',
						action : 'toUpdate'
					},
					isArray : false
				},
				// 机构授权
				auth : {
					method : 'POST',
					params : {
						actionType : 'auth',
						action : 'toAuth'
					},
					isArray : false
				},
			});
		} ]);

angular.module('ework-ui').factory('crm_querySubjectService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/querySubject', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : true
				},
			});
		} ]);
angular.module('ework-ui').factory('crm_queryCurrentUserInfoService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryCurrentUserInfo', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);

angular.module('ework-ui').factory('crm_queryGradesService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryGradeList', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);
angular.module('ework-ui').factory('crm_querySingleRescRecService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/querySingleRescRec', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);
angular.module('ework-ui').factory('crm_queryRescRecProcService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryRescRecProc', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);
angular.module('ework-ui').factory('crm_queryRescinfoService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryRescinfo', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);
angular.module('ework-ui').factory('crm_RescRecProcService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/rescRecProc/:actionType/:action', {
				actionType : '@actionType',
				action : '@action'
			}, {
				add : {
					method : 'POST',
					params : {
						actionType : 'add',
						action : 'toAdd'
					},
					isArray : false
				},
				page : {
					method : 'GET',
					params : {
						actionType : 'query',
						action : 'dataPage'
					},
					isArray : false
				},
				remove : {
					method : 'DELETE',
					params : {
						actionType : 'delete',
						action : 'toRemove'
					},
					isArray : false
				},
				update : {
					method : 'PUT',
					params : {
						actionType : 'update',
						action : 'toUpdate'
					},
					isArray : false
				},
				// 机构授权
				auth : {
					method : 'POST',
					params : {
						actionType : 'auth',
						action : 'toAuth'
					},
					isArray : false
				}
			});
		} ]);
angular.module('ework-ui').factory('crm_queryRescRecListService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryRescRecList', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);
angular.module('ework-ui').factory('crm_queryAschListService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryAschList', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);

angular.module('ework-ui').factory('crm_queryTeacherListService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryTeacherList', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);

angular.module('ework-ui').factory('crm_queryCnselorListService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/queryCnselorList', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);


angular.module('ework-ui').factory('crm_getSequenceNumService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/query/getSequenceNum', {}, {
				query : {
					method : 'GET',
					params : {},
					isArray : false
				},
			});
		} ]);
angular.module('ework-ui').factory('crm_VisitPlanService',
				['$resource',function($resource) {
							return $resource(
									'/gxhcrm/rescRecProc/planVisit/:actionType/:action',
									{
										actionType : '@actionType',
										action : '@action'
									}, {
										add : {
											method : 'POST',
											params : {
												actionType : 'add',
												action : 'toAdd'
											},
											isArray : false
										},
										remove : {
											method : 'DELETE',
											params : {
												actionType : 'delete',
												action : 'toRemove'
											},
											isArray : false
										},
										querySingle : {
											method : 'GET',
											params : {
												actionType : 'query',
												action : 'querySingle'
											},
											isArray : false
										}
									});
						} ]);
angular.module('ework-ui').factory('crm_addOrderService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/rescRecProc/toAddOrder', {}, {
				add : {
					method : 'POST',
					params : {},
					isArray : false
				}
			});
		} ]);

angular.module('ework-ui').factory('crm_GxhCrmDictService',
		[ '$resource', function($resource) {
			return $resource('/gxhcrm/dict/:action', {
				action : '@action'
			}, {
				query : {
					method : 'POST',
					isArray : true
				},
				queryOne : {
					method : 'POST'
				},
				add : {
					method : 'POST'
				},
				update : {
					method : 'POST'
				}
			});
		} ]);

/**
 * Created by Liyong.zhu on 2016/9/14.
 */
'use strict';

/**
 * 学生查询服务
 */
angular.module('ework-ui').factory('erp_studentsService',
		[ '$resource',erp_studentsService ]);


/**
 * 老师主页服务
 */
angular.module('ework-ui').factory('erp_TeacherIndexService',
		[ '$resource', erp_TeacherIndexService ]);

/**
 * 老师查询服务
 */
angular.module('ework-ui').factory('erp_TeacherSearchService',
		[ '$resource', erp_TeacherSearchService ]);
/**
 * 老师列表服务
 */
angular.module('ework-ui').factory('erp_TeacherListService',
		[ '$resource', erp_TeacherListService ]);
/**
 * 考勤教师分组
 */
angular.module('ework-ui').factory('erp_attendanceTeacherGroupService',
		[ '$resource', erp_attendanceTeacherGroupService ]);

/**
 * 学生首页指标查询服务
 */	
angular.module('ework-ui').factory('erp_studentIndexAccountService',
		[ '$resource', erp_studentIndexAccountService ]);

/**
 * 学生首页指标查询服务
 */
angular.module('ework-ui').factory('erp_studentIndexCounselorsService',
		[ '$resource', erp_studentIndexCounselorsService ]);

/**
 * 学生首页-学员积分管理
 */
angular.module('ework-ui').factory('erp_studentIndexIntegralService',
    [ '$resource', erp_studentIndexIntegralService ]);

/**
 * 学生跟踪服务
 */
angular.module('ework-ui').factory('erp_studentTraceInfoService',
		[ '$resource', erp_studentTraceInfoService ]);

/**
 * 学生订单查询服务
 */
angular.module('ework-ui').factory('erp_studentOrdersService',
		[ '$resource', erp_studentOrdersService ]);

/**
 * 学生订单查询服务
 */
angular.module('ework-ui').factory('erp_studentOrdersBJKService',
    [ '$resource', erp_studentOrdersBJKService ]);

/**
 * 学管师我的学员查询服务
 */
angular.module('ework-ui').factory('erp_studentMineService',
	    [ '$resource', erp_studentMineService ]);

/**
 * 学员1对1课程查询
 */
angular.module('ework-ui').factory('erp_studentOrdersYdyService',
    [ '$resource', erp_studentOrdersYdyService ]);

/**
 * 学员晚辅导课程查询服务
 */
angular.module('ework-ui').factory('erp_studentOrdersWFDService',
    [ '$resource', erp_studentOrdersWFDService ]);

/**
 * 学员考勤查询服务
 */
angular.module('ework-ui').factory('erp_studentCourseService',
    [ '$resource', erp_studentCourseService ]);
/**
 * 学生课程表服务
 */
angular.module('ework-ui').factory('erp_studentScheduleService',
	[ '$resource', erp_studentScheduleService ]);
/**
 * 学生订单查询服务
 */
angular.module('ework-ui').factory('erp_studentsCheckService',
		[ '$resource', erp_studentsCheckService ]);

/**
 * 学生就读学校服务
 */
angular.module('ework-ui').factory('erp_studentSchoolService',
		[ '$resource', erp_studentSchoolService ]);

/**
 * 学生所属地区服务
 */
angular.module('ework-ui').factory('erp_studentOrgService',
		[ '$resource', erp_studentOrgService ]);
/**
 * 学员的校区服务
 */
angular.module('ework-ui').factory('erp_studentBuOrgsService',
    [ '$resource', erp_studentBuOrgsService ]);

/**
 * 学生联系方式查询服务
 */
angular.module('ework-ui').factory('erp_studentContactService',
		[ '$resource', erp_studentContactService ]);

/**
 * 学生联系关系服务
 */
angular.module('ework-ui').factory('erp_studentContactRelationService',
		[ '$resource', erp_studentContactRelationService ]);

/**
 * 学生短信服务服务
 */
angular.module('ework-ui').factory('erp_MessageService',
		[ '$resource', erp_MessageService ]);

/**
 * 学生联系人服务
 */
angular.module('ework-ui').factory('erp_studentContactService',
		[ '$resource', erp_studentContactService ]);
/**
 * 学生账户服务
 */
angular.module('ework-ui').factory('erp_studentAccountService',
    [ '$resource', erp_studentAccountService ]);

/**
 * 学员分配服务
 */
angular.module('ework-ui').factory('erp_stuCounselorDistService',
    [ '$resource', erp_stuCounselorDistService])
/**
 * 学管师咨询师服务
 */
angular.module('ework-ui').factory('erp_studentCounselorService',
		[ '$resource', erp_studentCounselorService ]);

/**
 * 员工服务
 */
angular.module('ework-ui').factory('erp_employeeService',
		[ '$resource', erp_employeeService ]);

/**
 * 课程季服务
 */
angular.module('ework-ui').factory('erp_timeSeasonService',
    [ '$resource', erp_timeSeasonService ]);
/**
 * 年级服务
 */
angular.module('ework-ui').factory('erp_gradeService',
    [ '$resource', erp_gradeService ]);

/**
 * 全日制学校服务
 */
angular.module('ework-ui').factory('erp_schoolService',
    [ '$resource', erp_schoolService ]);

/**
 * 科目服务
 */
angular.module('ework-ui').factory('erp_subjectService',
    [ '$resource', erp_subjectService ]);

/**
 * 排课专员服务
 */
angular.module('ework-ui').factory('erp_arrangerService',
    [ '$resource', erp_arrangerService ]);

/**
 * 课程课时服务
 */
angular.module('ework-ui').factory('erp_studentCourseTimesService',
    [ '$resource', erp_studentCourseTimesService ]);

/**
 * 教师服务
 */
angular.module('ework-ui').factory('erp_teacherService',
    [ '$resource', erp_teacherService ]);

/**
 * 学生考勤服务
 */
angular.module('ework-ui').factory('erp_attendanceService',
    [ '$resource', erp_attendanceService ]);

/**
 * 课次考勤服务
 */
angular.module('ework-ui').factory('erp_attendanceCourseTimesService',
    [ '$resource', erp_attendanceCourseTimesService ]);

/**
 * 考勤历史服务
 */
angular.module('ework-ui').factory('erp_attendanceDetailsService',
    [ '$resource', erp_attendanceDetailsService ]);
/**
 * 考勤补课情况查询服务
 */
angular.module('ework-ui').factory('erp_attendanceMakeupService',
    [ '$resource', erp_attendanceMakeupService ]);

/**
 * 课程试听服务
 */
angular.module('ework-ui').factory('erp_courseListeningService',
    [ '$resource', erp_courseListeningService ]);
/**
 * 课程选择服务
 */
angular.module('ework-ui').factory('erp_courseService',
    [ '$resource', erp_courseService ]);
/**
 * 晚辅导套餐 服务
 */
angular.module('ework-ui').factory('erp_wfdComboService',
	[ '$resource', erp_wfdComboService ]);
/**
 * 双师课程选择服务
 */
angular.module('ework-ui').factory('erp_mtcourseService',
    [ '$resource', erp_mtcourseService ]);

/**
 * 班级课导入服务
 */
angular.module('ework-ui').factory('erp_courseInputService',
    [ '$resource', erp_courseInputService ])

angular.module('ework-ui').factory('erp_courseLadderService',
		[ '$resource', erp_courseLadderService])
/**
 * 课程课次服务
 */
angular.module('ework-ui').factory('erp_courseTimesService',
    [ '$resource', erp_courseTimesService ]);

/**
 * 学员打印相关服务
 */
angular.module('ework-ui').factory('erp_studentPrintService',
    [ '$resource', erp_studentPrintService ]);
/**
 * 公司账户服务
 */
angular.module('ework-ui').factory('erp_companyAccountService',
    [ '$resource', erp_companyAccountService ]);
/**
 * 公司设备服务
 */
angular.module('ework-ui').factory('erp_deviceService',
	[ '$resource', erp_deviceService ]);
/**
 * 学生账户查询
 */
angular.module('ework-ui').factory('erp_studentAccountQueryService',
    [ '$resource', erp_studentAccountQueryService ]);
/**
 * 优惠前置分页查询
 */
angular.module('ework-ui').factory('erp_privilegeCriteriaServicePage',
    [ '$resource', erp_privilegeCriteriaServicePage ]);
/**
 * 优惠前置查询
 */
angular.module('ework-ui').factory('erp_privilegeCriteriaService',
    [ '$resource', erp_privilegeCriteriaService ]);
/**
 * 优惠规则查询
 */
angular.module('ework-ui').factory('erp_privilegeRuleService',
    [ '$resource', erp_privilegeRuleService ]);
/**
 * 优惠规则分页查询
 */
angular.module('ework-ui').factory('erp_privilegeRuleServicePage',
    [ '$resource', erp_privilegeRuleServicePage ]);
/**
 * 优惠券分页查询
 */
angular.module('ework-ui').factory('erp_couponInfoServicePage',
    [ '$resource', erp_couponInfoServicePage ]);
/**
 * 优惠券服务
 */
angular.module('ework-ui').factory('erp_couponInfoService',
    [ '$resource', erp_couponInfoService ]);
/**
 * 优惠券发放服务
 */
angular.module('ework-ui').factory('erp_couponRuleRelService',
    [ '$resource', erp_couponRuleRelService ]);
/**
 * 优惠券服务
 */
angular.module('ework-ui').factory('erp_couponInfoServices',
    [ '$resource', erp_couponInfoServices ]);
/**
 * 优惠活动
 */
angular.module('ework-ui').factory('erp_activityInfoService',
    [ '$resource', erp_activityInfoService ]);
angular.module('ework-ui').factory('erp_activityService',
    [ '$resource', erp_activityService ]);
/**
 * 活动图片
 */
angular.module('ework-ui').factory('erp_activityBannerService',
    [ '$resource', erp_activityBannerService]);
/**
 * 生成优惠券
 */
angular.module('ework-ui').factory('erp_activityGenerateCouponDepotService',
    [ '$resource', erp_activityGenerateCouponDepotService ]);
/**
 * 订单管理服务
 */
angular.module('ework-ui').factory('erp_orderManagerService',
    [ '$resource', erp_orderManagerService ]);


/**
 * 财务/订单单据
 */
angular.module('ework-ui').factory('erp_FinanceOrderService',
	[ '$resource', erp_FinanceOrderService ]);

/**
 * 财务/冻结单据
 */
angular.module('ework-ui').factory('erp_frozenService', 
  [ '$resource', erp_frozenService])

/**
 * 财务/在线支付
 */
angular.module('ework-ui').factory('erp_epayWapService',
	[ '$resource', erp_epayWapService ]);

/**
 * 财务/退费单据
 */
angular.module('ework-ui').factory('erp_refundService',
	[ '$resource', erp_refundService ]);

/**
 * 财务/订单锁定
 */
angular.module('ework-ui').factory('erp_orderFrozenMgrService',
	[ '$resource', erp_orderFrozenMgrService ]);

/**
 * 用户订单
 */
angular.module('ework-ui').factory('erp_orderManagerUserOrdersService',
    [ '$resource', erp_orderManagerUserOrdersService ]);

/**
 * 发票管理
 */
angular.module('ework-ui').factory('erp_InvoiceManagerService',
    [ '$resource', erp_InvoiceManagerService ]);

/**
 * 学员成绩管理
 */
angular.module('ework-ui').factory('erp_studentScoreService',
    [ '$resource', erp_studentScoreService]);

/**
 * 学员订单课程查询
 */
angular.module('ework-ui').factory('erp_studentOrderCourseService',
    [ '$resource', erp_studentOrderCourseService ]);
/**
 * 学员课程1对1排课查询
 */
angular.module('ework-ui').factory('erp_studentCourseSchedulingService',
    [ '$resource', erp_studentCourseSchedulingService ]);
/**
 * 学员1对1排课申请
 */
angular.module('ework-ui').factory('erp_stuCourseSchedApplyYdyService', 
    ['$resource', erp_stuCourseSchedApplyYdyService]);
/**
 * 学员1对1讲义打印
 */
angular.module('ework-ui').factory('erp_stuCourseSchedYdyPrintService', 
    ['$resource', erp_stuCourseSchedYdyPrintService]);
/**
 * 学员订单批改查询
 */
angular.module('ework-ui').factory('erp_orderChangeService',
    [ '$resource', erp_orderChangeService ]);

/**
 * 开票公司服务
 */
angular.module('ework-ui').factory('erp_invoiceCompanyService',
    [ '$resource', erp_invoiceCompanyService ]);

/**
 * 教研组服务
 */
angular.module('ework-ui').factory('erp_teacherGroupService',
    [ '$resource', erp_teacherGroupService ]);

/**
 * 教师临时表服务
 */
angular.module('ework-ui').factory('erp_tmpTeacherInfoService',
    [ '$resource', erp_tmpTeacherInfoService ]);

/**
 * 组织机构服务
 */
angular.module('ework-ui').factory('erp_organizationService',
    [ '$resource', erp_organizationService ]);

/**
 * 教室信息服务
 */
angular.module('ework-ui').factory('erp_roomService',
	[ '$resource', erp_roomService ]);

/**
 * 延课信息服务
 */
angular.module('ework-ui').factory('erp_delayCourseService',
    [ '$resource', erp_delayCourseService ]);

/**
 * 系统通知
 */
angular.module('ework-ui').factory('erp_noticeService',
	[ '$resource', erp_noticeService ]);

/**
 * 接口日志管理
 */
angular.module('ework-ui').factory('erp_eaiLogService',
	[ '$resource', erp_eaiLogService ]);

/**
 * 排号业务
 */
angular.module('ework-ui').factory('erp_sortNumService',
	[ '$resource', erp_sortNumService ]);

/**
 * 线上优惠券管理
 */
angular.module('ework-ui').factory('erp_ebCouponService',
	[ '$resource', erp_ebCouponService ]);

/**
 * 数据字典服务
 */
angular.module('ework-ui').factory('erp_dictService',
	[ '$resource', erp_dictService ]);

/**
 * 排课档期查询服务
 */
angular.module('ework-ui').factory('erp_tpScheduleTimeService',
    [ '$resource', erp_tpScheduleTimeService ]);

/**
 * 学管师耗课分析查询服务
 */
angular.module('ework-ui').factory('erp_StudentManagerService',
    [ '$resource', erp_StudentManagerService ]);

/**
 * 发票跟踪服务
 */
angular.module('ework-ui').factory('erp_invoiceTraceService',
    [ '$resource', erp_invoiceTraceService ]);

/**
 * 摄像机服务
 */
angular.module('ework-ui').factory('erp_cameraService',
    [ '$resource', erp_cameraService ]);

function erp_orderChangeService($resource){
    return $resource('/erp/ordermanager/service', {}, {
        changeTransfer : {
            url:'/erp/ordermanager/transfer',
            method : 'POST',
            params : {},
            isArray : false
        },
        changeRefund : {
            url:'/erp/ordermanager/refund',
            method : 'POST',
            params : {},
            isArray : false
        },
        changeFrozen : {
            url:'/erp/ordermanager/frozen',
            method : 'POST',
            params : {},
            isArray : false
        },
        refundLadder : {
            url:'/erp/ordermanager/refundLadder',
            method : 'GET',
            params : {},
            isArray : false
        },
        changeCheck : {
            url:'/erp/ordermanager/changeCheck',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_studentScoreService($resource) {
    return $resource('/erp/studentservice/stuScoreInfo', {}, {
        query: {
            method: 'GET',
            params: {},
            isArray: false
        },
        queryDetail: {
            url: '/erp/studentservice/stuScoreInfo/selectOne',
            method: 'GET',
            param: {},
            isArray: false
        },
        post: {
            method: 'POST',
            params: {},
            isArray: false
        },
        put: {
            method: 'PUT',
            params: {},
            isArray: false
        },
        delete: {
            method: 'DELETE',
            params: {},
            isArray: false
        },
        putStatus: {
            url: '/erp/studentservice/stuScoreInfo/changeStatus',
            method: 'PUT',
            params: {},
            isArray: false
        }
    })
}

function erp_studentOrderCourseService($resource){
    return $resource('/erp/studentservice/orderCourse', {}, {
        queryOrderCourse : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
function erp_studentCourseSchedulingService($resource){
    return $resource('/erp/studentservice/scheduling', {}, {
        query: {
            method : 'GET',
            params : {},
            isArray : false
        },
        addYdyOrderCourseSchedulingList: {
            url: '/erp/studentservice/schedulingList',
            method: 'POST',
            params: {},
            isArray: false
        },
        addYdyOrderCourseScheduling: {
            method : 'POST',
            params : {},
            isArray : false
        },
        cancelYdyOrderCourseScheduling: {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        updateYdyOrderCourseScheduling: {
            method : 'PUT',
            params : {},
            isArray : false
        },
        queryConflictScheduling : {
            url:'/erp/studentservice/confict/scheduling',
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}
function erp_stuCourseSchedApplyYdyService ($resource) {
    return $resource('/erp/studentservice/schedulingApply', {}, {
        query: {
            method: 'GET',
            params: {},
            isArray: false
        },
        getDetail: {
            url: '/erp/studentservice/schedulingApply/toEdit',
            method: 'GET',
            params: {},
            isArray: false
        },
        post: {
            method: 'POST',
            params: {},
            isArray: false
        },
        put: {
            method: 'PUT',
            params: {},
            isArray: false
        },
        delete: {
            method: 'DELETE',
            params: {},
            isArray: false
        },
        putStatus: {
            url: '/erp/studentservice/schedulingApply/changeStatus',
            method: 'PUT',
            params: {},
            isArray: false
        },
        postScore: {
            url: '/erp/studentservice/schedulingApply/stuScore',
            method: 'POST',
            params: {},
            isArray: false
        },
        putScore: {
            url: '/erp/studentservice/schedulingApply/stuScore',
            method: 'PUT',
            params: {},
            isArray: false
        },
        delScore: {
            url: '/erp/studentservice/schedulingApply/stuScore',
            method: 'DELETE',
            params: {},
            isArray: false
        },
        postReq: {
            url: '/erp/studentservice/schedulingApply/stuReq',
            method: 'POST',
            params: {},
            isArray: false
        },
        putReq: {
            url: '/erp/studentservice/schedulingApply/stuReq',
            method: 'PUT',
            params: {},
            isArray: false
        },
        delReq: {
            url: '/erp/studentservice/schedulingApply/stuReq',
            method: 'DELETE',
            params: {},
            isArray: false
        },
        getApplyPlanList: {
            url: '/erp/studentservice/schedulingApply/stuSchedPlan',
            method: 'GET',
            params: {},
            isArray: false
        },
        putApplyPlan: {
            url: '/erp/studentservice/schedulingApply/stuSchedPlan',
            method: 'PUT',
            params: {},
            isArray: false
        },
        putApplyPlanStatus: {
          url: '/erp/studentservice/schedulingApply/stuSchedPlan/changeStatus',
          method: 'PUT',
          params: {},
          isArray: false
        },
        exportScheduleProcessExcel: {
            url: '/erp/studentservice/schedulingDeal/output',
            method: 'GET',
            params: {},
            isArray: false
        },
        putAudit: {
            url: '/erp/studentservice/schedulingApply/audit',
            method: 'PUT',
            params: {},
            isArray: false
        }
    })
} 
function erp_stuCourseSchedYdyPrintService ($resource){
    return $resource('/erp/lecture/print', {}, {
        post: {
            url: '/erp/lecture/print/list',
            method: 'POST',
            params: {},
            isArray: false
        },
        printpost: {
            url: '/erp/lecture/print/preview',
            method: 'POST',
            params: {},
            isArray: false
        },
    })
}
function erp_InvoiceManagerService($resource){
    return $resource('/erp/invoice/service', {}, {
    	query : {
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        post : {
        	method : 'POST',
        	params : {},
        	isArray : false
        },
        put : {
        	method : 'PUT',
        	params : {},
        	isArray : false
        },
        queryByOrder : {
            url: '/erp/ordermanager/invoice/order',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryForApply : {
        	url : '/erp/invoice/apply',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        exportInv : {
        	url : '/erp/invoice/export',
        	method : 'GET',
        	params : {},
        	isArray : false
        }
    });
}

function erp_studentSchoolService($resource) {
	return $resource('/erp/common/dataschool/list', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function erp_studentsService($resource) {
	return $resource('/erp/studentservice/students', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		post : {
			method : 'POST',
			params : {},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		addStudent : {
			url : '/erp/studentservice/student/add',
			method : 'POST',
			params : {},
			isArray : false
		},
		synToDouble : {
			url : '/erp/studentservice/synToDouble',
			method : 'POST',
			params : {},
			isArray : false
		},
		resetPasswordDouble : {
			url : '/erp/studentservice/resetPasswordDouble',
			method : 'POST',
			params : {},
			isArray : false
		},
		uploadHeadImg:{
			url : '/erp/studentservice/student/uploadhead',
			method : 'POST',
			params : {},
			isArray : false
		},
        modifyHeadImg:{
            url : '/erp/studentservice/student/modifyPhoto',
            method : 'POST',
            params : {},
            isArray : false
        },
        queryReferenceStudentHt:{
            url : '/erp/studentservice/student/referenceht',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryRecorder:{
            url : '/erp/studentRecorder/listRecorder',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryStudentRecordHt:{
            url : '/erp/studentRecorder/service',
            method : 'GET',
            params : {},
            isArray : false
        },
        addRecorder:{
            url : '/erp/studentRecorder/service',
            method : 'POST',
            params : {},
            isArray : false
        },
        queryStudentByNameAndPhone:{
            url : '/erp/studentservice/student/byNameAndPhones',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryByResourceRecId:{
            url : '/gxhcrm/query/queryRescRec',
            method : 'GET',
            params : {},
            isArray : false
        },
        querygradeBycrmGradeId:{
            url : '/gxhcrm/query/querygradeBycrmGradeId',
            method : 'GET',
            params : {},
            isArray : false
        }
	});
}

function erp_TeacherSearchService($resource) {
	return $resource('/erp/teacherservice/page', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		post : {
			method : 'POST',
			params : {},
			isArray : false
		}
	});
}

function erp_attendanceTeacherGroupService($resource) {
	return $resource('/erp/attendancegroup/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		post : {
			method : 'POST',
			params : {},
			isArray : false
		},
		put : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		remove : {
			method : 'DELETE',
			params : {},
			isArray : false
		},
		queryDetail : {
			url:'/erp/attendancegroup/detail',
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function erp_TeacherIndexService($resource) {
	return $resource('/erp/teacherservice/service', {}, {
		query : {
			method : 'GET',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
		post : {
			method : 'POST',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
		put : {
			method : 'PUT',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
		del : {
			method : 'DELETE',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
		toManage : {
			url : '/erp/teacherservice/toManage',
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}


function erp_studentIndexAccountService($resource) {
	return $resource('/erp/studentservice/student/indexAccount', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}
function erp_studentIndexCounselorsService($resource) {
	return $resource('/erp/studentservice/student/indexCounselors', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function erp_studentIndexIntegralService($resource) {
    return $resource('/erp/student/integral', {}, {
        queryStudentIntegral : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryStudentIntegralFlow : {
            url : '/erp/student/integral_flow',
            method : 'GET',
            params : {},
            isArray : false
        },
        outputStudentIntegralFlow : {
            url : '/erp/student/integral_output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_studentTraceInfoService($resource) {
	return $resource('/erp/studentTraceInfo/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
        queryById : {
            url : '/erp/studentTraceInfo/service/selectOne',
            method : 'GET',
            params : {},
            isArray : false
        },
        add: {
            method: 'POST',
            params: {},
            isArray: false
        },
        update: {
            method: 'PUT',
            params: {},
            isArray: false
        },
        exportCourseInfo: {
            url : '/erp/studentTraceInfo/exportCourseInfo',
            method : 'GET',
            params : {},
            isArray : false
        },
        deleteAttachById: {
            url: '/erp/studentTraceInfo/deleteAttach',
            method: 'DELETE',
            params: {},
            isArray: false
        }
	});
}

function erp_studentOrdersService($resource) {
	return $resource('/erp/studentservice/student/orders', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function erp_studentScheduleService($resource) {
	return $resource('/erp/studentservice', {}, {
		queryYDY : {
			method : 'GET',
			params : {},
			url : '/erp/studentservice/scheduleYDY',
			isArray : false
		},
		queryBJK : {
			method : 'GET',
			params : {},
			url : '/erp/studentservice/scheduleBJK',
			isArray : false
		}
	});
}

function erp_studentsCheckService($resource) {
	return $resource('/erp/studentservice/students/check', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		check: {
			method: 'POST',
			params: {},
			isArray: false
		}
	});
}

function erp_studentOrgService($resource){
	return $resource('/erp/dictionary/organization/list', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function erp_studentBuOrgsService($resource){
    return $resource('/erp/dictionary/organization/branchs', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryAll : {
            method : 'GET',
            url:'/erp/dictionary/organization/allbranchs',
            params : {},
            isArray : false
        }
    });
}

function erp_studentContactService($resource){
	return $resource('/erp/studentservice/student/contact/list', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}
function erp_studentContactRelationService($resource){
	return $resource('/erp/studentservice/student/contact/relationList', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}
function erp_studentContactService($resource){
	return $resource('/erp/studentservice/student/contact/service', {}, {
		query : {
			method : 'GET',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
		post : {
			method : 'POST',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
		put : {
			method : 'PUT',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
		del : {
			method : 'DELETE',
			headers: {
				Accept: 'application/json'
			},
			params : {},
			isArray : false
		},
        updateDefaultContact : {
            url : '/erp/studentservice/studentsDefaultContact',
            method : 'put',
            params : {},
            isArray : false
        }
	});
}
function erp_MessageService($resource){
	return $resource('/erp/message/sendMessage/:mobile', {mobile:'@mobile'}, {
		sendMessage: {method: 'GET', headers: {Accept: 'application/json'}}
	});
}

function erp_studentCounselorService($resource){
	return $resource('/erp/studentservice/student/counselor/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        }
	});
}
function erp_employeeService($resource){
	return $resource('/erp/employee/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		queryList : {
			url : '/erp/employee/service/list',
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

function erp_timeSeasonService($resource){
	return $resource('/erp/dictionary/timeSeason/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        querySelectDatas : {
        	url : '/erp/dictionary/timeSeason/toManage',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
		list : {
			url : '/erp/dictionary/timeSeason/list',
			method : 'GET',
			params : {},
			isArray : false
		},
		changeStatus:{
			url: '/erp/dictionary/timeSeason/changeStatus',
			method : 'PUT',
			params : {},
			isArray : false
		}
    });
}

function erp_subjectService($resource){
    return $resource('/erp/dictionary/subject/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        querySelectDatas : {
        	url : '/erp/dictionary/subject/listSubject',
        	method : 'GET',
        	params : {},
        	isArray : false
        }
    });
}

function erp_arrangerService($resource) {
    return $resource('/erp/courseArrangeSp/service', {}, {
        query: {
            method: 'GET',
            params: {
                pageSize: 30,
                currentPage: 1
            },
            isArray: false
        },
        getDetail: {
            url: '/erp/courseArrangeSp/service/selectOne',
            method: 'GET',
            params: {},
            isArray: false
        },
        put: { method: 'PUT', params: {}, isArray: false },
        post: { method: 'POST', params: {}, isArray: false },
        delete: { method: 'DELETE', params: {}, isArray: false }
    });
}

function erp_studentMineService($resource){
    return $resource('/erp/studentservice/student/counselor/page', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
            url : '/erp/studentservice/student/counselor/exportExcel',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_studentOrdersBJKService($resource){
    return $resource('/erp/studentservice/student/orders/bjk', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_studentOrdersYdyService($resource){
    return $resource('/erp/studentservice/ydy', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_studentOrdersWFDService($resource){
    return $resource('/erp/studentservice/student/orders/wfd', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
function erp_studentCourseService($resource){
    return $resource('/erp/studentservice/student/course', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryWfd : {
        	url : '/erp/studentservice/student/course/wfd',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
function erp_studentCourseTimesService($resource){
    return $resource('/erp/studentservice/student/courseTimes', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_teacherService($resource){
    return $resource('/erp/teacherservice/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        page:{
            url:'/erp/teacherservice/page',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
function erp_TeacherListService($resource) {
    return $resource('/erp/teacherservice/service', {}, {
        query: {
            method: 'GET',
            params: {},
            isArray: false
        },
        uploadImg: {
            url: "/erp/teacherservice/photo",
            method: 'POST',
            params: {},
            isArray: false
        },
        sendInvation: {
            url: "/erp/teacherservice/sendInvation",
            method: "POST",
            params: {},
            isArray: false
        },
        synToDoubleCourse :{
            url: "/erp/teacherservice/synToDoubleCourse",
            method: "POST",
            params: {},
            isArray: false
        },
		changeStatus:{
			url: "/erp/teacherservice/service",
			method: "DELETE",
			params: {},
			isArray: false
		},
		querySubject: {
			url: "/erp/teacherservice/subject",
			method: "GET",
			params: {},
			isArray: false
		},
        checkImportRecord :{
            url: "/erp/teacherservice/checkImportRecord",
            method: "GET",
            params: {},
            isArray: false
        },
      queryList: {
          url: '/erp/teacherservice/list',
          method: 'GET',
          params: {},
          isArray: false
      },
      queryTeacherSched: {
        url: '/erp/teacherservice/teacherSched',
        method: 'GET',
        params: {},
        isArray: false
      }
    });
}
function erp_attendanceService($resource){
    return $resource('/erp/attendanceservice/bjk', {}, {
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        ydyAttend : {
        	url : '/erp/attendanceservice/ydy',
            method : 'POST',
            params : {},
            isArray : false
        },
        ydyAttendPut: {
            url : '/erp/attendance/service',
            method: 'PUT',
            params: {},
            isArray: false
        },
        batchPrint : {
            url :'/erp/attendanceservice/batchPrint',
            method:'GET',
            params: {},
            isArray:false
        }
    });
}

function erp_attendanceCourseTimesService($resource){
    return $resource('/erp/attendance/courseTimes', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        students:{
            url:'/erp/attendance/students',
            method : 'GET',
            params : {},
            isArray : false
        },
        attendanceWfd:{
            url:'/erp/attendance/service/wfd',
            method : 'POST',
            params : {},
            isArray : false
        },
		attendance:{
			url:'/erp/attendance/students',
			method : 'POST',
			params : {},
			isArray : false
		},
        attendanceTeachers:{
            url:'/erp/attendance/teachers',
            method : 'POST',
            params : {},
            isArray : false
        },
        makeup:{
            url:'/erp/attendance/makeup',
            method : 'GET',
            params : {},
            isArray : false
        },
		branchinfo:{
            url:'/erp/attendance/branchinfo',
            method : 'GET',
            params : {},
            isArray : false
        },
		pageForWfd:{
			url:'/erp/attendance/service/wfd',
			method : 'GET',
			params : {},
			isArray : false
		},
        studentsForWfdAttn:{
            url:'/erp/attendance/students/wfd_attn_list',
            method : 'GET',
            params : {},
            isArray : false
        },
        teachersForWfdAttn:{
            url:'/erp/attendance/teachers/wfd_attn_list',
            method : 'GET',
            params : {},
            isArray : false
        },
        teachersGroupForWfdAttn:{
            url:'/erp/attendance/teachers/wfd_attn_group_list',
            method : 'GET',
            params : {},
            isArray : false
        },
        outputExcel :{
            url:'/erp/attendance//courseTimes_attend_bjk/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_attendanceDetailsService($resource){
    return $resource('/erp/attendanceservice/bjk/details', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryWfd : {
        	url : '/erp/attendanceservice/wfd',
            method : 'GET',
            params : {},
            isArray : false
        },
        wfdAttn : {
        	url : '/erp/attendanceservice/wfd',
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

function erp_attendanceMakeupService($resource){
    return $resource('/erp/attendanceservice/bjk/makeup', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

function erp_courseListeningService($resource){
    return $resource('/erp/courselistening/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
		queryList : {
			url : '/erp/courselistening/all',
			method : 'GET',
			params : {},
			isArray : false
		},
		exportExcel : {
			url : '/erp/courselistening/all_output',
			method : 'GET',
			params : {},
			isArray : false
		}
    });
}

/**
 * 年级服务
 * @param $resource
 * @returns {*}
 */
function erp_gradeService($resource){
    return $resource('/erp/dictionary/grade/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        querySelectDatas : {
        	url:'/erp/dictionary/grade/list',
            method : 'GET',
            params : {},
            isArray : false
        },
        addGrade : {
            method : 'POST',
            params : {},
            isArray : false
        },
        updateGrade : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        delGrade : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        changeStatus : {
        	url:'/erp/dictionary/grade/changeStatus',
            method : 'GET',
            params : {},
            isArray : false
        }
        
    });
}

/**
 * 全日制学校服务
 * @param $resource
 * @returns {*}
 */
function erp_schoolService($resource){
    return $resource('/erp/common/dataschool/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        addSchool : {
            method : 'POST',
            params : {},
            isArray : false
        },
        updateSchool : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        delSchool : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        querySelectDatas : {
        	url:'/erp/common/dataschool/dialog',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryRegionDatas : {
        	url:'/erp/common/region/queryRegionList',
            method : 'GET',
            params : {},
            isArray : false
        },
        changeStatus : {
        	url:'/erp/common/dataschool/changeStatus',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 课程选择服务
 * @param $resource
 * @returns {*}
 */
function erp_courseService($resource){
    return $resource('/erp/coursemanagerment/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        changeStatus:{
            url:'/erp/coursemanagerment/changeStatus',
            method : 'PUT',
            params : {},
            isArray : false
        },
        querySchedulingAssist:{
            url:'/erp/coursemanagerment/schedulingAssist',
            method : 'GET',
            params : {},
            isArray : false
        },
        updateSchedulingAssist:{
            url:'/erp/coursemanagerment/schedulingAssist',
            method : 'PUT',
            params : {},
            isArray : false
        },
        toAutoCourseScheduling:{
            url:'/erp/coursemanagerment/schedulingAssist',
            method : 'POST',
            params : {},
            isArray : false
        },
        exportExcel:{
            url:'/erp/coursemanagerment/outputExcelForCourse',
            method : 'POST',
            params : {},
            isArray : false
        },
        queryCourseByStudentId:{
            url:'/erp/coursemanagerment/queryCourseByStudentId',
            method : 'GET',
            params : {},
            isArray : false
        },
        querySchedulingTimeAssist:{
            url:'/erp/coursemanagerment/schedulingTimeAssist',
            method : 'GET',
            params : {},
            isArray : false
        },
        updateSchedulingTimeAssist:{
            url:'/erp/coursemanagerment/schedulingTimeAssist',
            method : 'PUT',
            params : {},
            isArray : false
        },
        queryEndTimesByPeriod:{
            url:'/erp/coursemanagerment/queryEndTimesByPeriod',
            method : 'GET',
            params : {},
            isArray : false
        },
        checkAll:{
            url:'/erp/coursemanagerment/checkAll',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryHourLen : {
            url:'/erp/coursemanagerment/queryHourLen',
            method : 'GET',
            params : {},
            isArray : false
    }
    });
}

/**
 * 晚辅导套餐服务
 * @param $resource
 * @returns {*}
 */
function erp_wfdComboService($resource){
	return $resource('/erp/coursemanagerment/package', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		add : {
			method : 'POST',
			params : {},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		remove : {
			method : 'DELETE',
			params : {},
			isArray : false
		},
		changeStatus:{
			url:'/erp/coursemanagerment/package/changeStatus',
			method : 'PUT',
			params : {},
			isArray : false
		},
		checkWfdCourse:{
			url:'/erp/coursemanagerment/checkWfdCourse',
			method : 'POST',
			params : {},
			isArray : false
		},
		checkAll: {
			url:'/erp/coursemanagerment/package/inputDataCheck',
			method: 'POST',
			params: {},
			isArray: false
		},
		inputData: {
			url: '/erp/coursemanagerment/package/inputData',
			method: 'POST',
			params: {},
			isArray: false
		},
		outputExcel: {
			url: '/erp/coursemanagerment/package/outputExcel',
			method: 'POST',
			params: {},
			isArray: false
		}
	});
}

/**
 * 双师课程选择服务
 * @param $resource
 * @returns {*}
 */
function erp_mtcourseService($resource){
    return $resource('/erp/coursemanagerment/mtcourse', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        changeStatus:{
            url:'/erp/coursemanagerment/mtcourse/changeStatus',
            method : 'PUT',
            params : {},
            isArray : false
        },
        querySchedulingAssist:{
            url:'/erp/coursemanagerment/mtcourse/schedulingAssist',
            method : 'GET',
            params : {},
            isArray : false
        },
        synToDoubleCourse:{
            url:'/erp/coursemanagerment/mtcourse/synToDoubleCourse',
            method : 'GET',
            params : {},
            isArray : false
        },
        selectedCourseList:{
            url:'/erp/coursemanagerment/mtcourse/selectedCourseList',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
/**
 * 班级课导入服务
 */
function erp_courseInputService ($resource) {
  return $resource('/erp/coursemanagerment/inputDataCheck', {}, {
      checkAll: {
        method: 'POST',
        params: {},
        isArray: false
      },
	  checkOne: {
		  url: '/erp/coursemanagerment/inputDataCheckByOne',
		  method: 'POST',
		  params: {},
		  isArray: false
	  },
      inputData: {
        url: '/erp/coursemanagerment/inputData',
        method: 'POST',
        params: {},
        isArray: false
      },
	  outputExcel: {
		  url: '/erp/coursemanagerment/outputExcel',
		  method: 'POST',
		  params: {},
		  isArray: false
	  }
  })
} 

/**
 * 1对1课程阶梯管理
 */
function erp_courseLadderService($resource) {
	return  $resource('/erp/courseladder/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		add : {
			method : 'POST',
			params : {},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		remove : {
			method : 'DELETE',
			params : {},
			isArray : false
		},
		list:{
			url:'/erp/courseladder/list',
			method : 'GET',
			params : {},
			isArray : false
		},
		adjustLadder:{
			url:'/erp/courseladder/adjustLadder',
			method : 'PUT',
			params : {},
			isArray : false
		},
		changeStatus:{
			url:'/erp/courseladder/changeStatus',
			method : 'PUT',
			params : {},
			isArray : false
		}
	});
}
/**
 * 课程课次服务
 * @param $resource
 * @returns {*}
 */
function erp_courseTimesService($resource){
    return $resource('/erp/coursemanagerment/coursetimes', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        update : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        batchUpdate : {
            url:'/erp/coursemanagerment/coursetimes/batch',
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}

/**
 * 学生账户服务
 * @param $resource
 * @returns {*}
 */
function erp_studentAccountService($resource){
    return $resource('/erp/studentaccount/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        queryAccountDynamic : {
    		url:"/erp/studentaccount/all",
            method : 'GET',
            params : {},
            isArray : false
        },
        queryUpdateBaseInfo:{
        	url:"/erp/studentaccount/queryUpdateBaseInfo",
            method : 'GET',
            params : {},
            isArray : false
        },
        del : {
             method : 'DELETE',
             params : {},
             isArray : false
        },
        put : {
             method : 'PUT',
             params : {},
             isArray : false
        }
    });
}

/**
 * 学管师学员分配服务
 */
function erp_stuCounselorDistService ($resource) {
  return $resource('/erp/studentservice/student/counselor/distribute',{}, {
    query: {
      method: 'GET',
      params: {},
      isArray: false
    },
    post: {
      method: 'POST',
      params: {},
      isArray: false
    },
    distributeBatch: {
      url: '/erp/studentservice/student/counselor/distribute/batch',
      method: 'POST',
      params: {},
      isArray: false
    },
    queryDistributeTo: {
      url: '/erp/studentservice/student/counselor/distribute/to',
      method: 'GET',
      params: {},
      isArray: false
    },
    queryDistributeFrom: {
      url: '/erp/studentservice/student/counselor/distribute/from',
      method: 'GET',
      params: {},
      isArray: false
    }
  })
}

/**
 * 学生账户服务
 * @param $resource
 * @returns {*}
 */
function erp_studentAccountQueryService($resource){
    return $resource('/erp/studentaccount/account', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
/**
 * 学员相关的打印查询服务
 * @param $resource
 * @returns {*}
 */
function erp_studentPrintService($resource){
    return $resource('/erp/studentaccount/print', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
/**
 * 公司账户服务
 * @param $resource
 * @returns {*}
 */
function erp_companyAccountService($resource){
    return $resource('/erp/common/companyaccount/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
		add : {
			method : 'POST',
			params : {},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		delete : {
			method : 'DELETE',
			params : {},
			isArray : false
		},
		changeStatus:{
			url:'/erp/common/companyaccount/status',
			method : 'GET',
			params : {},
			isArray : false
		}
    });
}

/**
 * 公司设备服务
 * @param $resource
 * @returns {*}
 */
function erp_deviceService($resource){
	return $resource('/erp/common/device/service', {}, {
		init : {
			url:'/erp/common/device/init',
			method : 'GET',
			params : {},
			isArray : false
		},
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		queryBu : {
            url:'/erp/common/device/bu/service',
			method : 'GET',
			params : {},
			isArray : false
		},
		add : {
			method : 'POST',
			params : {},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		delete : {
			method : 'DELETE',
			params : {},
			isArray : false
		},
		changeStatus:{
			url:'/erp/common/device/status',
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

/**
 * 优惠前置分页服务
 * @param $resource
 * @returns {*}
 */
function erp_privilegeCriteriaServicePage($resource){
    return $resource('/erp/privilegecriteria/servicePage', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 优惠前置服务
 * @param $resource
 * @returns {*}
 */
function erp_privilegeCriteriaService($resource){
    return $resource('/erp/privilegecriteria/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

/**
 * 优惠规则服务
 * @param $resource
 * @returns {*}
 */
function erp_privilegeRuleService($resource){
    return $resource('/erp/privilegerule/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

/**
 * 优惠规则分页服务
 * @param $resource
 * @returns {*}
 */
function erp_privilegeRuleServicePage($resource){
    return $resource('/erp/privilegerule/servicePage', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
/**
 * 优惠券分页服务
 * @param $resource
 * @returns {*}
 */
function erp_couponInfoServicePage($resource){
    return $resource('/erp/couponinfo/servicePage', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
/**
 * 优惠券服务
 * @param $resource
 * @returns {*}
 */
function erp_couponInfoService($resource){
    return $resource('/erp/couponinfo/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}
/**
 * 优惠券发放服务
 * @param $resource
 * @returns {*}
 */
function erp_couponRuleRelService($resource){
    return $resource('/erp/couponrulerel/service', {}, {
        post : {
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 优惠券服务
 * @param $resource
 * @returns {*}
 */
function erp_couponInfoServices($resource){
    return $resource('/erp/couponinfo/services', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 活动Banner图片
 */
function erp_activityBannerService($resource) {
  return $resource('/erp/banner/service', {}, {
    query: {
      method: 'GET',
      params: {},
      isArray: false
    },
    post: {
      method: 'POST',
      params: {},
      isArray: false
    },
    put: {
      method: 'PUT',
      params: {},
      isArray: false
    },
    changeStatus:{
      url:'/erp/banner/changeStatus',
      method : 'PUT',
      params : {},
      isArray : false
    }
  })
  // body...
}
/**
 * 优惠活动
 * @param $resource
 * @returns {*}
 */
function erp_activityInfoService($resource){
    return $resource('/erp/activityInfo/services', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

function erp_activityService($resource) {
  return $resource('/erp/activity/service', {}, {
    query: {
      method: 'GET',
      params: {},
      isArray: false
    },
    post: {
      method: 'POST',
      params: {},
      isArray: false
    },
    put : {
        method : 'PUT',
        params : {},
        isArray : false
    },
    remove : {
        method : 'DELETE',
        params : {},
        isArray : false
    },
    changeStatus:{
        url:'/erp/activity/changeStatus',
        method : 'PUT',
        params : {},
        isArray : false
    }
  })
}

/**
 * 生成优惠券
 * @param $resource
 * @returns {*}
 */
function erp_activityGenerateCouponDepotService($resource){
    return $resource('/erp/activityInfo/generateCouponDepot', {}, {
        post : {
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 订单管理服务
 * @param $resource
 * @returns {*}
 */
function erp_orderManagerService($resource){
    return $resource('/erp/ordermanager/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        pay : {
            url:'/erp/ordermanager/pay',
            method : 'POST',
            params : {},
            isArray : false
        },
        queryOrderChangeCourseTimes : {
            url:'/erp/ordermanager/orderChangeCourseTimes',
            method : 'GET',
            params : {},
            isArray : false
        },
        orderChangeInfo:{
            url:'/erp/ordermanager/orderChangeInfo',
            method : 'GET',
            params : {},
            isArray : false
        },
        orderCourseSurplusCount : {
            url:'/erp/ordermanager/surplusCount',
            method : 'GET',
            params : {},
            isArray : false
        },
        delete : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
		unpay :{
			url:'/erp/ordermanager/unpay',
			method : 'GET',
			params : {},
			isArray : false
		},
		exportUnpayExcel :{
			url:'/erp/ordermanager/exportUnpayExcel',
			method : 'GET',
			params : {},
			isArray : false
		},
        updateOrderInfo :{
            url:'/erp/ordermanager/updateOrderInfo',
            method : 'POST',
            params : {},
            isArray : false
        },
        getPayOnlineQrCode: {
            url: '/erp/qrCode/getQrCode',
            method: 'POST',
            params: {},
            isArray: false
        },
        getPayOnlineQrCodeInfo: {
            url: '/erp/qrCode/getQrCodeResult',
            method: 'POST',
            params: {},
            isArray: false
        },
        getPayOnlineResult: {
            url: '/erp/qrCode/queryBillNoInfo',
            method: 'POST',
            params: {
                billNo: null,
                billDate: null
            },
            isArray: false
        },
        payOnlineRefund: {
            url: '/erp/qrCode/refund',
            method: 'POST',
            params: {},
            isArray: false
        }
    });
}

/**
 * 账务/退费单据服务
 * @param $resource
 * @returns {*}
 */
function erp_refundService($resource){
	return $resource('/erp/ordermanager/refund', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		update : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		delete : {
			method : 'DELETE',
			params : {},
			isArray : false
		},
		queryDetail : {
			url:'/erp/ordermanager/refundDetail',
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

/**
 * 账务/冻结单据服务
 * @param $resource
 * @returns {*}
 */
function erp_frozenService($resource){
	return $resource('/erp/ordermanager/frozen', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		delete : {
			method : 'DELETE',
			params : {},
			isArray : false
		},
		queryDetail : {
			url:'/erp/ordermanager/frozenDetail',
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

/**
 * 账务/订单锁定服务
 * @param $resource
 * @returns {*}
 */
function erp_orderFrozenMgrService($resource){
	return $resource('/erp/orderlocked/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		carryForward : {
			method : 'PUT',
			params : {},
			isArray : false
		},
		exportExcel : {
			url : '/erp/orderlocked/export',
			method : 'GET',
			params : {},
			isArray : false
		}
	});
}

/**
 * 财务/在线支付
 * @param $resource
 * @returns {*}
 */
function erp_epayWapService($resource){
	return $resource('/erp/epay_wap/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		list : {
			url : '/erp/epay_wap/list',
			method : 'GET',
			params : {},
			isArray : false
		},
		queryTeam : {
			url : '/erp/epay_wap/queryTeam',
			method : 'GET',
			params : {},
			isArray : false
		},
		output : {
			url: '/erp/epay_wap/output',
			method: 'POST',
			params: {},
			isArray: false
		}
	});

}

/**
 * 财务/订单单据
 * @param $resource
 * @returns {*}
 */
function erp_FinanceOrderService($resource){
	return $resource('/erp/order/service', {}, {
		query : {
			method : 'GET',
			params : {},
			isArray : false
		},
		post : {
			method : 'POST',
			params : {},
			isArray : false
		},
		put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        queryOrderCouseDetail : {
        	url:'/erp/order/detail',
            method : 'GET',
            params : {},
            isArray : false
        },
        lock : {
        	url:'/erp/order/lock',
            method : 'PUT',
            params : {},
            isArray : false
        }
	});

}
function erp_orderManagerUserOrdersService($resource){
    return $resource('/erp/ordermanager/user/myOrders', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_invoiceCompanyService($resource){
	return $resource('/erp/common/invoicecompany/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        list : {
        	url : '/erp/common/invoicecompany/list',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        changeStatus : {
        	url : '/erp/common/invoicecompany/changeStatus',
        	method : 'DELETE',
        	params : {},
        	isArray : false
        }
    });
}

function erp_tmpTeacherInfoService($resource) {
	return $resource('/erp/tmpTeacher/service', {}, {
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        batchImport : {
        	url : '/erp/tmpTeacher/batchImport',
        	method : 'PUT',
        	params : {},
        	isArray : false
        },
        exportExcel : {
        	url : '/erp/tmpTeacher/exportExcel',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        toManage : {
        	url : '/erp/tmpTeacher/toManage',
        	method : 'GET',
        	params : {},
        	isArray : false
        }
	});
}

function erp_teacherGroupService($resource){
	return $resource('/erp/teacherGroup/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryList : {
          url: '/erp/teacherGroup/list',
          method : 'GET',
          params : {},
          isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
            method : 'DELETE',
            params : {},
            isArray : false
        },
        toManage : {
        	url : '/erp/teacherGroup/toManage',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_organizationService($resource){
    return $resource('/erp/dictionary/organization/list', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        teamList : {
        	url : '/erp/dictionary/organization/teamList',
        	method : 'GET',
            params : {},
            isArray : false
        },
        branchList : {
        	url : '/erp/dictionary/organization/branchs',
        	method : 'GET',
            params : {},
            isArray : false
        },
        add : {
        	url : '/erp/dictionary/organization/service',
        	method : 'POST',
            params : {},
            isArray : false
        },
        update : {
        	url : '/erp/dictionary/organization/service',
        	method : 'PUT',
            params : {},
            isArray : false
        },
        queryProductLine : {
        	url : '/erp/dictionary/organization/productLine',
        	method : 'GET',
            params : {},
            isArray : false
        },
        queryDictOrgList : {
        	url : '/erp/dictionary/organization/dictOrgList',
        	method : 'GET',
            params : {},
            isArray : false
        },
        uploadLogo : {
        	url : '/erp/dictionary/organization/uploadLogo',
        	method : 'PUT',
            params : {},
            isArray : false
        },
        deleteLogo : {
        	url : '/erp/dictionary/organization/deleteLogo',
        	method : 'PUT',
            params : {},
            isArray : false
        }
    });
}

function erp_delayCourseService($resource) {
    return $resource('/erp/course/delay/service', {}, {
        listDelayCourse: {
            method: 'GET',
            params: {},
            isArray: false
        },
        listMtDelayCourse: {
            url:'/erp/mtcourse/delay/service',
            method: 'GET',
            params: {},
            isArray: false
        },
        changeSchedulingInfo: {
            url : '/erp/course/delay/changeInfo',
            method: 'GET',
            params: {},
            isArray: false
        },
        listCourseChangeInfo: {
            url : '/erp/course/delay/listChangeInfo',
            method: 'POST',
            params: {},
            isArray: false
        },
        batchDelayCourse:{
            url : '/erp/course/delay/batchDelayCourse',
            method: 'POST',
            params: {},
            isArray: false
        },
        batchDelayMtCourse:{
            url : '/erp/mtcourse/delay/batchDelayCourse',
            method: 'POST',
            params: {},
            isArray: false
        },
        listDelayRecord:{
            url : '/erp/course/delay/record/list',
            method: 'GET',
            params: {},
            isArray: false
        },
        listDelayRecordCourseDetail:{
            url : '/erp/course/delay/record/detail',
            method: 'GET',
            params: {},
            isArray: false
        },
        listDelayCourseSchedulingChangeInfo:{
            url : '/erp/course/delay/record/delayCourseChangeInfo',
            method: 'GET',
            params: {},
            isArray: false
        }

    });
}

function erp_roomService($resource) {
    return $resource('/erp/room/service', {}, {
        listroomArrange : {
                url:'/erp/roomArrange/room/list',
                method:'GET',
                params:{},
                isArray : false
         },
         listroomScheduling : {
                url:'/erp/roomArrange/roomScheduling/list',
                method:'GET',
                params:{},
                isArray : false
         },
        outputExcel : {
            url:'/erp/roomArrange/outputExcel',
            method:'GET',
            params:{},
            isArray : false
        },
        get : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
        	method : 'POST',
            params : {},
            isArray : false
        },
        put : {
        	method : 'PUT',
            params : {},
            isArray : false
        },
        del : {
        	method : 'DELETE',
            params : {},
            isArray : false
        },
		queryRoom : {
			method : 'GET',
			params : {},
			isArray : false,
			url : '/erp/room/room_list'
		},
		queryRoomRel : {
			method : 'GET',
			params : {},
			isArray : false,
			url : '/erp/room/rel'
		},
		saveRoomRel : {
			method : 'POST',
			params : {},
			isArray : false,
			url : '/erp/room/rel'
        },
        untieRoom : {
            method : 'DELETE',
			params : {},
			isArray : false,
			url : '/erp/room/rel'
        },
        saveAllRoom : {
            method : 'POST',
			params : {},
			isArray : false,
			url : '/erp/room/rel/byweekday'
        },
        untieAllRoom : {
            method : 'POST',
			params : {},
			isArray : false,
			url : '/erp/room/rel/delete/byweekday'
        }
    });
}
    
function erp_noticeService($resource) {
    return $resource('/erp/notice/service', {}, {
        queryPage : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryList : {
        	url : '/erp/notice/service/list',
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
        	method : 'POST',
            params : {},
            isArray : false
        },
        addUserNoticeRel : {
        	url : '/erp/notice/service/addUserNoticeRel',
        	method : 'POST',
        	params : {},
        	isArray : false
        },
        put : {
        	method : 'PUT',
            params : {},
            isArray : false
        },
        remove : {
        	method : 'DELETE',
        	params : {},
        	isArray : false
        }
    });
}

function erp_eaiLogService($resource) {
    return $resource('/erp/eaiLog/service', {}, {
    	query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        repeatSendData : {
        	url : '/erp/eaiLog/service/repeatSendData',
        	method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_sortNumService($resource) {
    return $resource('/erp/orderSort/service', {}, {
    	query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        sortNum : {
        	url : '/erp/orderSort/sortNum',
        	method : 'POST',
            params : {},
            isArray : false
        },
        cancelSortNum : {
        	url : '/erp/orderSort/cancelSortNum',
        	method : 'POST',
            params : {},
            isArray : false
        },
        countCourseSortNum : {
        	url : '/erp/orderSort/countCourseSortNum',
        	method : 'GET',
            params : {},
            isArray : false
        },
        countSortNumDetail : {
        	url : '/erp/orderSort/countSortNumDetail',
        	method : 'GET',
            params : {},
            isArray : false
        },
        queryCheckPeople: {
        	url : '/erp/orderSort/queryCheckPeopleList',
        	method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_ebCouponService($resource) {
    return $resource('/erp/ebCoupon/service', {}, {
    	query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        changeStatus : {
        	url : '/erp/ebCoupon/changeStatus',
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}

function erp_dictService($resource) {
    return $resource('/erp/dictionary/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        getDictData: {
            url: '/erp/dictionary/service/dictData',
            method: 'GET',
            params: {},
            isArray: false
        }
    });
}

function erp_tpScheduleTimeService($resource) {
    return $resource('/erp/common/tpScheduleTime', {}, {
        queryList : {
            url: '/erp/common/tpScheduleTime/list',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_StudentManagerService($resource) {
    return $resource('/erp/studentManager/bu', {}, {
        queryStuMgrBu : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryStuMgrBranch : {
            url: '/erp/studentManager/branch',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryStuMgr : {
            url: '/erp/studentManager/stuMgr',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryStuMgrStudent : {
            url: '/erp/studentManager/student',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryCourseSchedInfo : {
            url: '/erp/studentManager/courseSchedInfo',
            method : 'GET',
            params : {},
            isArray : false
        },
       exportCourseSchedInfo : {
          url: '/erp/studentManager/courseSchedInfo/export',
          method : 'GET',
          params : {},
          isArray : false
       }
    });
}

function erp_invoiceTraceService($resource) {
  return $resource('/erp/invoice/receive', {}, {
    queryList : {
      url: '/erp/invoice/receive/list',
      method : 'GET',
      params : {},
      isArray : false
    },
    receiveInvoice : {
      url: '/erp/invoice/receive/service',
      method : 'POST',
      params : {},
      isArray : false
    }
  });
}
function erp_cameraService($resource) {
    return $resource('/erp/camera/service', {}, {
        listCamera : {
            url:'/erp/camera/list',
            method:'GET',
            params:{},
            isArray : false
        },
        pageCamera : {
            url:'/erp/camera/page',
            method:'GET',
            params:{},
            isArray : false
        },
        get : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}
/**
 * Created by Liyong.zhu on 2016/11/9.
 */
'use strict';

/**
 * 流程发布文件服务
 */
angular.module('ework-ui').factory('erp_workflowMgrmentService',
    [ '$resource', erp_workflowMgrmentService ]);

/**
 * 流程实例定义服务
 */
angular.module('ework-ui').factory('erp_workflowDeployedProcessDefinitionService',
    [ '$resource', erp_workflowDeployedProcessDefinitionService ]);

/**
 * 流程实例服务
 */
angular.module('ework-ui').factory('erp_workflowProcessInstanceService',
    [ '$resource', erp_workflowProcessInstanceService ]);

/**
 * 流程节点服务
 */
angular.module('ework-ui').factory('erp_workflowProcessNodeRoleService',
    [ '$resource', erp_workflowProcessNodeRoleService ]);

angular.module('ework-ui').factory('erp_workflowProcessNodeRoleMappingService',
    [ '$resource', erp_workflowProcessNodeRoleMappingService ]);

angular.module('ework-ui').factory('erp_workflowProcessTaskService',
    [ '$resource', erp_workflowProcessTaskService ]);

angular.module('ework-ui').factory('erp_workflowTaskExamineAndApproveService',
    [ '$resource', erp_workflowTaskExamineAndApproveService ]);

angular.module('ework-ui').factory('erp_workflowTaskOutcomesService',
    [ '$resource', erp_workflowTaskOutcomesService ]);

angular.module('ework-ui').factory('erp_workflowUserTaskService',
    [ '$resource', erp_workflowUserTaskService ]);

angular.module('ework-ui').factory('erp_workflowMyAppicationService',
	    [ '$resource', erp_workflowMyAppicationService ]);

angular.module('ework-ui').factory('erp_workflowBranchAppicationService',
    [ '$resource', erp_workflowBranchAppicationService ]);

angular.module('ework-ui').factory('erp_workflowTaskTodoService',
    [ '$resource', erp_workflowTaskTodoService ]);

angular.module('ework-ui').factory('erp_workflowTaskService',
	    [ '$resource', erp_workflowTaskService ]);

angular.module('ework-ui').factory('erp_workflowTaskTodoService',
    [ '$resource', erp_workflowTaskTodoService ]);

angular.module('ework-ui').factory('erp_workflowTaskTodoChangeService',
    [ '$resource', erp_workflowTaskTodoChangeService ]);

function erp_workflowTaskTodoChangeService($resource){
    return $resource('/erp/workflow/task/todo_change', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post : {
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowTaskTodoService($resource){
    return $resource('/erp/workflow/task/todo', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryByOrderId : {
        	url : '/erp/workflow/task/orderId',
        	method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowTaskService($resource){
	return $resource('/erp/workflow/task', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowMyAppicationService($resource){
	return $resource('/erp/workflow/task/myAppication', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        del:{
        	method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowBranchAppicationService($resource){
    return $resource('/erp/workflow/task/branchAppication', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowProcessInstanceService($resource){
    return $resource('/erp/workflow/processInstance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        put : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete : {
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowDeployedProcessDefinitionService($resource) {
    return $resource('/erp/workflow/deployedProcessDefinition', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
            method : 'POST',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowMgrmentService($resource){
    return $resource('/erp/workflow/processinfo', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}

/**
 * 流程节点的权限绑定数据服务
 * @param $resource
 * @returns {*}
 */
function erp_workflowProcessNodeRoleService($resource){
    return $resource('/erp/workflow/processNodeRole', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}
/**
 * 流程节点与角色绑定服务
 * @param $resource
 * @returns {*}
 */
function erp_workflowProcessNodeRoleMappingService($resource){
    return $resource('/erp/workflow/rolemapping', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}
/**
 * 流程任务服务
 * @param $resource
 * @returns {*}
 */
function erp_workflowProcessTaskService($resource){
    return $resource('/erp/workflow/taskinfos', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        post:{
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}
/**
 * 审批任务
 * @param $resource
 * @returns {*}
 */
function erp_workflowTaskExamineAndApproveService($resource){
    return $resource('/erp/workflow/task/complete', {}, {
        post:{
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

/**
 * 查询任务步骤
 * @param $resource
 * @returns {*}
 */
function erp_workflowTaskOutcomesService($resource){
    return $resource('/erp/workflow/task/outcomes', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function erp_workflowUserTaskService($resource){
    return $resource('/erp/workflow/user_task/todo_page', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
/**
 * Created by Liyong.zhu on 2016/11/9.
 */
'use strict';

angular.module('ework-ui').factory('FileUploadService', [ '$resource', FileUploadService ]);

angular.module('ework-ui').factory('FileUploadDataService', [ '$resource', FileUploadDataService ]);
/**
 * 文件上传服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function FileUploadService($resource){
    return $resource('data/common/fileUpload.json', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}

FileUploadService.uploadService = "excels/inputview/input";

/**
 * 文件上传数据服务
 * @returns {Object}
 * @constructor
 */
function FileUploadDataService($resource){
    return $resource('data/common/fileUploadDatas.json', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
        	url:'excels/inputview/add',
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        delete:{
            method : 'DELETE',
            params : {},
            isArray : false
        }
    });
}
/**
 * Created by Liyong.zhu on 2016/6/14.
 */
angular.module('ework-ui')
    .controller('FileUpLoadCtrl', [
        '$scope',
        '$log',
        '$state',
        'FileUploadService',
        'FileUploadDataService',
        FileUpLoadCtrl]);

function FileUpLoadCtrl(
        $scope,
        $log,
        $state,
        FileUploadService,
        FileUploadDataService
    ){
    //加载中效果
    $scope.isLoading = '';
    $scope.loaded=false;
    //模版ID
    $scope.modelId = null;
    $scope.test="1";
    $scope.datas=null;
    $scope.child = {};
    /**
     * 文件上传服务
     */
    $scope.fileUpload = function(){
        $scope.error_info = "";
        //未选择文件
        if(!$("#fileUploader").val()){
            alert("请选择要导入的excel！");
            $scope.error_info = "请选择要导入的excel！";
            return;
        }

        //选择的文件不是.xls后缀的格式
        if(!$("#fileUploader").val().endsWith(".xls")&&!$("#fileUploader").val().endsWith(".xlsx")){
            alert("请选择.xls格式的文件！");
            $scope.error_info = "请选择.xls或者.xlsx格式的文件！";
            return;
        }

        //需要选择对应的模版
        var selectdeModel = null;
        if($scope.fileList){
            $.each($scope.fileList,function(i,f){
                if(f.checked){
                    selectdeModel = true;
                }
            });
        }

        if(!selectdeModel){
            alert("请选择模版！");
            $scope.error_info = "请选择对应的excel模版！";
            return;
        }
        $scope.isLoading = 'loading...';
        //异步上传文件服务
        $.ajaxFileUpload ({
            url: "excels/inputview/input/"+$scope.modelId,
            secureuri: false,
            fileElementId: 'fileUploader',
            dataType: "json",
            success: function (resp){
                $scope.isLoading = '';
                if(resp['message']){
                	alert(resp['message']);
                }
				$scope.step = 'two';
				$scope.$apply();
				$scope.cols = resp.cols;
				$scope.datas = resp.data;
				$scope.loaded=true;
            },
            error: function (html,status,e){
                $scope.isLoading = '';
                alert("上传失败！");
                $scope.step = 'two';
                $scope.$apply();
            }
        })
    }

    $checkedIndex=-1;
    $scope.checkedFile =  function (file,position){
    	if($checkedIndex!=-1){
    		$scope.fileList[$checkedIndex].checked=false;
    	}
    	file.checked=!file.checked;
    	$scope.modelId=file.id;
    	$checkedIndex=position;
    }
    /**
     * @param order
     */
    $scope.checkData = function(data){
        if(data.checked){
        	data.checked = false;
        }else{
        	data.checked = true;
        }
    }
    
    /**
     * 全选反选当前页面的数据
     */
    $scope.checkAllRows = function(){
    	var currentPage=$scope.child.currentPage;
    	var itemsPerPage=$scope.child.itemsPerPage;
    	var currentPageDatas=$scope.datas.slice(((currentPage-1)*itemsPerPage),((currentPage)*itemsPerPage));
    	$log.log(currentPageDatas.length+"=="+$scope.child.itemsPerPage);
        if($scope.checkAll){
            $.each(currentPageDatas,function(i,model){
            	if(i!=0)
                model.checked = false;
            });
            $scope.checkAll = false;
        }else{
            $.each(currentPageDatas,function(i,model){
            	if(i!=0)
                model.checked = true;
            });
            $scope.checkAll = true;
        }
    }
    /**
     * 提交
     */
    $scope.submit = function(){
    	   var param = {};
        if(!$scope.datas||!$scope.datas.length){
            alert("没有数据.");
            return;
        }

        var valid=true;
        var selected =  new Array();
        $.each($scope.datas,function(i,d){
            if(d.checked){
            	if(d.result!='true'){
            		valid=false;
            		alert("第"+(i+1)+"行数据不合法!");
            	}
            	selected.push(d);
            }
        });
        if(!selected.length){
            alert("请选择要提交的数据！");
            return;
        }
        if(!valid)
        	return;
        param.dataRow=JSON.parse(JSON.stringify(selected));
        param.modelId = $scope.modelId;
        FileUploadDataService.add(param,function(resp){
            if(resp.error ==  'false'||resp.error==false){
                alert("保存成功！");
            }
            if(resp.message){
            	alert("erro:"+resp.message);
            }
        }).error(function(data, status, headers, config) {
            if(status='404'){
            	alert("服务器已停止服务,请联系管理员!");
            }
            if(data.message){
            	alert(data.message);
            }
        });
    }

    /**
     * 返回
     */
    $scope.returnBack = function(){
        $scope.step = 'one';
        $scope.isLoading = '';
    }

    $scope.step = 'one';
    $scope.fileList = [];

    function queryFileUpload(){
        var param = {};

        FileUploadService.get(param,function(resp){
            if(resp.error == 'false'||resp.error==false){
                $scope.fileList = resp.data;
            }
        })
    }
    
    /**
     * 初始化模版列表
     */
    function queryFileUploadData(){
        var param = {};

        FileUploadDataService.get(param,function(resp){
            if(resp.error == 'false'){
                $scope.cols = resp.cols;
                $scope.datas = resp.data;
                $scope.modelId = resp.modelId;
            }
        })
    }

    queryFileUpload();

    //queryFileUploadData();
}
/**
 * 
 */
angular.module('ework-ui')
.controller('AccountCtrl',[
	'$scope',
	'$log',
	'$state',
	'$document',
	'$uibMsgbox',
	'RoleService',
	'OrgService',
	'PostService',
	'EmployeeManageService',
	'hrm_AccountService',
    AccountCtrl]);

function AccountCtrl($scope,
		$log,
		$state,
		$document,
		$uibMsgbox,
		RoleService,
		OrgService,
        PostService,
		EmployeeManageService,
		AccountService){
	$scope.AccountList = {};
	$scope.employeeList = [];
	$scope.operateType = '';
	$scope.role_search_info='';
	$scope.curAccountRole = {};
	//团队列表
	$scope.buList = [];
	$scope.paginationBars=[];
	//校区列表
	$scope.branchsList = [];
	
	  $scope.rolePage = {
	            roleSearchInfo:''
	        }
	/**
	 * 查询账户列表
	 */
	function queryAccount(){
		var param = {};
		/*if($scope.selectedAreas){
		param.orgId=$scope.selectedAreas;
		}*/
		if($scope.accountName!=null&&$scope.accountName!=''){
		param.accountName=$scope.accountName;
		}else{
			param.accountName='';
		}
		if($scope.employeeId){
			param.employeeId=$scope.employeeId;
		}else{
			param.employeeId=-1;
		}
		if($scope.employeeName!=null&&$scope.employeeName!=''){
			param.employeeName=$scope.employeeName;
		}else{
			param.employeeName='';
		}
		
		$scope.isLoading = 'loading...';
		$scope.accountList = [];
		param.pageNum=$scope.pageNum;
		param.pageSize=10;
		/*$scope.pageParam = {
				pageNum:$scope.pageNum,
				pageSize:10
		};
		param.pageParam = $scope.pageParam;*/
		AccountService.queryAccountForPage(param,function(resp){
			if(resp.error == false){
				$scope.accountList = resp.data;
				$scope.pageParam = resp.pageParam;
				$scope.isLoading = '';
				 if ($scope.pageParam.pageNum > 1 && $scope.pageParam.pageNum < $scope.pageParam.pages) {
  	     	       $scope.paginationBars = [$scope.pageParam.pageNum - 1,$scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
  	         } else if ($scope.pageParam.pageNum == 1 && $scope.pageParam.pages > 1) {
  	     	       $scope.paginationBars = [ $scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
  	         } else if ($scope.pageParam.pageNum == $scope.pageParam.pages && $scope.pageParam.pages > 1) {
  	     	       $scope.paginationBars = [ $scope.pageParam.pageNum - 1,$scope.pageParam.pageNum];
  	         }
			}
		})
	};
	
	$scope.queryInfo=function(pageIndex){
		$scope.pageNum=pageIndex;
		queryAccount();
	};
	
	
    /**
     * 去添加账户
     */
    $scope.toAddAccountPanel = function(){
        $scope.operateType = 'addAccount';
        $scope.curAccount = {};
        $("#accountMgrPanel").modal('show');
//        querySch();
    }
    
    /**
     * 去修改账户
     * @param account
     */
    $scope.toUpdateAccountPanel = function(account){
    	//$scope.queryBranchsWithId(account.companyId);alert("aaa");
        $scope.curAccount = account;
        $scope.comparePassword=account.password;//比较密码是否发生变化
        $scope.origalAccountName=account.accountName;//比较账户名是否发生变化
        $scope.operateType = 'updateAccount';
        $("#accountMgrPanel").modal('show');
    }
    
    /**
     * 去禁用/启用账户
     * @param account
     */
    $scope.toDeleteAccountPanel = function(account){
    	$scope.operateType = 'deleteAccount';
    	$scope.curAccount = account;
        debugger;
    	$scope.title=account.status==1?"禁用":"启用"+"账户";
    	$scope.modalBody="确认"+$scope.title+"当前【"+account.accountName+"】账户吗？";
    	$("#account_remove_confirm_dialog").modal("show");
    }
    
    /**
     * 账户确认
     */
    $scope.comfirmAccount = function(){
        if($scope.operateType == 'addAccount'){
        	$scope.isSbumitting=true;
        	if(checkAccountIsPassed($scope.curAccount)==false)
        		return;
            addAccount($scope.curAccount);
        } else if ($scope.operateType == 'updateAccount'){
        	$scope.isSbumitting=true;
        	if(checkAccountIsPassed($scope.curAccount)==false)
        		return;
            updateAccount($scope.curAccount);
        } else if ($scope.operateType == 'deleteAccount'){
            $scope.deleteAccount($scope.curAccount);
        }
    }
    
    
    function checkAccountIsPassed(account){
    	if(!account.accountName||account.accountName==''){
    		return false;
    	}
    	if(account.employeeId==undefined||account.employeeId==null){
    		return false;
    	}
    	if(!account.password||account.password==''){
    		return false;
    	}
    	/*if(!account.buId||account.buId==''){
    		return false;
    	}
    	if(!account.branchId||account.branchId==''){
    		return false;
    	}*/
    	return true;
    }
    
    /**
     * 去添加角色
     */
    $scope.toAddRolePanel = function(){
        if(!$scope.curAccount.checked){
        	$uibMsgbox.alert("请选择账户！");
            return;
        }
        $scope.rolePage = {};
        $scope.roleListCopy = [];
        angular.copy($scope.curAccount.roleList,$scope.roleListCopy);
        $("#accountMgrRolePanel").modal('show');
        $scope.queryAllRole();
    }
    
    /**
     * 移除角色
     * @param role
     */
    $scope.removeRole = function(role){
        if(!$scope.curAccount){
        	$uibMsgbox.alert("请选择账户！");
            return;
        }
        
        $uibMsgbox.confirm("是否确认删除？", function (result) {
            if(result == 'yes') {
            	AccountService.removeAccountRoleById({accountRoleId : role.accountRoleId}, function(resp) {
        			if (!resp.error) {
        				$uibMsgbox.alert("删除成功");
        				var tmpRoleList = [];
        				if ($scope.curAccount&& $scope.curAccount.roleList) {
        					$.each($scope.curAccount.roleList, function(idx, r) {
        						if (r.id != role.id) {
        							tmpRoleList.push(r);
        						}
        					});
        					$scope.curAccount.roleList = tmpRoleList;
        					$scope.queryAllRole();
        				}
        			} else {
        				$uibMsgbox.error(resp.message);
        			}
        		});
        	}
        });
    }
    
    /**
     * 选择行
     * @param row
     */
    $scope.checked = function(row){
    	if($scope.curAccount&& $scope.curAccount.hasOwnProperty('checked'))
        $scope.curAccount.checked=false;
        if(row.checked){
            row.checked = false;
        }else{
            row.checked = true;
            $scope.curAccount = row;
            //查询角色
            queryRole(row);
            //查询校区权限树
            queryBranchTree(row);
        }
    }
    
    /**
     * 选择角色
     * @param role
     */
    $scope.selectedRole = function(role){
        if(!$scope.curAccount){
        	$uibMsgbox.alert("请选择账户！");
        }
        if(!$scope.roleListCopy){
            $scope.roleListCopy = [];
        }
       if(!_.some($scope.roleListCopy,{id:role.id})) {
           $scope.roleListCopy.push(role);
       }
        //查询角色
        //$scope.queryAllRole();
    }
    /**
     * 选择角色
     * @param role
     */
    $scope.disSelectedRole = function(role){
        if(!$scope.curAccount){
        	$uibMsgbox.alert("请选择账户！");
        }
        _.remove($scope.roleListCopy,role);
        //查询角色
        //$scope.queryAllRole();
    }

    /**
     * 更新账户角色关系
     */
    $scope.updateAccountRole = function(){
        if(!$scope.curAccount.checked){
        	$uibMsgbox.alert("请选择账户！");
            return;
        }
        var saveData = {};
        angular.copy($scope.curAccount,saveData);
        saveData.roleList = $scope.roleListCopy;
        updateAccountRole(saveData);
    }
    
    function updateAccountRole(account){
        var param = account;
        AccountService.updateAccountRole(param,function(resp){
        	if(resp.error==false){
        		$uibMsgbox.alert(account.accountName+"  账户角色关系修改成功！");
        		queryRole(account);
        	}else{
        		$uibMsgbox.alert("修改失败："+resp.message+",请截图反馈给客服！");
        	}
        })
    }
    
    /**
     * 更新账户组织关系
     */
    $scope.updateAccountOrg = function(){
    	if(!$scope.curAccount.checked){
    		$uibMsgbox.alert("请选择账户！");
        }
        updateAccountOrg($scope.curAccount);
    }
    
    function updateAccountOrg(account){
    	
    	var param = {}; 
    	var selected = [];
    	param.selectedBranch = genSelectedMenus();
    	param.accountId=account.user_id;
    	AccountService.updateAccountOrg(param,function(resp){
    		if(resp.error==false){
    			$uibMsgbox.alert(account.accountName+"  账户组织关系修改成功！");
    			queryBranchTree(account);
    		}else{
    			$uibMsgbox.alert("修改失败："+resp.message+",请截图反馈给客服！");
    		}
    	})
    }
    
    /**
     * 修改账户
     */
    function updateAccount(account){
        var param = {};
        param.user_id=account.user_id;
        param.accountName=account.accountName;
        param.employeeId=account.employeeId;
        param.password=account.password;
        //var selected = [];
        //param.selectedBranch = genSelectedMenus();
        param.oldPassword=$scope.comparePassword;
        //判断新旧密码是否一样,如果一样将新密码传递为空
        if(account.oldpassword==account.password||$scope.comparePassword==null){
        	param.password='';
        }
       // account.origalAccountName=$scope.origalAccountName;//修改之前的账户名称
        AccountService.update(param,function(resp){
            if(resp.error ==  false){
            	$uibMsgbox.alert("修改成功！");
                $("#accountMgrPanel").modal("hide");
                $scope.queryInfo(1);
                $scope.comparePassword=null;
                $scope.origalAccountName=null;
            }else{
            	$uibMsgbox.alert("修改失败："+resp.message+",请截图反馈给ERP客服！");
            }
            
            
        })
    }
    
    /**
     * 添加账户
     */
    function addAccount(account){
        var param = account;
        AccountService.addAccount(param,function(resp){
            if(resp.error==false){
            	$uibMsgbox.alert("添加成功！");
                $('#accountMgrPanel').modal('hide');
                $scope.queryInfo(1);
            }else{
            	$uibMsgbox.alert("添加失败："+resp.message+",请截图反馈给客服！");
                
            }
        })
    }
    
    /**
     * 禁用/启用账户
     */
    $scope.deleteAccount = function (account){
        debugger;
    	$("#account_remove_confirm_dialog").modal("hide");
    	var param = {};
    	param.accountId=$scope.curAccount.user_id;
        param.status=$scope.curAccount.status==1?2:1;
    	AccountService.remove(param,function(resp){
    		if(resp.error==false){
    			$uibMsgbox.alert("操作成功");
    			$scope.queryInfo($scope.pageNum);
    		} else {
                $uibMsgbox.alert(resp.message);
            }
    	})
    }
    
    /**
     *根据账户id查询角色信息
     */
    function queryRole(account){
        var param = {};
        param.user_id = account.user_id;
        $scope.isLoadingRole = 'loading...';
        AccountService.queryRoleWithAccount(param,function(resp){
            $scope.isLoadingRole = '';
           if(resp.error ==  false){
               $scope.curAccount.roleList = resp.data;
           }
        });
    }
    
    /**
     * 查询除已有角色外的所有角色，给账户添加角色时使用
     */
    $scope.queryAllRole = function(){
        var param = {};
        param.status=1;
        $scope.isLoadingRoleList = 'loading...';
        param.roleName = $scope.rolePage.roleSearchInfo;
        param.accountId=$scope.curAccount.accountId;//当前选中的账户编码传递至后台过滤出选中账户拥有过的角色
        param.pageNum=$scope.pageNum;
        param.pageSize=10;

        RoleService.queryRoleForPage(param,function(resp){
            $scope.isLoadingRoleList = '';
            if(resp.error ==  false){
                //不过滤角色
                $scope.roleList = resp.data;
				$scope.pageParam = resp.pageParam;

            }
        });
    }
    
    /**
     * 根据账户id查询账户校区列表树
     */
    function queryBranchTree(account){
    	$('#branchTree').jstree("destroy").empty();
        var param = {};
        param.accountId = account.user_id;
        OrgService.queryOrgWithAccount(param,function(resp){
                account.branchTree = resp.data;
                $('#branchTree').jstree({
                    "plugins" : ["types","checkbox"],
                    "types" : {
                        "menus" : {
                            "icon" : "fa fa-folder-o"
                        },
                        "leaf" : {
                            "icon" : "fa fa-file-text-o"
                        }
                    },
                    'core' : {
                        'data' : account.branchTree,
                        "check_callback" : function (operation, node, parent, position, more) {
                        	 $(this).jstree("close_all");
                        }
                    }
                });
        })
    }
    
    function genSelectedMenus(){
        var instance = $('#branchTree').jstree(true);
        var selectedMenus = instance.get_selected(true);
        var selected = [];
        for(var key in selectedMenus){
        	var type=selectedMenus[key].type;
        	if(type=='leaf')
            selected.push(selectedMenus[key].id);
        }
        return selected;
    }
    
    /**
     * 查询角色列表
     */
    $scope.queryRole=function(pageIndex){
		$scope.pageNum=pageIndex;
		$scope.queryAllRole();
	};
	
	/**
     * 添加账户时绑定员工
     */
    $scope.queryEmployeeInfo= function (){
    	var searchInfo=$("#employee_search_info").val();
    	 $scope.onGoingQuery=true;
    	   var param = {};
    	   param.searchInfo=searchInfo;
    	EmployeeManageService.queryEmployeeInfo(param,function(resp){
             if(resp.error == false){
                 $scope.employeeList = resp.data;
             }
         });
    }
    
    
    /**
     * 选择一个员工
     */
    $scope.selectedEmployee=function(employee){
    	$scope.curAccount.employeeId=employee.ID;
    	$scope.curAccount.employeeName=employee.EMPLOYEE_NAME;
    	$scope.onGoingQuery=false;
    	$scope.showQuery=false;
    }	
	
	$scope.showEmployeeQuery=function(){
    	$scope.showQuery=true;
    }
	
   $document.on('click', function(event){
	      var element=angular.element(event.target).attr("id");
	    	  $scope.$apply(function() {
	    		  if(element!='showSpan'
	    			  &&element!='selectSpan'
	    		      &&element!='employee_search_info'){
	    	       $scope.onGoingQuery = false;
	    	       $scope.showQuery=false;
	    		  }
	    		  
	    	 });
	      return $document.off('click', event);
	});
   
   $scope.queryBranchsWithId= function (buId){
   	var param={};
   	if( buId)
   	param.buId=buId;
   	else{
   		param.buId=bu;
   	}
       OrgService.querySch(param,function(resp){
           if(resp.error == false){
               $scope.branchsList = resp.data;
           }
       });
   }
   
   /**
    * 查询归属团队
    */
   function queryBu() {
       OrgService.queryBu({},function(resp){
           if(!resp.error){
               $scope.buList = resp.data;
           }
       })
   }

    /**
     * 查询岗位
     */
    function queryPost(){
        var param={};
        PostService.queryPost(param,function(resp) {
            if(!resp.error){
                $scope.postList = resp.data;
            }
        });
    };

    $scope.selectedPost = {};
    $scope.setPostPanel = function(emp) {
        $scope.empId = emp.employeeId;
        queryPostByEmpId(emp.employeeId);
        $scope.selectedPost.bu_Id = '';
        $scope.selectedPost.post_Id = '';
        $('#setEmpPostModal').modal('show');
    }

    //按照员工id查询岗位信息
    function queryPostByEmpId(emp_id) {
        EmployeeManageService.queryPostByEmpId({
            employee_id : emp_id
        }, function(resp) {
            if(!resp.error) {
                $scope.postByEmpList=resp.data;
            }
        });
    }

    //点击保存，提交
    $scope.savePost = function() {
        var param = {};
        if(isEmpty($scope.empId)){
            alert("请选择员工");
            return;
        } else {
            param.emp_id = $scope.empId;
        }
        if(isEmpty($scope.selectedPost.bu_Id)){
            alert("请选择团队");
            return;
        }else{
            param.bu_Id = $scope.selectedPost.bu_Id;
        }
        if(isEmpty($scope.selectedPost.post_Id)){
            alert("请选择岗位");
            return;
        } else{
            param.post_Id = $scope.selectedPost.post_Id;
        }

        EmployeeManageService.addPost(param, function(resp){
            if(resp.error==false){
                alert("添加成功");
                queryPostByEmpId(param.emp_id);
                $scope.selectedPost.bu_Id = '';
                $scope.selectedPost.post_Id = '';
            }
        });
    }

    //删除员工岗位
    $scope.removePost=function(post) {
        var param={};
        if(post.id) {
            param.id = post.id;
        } else {
            alert("请选择要删除的岗位");
        }
        EmployeeManageService.removePost(param, function(resp) {
            if(!resp.error) {
                alert("操作成功");
                queryPostByEmpId(post.emp_id);
            }
        });
    }

    /**
     * 启用/禁用员工
     */
    $scope.setStatus = function(emp){
        EmployeeManageService.setStatus({
            id : emp.id
        }, function(resp) {
            if(!resp.error){
                alert("操作成功");
                $scope.queryInfo($scope.pageNum);
            }
        });
    }

    $scope.queryInfo(1);
    queryPost();
    queryBu();
}
/**
 * 
 */
angular.module('ework-ui')
	.controller('ChangeEventCtrl',[
		'$scope',
		'$log',
		'$state',
		'OrgService',
		'workflowComplete',
		'workflowQuery',
		'EmployeeManageService',
		'ChangeEventService',
		ChangeEventCtrl]);

function ChangeEventCtrl($scope,
		$log,
		$state,
		OrgService,
		workflowComplete,
		workflowQuery,
		EmployeeManageService,
		ChangeEventService){
	//异动列表
	$scope.changeList = [];
	$scope.selecteditem={};
	//得分数组
	$scope.scoreList=[];
	//显示模板
	$scope.showModel=false;
	//流程当前的处理分支查询结果被封装在数组中，如"data":["审核同意，去教学总监审核","审核不同意"],"
	$scope.outcomeList=[];

	//审核备注
	$scope.remark=[];
	//处理人
	$scope.handler_nameList=[];
	//处理时间
	$scope.last_update_timeList=[];
	//处理结果
	$scope.handler_opinionList=[];
	$scope.showDetail=1;
    $('title').text('异动管理 | 人力');
	 /**
     * 查询人事异动列表
     */
    function queryChangEventPage(){
    	var param = {};
    	
    	if($scope.changeBuId){
    		var bu_id=$scope.changeBuId;
    		}else{
    			var bu_id="";	
    		}
    	if($scope.changeBranchId){
    		var branch_id=$scope.changeBranchId;
    	}else{
    		var branch_id="";
    	}
    	if($scope.changeType){
    		var type_id=$scope.changeType;
    	}else{
    		var type_id="";
    	}
    	if($scope.changeSeacherinfo){
    		var serach=$scope.changeSeacherinfo;
    	}else{
    		var serach="";
    	}
    	var pageNum=$scope.pageNum;
    	var pageSize=10;
    	$scope.isLoading = 'loading...';
    	param={"pageNum":pageNum,"pageSize":pageSize,"bu_id":bu_id,"branch_id":branch_id,"serach":serach,"type_id":type_id};
    	ChangeEventService.queryChangEventPage(param,function(resp){
    		$scope.isLoading = '';
    		if(resp.nodata==false){
    			$scope.changeList = resp.data;
    			$scope.pageParam = resp.pageParam;
    	    	 if ($scope.pageParam.pageNum > 1 && $scope.pageParam.pageNum < $scope.pageParam.pages) {
    	     	       $scope.paginationBars = [$scope.pageParam.pageNum - 1,$scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
    	         } else if ($scope.pageParam.pageNum == 1 && $scope.pageParam.pages > 1) {
    	     	       $scope.paginationBars = [ $scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
    	         } else if ($scope.pageParam.pageNum == $scope.pageParam.pages && $scope.pageParam.pages > 1) {
    	     	       $scope.paginationBars = [ $scope.pageParam.pageNum - 1,$scope.pageParam.pageNum];
    	         }
    		}else{
    			$scope.changeList=[];
    		}
    	})
    };
    
    $scope.queryInfo=function(pageIndex){
    	$scope.pageNum=pageIndex;
    	queryChangEventPage();
    };
    
    /**
     * 关注与取消关注
     */
   
    $scope.updateFollow=function(changeevent){ 
    	var param={};
    	var IS_EFFECT=null;
    	if(changeevent.tha_is_effect==1){
    		 IS_EFFECT=0;
    	}else{
    		IS_EFFECT=1;
    	}
    	param.event_id=changeevent.id;
    	param.tha_is_effect=IS_EFFECT;
    	param.employee_id=changeevent.employee_id;
    	ChangeEventService.updateFollow(param,function(resp){
    		if(resp.error==false){
    			queryChangEventPage();
    		}
    	})
    }
    
    $scope.toClosePanel = function(){
    	$scope.showModel=false;
        $scope.openPanel = '';
    }
    
    
    /**
     * 选择工作流类型模态框打开
     */
    
    $scope.toAddChangeEventPanel=function(){
    	$("#chooseChange").modal("show");
    	$scope.selecteditem={};
    	$scope.choosed_type_name=null;
    	$scope.model_num="";
    }
    
    /**
     * 选择工作流类型之后跳转到指定页面
     */
   $scope.chooseChangeEvent=function(){
    	$("#chooseChange").modal("hide");
    
    		return true;
   
    }
    

   
   /**
    * 点击详情
    */
    $scope.detail=function(changeevent){
    	$scope.showDetail=0;
    	$scope.task_id=changeevent.task_id;//将任务id保留，后面提交处理时需要调用
    	$scope.EVENT_ID=changeevent.id;//每一个移动事务都有一个id即异动id，保留后面存至数据库
    	$scope.selecteditem={};
    	var param={};
    	param.event_id=changeevent.id;
    	outcome(changeevent.task_id);
    	ChangeEventService.queryDetail(param,function(resp){
    		if(resp.error==false){
    			if(resp.data.post){
    				resp.data.post=parseInt(resp.data.post);
    			}
    			if(resp.data.poslevel){
    				resp.data.poslevel=parseInt(resp.data.poslevel);
    			}
    			$scope.selecteditem=resp.data;
    			$scope.step=resp.data.steps;//获取当前流程到了哪一步
    			//每个模板的审批都是3个步骤
    			$scope.stepNum=3;
    			switch($scope.selecteditem.processKeyModel){
    			case "hrm.DXB_zhuanz":$scope.openPanel='1';break;
    			case "hrm.DXB_school_zhuanz":$scope.openPanel='2';break;
    			//case "hrm.gxh_school_pingjia":$scope.openPanel='3';break;
    			case "hrm.gxh_zhuanz":$scope.openPanel='4';break;
    			//case "hrm.gxh_manger_360kaoping":$scope.openPanel='5';break;
    			case "hrm.gxh_manger_zhuanz":$scope.openPanel='6';break;
    			//case "hrm.gxh_zixun_360kaoping":$scope.openPanel='7';break;
    			case "hrm.gxh_zixun_zhuanz":$scope.openPanel='8';break;
    			default :break;
    			}
    			$scope.showModel=true;
    			if($scope.step>1){
    				getRemark(resp.data);
    			}
    			if($scope.selecteditem.scoreList!==null){
    				strToArr($scope.selecteditem.scoreList);
    			}
    		}
    	})
    	
    }
   
 
    /**
     * 获取之前审批的信息
     */
    function getRemark(data){
    	for(var i=1;i<$scope.step;i++){
    		$scope.handler_opinionList[i-1]=data.list[i].handler_opinion;
    		$scope.remark[i-1]=data.list[i].enclosure;
    		$scope.handler_nameList[i-1]=data.list[i].handler_name;
    		$scope.last_update_timeList[i-1]=data.list[i].last_update_time;
    	}
    }
    
    /**
     * 点击详情后获取数组
     */
    function strToArr(scoreList){
    	var ary = eval('(' + scoreList + ')');
    	for (var i = 0 ;i<ary.length;i++){
    		ary[i];
    	}
    	$scope.scoreList=ary;
    }
    
    
    /**
     * 流程当前的处理分支查询
     */
    function outcome(task_id){
    	var param = {};
    	param.taskId=task_id;
    	workflowQuery.query(param,function(resp){
    		if(resp.error==false){
    			$scope.outcomeList=resp.data;
    		}else{
    			alert(resp.message);return;
    		}
    	})
    }
    
    /**
     * 点击同意或不同意，流程当前分支选择
     */
    $scope.processTask = function(outcome){
        var param = {};
        param.remark=$scope.remark[$scope.step];
        param.taskId = $scope.task_id;
        param.outcome = outcome;
        workflowComplete.post(param,function(resp){
            if(resp.error==false){
                alert("审批成功！");
                updateApply(outcome);
                $scope.showModel=false;
                $scope.openPanel='';
                $scope.queryInfo(1);
            }else{
                alert(resp.message);
            }
        })
    }
    
    /**
     * 审批完成后保存到数据库
     */
    function updateApply(outcome){
    	var param={};
    	param.event_id=$scope.EVENT_ID;
    	param.outcome=outcome;
    	param.remark=$scope.remark[$scope.step-1];
    	param.step=$scope.step+1;
    	var temp=$.trim(outcome);
    	if(temp=='审核不同意'){
    		param.is_effect=0;
    		param.approval_status=3;
    	}else{
    		if($scope.step==$scope.stepNum){
    		param.approval_status=2;
    		param.is_effect=0;
    		}else{
    			param.is_effect=1;
	    		param.approval_status=1;
	    		}
    	}	
    	ChangeEventService.post(param,function(resp){
    		if(resp.error==false){
    			alert("保存成功");
    			$scope.showModel=false;
    			$scope.openPanel='';
    		}
    	})
    	$scope.remark[$scope.step-1]="";
    	$scope.queryInfo(1);
    }
    
 
    
    /**
     * 查询归属团队
     */
    $scope.showEmployeeQuery=function(){
    	$scope.showQuery=true;
    }
    
	/**
     * 选择员工时绑定员工
     */
    $scope.queryEmployeeInfo= function (){
    	var searchInfo=$("#employee_search_info").val();
    	 $scope.onGoingQuery=true;
    	   var param = {};
    	   param.searchInfo=searchInfo;
    	EmployeeManageService.queryEmployeeInfo(param,function(resp){
             if(resp.error == false){
                 $scope.employeeList = resp.data;
             }
         });
    }
    
    /**
     * 选择一个员工
     */
    $scope.selectedEmployee=function(employee){
    	$scope.selecteditem.employeeId=employee.ID;
    	$scope.selecteditem.employeeName=employee.EMPLOYEE_NAME;
    	$scope.onGoingQuery=false;
    	$scope.showQuery=false;
    }
    
   
    /**
     * 根据团队查询所属校区
     */
    $scope.queryBranchsWithId= function (buId){
    	$scope.branchsList=[];
    	$scope.changeList=[];
       	var param={};
       	if( buId)
       	param.buId=buId;
       	else{
       		param.buId=bu;
       	}
           OrgService.querySch(param,function(resp){
               if(resp.error == false){
                   $scope.branchsList = resp.data;
               }
           });
       }
  
       /**
        * 查询归属团队
        */
       function queryBu(){
           OrgService.queryBu({},function(resp){
               if(resp.error == false){
                   $scope.buList = resp.data;
               }
           })
       }
       
       /**
        * 查询异动类型
        */
       function queryChangeEventType(){
    	   ChangeEventService.queryChangeEventType({},function(resp){
    		   if(resp.error==false){
    			   $scope.applicationList=resp.data;
    		   }
    	   })
       }
    
       
       
    $scope.queryInfo(1);
    queryBu();
    queryChangeEventType();
}
/**
 * 
 */
angular.module('ework-ui')
	.controller('ChangeEvent_HtCtrl',[
  		'$scope',
		'$log',
		'$state',
		'OrgService',
		'ChangeEvent_HtService',
		ChangeEvent_HtCtrl]);

function ChangeEvent_HtCtrl($scope,
		$log,
		$state,
		OrgService,
		ChangeEvent_HtService){
	$scope.changeHtList=[];
	//得分数组
	$scope.scoreList=[];
	//显示模板
	$scope.showModel=false;
	//审核备注
	$scope.remark=[];
	//处理人
	$scope.handler_nameList=[];
	//处理时间
	$scope.last_update_timeList=[];
	//处理结果
	$scope.handler_opinionList=[];
	$scope.showDetail=0;
    $('title').text('历史异动 | 人力');
	/**
     * 查询人事异动历史
     */
    function queryChangEvent_HtPage(){
    	var param = {};
    	
    	if($scope.changeBuId){
    		var bu_id=$scope.changeBuId;
    		}else{
    			var bu_id="";	
    		}
    	if($scope.changeBranchId){
    		var branch_id=$scope.changeBranchId;
    	}else{
    		var branch_id="";
    	}
    	if($scope.changeSeacherinfo){
    		var serach=$scope.changeSeacherinfo;
    	}else{
    		var serach="";
    	}
    	
    	var pageNum=$scope.pageNum;
    	var pageSize=10;
    	$scope.isLoading = 'loading...';
    	
    	param={"pageNum":pageNum,"pageSize":pageSize,"bu_id":bu_id,"branch_id":branch_id,"serach":serach};
    	ChangeEvent_HtService.queryChangEvent_HtPage(param,function(resp){
    		$scope.isLoading = '';
    		if(resp.nodata==false){
    			$scope.changeHtList = resp.data;
    			$scope.pageParam = resp.pageParam;
    	    	 if ($scope.pageParam.pageNum > 1 && $scope.pageParam.pageNum < $scope.pageParam.pages) {
    	     	       $scope.paginationBars = [$scope.pageParam.pageNum - 1,$scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
    	         } else if ($scope.pageParam.pageNum == 1 && $scope.pageParam.pages > 1) {
    	     	       $scope.paginationBars = [ $scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
    	         } else if ($scope.pageParam.pageNum == $scope.pageParam.pages && $scope.pageParam.pages > 1) {
    	     	       $scope.paginationBars = [ $scope.pageParam.pageNum - 1,$scope.pageParam.pageNum];
    	         }
    		}else{
    			$scope.changeHtList=[];
    		}
    	})
    };
    
    $scope.queryInfo=function(pageIndex){
    	$scope.pageNum=pageIndex;
    	queryChangEvent_HtPage();
    };
	
    
    $scope.toClosePanel = function(){
    	$scope.showModel=false;
        $scope.openPanel = '';
        
        $scope.handler_opinionList=[];
        $scope.remark=[];
        $scope.handler_nameList=[];
        $scope.last_update_timeList=[];
        $scope.selecteditem={};
    }
    
    
    /**
     * 点击详情
     */
     $scope.detail=function(changeeventHt){
     	$scope.selecteditem={};
     	var param={};
     	param.event_id=changeeventHt.event_id;
     	$scope.step=changeeventHt.step//获取当前流程到了哪一步
     	param.step=changeeventHt.step;
     	ChangeEvent_HtService.queryDetail(param,function(resp){
     		if(resp.error==false){
     			$scope.selecteditem=resp.data;
     			
     			switch($scope.selecteditem.processKey){
     			case "hrm.DXB_zhuanz":$scope.stepNum=3,$scope.openPanel='1';break;
     			case "hrm.DXB_school_zhuanz":$scope.stepNum=3,$scope.openPanel='2';break;
     			case "hrm.gxh_school_pingjia":$scope.stepNum=2,$scope.openPanel='3';break;
     			case "hrm.gxh_zhuanz":$scope.stepNum=3,$scope.openPanel='4';break;
     			case "hrm.gxh_manger_360kaoping":$scope.stepNum=2,$scope.openPanel='5';break;
     			case "hrm.gxh_manger_zhuanz":$scope.stepNum=3,$scope.openPanel='6';break;
     			case "hrm.gxh_zixun_360kaoping":$scope.stepNum=2,$scope.openPanel='7';break;
     			case "hrm.gxh_zixun_zhuanz":$scope.stepNum=3,$scope.openPanel='8';break;
     			default :break;
     			}
     			$scope.showModel=true;
     			if($scope.step>1){
     				getRemark(resp.data);
     			}
     			if($scope.selecteditem.scoreList!==null){
     				strToArr($scope.selecteditem.scoreList);
     			}
     		}
     	})
     	
     }
    
  
     /**
      * 获取之前审批的信息
      */
     function getRemark(data){
     	for(var i=1;i<$scope.step;i++){
     		$scope.handler_opinionList[i-1]=data.list[i].handler_opinion;
     		$scope.remark[i-1]=data.list[i].enclosure;
     		$scope.handler_nameList[i-1]=data.list[i].handler_name;
     		$scope.last_update_timeList[i-1]=data.list[i].last_update_time;
     	}
     }
     
     /**
      * 点击详情后获取数组
      */
     function strToArr(scoreList){
     	var ary = eval('(' + scoreList + ')');
     	for (var i = 0 ;i<ary.length;i++){
     		ary[i];
     	}
     	$scope.scoreList=ary;
     }
    
    /**
     * 根据团队查询所属校区
     */
    $scope.queryBranchsWithId= function (buId){
       	var param={};
       	if( buId)
       	param.buId=buId;
       	else{
       		param.buId=bu;
       	}
           OrgService.querySch(param,function(resp){
               if(resp.error == false){
                   $scope.branchsList = resp.data;
               }
           });
       }
       
       /**
        * 查询归属团队
        */
       function queryBu(){
           OrgService.queryBu({},function(resp){
               if(resp.error == false){
                   $scope.buList = resp.data;
               }
           })
       }
    
    $scope.queryInfo(1);
    queryBu();
}
/**
 * Created by Liyong.zhu on 2016/6/6.
 */
angular.module('ework-ui')
    .controller('DictCtrl', [
        '$scope',
        '$log',
        '$state',
        'DictsService',
        'DictTypeItemService',
        'DictItemService',
        DictCtrl]);

function DictCtrl($scope,
                  $log,
                  $state,
                  DictsService,
                  DictTypeItemService,
                  DictItemService){

    $scope.dictDatas = [];
    $scope.dictSubDatas = [];
    $scope.selectedRow = [];
    $scope.itemOperateType = '';
    $scope.selectedTypeItem = {};
    $scope.selectedItem = {};
    /**
     * 单选一个字典定义
     * @param row
     */
    $scope.singleCheckRow = function(row){ 
        $.each($scope.dictDatas,function(i,m){
            m.checked = false;
        });
        if(row.checked){
            row.checked = false;
        }else{
            row.checked = true;
         
            $scope.dictSubDatas = row.items;
            if( !row.items)
                $scope.dictSubDatas=[];
        }
    }

    /**
     * 打开添加字典类型的面板
     */
    $scope.toAddDicTypeItem = function(){
    	$scope.itemOperateDicType = 'add';
        $('#dictTypeItemPanel').modal('show');	
    }
    
    /**
     * 打开添加子项的面板
     */
    $scope.toAddItem = function(){
    	var row = null;
        $.each($scope.dictDatas,function(i,m){
            if(m.checked){
                row = m;
            }
        });

        if(!row){
            alert("请选择左侧字典类型！");
        }else{
            $scope.selectedRow = row;
            $scope.selectedItem = {};
            $scope.itemOperateType = 'add';
            $('#dictItemPanel').modal({"show":true,"backdrop":'static'});
        }
    }

    $scope.toUpdateItem = function(item){
        var row = null;
        $.each($scope.dictDatas,function(i,m){
            if(m.checked){
                row = m;
            }
        });

        if(!row){
            alert("请选择左侧字典类型！");
        }else{
            $scope.selectedRow = row;
            $scope.selectedItem = item;
            $scope.itemOperateType = 'update';
            $('#dictItemPanel').modal({"show":true,"backdrop":'static'});
        }
    }

    $scope.toDeleteItem = function(item){
    	var r=confirm("确认删除吗?");
    	if(r){
    		$scope.deleteSubItem(item);
    	}
    	
       /* var row = null;
        $.each($scope.dictDatas,function(i,m){
            if(m.checked){
                row = m;
            }
        });

        if(!row){
            alert("请选择左侧字典类型！");
        }else{
            $scope.selectedRow = row;
            $scope.selectedItem = item;
            $scope.itemOperateType = 'delete';
            $('#dictItemPanel').modal('show');
        }*/
    }

    /**
     * 添加字典类型定义
     */
  $scope.addDicTypeItem = function(){
	  var item={};
       $log.log("item name is " + $scope.selectedTypeItem.name + ",item id is " + $scope.selectedTypeItem.id + ",remark is " + $scope.selectedTypeItem.remark);
       //$scope.selectedTypeItem.id = $scope.selectedRow.id;
       $scope.selectedTypeItem.mod = "HRM";
       $scope.selectedTypeItem.status = "1";
       if($scope.selectedTypeItem.name == "" || $scope.selectedTypeItem.name == null){
        	   alert("字典名称不能为空");
   				return;
    	   }
       if($scope.selectedTypeItem.key == "" || $scope.selectedTypeItem.key == null){
    	   alert("字典关键字不能为空");
    	   return;
       }
       DictTypeItemService.add( $scope.selectedTypeItem,function(resp){
    	   if(resp.error == false){
               $('#dictTypeItemPanel').modal('hide');
               alert("添加成功！");
               $scope.selectedTypeItem.id=resp.id;
               $scope.dictDatas[ $scope.dictDatas.length]= $scope.selectedTypeItem;
               queryDicts();
           }else{
               alert("添加失败！失败信息："+resp.message);
           }
       })
   }
    
    $scope.saveDicTypeItem = function(){
            $scope.addDicTypeItem();
   }
    	
    /**
     * 添加子项定义
     */
    $scope.addSubItem = function(){
    	 var item={};
        $log.log("item name is " + $scope.selectedItem.name + ",item id is " + $scope.selectedRow.id + ",remark is " + $scope.selectedItem.remark);
        $scope.selectedItem.dictTypeId = $scope.selectedRow.id;
        if($scope.selectedItem.name == "" || $scope.selectedItem.name == null){
         	   alert("子项名称不能为空");
    				return;
    			}
        if($scope.selectedItem.code == "" || $scope.selectedItem.code == null){
        	alert("子项编码不能为空");
        	return;
        }
        DictItemService.add( $scope.selectedItem,function(resp){
        	 if(resp.error == false){
                $('#dictItemPanel').modal('hide');
                alert("添加成功！");
                $scope.selectedItem.id=resp.data;
                $scope.dictSubDatas[ $scope.dictSubDatas.length]= $scope.selectedItem;
            }else{
                alert("添加失败！失败信息："+resp.message);
            }
        })
    }

    $scope.updateSubItem = function(){
        $log.log("item name is " + $scope.selectedItem.name + ",remark is " + $scope.selectedItem.remark);
        $scope.selectedItem.type = $scope.selectedRow.id;
        DictItemService.update($scope.selectedItem,function(resp){
            if(resp.error == false){
                $('#dictItemPanel').modal('hide');
                alert("修改成功！");
            }else{
                alert("修改失败！失败信息："+resp.message);
            }
        })
    }

    $scope.deleteSubItem = function(dicData){
    	$log.log(dicData.id);
        $scope.selectedItem.id = dicData.id;
        DictItemService.remove($scope.selectedItem,function(resp){
            if(resp.error == false){
                $('#dictItemPanel').modal('hide');
                alert("删除成功！");
                removeDate(dicData.id);
            }else{
                alert("删除失败！失败信息："+resp.message);
            }
        });
    }

    $scope.saveItem = function(){
        if($scope.itemOperateType=='add'){
            $scope.addSubItem();
        }else if($scope.itemOperateType=='update'){
            $scope.updateSubItem();
        }else if($scope.itemOperateType=='delete'){
            $scope.deleteSubItem();
        }
    }
    
    function removeDate(id){
    	 $.each($scope.dictSubDatas,function(i,model){
    		 if(model.id==id){
    			 $scope.dictSubDatas.splice(i,1);//溢出元素
    		 }
    		 
    	 });
    	
    }

    /**
     * 查询字典
     */
    function queryDicts(){
        var param = {};
        DictsService.get(param,function(resp){
            if(resp.error == 'false'||resp.error ==false){
            	$log.log( resp.data[0].items);
                $scope.dictDatas = resp.data;
            }
        })
    }
    
     queryDicts();
}
/**
 * 
 */
angular.module('ework-ui')
    .controller('EmployeeCtrl', [
        '$scope',
        '$log',
        '$state',
        '$cookieStore',
        'OrgService',
        'PostService',
        'DictItemService',
        'EmployeeExtService',
        'EmployeeManageService',
        EmployeeCtrl]);

function EmployeeCtrl($scope,
                  $log,
                  $state,
                  $cookieStore,
                  OrgService,
                  PostService,
                  DictItemService,
                  EmployeeExtService,
                  EmployeeManageService){
	//员工列表
	$scope.employeeList = [];
	$scope.itemOperateType = '';
    $scope.selectedItem = {};
    $scope.employee = [];
    $scope.edu={};
    $scope.paginationBars = [];
    $scope.enterTypeList=[];
    //选中的查询条件
    $scope.selected={};
    
    //选中的员工岗位信息
    $scope.selectedPost={};
    
    $scope.setPostPanel=false;
    
    //岗位查询列表
    $scope.postList=[];
    $scope.detailPage = 'templates/hrm/employee/employee_info.html?_='+(new Date()).getTime();
    $('title').text('员工管理 | 人力');

    $scope.test=1;
    /**
     * 查询员工列表
     */
    function queryEmployee(){
    	var param = {};
    	$scope.employeeList=[];

    	/*if($scope.selectedOrgId){
    		param.org_id=$scope.selectedOrgId;
    		}*/
    	
    	if($scope.selected.Dept!=null && $scope.selected.Dept!=''){
    		param.dept=$scope.selected.Dept;
    		}else{
    			param.dept='';
    		}
    	if($scope.selected.PostId!=null){
    		param.post=$scope.selected.PostId;
    	}else{
    		param.post=-1;
    	}
    	if($scope.selected.EnterType!=null){
    		param.enterType=$scope.selected.EnterType;
    	}else{
    		param.enterType=-1;
    	}
    	if($scope.selected.Name!=null && $scope.selected.Name!=''){
    		param.employee_name=$scope.selected.Name;
    	}else{
    		param.employee_name='';
    	}
    	$scope.isLoading = 'loading...';
    	param.pageNum=$scope.pageNum;
		param.pageSize=10;
    	/*$scope.pageParam = {
    			pageNum :$scope.pageNum,
    			pageSize : 10
    		};
    	param.pageParam = $scope.pageParam;*/

    	EmployeeManageService.queryEmployeeForPage(param,function(resp){
    		$scope.isLoading = '';
    		if(resp.nodata==true){
    			$scope.employeeList = resp.data;
    			$scope.pageParam = resp.pageParam;
    	    	
    	    	 if ($scope.pageParam.pageNum > 1 && $scope.pageParam.pageNum < $scope.pageParam.pages) {
    	     	       $scope.paginationBars = [$scope.pageParam.pageNum - 1,$scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
    	         } else if ($scope.pageParam.pageNum == 1 && $scope.pageParam.pages > 1) {
    	     	       $scope.paginationBars = [ $scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
    	         } else if ($scope.pageParam.pageNum == $scope.pageParam.pages && $scope.pageParam.pages > 1) {
    	     	       $scope.paginationBars = [ $scope.pageParam.pageNum - 1,$scope.pageParam.pageNum];
    	         }
    		}
    	})
    };
    
    $scope.queryInfo=function(pageIndex){
    	$scope.pageNum=pageIndex;
    	queryEmployee();
    };
    
    /**
	 * 查询数据字典子典所有数据
	 */
    function queryDictSub(){
    	var param={};
    	DictItemService.queryDictSubAll(param,function(resp){
    		if(resp.error==false){
    			$scope.cache=resp.data;
    			$scope.enterTypeList=$scope.cache.ENTERTYPE;
    			$scope.poslevelList=$scope.cache.POSLEVEL;
    		}
    	})
    }
    
    
    /**
	 * 打开员工档案管理的面板
	 */    
    $scope.toQueryItem = function(emp){
    	/*$scope.addEmp=false;
    	$('#EmpPanel').modal({"show":true,"backdrop":'static'});
    	$scope.selectedEmp=emp;		//提取选中的员工id方便查询教育经历 ，工作经历等信息
    	//param.id = emp.id;
    	
    	getRet(emp);
    	
        $scope.itemOperateType = 'query';
	    queryEmployeeEdu();
	    queryEmployeeExp();
	    queryEmployeeSum();
	    queryEmployeeRew();*/
    	
        return true;
	};
	
	/**
	 * 查询选中的员工定义表中的动态字段
	 */
	function getRet(emp){
		var param={};
    	EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.ret=resp.data;
    		}
    		getEmployeeInfo(emp);
    	});
	}
	
	/**
	 * 查询员工信息表中的基础信息
	 */
	function getEmployeeInfo(emp){
		var param={};
    	param.id = emp.id;
		EmployeeManageService.queryField(param,function(resp){
            if(resp.error == false){
                $scope.employee = resp.data;
            }
            getSelectedEmp($scope.ret,$scope.employee);
        })
	}
	
	/**
	 * 查询动态的员工基础信息
	 */
	function getSelectedEmp(ret,employee){
		$scope.temp=[];
        if(ret && ret.length){
            for(var i=0;i<ret.length;i++){
                var str=ret[i].fieldKey;
                ret[i].fieldKey=employee[0][str];
            };
            //再次进行遍历将数据字典子项加入集合
            for(var i=0;i<ret.length;i++){
                if(ret[i].dictTypeName!=null){
                    ret[i].selected=$scope.cache[ret[i].dictTypeName];
                }
            }
            $scope.temp=ret;
        }


	}
	
	/**
	 * 准备添加员工基本信息
	 */
	$scope.toAddEmpPanel = function(){
		$scope.temp=[];
		var param={};
		$scope.selectedEmp = {};
		$scope.addEmp=true;
//	    $('#EmpPanel').modal('show');
	    EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.extField=resp.data;
    		}
    		for(var i=0;i<$scope.extField.length;i++){
    			if($scope.extField[i].dictTypeName!=null){
    				$scope.extField[i].fieldKey=null;
    				$scope.extField[i].selected=$scope.cache[$scope.extField[i].dictTypeName];
    			}else{
    				$scope.extField[i].fieldKey=null;
    			}
    		}
    		$scope.temp=$scope.extField;
    	});
	};
	

	
	

	
	/**
	 * 去添加教育经历
	 */
	$scope.toAddEdu = function(){
		$scope.eduUpdate=false;
		$scope.selectedEdu={};
		$("#eduModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改教育经历
	 */
	$scope.toUpdateEdu = function(edu){
		$scope.eduUpdate=true;
		$("#eduModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedEdu=edu;
	}
	
	/**
	 * 去删除教育经历
	 */
	$scope.toDeleteEdu = function(edu){
		$scope.eduDelete=true;
		$scope.selectedEdu=edu;
	}
	
	
	/**
	 * 去添加工作经历
	 */
	$scope.toAddExp = function(){
		$scope.expUpdate=false;
		$scope.selectedExp={};
		$("#expModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改工作经历
	 */
	$scope.toUpdateExp = function(exp){
		$scope.expUpdate=true;
		$("#expModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedExp=exp;
	}
	
	/**
	 * 去删除工作经历
	 */
	$scope.toDeleteExp = function(exp){
		$scope.expDelete=true;
		$scope.selectedExp=exp;
	}
	
	
	/**
	 * 去添加工作总结
	 */
	$scope.toAddSum = function(){
		$scope.sumUpdate=false;
		$scope.selectedSum={};
		$("#sumModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改工作总结
	 */
	$scope.toUpdateSum = function(sum){
		$scope.sumUpdate=true;
		$("#sumModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedSum=sum;
	}
	
	/**
	 * 去删除工作总结
	 */
	$scope.toDeleteSum = function(sum){
		$scope.sumDelete=true;
		$scope.selectedSum=sum;
	}
	
	
	/**
	 * 去添加奖惩信息
	 */
	$scope.toAddRew = function(){
		$scope.rewUpdate=false;
		$scope.selectedRew={};
		$("#rewModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改奖惩信息
	 */
	$scope.toUpdateRew = function(rew){
		$scope.rewUpdate=true;
		$("#rewModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedRew=rew;
	}
	
	/**
	 * 去删除奖惩信息
	 */
	$scope.toDeleteRew = function(rew){
		$scope.rewDelete=true;
		$scope.selectedRew=rew;
	}
	
	
	/**
	 * 添加员工基础信息
	 */
	$scope.addEmployee = function(){
		var param={};		
		/*if($scope.selectedItem.EMPLOYEE_NAME==""||$scope.selectedItem.EMPLOYEE_NAME==null){
				alert("姓名不能为空");
				return;
			}
		if($scope.selectedItem.ENCODING==""||$scope.selectedItem.ENCODING==null){
			alert("工号不能为空");
			return;
		}*/
		queryExtInfo();
		var retEmp=$scope.retEmp;
		for(var i=0;i<retEmp.length;i++){
			//过滤，获取填写过的信息，若字段值为null，MyBatis 插入空值时，需要指定JdbcType，否则报错
			if($scope.temp[i].fieldKey!=null){
				var str=retEmp[i].fieldKey;
				param[str]=$scope.temp[i].fieldKey;
				}
		}
		//添加任职信息
		param.work=$scope.selectedEmp;
		EmployeeManageService.add(param,function(resp){
			 if(resp.error == false){
//				$('#EmpPanel').modal('hide');
				alert("添加成功");
				$scope.addEmp=false;
				$scope.employeeList[$scope.employeeList.length]=param;
				queryEmployee();
			}else{
				alert("添加失败！失败信息："+resp.message);
			}
		})
	};
	
	/**
	 * 修改员工档案
	 */
	$scope.updateEmployee = function(){
		/*if($scope.selectedEmp.EMPLOYEE_NAME==""||$scope.selectedEmp.EMPLOYEE_NAME==null){
				alert("姓名不能为空");
				return;
			}
		if($scope.selectedEmp.ENCODING==""||$scope.selectedEmp.ENCODING==null){
			alert("员工号不能为空");
			return;
		}*/
		var param={};
		$scope.addEmp=false;
		queryExtInfo();
		var retEmp=$scope.retEmp;
		for(var i=0;i<retEmp.length;i++){
			var str=retEmp[i].fieldKey;
			if($scope.temp[i].fieldKey!=null ){
				$scope.employee[0][str]=$scope.temp[i].fieldKey;
			}
		}
		
		$scope.employee[0].id=$scope.selectedEmp.id;
		param=$scope.employee[0];
		EmployeeManageService.updateEmployeeStatic($scope.selectedEmp,function(resp){
			if(resp.error==false){
			
			}
		})
		EmployeeManageService.update(param,function(resp){
			 if(resp.error==false){
//				$('#EmpPanel').modal('hide');
				alert("修改成功");
				queryEmployee();
			}else{
				alert("修改失败，失败信息："+resp.message);
			}
		});
	};
	
	
	
	/**
	 * 再次查询员工定义表中启用的字段信息，获取员工信息的key
	 */
	function queryExtInfo(){
		var param={};
		EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.retEmp=resp.data;
    		}
    	});
	}
	
	/**
	 * 添加员工教育经历
	 */
	$scope.addEdu = function(selectedEdu){
		var param = {};
		selectedEdu.employee_id=$scope.selectedEmp.id;
		param=selectedEdu;
		EmployeeManageService.addEmployeeEdu(param,function(resp){
			if(resp.error==false){
				alert("添加员工教育经历成功");
				$("#eduModal").modal("hide");
				queryEmployeeEdu();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 修改员工教育经历
	 */
	$scope.updateEdu = function(selectedEdu){
		var param = {};
		param = selectedEdu;
		EmployeeManageService.updateEmployeeEdu(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#eduModal").modal("hide");
				queryEmployeeEdu();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 删除员工教育经历
	 */
	$scope.deleteEdu = function(){
		var param = {};
		param.id=$scope.selectedEdu.id;
		EmployeeManageService.deleteEmployeeEdu(param,function(resp){
			if(resp.error==false){
				alert("删除员工教育经历成功");
				$("#DelModal").modal("hide");
				queryEmployeeEdu();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.eduDelete=false;
		});
	}
	
	/**
	 * 查询员工教育经历
	 */
	function queryEmployeeEdu(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeEdu(param,function(resp){
			if(resp.error==false){
				$scope.employeeEdu=resp.data;
			}
		});
	}
	
	/**
	 * 查询员工工作经历
	 */
	function queryEmployeeExp(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeExp(param,function(resp){
			if(resp.error==false){
				$scope.employeeExp=resp.data;
			}
		});
	}
	
	/**
	 * 添加员工工作经历
	 */
	$scope.addExp = function(selectedExp){
		var param = {};
		selectedExp.employee_id=$scope.selectedEmp.id;
		param=selectedExp;
		EmployeeManageService.addEmployeeExp(param,function(resp){
			if(resp.error==false){
				alert("添加员工工作经历成功");
				$("#expModal").modal("hide");
				queryEmployeeExp();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 修改员工工作经历
	 */
	$scope.updateExp = function(selectedExp){
		var param = {};
		param = selectedExp;
		EmployeeManageService.updateEmployeeExp(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#expModal").modal("hide");
				queryEmployeeExp();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 删除员工工作经历
	 */
	$scope.deleteExp = function(){
		var param = {};
		param.id=$scope.selectedExp.id;
		EmployeeManageService.deleteEmployeeExp(param,function(resp){
			if(resp.error==false){
				alert("删除员工工作经历成功");
				$("#DelModal").modal("hide");
				queryEmployeeExp();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.expDelete=false;
		});
	}
	
	/**
	 * 查询员工工作总结
	 */
	function queryEmployeeSum(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeSum(param,function(resp){
			if(resp.error==false){
				$scope.employeeSum=resp.data;
			}
		});
	}
	
	/**
	 * 添加员工工作总结
	 */
	$scope.addSum = function(selectedSum){
		var param = {};
		selectedSum.employee_id=$scope.selectedEmp.id;
		param=selectedSum;
		EmployeeManageService.addEmployeeSum(param,function(resp){
			if(resp.error==false){
				alert("添加员工工作总结成功");
				$("#sumModal").modal("hide");
				queryEmployeeSum();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 修改员工工作总结
	 */
	$scope.updateSum = function(selectedSum){
		var param = {};
		param = selectedSum;
		EmployeeManageService.updateEmployeeSum(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#sumModal").modal("hide");
				queryEmployeeSum();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 删除员工工作总结
	 */
	$scope.deleteSum = function(){
		var param = {};
		param.id=$scope.selectedSum.id;
		EmployeeManageService.deleteEmployeeSum(param,function(resp){
			if(resp.error==false){
				alert("删除员工工作总结成功");
				$("#DelModal").modal("hide");
				queryEmployeeSum();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.sumDelete=false;
		});
	}
	
	/**
	 * 查询员工奖惩信息
	 */
	function queryEmployeeRew(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeRew(param,function(resp){
			if(resp.error==false){
				$scope.employeeRew=resp.data;
			}
		});
	}
	
	/**
	 * 添加员工奖惩信息
	 */
	$scope.addRew = function(selectedRew){
		var param = {};
		selectedRew.employee_id=$scope.selectedEmp.id;
		param=selectedRew;
		EmployeeManageService.addEmployeeRew(param,function(resp){
			if(resp.error==false){
				alert("添加员工奖惩信息成功");
				$("#rewModal").modal("hide");
				queryEmployeeRew();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 修改员工奖惩信息
	 */
	$scope.updateRew = function(selectedRew){
		var param = {};
		param = selectedRew;
		EmployeeManageService.updateEmployeeRew(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#rewModal").modal("hide");
				queryEmployeeRew();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		});
	}
	
	/**
	 * 删除员工奖惩信息
	 */
	$scope.deleteRew = function(){
		var param = {};
		param.id=$scope.selectedRew.id;
		EmployeeManageService.deleteEmployeeRew(param,function(resp){
			if(resp.error==false){
				alert("删除员工奖惩信息成功");
				$("#DelModal").modal("hide");
				queryEmployeeRew();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.rewDelete=false;
		});
	}
	
	/**
     * 上传头像
     */
	$scope.headPic=function(){
		//var selectedEmpId=$scope.selectedEmp.id;
		window.location.href='templates/hrm/uploadImage/headPic?selectedEmpId='+$scope.selectedEmp.id;
		
	}
	
	
	 /**
     * 查询归属组织
     */
   function queryOrg(){
    	var param={};
        OrgService.get(param,function(resp){
            if(resp.error == false){
                $scope.orgs = resp.data;
            }
        });
    };
   
   
   /**
    * 查询岗位
    */
   function queryPost(){
	   var param={};
	   PostService.queryPost(param,function(resp){
		   if(resp.error == false){
			   $scope.postList = resp.data;
		   }
	   });
   };

    $scope.cancelPanel = function(){
        $scope.addEmp = false;
    }

    $scope.cancelSetPostPanel=function(){
    	$scope.addEmp = false;
    	$scope.empId='';
    	$scope.queryInfo(1);
    }
    
    $scope.setPostPanel=function(emp){
    	$scope.addEmp = true;
    	$scope.empId=emp.id;
    	queryPostByEmpId(emp.id);
    }
    
    
    //按照员工id查询岗位信息
    function queryPostByEmpId(emp_id){
    	var param={};
    	param.employee_id=emp_id;
    	EmployeeManageService.queryPostByEmpId(param,function(resp){
    		if(resp.error==false){
    			$scope.postByEmpList=resp.data;
    		}
    	});
    }
   
    
    //点击保存，提交
    $scope.savePost=function(){
    	console.log($scope.selectedPost);
    	var param={};
    	if($scope.empId!=null&&$scope.empId!=''){
    		param.emp_id=$scope.empId;
    	}else{
    		alert("请选择员工");
    		return;
    	}
    	if($scope.selectedPost.bu_Id!=null && $scope.selectedPost.bu_Id!=''){
    		param.bu_Id=$scope.selectedPost.bu_Id;
    	}else{
    		alert("请选择团队");
    		return;
    	}
    	if($scope.selectedPost.branch_Id!=null && $scope.selectedPost.branch_Id!=''){
    		param.branch_Id=$scope.selectedPost.branch_Id;
    	}else{
    		alert("请选择校区");
    		return;
    	}
    	if($scope.selectedPost.post_Id!=null && $scope.selectedPost.post_Id!=''){
    		param.post_Id=$scope.selectedPost.post_Id;
    	} else{
    		alert("请选择岗位");
    		return;
    	}
    
    	EmployeeManageService.addPost(param,function(resp){
    		if(resp.error==false){
    			alert("添加成功");
    			queryPostByEmpId(param.emp_id);
    			$scope.bu_Id='';
    	    	$scope.branch_Id='';
    	    	$scope.post_Id='';
    		}
    	});
    }
   
    //删除员工岗位
    $scope.removePost=function(d){
    	var param={};
    	if(d.id!=null && d.id!=''){
    		param.id=d.id;
    	}else{
    		alert("请选择要删除的岗位");
    	}
    	EmployeeManageService.removePost(param,function(resp){
    		if(resp.error==false){
    			alert("操作成功");
    			queryPostByEmpId(d.emp_id);
    		}
    	});
    }
   
    
    /**
     * 查询归属团队
     */
    function queryBu(){
        OrgService.queryBu({},function(resp){
            if(resp.error == false){
                $scope.buList = resp.data;
            }
        });
    }
    
    //根据团队id查询校区
    $scope.changeBuId=function(buId){
    	var param={};
    	param.buId=buId;
    	OrgService.querySch(param,function(resp){
               if(resp.error == false){
                   $scope.branchsList = resp.data;
                   $scope.branchsList.unshift(
                	{
                		id:'-1',
                		org_name:'全部校区'
                	}	   
                   );
               }
           });
    }
    
    /**
     * 启用/禁用员工
     */
    $scope.setStatus=function(emp){
    	var param={};
    	param.id=emp.id;
    	EmployeeManageService.setStatus(param,function(resp){
    		if(resp.error==false){
    			alert("操作成功");
    			$scope.queryInfo($scope.pageNum);
    		}
    	});
    }
    
   
    $scope.queryInfo(1);
    queryPost();
  //查询数据字典所有子项
	queryDictSub();
	queryBu();

}



angular.module('ework-ui').controller('erp_employeeListModalController', [
  '$rootScope',
  '$scope',
  '$log',
  '$uibMsgbox',
  '$uibModalInstance',
  'counselorType',
  'modalTitle',
  'erp_employeeService',
  erp_employeeListModalController
])

function erp_employeeListModalController(
  $rootScope,
  $scope,
  $log,
  $uibMsgbox,
  $uibModalInstance,
  counselorType,
  modalTitle,
  erp_employeeService
) {
  $scope.relationList = [];
  $scope.searchInfo = {
    employeeName: ''
  }
  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 8,
    // showInfos: false,
    onChange: function () {
      $scope.getEmployeeList();
    }
  }
  $scope.modalTitle = modalTitle || '员工列表';
  $scope.counselorType = counselorType || 1;
  $scope.employeeList = []
  $scope.selectedemployee = null;
  $scope.onEmployeeSelected = function(employee) {
    if ($scope.selectedemployee && $scope.selectedemployee.id == employee.id) {
      $scope.selectedemployee = null;
    } else {
      $scope.selectedemployee = employee;
    }
  }
  $scope.getEmployeeList = function() {
    // var _modalInstance= $uibMsgbox.waiting('加载中，请稍候...');
    erp_employeeService.query({
      currentPage: $scope.pageConf.currentPage,
      pageSize: $scope.pageConf.itemsPerPage,
      counselor_type: $scope.counselorType,
      employee_name: $scope.searchInfo.employeeName
    }, function(resp) {
      // _modalInstance.close();
      $scope.employeeList = resp.data;
      $scope.pageConf.totalItems = resp.total || 0;
    })
  }
  $scope.confirm = function () {
    if ($scope.selectedemployee) {
      $uibModalInstance.close($scope.selectedemployee);
    } else {
      $uibMsgbox.alert('请选择老师！');
    }
  }
  $scope.getEmployeeList();
}

/**
 * Created by Liyong.zhu on 2017/1/17.
 */
/**
 *
 */
angular.module('ework-ui')
    .controller('hrm_uploadImgSelfController', [
        '$scope',
        '$log',
        '$state',
        '$rootScope',
        'hrmUploadImgService',
        hrm_uploadImgSelfController]);

function hrm_uploadImgSelfController(
                      $scope,
                      $log,
                      $state,
                      $rootScope,
                      hrmUploadImgService
    ){

    var options =
    {
        thumbBox: '.thumbBox',
        spinner: '.spinner',
        imgSrc: 'images/avatar.jpg'
    }
    var cropper = $('.imageBox').cropbox(options);
    $('#upload-file').on('change', function(){
        var reader = new FileReader();
        reader.onload = function(e) {
            options.imgSrc = e.target.result;
            cropper = $('.imageBox').cropbox(options);
        }
        reader.readAsDataURL(this.files[0]);
        this.files = [];
    })
    $('#btnCrop').on('click', function(){
        var img = cropper.getDataURL();
        $('.cropped').html('');
        $('.cropped').append('<img src="'+img+'" align="absmiddle" style="width:15%;margin-top:4px;border-radius:1000px;box-shadow:0px 0px 12px #7E7E7E;float:left;margin-left:15px;" >');
        $('.cropped').append('<img src="'+img+'" align="absmiddle" style="width:25%;margin-top:4px;border-radius:1000px;box-shadow:0px 0px 12px #7E7E7E;float:left; margin-left:20px;">');
        $('.cropped').append('<img src="'+img+'" align="absmiddle" style="width:35%;margin-top:4px;border-radius:1000px;box-shadow:0px 0px 12px #7E7E7E;float:left; margin-left:20px;">');
    })
    $('#btnZoomIn').on('click', function(){
        cropper.zoomIn();
    })
    $('#btnZoomOut').on('click', function(){
        cropper.zoomOut();
    })

    //暂存的订单
    $scope.employeeId = $rootScope.curEmployee.id;

    $scope.uploadSave = function(){
        var imageData = cropper.getDataURL();
        if(imageData == null || $.trim(imageData.length) == 0){
            return false;
        }
        //openWait = true;
        var param = {};
        param._imageData = imageData;
        hrmUploadImgService.post(param,function(resp){
            if(resp.code == 200){
                $scope.imageUrl = resp.data;
                updateImage();
            }else{
                alert('上传失败咯！' + resp.msg);
            }
        });
    }



    function updateImage(){
        var param={};
        param.id=employeeId;
        param.staff_head=imageUrl;
        param=JSON.stringify(param);
        hrmUpdateEmployeeImgService.put(param,function(resp){
            if(!resp.error){
                alert("保存成功！");
            }else{
                alert("保存路径失败了!"+resp.msg);
            }
        });

    };
}



/**
 * Created by Liyong.zhu on 2017/1/17.
 */
/**
 *
 */
angular.module('ework-ui')
    .controller('hrm_uploadImgController', [
        '$scope',
        '$log',
        '$state',
        '$rootScope',
        'hrmUploadImgService',
        hrm_uploadImgController]);

function hrm_uploadImgController(
                      $scope,
                      $log,
                      $state,
                      $rootScope,
                      hrmUploadImgService
    ){

    var options =
    {
        thumbBox: '.thumbBox',
        spinner: '.spinner',
        imgSrc: 'images/avatar.jpg'
    }
    var cropper = $('.imageBox').cropbox(options);
    $('#upload-file').on('change', function(){
        var reader = new FileReader();
        reader.onload = function(e) {
            options.imgSrc = e.target.result;
            cropper = $('.imageBox').cropbox(options);
        }
        reader.readAsDataURL(this.files[0]);
        this.files = [];
    })
    $('#btnCrop').on('click', function(){
        var img = cropper.getDataURL();
        $('.cropped').html('');
        $('.cropped').append('<img src="'+img+'" align="absmiddle" style="width:15%;margin-top:4px;border-radius:1000px;box-shadow:0px 0px 12px #7E7E7E;float:left;margin-left:15px;" >');
        $('.cropped').append('<img src="'+img+'" align="absmiddle" style="width:25%;margin-top:4px;border-radius:1000px;box-shadow:0px 0px 12px #7E7E7E;float:left; margin-left:20px;">');
        $('.cropped').append('<img src="'+img+'" align="absmiddle" style="width:35%;margin-top:4px;border-radius:1000px;box-shadow:0px 0px 12px #7E7E7E;float:left; margin-left:20px;">');
    })
    $('#btnZoomIn').on('click', function(){
        cropper.zoomIn();
    })
    $('#btnZoomOut').on('click', function(){
        cropper.zoomOut();
    })

    //暂存的订单
    $scope.employeeId = $("#rootIndex_employeeId").val();

    $scope.uploadSave = function(){
        var imageData = cropper.getDataURL();
        if(imageData == null || $.trim(imageData.length) == 0){
            return false;
        }
        //openWait = true;
        var param = {};
        param._imageData = imageData;
        hrmUploadImgService.post(param,function(resp){
            if(resp.code == 200){
                $scope.imageUrl = resp.data;
                updateImage();
            }else{
                alert('上传失败咯！' + resp.msg);
            }
        });
    }



    function updateImage(){
        var param={};
        param.id=employeeId;
        param.staff_head=imageUrl;
        param=JSON.stringify(param);
        hrmUpdateEmployeeImgService.put(param,function(resp){
            if(!resp.error){
                alert("保存成功！");
            }else{
                alert("保存路径失败了!"+resp.msg);
            }
        });

    };
}



/**
 * 
 */
angular.module('ework-ui')
    .controller('EmployeeExtCtrl', [
        '$scope',
        '$log',
        '$state',
        'EmployeeExtService',
        'DictsService',
        EmployeeExtCtrl]);

function EmployeeExtCtrl($scope,
                  $log,
                  $state,
                  EmployeeExtService,
                  DictsService){
	$scope.employeeExtDatas = [];
	$scope.dictDatas = [];
	$scope.itemOperateType = '';
    $scope.selectedItem = {};

    /**
     * 打开添加员工档案定义的面板
     */

    $scope.toAddEmployeeExt = function(){
    	$scope.selectedItem = {};
    	$scope.itemOperateType = 'add';
        $('#EmployeeExtPanel').modal({"show":true,"backdrop":'static'});
        queryDicts();
    }
    
    $scope.toUpdateItem = function(item){
        $scope.selectedItem = item;
        $scope.itemOperateType = 'update';
        $('#EmployeeExtPanel').modal({"show":true,"backdrop":'static'});
        queryDicts();
    }
    
    $scope.toDeleteItem = function(item){
        $scope.selectedItem = item;
    	$scope.title=$scope.selectedItem.fieldStatus==1?"禁用":"启用";
    	$scope.modalBody="确认"+$scope.title+"当前【"+$scope.selectedItem.fieldName+"】员工档案定义吗?";
        $scope.itemOperateType = 'remove';
        $('#DeleteEmployeeExtPanel').modal({"show":true,"backdrop":'static'});
    }
    
    
    /**
     * 添加员工档案定义
     */
    $scope.saveEmployeeExt = function(){
        if($scope.itemOperateType=='add'){
            $scope.addEmployeeExt();
        }else if($scope.itemOperateType=='update'){
            $scope.updateEmployeeExt();
        }else if($scope.itemOperateType=='remove'){
            $scope.removeEmployeeExt();
        }
    }

    $scope.addEmployeeExt = function(){
    	 var item={};
        $scope.selectedItem.fieldStatus = "1";
        $log.log("item fieldDictType is " + $scope.selectedItem.fieldDictType + ",item fieldName is " + $scope.selectedItem.fieldName + ",item fieldKey is " + $scope.selectedItem.fieldKey);
        if($scope.selectedItem.fieldName == "" || $scope.selectedItem.fieldName == null){
         	   alert("字段名称不能为空");
    				return;
    			}
        EmployeeExtService.add($scope.selectedItem,function(resp){
        	 if(resp.error == false){
	                $('#EmployeeExtPanel').modal('hide');
	                alert("添加成功！");
	                $scope.employeeExtDatas[ $scope.employeeExtDatas.length]= $scope.selectedItem;
	                queryEmployeeExt();
            }else{
                alert("添加失败！失败信息："+resp.message);
            }
        })
    }

    $scope.updateEmployeeExt = function(){
    	if($scope.selectedItem.fieldType != "数据字典"){
    		$scope.selectedItem.fieldDictType = "";
    	}
    	if($scope.selectedItem.fieldName == "" || $scope.selectedItem.fieldName == null){
    			alert("字段名称不能为空");
    				return;
    			}
    	EmployeeExtService.update($scope.selectedItem,function(resp){
    		 if(resp.error == false){
                $('#EmployeeExtPanel').modal('hide');
                alert("修改成功！");
                queryEmployeeExt();
            }else{
                alert("修改失败！失败信息："+resp.message);
            }
        })
    }

    $scope.removeEmployeeExt = function(){
    	var item={};
    	$log.log("item id is " + $scope.selectedItem.id);
    	EmployeeExtService.remove($scope.selectedItem,function(resp){
            if(resp.error == false){
                $('#DeleteEmployeeExtPanel').modal('hide');
                alert("操作成功！");
                queryEmployeeExt();
            }else{
                alert("禁用失败！失败信息："+resp.message);
            }
        })
    }


    /**
     * 字段类型下拉框
     */   
    	$scope.fieldSelectType = '字符串';
     
        $scope.fieldType =
        [
            '字符串',
            '日期',
            '数据字典'
        ];
    
        
        /**
         * 查询字典
         */
        function queryDicts(){
            var param = {};
            DictsService.get(param,function(resp){
                if(resp.error == 'false'||resp.error ==false){
                	$log.log( resp.data[0].items);
                    $scope.dictDatas = resp.data;
                }
            })
        }
        
        /**
         * 查询员工档案定义
         */
        function queryEmployeeExt(){
            var param = {};
            EmployeeExtService.get(param,function(resp){
                if(resp.error == false){
                	$log.log( resp.data[0].items);
                    $scope.employeeExtDatas = resp.data;
                }
            })
        };
            
        
       
        
        queryEmployeeExt();
}
/**
 * 
 */
angular.module('ework-ui')
    .controller('hrmEmployeeInfoCtrl', [
        '$scope',
        '$log',
        '$state',
        '$cookieStore',
        '$rootScope',
        'OrgService',
        'PostService',
        'DictItemService',
        'EmployeeExtService',
        'EmployeeManageService',
		'hrmEmployeeService',
		'$uibMsgbox',
        hrmEmployeeInfoCtrl]);

function hrmEmployeeInfoCtrl($scope,
                  $log,
                  $state,
                  $cookieStore,
                  $rootScope,
                  OrgService,
                  PostService,
                  DictItemService,
                  EmployeeExtService,
                  EmployeeManageService,
				  hrmEmployeeService,
				  $uibMsgbox
    ){
	//员工列表
	$scope.employeeList = {};
	$scope.itemOperateType = '';
    $scope.selectedItem = {};
    $scope.employee = [];
    $scope.edu={};
    $scope.paginationBars = [];
    $scope.enterTypeList=[];
    //岗位查询列表
    $scope.postList=[];
    $scope.detailPage = 'templates/hrm/employee/employee_info.html?_='+(new Date()).getTime();

    $scope.employeeId = null;
    $scope.queryType = '';
    //暂存的订单
    $scope.employeeId = $("#rootIndex_employeeId").val();
    
    $scope.ret=[];

    function queryEmployeeInfo(){
        var param = {};
        param.employeeId = $scope.employeeId;
        hrmEmployeeService.query(param,function(resp){
            if(!resp.error){
                $scope.selectedEmp = resp.data;
				if($scope.selectedEmp.business) {
					$scope.selectedEmp.business = parseInt ($scope.selectedEmp.business);
					$scope.selectedEmp.dept = parseInt ($scope.selectedEmp.dept);
				}
                $('title').text(''+$scope.selectedEmp.employee_name);
                $scope.toQueryItem($scope.selectedEmp);
            }else{
                $uibMsgbox.confirm(resp.message);
            }
        })
    }

    /**
	 * 查询数据字典子典所有数据
	 */
    function queryDictSub(){
    	var param={};
    	DictItemService.queryDictSubAll(param,function(resp){
    		if(resp.error==false){
    			$scope.cache=resp.data;
				$scope.enterTypeList = $scope.cache.ENTERTYPE;
				$scope.poslevelList = $scope.cache.POSLEVEL;
				$scope.departmentList = $scope.cache.DEPARTMENT;
    		}
    	});
		OrgService.queryProductLine({}, function(resp) {
			if (!resp.error && resp.data && resp.data.length > 0) {
				$scope.productLineList = resp.data;
			}
		});
    }
    
    
    /**
	 * 打开员工档案管理的面板
	 */    
    $scope.toQueryItem = function(emp){
    	$scope.addEmp=false;
    	//$('#EmpPanel').modal({"show":true,"backdrop":'static'});
    	$scope.selectedEmp=emp;		//提取选中的员工id方便查询教育经历 ，工作经历等信息
    	//param.id = emp.id;
    	
    	getRet(emp);
    	
        $scope.itemOperateType = 'query';
	    queryEmployeeEdu();
	    queryEmployeeExp();
	    queryEmployeeSum();
	    queryEmployeeRew();
	};
	
	/**
	 * 查询选中的员工定义表中的动态字段
	 * 将启用的动态字段全部查出
	 */
	function getRet(emp){
		var param={};
    	EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.ret = resp.data;
    		}
    		getEmployeeInfo(emp);
    	});
	}
	
	/**
	 * 查询员工信息表中的基础信息
	 * 根据id和动态字段查询对应的员工信息，动态字段在后台查出
	 */
	function getEmployeeInfo(emp){
		var param={};
    	param.id = emp.id;
		EmployeeManageService.query(param,function(resp){
            if(resp.error == false){
                $scope.employee = resp.data;
            }
            getSelectedEmp($scope.ret,$scope.employee);
        })
	}
	
	/**
	 * 查询动态的员工基础信息
	 */
	function getSelectedEmp(ret,employee){
		$scope.temp=[];
        if(ret){
            for(var i=0;i<ret.length;i++){
                var str= ret[i].fieldKey;
                if(angular.isDefined(employee[0][str])){
                    ret[i].fieldKeys=employee[0][str];
                }
            };
            //再次进行遍历将数据字典子项加入集合
            for(var i=0;i<ret.length;i++){
                if(angular.isDefined(ret[i].fieldKeys)){
                	ret[i].selected=[];
                    ret[i].selected=$scope.cache[ret[i].fieldKey];
                }
            }
            $scope.temp=ret;
        }


	}
	
	/**
	 * 准备添加员工基本信息
	 */
	/*$scope.toAddEmpPanel = function(){
		$scope.temp=[];
		var param={};
		$scope.selectedEmp = {};
		$scope.addEmp=true;
	    $('#EmpPanel').modal('show');
	    EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.extField=resp.data;
    		}
    		for(var i=0;i<$scope.extField.length;i++){
    			if($scope.extField[i].dictTypeName!=null){
    				$scope.extField[i].fieldKey=null;
    				$scope.extField[i].selected=$scope.cache[$scope.extField[i].dictTypeName];
    			}else{
    				$scope.extField[i].fieldKey=null;
    			}
    		}
    		$scope.temp=$scope.extField;
    		
    	});
	};*/
	

	
	

	
	/**
	 * 去添加教育经历
	 */
	$scope.toAddEdu = function(){
		$scope.eduUpdate=false;
		$scope.selectedEdu={};
		$("#eduModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改教育经历
	 */
	$scope.toUpdateEdu = function(edu){
		$scope.eduUpdate=true;
		$("#eduModal").modal("show");
		$scope.selectedEdu=edu;
	}
	
	/**
	 * 去删除教育经历
	 */
	$scope.toDeleteEdu = function(edu){
		$scope.eduDelete=true;
		$scope.selectedEdu=edu;
	}
	
	
	/**
	 * 去添加工作经历
	 */
	$scope.toAddExp = function(){
		$scope.expUpdate=false;
		$scope.selectedExp={};
		$("#expModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改工作经历
	 */
	$scope.toUpdateExp = function(exp){
		$scope.expUpdate=true;
		$("#expModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedExp=exp;
	}
	
	/**
	 * 去删除工作经历
	 */
	$scope.toDeleteExp = function(exp){
		$scope.expDelete=true;
		$scope.selectedExp=exp;
	}
	
	
	/**
	 * 去添加工作总结
	 */
	$scope.toAddSum = function(){
		$scope.sumUpdate=false;
		$scope.selectedSum={};
		$("#sumModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改工作总结
	 */
	$scope.toUpdateSum = function(sum){
		$scope.sumUpdate=true;
		$("#sumModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedSum=sum;
	}
	
	/**
	 * 去删除工作总结
	 */
	$scope.toDeleteSum = function(sum){
		$scope.sumDelete=true;
		$scope.selectedSum=sum;
	}
	
	
	/**
	 * 去添加奖惩信息
	 */
	$scope.toAddRew = function(){
		$scope.rewUpdate=false;
		$scope.selectedRew={};
		$("#rewModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改奖惩信息
	 */
	$scope.toUpdateRew = function(rew){
		$scope.rewUpdate=true;
		$("#rewModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedRew=rew;
	}
	
	/**
	 * 去删除奖惩信息
	 */
	$scope.toDeleteRew = function(rew){
		$scope.rewDelete=true;
		$scope.selectedRew=rew;
	}
	
	
	/**
	 * 添加员工基础信息
	 */
	$scope.addEmployee = function(){
		var param={};		
		/*if($scope.selectedItem.EMPLOYEE_NAME==""||$scope.selectedItem.EMPLOYEE_NAME==null){
				alert("姓名不能为空");
				return;
			}
		if($scope.selectedItem.ENCODING==""||$scope.selectedItem.ENCODING==null){
			alert("工号不能为空");
			return;
		}*/
		queryExtInfo();
		var retEmp=$scope.retEmp;
		for(var i=0;i<retEmp.length;i++){
			//过滤，获取填写过的信息，若字段值为null，MyBatis 插入空值时，需要指定JdbcType，否则报错
			if($scope.temp[i].fieldKey!=null){
				var str=retEmp[i].fieldKey;
				param[str]=$scope.temp[i].fieldKey;
				}
		}
		//添加任职信息
		param.work=$scope.selectedEmp;
		EmployeeManageService.add(param,function(resp){
			 if(resp.error == false){
				$('#EmpPanel').modal('hide');
				$uibMsgbox.confirm("添加成功");
				$scope.addEmp=false;
				$scope.employeeList[$scope.employeeList.length]=param;
				queryEmployee();
			}else{
				$uibMsgbox.confirm("添加失败！失败信息："+resp.message);
			}
		})
	};
	
	/**
	 * 修改员工档案
	 */
	$scope.updateEmployee = function(){
		/*if($scope.selectedEmp.EMPLOYEE_NAME==""||$scope.selectedEmp.EMPLOYEE_NAME==null){
				alert("姓名不能为空");
				return;
			}
		if($scope.selectedEmp.ENCODING==""||$scope.selectedEmp.ENCODING==null){
			alert("员工号不能为空");
			return;
		}*/
        if(new Date($scope.selectedEmp.entryDate)> new Date()){
            $uibMsgbox.confirm("入职时间不得大于今天");
            return;
        }
		$scope.addEmp=false;
		queryExtInfo();
		
	};
	
	
	
	/**
	 * 将修改的数据放入对象中，该步骤独立出来是为了请求同步
	 */
	function updateEmpParam(){
		var param={};
		for(var i=0;i<$scope.retEmp.length;i++){
			var str=$scope.retEmp[i].fieldKey;
			if($scope.temp[i].fieldKeys!=null ){
				$scope.employee[0][str]=$scope.temp[i].fieldKeys;
			}
		}
		
		$scope.employee[0].id=$scope.selectedEmp.id;
		param=$scope.employee[0];
		EmployeeManageService.updateEmployeeStatic($scope.selectedEmp,function(resp){
			if(resp.error==false){
			
			}
		})
		EmployeeManageService.update(param,function(resp){
			 if(resp.error==false){
				$uibMsgbox.confirm("修改成功", function (res) {
					if (res == 'yes') {
						$state.go('hrmEmployee')
					}
				});
				getEmployeeInfo($scope.employee[0]);
			}else{
				$uibMsgbox.confirm("修改失败，失败信息："+resp.message);
			}
		});
	}
	
	
	/**
	 * 再次查询员工定义表中启用的字段信息，获取员工信息的key
	 */
	function queryExtInfo(){
		var param={};
		EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.retEmp=resp.data;
    			updateEmpParam();
    		}
    	});
	}
	
	/**
	 * 添加员工教育经历
	 */
	$scope.addEdu = function(selectedEdu){
		var param = {};
		selectedEdu.employee_id=$scope.selectedEmp.id;
		param=selectedEdu;
		EmployeeManageService.addEmployeeEdu(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("添加员工教育经历成功");
				$("#eduModal").modal("hide");
				queryEmployeeEdu();
			}else{
				$uibMsgbox.confirm("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工教育经历
	 */
	$scope.updateEdu = function(selectedEdu){
		var param = {};
		param = selectedEdu;
		EmployeeManageService.updateEmployeeEdu(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("修改成功");
				$("#eduModal").modal("hide");
				queryEmployeeEdu();
			}else{
				$uibMsgbox.confirm("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工教育经历
	 */
	$scope.deleteEdu = function(){
		var param = {};
		param.id=$scope.selectedEdu.id;
		EmployeeManageService.deleteEmployeeEdu(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("删除员工教育经历成功");
				$("#DelModal").modal("hide");
				queryEmployeeEdu();
			}else{
				$uibMsgbox.confirm("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.eduDelete=false;
		})
	}
	
	/**
	 * 查询员工教育经历
	 */
	function queryEmployeeEdu(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeEdu(param,function(resp){
			if(resp.error==false){
				$scope.employeeEdu=resp.data;
			}
		})
	}
	
	/**
	 * 查询员工工作经历
	 */
	function queryEmployeeExp(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeExp(param,function(resp){
			if(resp.error==false){
				$scope.employeeExp=resp.data;
			}
		})
	}
	
	/**
	 * 添加员工工作经历
	 */
	$scope.addExp = function(selectedExp){
		var param = {};
		selectedExp.employee_id=$scope.selectedEmp.id;
		param=selectedExp;
		EmployeeManageService.addEmployeeExp(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("添加员工工作经历成功");
				$("#expModal").modal("hide");
				queryEmployeeExp();
			}else{
				$uibMsgbox.confirm("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工工作经历
	 */
	$scope.updateExp = function(selectedExp){
		var param = {};
		param = selectedExp;
		EmployeeManageService.updateEmployeeExp(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("修改成功");
				$("#expModal").modal("hide");
				queryEmployeeExp();
			}else{
				$uibMsgbox.confirm("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工工作经历
	 */
	$scope.deleteExp = function(){
		var param = {};
		param.id=$scope.selectedExp.id;
		EmployeeManageService.deleteEmployeeExp(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("删除员工工作经历成功");
				$("#DelModal").modal("hide");
				queryEmployeeExp();
			}else{
				$uibMsgbox.confirm("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.expDelete=false;
		})
	}
	
	/**
	 * 查询员工工作总结
	 */
	function queryEmployeeSum(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeSum(param,function(resp){
			if(resp.error==false){
				$scope.employeeSum=resp.data;
			}
		})
	}
	
	/**
	 * 添加员工工作总结
	 */
	$scope.addSum = function(selectedSum){
		var param = {};
		selectedSum.employee_id=$scope.selectedEmp.id;
		param=selectedSum;
		param.approval_status=parseInt(param.approval_status);
		EmployeeManageService.addEmployeeSum(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("添加员工工作总结成功");
				$("#sumModal").modal("hide");
				queryEmployeeSum();
			}else{
				$uibMsgbox.confirm("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工工作总结
	 */
	$scope.updateSum = function(selectedSum){
		var param = {};
		param = selectedSum;
		EmployeeManageService.updateEmployeeSum(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("修改成功");
				$("#sumModal").modal("hide");
				queryEmployeeSum();
			}else{
				$uibMsgbox.confirm("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工工作总结
	 */
	$scope.deleteSum = function(){
		var param = {};
		param.id=$scope.selectedSum.id;
		EmployeeManageService.deleteEmployeeSum(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("删除员工工作总结成功");
				$("#DelModal").modal("hide");
				queryEmployeeSum();
			}else{
				$uibMsgbox.confirm("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.sumDelete=false;
		})
	}
	
	/**
     * 添加员工工作总结时查询员工
     */
    $scope.queryEmployeeInfo= function (){
    	var searchInfo=$("#employee_search_info").val();
    	 $scope.onGoingQuery=true;
    	   var param = {};
    	   param.searchInfo=searchInfo;
    	EmployeeManageService.queryEmployeeInfo(param,function(resp){
             if(resp.error == false){
                 $scope.employeeListSum = resp.data;
             }
         });
    }
    
    /**
     * 选择一个员工
     */
    $scope.selectedEmployee=function(employee){
    	//$scope.selectedSum.employeeId=employee.ID;
    	$scope.selectedSum.employeeName=employee.EMPLOYEE_NAME;
    	$scope.selectedSum.approver=employee.ID;
    	$scope.onGoingQuery=false;
    	$scope.showQuery=false;
    }	
	
	$scope.showEmployeeQuery=function(){
    	$scope.showQuery=true;
    }
	
  /* $document.on('click', function(event){
	      var element=angular.element(event.target).attr("id");
	    	  $scope.$apply(function() {
	    		  if(element!='showSpan'
	    			  &&element!='selectSpan'
	    		      &&element!='employee_search_info'){
	    	       $scope.onGoingQuery = false;
	    	       $scope.showQuery=false;
	    		  }
	    		  
	    	 });
	      return $document.off('click', event);
	});*/
	
	
	
	/**
	 * 查询员工奖惩信息
	 */
	function queryEmployeeRew(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeRew(param,function(resp){
			if(resp.error==false){
				$scope.employeeRew=resp.data;
			}
		})
	}
	
	/**
	 * 添加员工奖惩信息
	 */
	$scope.addRew = function(selectedRew){
		var param = {};
		selectedRew.employee_id=$scope.selectedEmp.id;
		param=selectedRew;
		EmployeeManageService.addEmployeeRew(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("添加员工奖惩信息成功");
				$("#rewModal").modal("hide");
				queryEmployeeRew();
			}else{
				$uibMsgbox.confirm("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工奖惩信息
	 */
	$scope.updateRew = function(selectedRew){
		var param = {};
		param = selectedRew;
		EmployeeManageService.updateEmployeeRew(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("修改成功");
				$("#rewModal").modal("hide");
				queryEmployeeRew();
			}else{
				$uibMsgbox.confirm("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工奖惩信息
	 */
	$scope.deleteRew = function(){
		var param = {};
		param.id=$scope.selectedRew.id;
		EmployeeManageService.deleteEmployeeRew(param,function(resp){
			if(resp.error==false){
				$uibMsgbox.confirm("删除员工奖惩信息成功");
				$("#DelModal").modal("hide");
				queryEmployeeRew();
			}else{
				$uibMsgbox.confirm("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.rewDelete=false;
		})
	}
	
	/**
     * 上传头像
     */
	$scope.headPic=function(){
		//var selectedEmpId=$scope.selectedEmp.id;
		window.location.href='templates/hrm/uploadImage/headPic?selectedEmpId='+$scope.selectedEmp.id;
		
	}

	
	 //按照员工id查询岗位信息
    function queryPostByEmpId(emp_id){
    	var param={};
    	$scope.postListToStr='';
    	param.employee_id=emp_id;
    	EmployeeManageService.queryPostByEmpId(param,function(resp){
    		if(resp.error==false){
    			$scope.postByEmpList=resp.data;
    			
    			for(var i=0;i<$scope.postByEmpList.length;i++){
    	    		$scope.postListToStr+=$scope.postByEmpList[i].branchName+','+$scope.postByEmpList[i].post_name+"/ ";
    	    	}
    		}
    	});
    }
	
   
   
    if($scope.employeeId){
        //查询当前员工的基本信息
        queryEmployeeInfo();
       
    }
    
    queryPostByEmpId($scope.employeeId);
  //查询数据字典所有子项
	queryDictSub();
	
	

}



/**
 * 
 */
angular.module('ework-ui').controller(
		'hrmEmployeeInfoAddCtrl',
		[ '$scope', '$log', '$state', '$cookieStore', '$rootScope',
				'OrgService', 'PostService', 'DictItemService',
				'EmployeeExtService', 'EmployeeManageService',
				'hrmEmployeeService','erp_organizationService', '$uibMsgbox',
			hrmEmployeeInfoAddCtrl ]);

function hrmEmployeeInfoAddCtrl($scope, $log, $state, $cookieStore, $rootScope,
		OrgService, PostService, DictItemService, EmployeeExtService,
		EmployeeManageService, hrmEmployeeService,erp_organizationService,$uibMsgbox) {
	// 员工列表
	$scope.employeeList = {};
	$scope.itemOperateType = '';
	$scope.selectedItem = {};
	$scope.employee = [];
	$scope.edu = {};
	$scope.paginationBars = [];
	$scope.enterTypeList = [];
	// 岗位查询列表
	$scope.postList = [];
	$scope.detailPage = 'templates/hrm/employee/employee_info.html?_='
			+ (new Date()).getTime();

	$scope.employeeId = null;
	$scope.queryType = '';
	$scope.addEmp = true;
	$('title').text('员工添加 | 人力');

	function queryEmployeeInfo() {
		var param = {};
		param.employeeId = $scope.employeeId;
		hrmEmployeeService.query(param, function(resp) {
			if (!resp.error) {
				$scope.selectedEmp = resp.data;
				$('title').text('' + $scope.selectedEmp.employee_name);
				$scope.toQueryItem($scope.selectedEmp);
			} else {
				alert(resp.message);
			}
		})
	}

	/**
	 * 查询数据字典子典所有数据
	 */
	function queryDictSub() {
		var param = {};
		DictItemService.queryDictSubAll(param, function(resp) {
			if (resp.error == false) {
				$scope.cache = resp.data;
				$scope.enterTypeList = $scope.cache.ENTERTYPE;
				$scope.poslevelList = $scope.cache.POSLEVEL;
				$scope.departmentList = $scope.cache.DEPARTMENT;
				// 由于该方法用到$scope.cache,必须放在查询数据字典子项成功之后，否则属于异步查询，会导致toAddEmpPanel()先queryDictSub()执行完，出现数据加载未完成！！！
				toAddEmpPanel();
			}
		});
		OrgService.queryProductLine({}, function(resp) {
			if (!resp.error && resp.data && resp.data.length > 0) {
				$scope.productLineList = resp.data;
			}
		});
	}

	/**
	 * 打开员工档案管理的面板
	 */
	$scope.toQueryItem = function(emp) {
		$scope.addEmp = false;
		// $('#EmpPanel').modal({"show":true,"backdrop":'static'});
		$scope.selectedEmp = emp; // 提取选中的员工id方便查询教育经历 ，工作经历等信息
		// param.id = emp.id;

		getRet(emp);

		$scope.itemOperateType = 'query';

	};

	/**
	 * 查询选中的员工定义表中的动态字段
	 */
	function getRet(emp) {
		var param = {};
		EmployeeExtService.queryField(param, function(resp) {
			if (resp.error == false) {
				$scope.ret = resp.data;
			}
			getEmployeeInfo(emp);
		});
	}

	/**
	 * 查询员工信息表中的基础信息
	 */
	function getEmployeeInfo(emp) {
		var param = {};
		param.id = emp.id;
		EmployeeManageService.query(param, function(resp) {
			if (resp.error == false) {
				$scope.employee = resp.data;
			}
			getSelectedEmp($scope.ret, $scope.employee);
		})
	}

	/**
	 * 查询动态的员工基础信息
	 */
	function getSelectedEmp(ret, employee) {
		$scope.temp = [];
		if (ret && ret.length) {
			for (var i = 0; i < ret.length; i++) {
				var str = ret[i].fieldKey;
				if (angular.isDefined(employee[0][str])) {
					ret[i].fieldKeys = employee[0][str];
				}
			}
			;
			// 再次进行遍历将数据字典子项加入集合
			for (var i = 0; i < ret.length; i++) {
				if (angular.isDenfined(ret[i].fieldKeys)) {
					ret[i].selected = [];
					ret[i].selected = $scope.cache[ret[i].fieldKey];
				}
			}
			$scope.temp = ret;
		}

	}

	/**
	 * 准备添加员工基本信息
	 */
	function toAddEmpPanel() {
		$scope.temp = [];
		var param = {};
		$scope.selectedEmp = {};
		// $scope.addEmp=true;
		EmployeeExtService.queryField(param, function(resp) {
			if (!resp.error) {
				$scope.extField = resp.data;
				if ($scope.extField) {
					for (var i = 0; i < $scope.extField.length; i++) {
						if ($scope.extField[i].fieldType == '数据字典') {
							var str = "";
							str = $scope.extField[i].fieldKey;
							$scope.extField[i].selected = $scope.cache[str];
						}
					}
					$scope.temp = $scope.extField;
					$.each($scope.temp,function(i,n) {
						if(n) {
							n.fieldKeys = n.selected?(n.selected[0]? n.selected[0].code:null):null;
						}
					})
				}
			}
		});
	};

	/**
	 * 将要添加的数据放入对象中，该步骤独立出来是为了请求同步，
	 */
	function addEmpParam() {
		var param = {};
		for (var i = 0; i < $scope.retEmp.length; i++) {
			// 过滤，获取填写过的信息，若字段值为null，MyBatis 插入空值时，需要指定JdbcType，否则报错
			if ($scope.temp[i].fieldKeys != null) {
				var str = $scope.retEmp[i].fieldKey;
				param[str] = $scope.temp[i].fieldKeys;
			}
		}

		// 添加任职信息
		param.work = $scope.selectedEmp;

		var waitingModal = $uibMsgbox.waiting('保存中，请稍候...');
		EmployeeManageService.add(param, function(resp) {
			waitingModal.close();
			if (resp.error == false) {
				$('#EmpPanel').modal('hide');
				$uibMsgbox.confirm("添加成功", function (res) {
					if (res == 'yes') {
						$state.go('hrmEmployee')
					}
				});
				$scope.employeeList[$scope.employeeList.length] = param;
//				queryEmployeeInfo();
			} else {
				$uibMsgbox.confirm("添加失败！失败信息：" + resp.message);
			}
		})
	}

	/**
	 * 再次查询员工定义表中启用的字段信息，获取员工信息的key
	 */
	function queryExtInfo() {
		var param = {};
		EmployeeExtService.queryField(param, function(resp) {
			if (resp.error == false) {
				$scope.retEmp = resp.data;
				addEmpParam();
			}
		});
	}

	/**
	 * 添加员工基础信息
	 */
	$scope.addEmployee = function() {

		if ($scope.selectedEmp.employee_name == ""
				|| $scope.selectedEmp.employee_name == null) {
			$uibMsgbox.confirm("姓名不能为空");
			return;
		}
		if ($scope.selectedEmp.encoding == ""
				|| $scope.selectedEmp.encoding == null) {
			$uibMsgbox.confirm("编码不能为空");
			return;
		}
        if(new Date($scope.selectedEmp.entryDate)> new Date()){
            $uibMsgbox.confirm("入职时间不得大于今天");
            return;
        }
		var addFlag = true;
		$.each($scope.temp,function(i,n) {
			if (n.fieldKeys ==undefined || n.fieldKeys == null || n.fieldKeys === "") {
				$uibMsgbox.confirm(n.fieldName + "不能为空");
				addFlag=false;
				return false;
			}
		});
		if(addFlag) {
			queryExtInfo();
		}
	};
	/**
	 * 上传头像
	 */
	$scope.headPic = function() {
		// var selectedEmpId=$scope.selectedEmp.id;
		window.location.href = 'templates/hrm/uploadImage/headPic?selectedEmpId='
				+ $scope.selectedEmp.id;

	}

	// 查询数据字典所有子项
	queryDictSub();

}

/**
 * 
 */
angular.module('ework-ui')
    .controller('hrmEmployeeInfoSelfCtrl', [
        '$scope',
        '$log',
        '$state',
        '$cookieStore',
        '$rootScope',
        'OrgService',
        'PostService',
        'DictItemService',
        'EmployeeExtService',
        'EmployeeManageService',
        'hrmEmployeeService',
        'klxxedu_LoginEmployeeService',
        hrmEmployeeInfoSelfCtrl]);

function hrmEmployeeInfoSelfCtrl($scope,
                  $log,
                  $state,
                  $cookieStore,
                  $rootScope,
                  OrgService,
                  PostService,
                  DictItemService,
                  EmployeeExtService,
                  EmployeeManageService,
                  hrmEmployeeService,
                  klxxedu_LoginEmployeeService
    ){
	//员工列表
	$scope.employeeList = {};
	$scope.itemOperateType = '';
    $scope.selectedItem = {};
    $scope.employee = [];
    $scope.edu={};
    $scope.paginationBars = [];
    $scope.enterTypeList=[];
    //岗位查询列表
    $scope.postList=[];
    $scope.detailPage = 'templates/hrm/employee/employee_info.html?_='+(new Date()).getTime();



    function queryEmployeeInfo(){
        var param = {};
        param.employeeId = $scope.employeeId;
        hrmEmployeeService.query(param,function(resp){
            if(!resp.error){
                $scope.selectedEmp = resp.data;
                $('title').text(''+$scope.selectedEmp.employee_name);
                $scope.toQueryItem($scope.selectedEmp);
            }else{
                alert(resp.message);
            }
        })
    }

    /**
	 * 查询数据字典子典所有数据
	 */
    function queryDictSub(){
    	var param={};
    	DictItemService.queryDictSubAll(param,function(resp){
    		if(resp.error==false){
    			$scope.cache=resp.data;
    			$scope.enterTypeList=$scope.cache.ENTERTYPE;
    			$scope.poslevelList=$scope.cache.POSLEVEL;
    		}
    	})
    }
    
    
    /**
	 * 打开员工档案管理的面板
	 */    
    $scope.toQueryItem = function(emp){
    	$scope.addEmp=false;
    	//$('#EmpPanel').modal({"show":true,"backdrop":'static'});
    	$scope.selectedEmp=emp;		//提取选中的员工id方便查询教育经历 ，工作经历等信息
    	//param.id = emp.id;
    	getRet(emp);
    	
        $scope.itemOperateType = 'query';
	    queryEmployeeEdu();
	    queryEmployeeExp();
	    queryEmployeeSum();
	    queryEmployeeRew();
	};
	
	/**
	 * 查询选中的员工定义表中的动态字段
	 */
	function getRet(emp){
		var param={};
    	EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.ret = resp.data;
    		}
    		getEmployeeInfo(emp);
    	});
	}
	
	/**
	 * 查询员工信息表中的基础信息
	 */
	function getEmployeeInfo(emp){
		var param={};
    	param.id = emp.id;
		EmployeeManageService.query(param,function(resp){
            if(resp.error == false){
                $scope.employee = resp.data;
            }
            getSelectedEmp($scope.ret,$scope.employee);
        })
	}
	
	/**
	 * 查询动态的员工基础信息
	 */
	function getSelectedEmp(ret,employee){
		$scope.temp=[];
        if(ret && ret.length){
            for(var i=0;i<ret.length;i++){
                var str= ret[i].fieldKey;
                if(employee[0]){
                    ret[i].fieldKey=employee[0][str];
                }else{
                    ret[i].fieldKey = null;
                }
            };
            //再次进行遍历将数据字典子项加入集合
            for(var i=0;i<ret.length;i++){
                if(ret[i].dictTypeName!=null){
                    ret[i].selected=$scope.cache[ret[i].dictTypeName];
                }
            }
            $scope.temp=ret;
        }


	}

	
	
	
	/**
	 * 再次查询员工定义表中启用的字段信息，获取员工信息的key
	 */
	function queryExtInfo(){
		var param={};
		EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.retEmp=resp.data;
    		}
    	});
	}

	
	/**
	 * 查询员工教育经历
	 */
	function queryEmployeeEdu(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeEdu(param,function(resp){
			if(resp.error==false){
				$scope.employeeEdu=resp.data;
			}
		})
	}
	
	/**
	 * 查询员工工作经历
	 */
	function queryEmployeeExp(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeExp(param,function(resp){
			if(resp.error==false){
				$scope.employeeExp=resp.data;
			}
		})
	}

	
	/**
	 * 查询员工工作总结
	 */
	function queryEmployeeSum(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeSum(param,function(resp){
			if(resp.error==false){
				$scope.employeeSum=resp.data;
			}
		})
	}

	/**
	 * 查询员工奖惩信息
	 */
	function queryEmployeeRew(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeRew(param,function(resp){
			if(resp.error==false){
				$scope.employeeRew=resp.data;
			}
		})
	}

	
	/**
     * 上传头像
     */
	$scope.headPic=function(){
		//var selectedEmpId=$scope.selectedEmp.id;
		window.location.href='templates/hrm/uploadImage/headPic?selectedEmpId='+$scope.selectedEmp.id;
		
	}
	
	
	 /**
     * 查询归属组织
     */
   function queryOrg(){
    	var param={};
        OrgService.get(param,function(resp){
            if(resp.error == false){
                $scope.orgs = resp.data;
            }
        })
    };
   
   
   /**
    * 查询岗位
    */
   function queryPost(){
	   var param={};
	   PostService.queryPost(param,function(resp){
		   if(resp.error == false){
			   $scope.postList = resp.data;
		   }
	   })
   };

    /**
     * 去添加工作总结
     */
    $scope.toAddSum = function(){
        $scope.sumUpdate=false;
        $scope.selectedSum={};
        $("#sumModal").modal({"show":true,"backdrop":'static'});
    }

    /**
     * 添加员工工作总结
     */
    $scope.addSum = function(selectedSum){
        var param = {};
        selectedSum.employee_id=$scope.selectedEmp.id;
        param=selectedSum;
        EmployeeManageService.addEmployeeSum(param,function(resp){
            if(resp.error==false){
                alert("添加员工工作总结成功");
                $("#sumModal").modal("hide");
                queryEmployeeSum();
            }else{
                alert("添加失败："+resp.message+",请截图反馈给客服");
            }
        })
    }

    /**
     * 修改员工工作总结
     */
    $scope.updateSum = function(selectedSum){
        var param = {};
        param = selectedSum;
        EmployeeManageService.updateEmployeeSum(param,function(resp){
            if(resp.error==false){
                alert("修改成功");
                $("#sumModal").modal("hide");
                queryEmployeeSum();
            }else{
                alert("修改失败："+resp.message+",请截图反馈给客服");
            }
        })
    }

    /**
     * 删除员工工作总结
     */
    $scope.deleteSum = function(){
        var param = {};
        param.id=$scope.selectedSum.id;
        EmployeeManageService.deleteEmployeeSum(param,function(resp){
            if(resp.error==false){
                alert("删除员工工作总结成功");
                $("#DelModal").modal("hide");
                queryEmployeeSum();
            }else{
                alert("删除失败："+resp.message+",请截图反馈给客服");
            }
            $scope.sumDelete=false;
        })
    }


    if($rootScope.curEmployee){
        $log.log("is $rootScope.curEmployee "+$rootScope.curEmployee+",$rootScope.curEmployee.id is "+$rootScope.curEmployee.id);
        //暂存的订单
        $scope.employeeId = $rootScope.curEmployee.id;
        $scope.queryType = 'self';
        //查询当前员工的基本信息
        queryEmployeeInfo();
    }else{
        klxxedu_LoginEmployeeService.query({},function(resp){
            if(!resp.error && resp.data){
                $scope.employeeId = resp.data.id;
                $scope.queryType = 'self';
                //查询当前员工的基本信息
                queryEmployeeInfo();
            }else{
                alert("message is" + resp.error);
            }
        });
    }




    //queryOrg();
    queryPost();
    //查询数据字典所有子项
	queryDictSub();

}



/**
 * 
 */
angular.module('ework-ui')
    .controller('hrmEmployeeInfoUpdateCtrl', [
        '$scope',
        '$log',
        '$state',
        '$cookieStore',
        '$rootScope',
        'OrgService',
        'PostService',
        'DictItemService',
        'EmployeeExtService',
        'EmployeeManageService',
        'hrmEmployeeService',
        hrmEmployeeInfoUpdateCtrl]);

function hrmEmployeeInfoUpdateCtrl($scope,
                  $log,
                  $state,
                  $cookieStore,
                  $rootScope,
                  OrgService,
                  PostService,
                  DictItemService,
                  EmployeeExtService,
                  EmployeeManageService,
                  hrmEmployeeService
    ){
	//员工列表
	$scope.employeeList = {};
	$scope.itemOperateType = '';
    $scope.selectedItem = {};
    $scope.employee = [];
    $scope.edu={};
    $scope.paginationBars = [];
    $scope.enterTypeList=[];
    //岗位查询列表
    $scope.postList=[];
    $scope.detailPage = 'templates/hrm/employee/employee_info.html?_='+(new Date()).getTime();

    $scope.employeeId = null;
    $scope.queryType = '';
    //暂存的订单
    $scope.employeeId = $("#rootIndex_employeeId").val();


    function queryEmployeeInfo(){
        var param = {};
        param.employeeId = $scope.employeeId;
        hrmEmployeeService.query(param,function(resp){
            if(!resp.error){
                $scope.selectedEmp = resp.data;
                $('title').text(''+$scope.selectedEmp.employee_name);
                $scope.toQueryItem($scope.selectedEmp);
            }else{
                alert(resp.message);
            }
        })
    }

    /**
	 * 查询数据字典子典所有数据
	 */
    function queryDictSub(){
    	var param={};
    	DictItemService.queryDictSubAll(param,function(resp){
    		if(resp.error==false){
    			$scope.cache=resp.data;
    			$scope.enterTypeList=$scope.cache.ENTERTYPE;
    			$scope.poslevelList=$scope.cache.POSLEVEL;
    		}
    	})
    }
    
    
    /**
	 * 打开员工档案管理的面板
	 */    
    $scope.toQueryItem = function(emp){
    	$scope.addEmp=false;
    	//$('#EmpPanel').modal({"show":true,"backdrop":'static'});
    	$scope.selectedEmp=emp;		//提取选中的员工id方便查询教育经历 ，工作经历等信息
    	//param.id = emp.id;
    	
    	getRet(emp);
    	
        $scope.itemOperateType = 'query';
	    queryEmployeeEdu();
	    queryEmployeeExp();
	    queryEmployeeSum();
	    queryEmployeeRew();
	};
	
	/**
	 * 查询选中的员工定义表中的动态字段
	 */
	function getRet(emp){
		var param={};
    	EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.ret = resp.data;
    		}
    		getEmployeeInfo(emp);
    	});
	}
	
	/**
	 * 查询员工信息表中的基础信息
	 */
	function getEmployeeInfo(emp){
		var param={};
    	param.id = emp.id;
		EmployeeManageService.query(param,function(resp){
            if(resp.error == false){
                $scope.employee = resp.data;
            }
            getSelectedEmp($scope.ret,$scope.employee);
        })
	}
	
	/**
	 * 查询动态的员工基础信息
	 */
	function getSelectedEmp(ret,employee){
		$scope.temp=[];
        if(ret && ret.length){
            for(var i=0;i<ret.length;i++){
                var str= ret[i].fieldKey;
                if(employee[0]){
                    ret[i].fieldKey=employee[0][str];
                }else{
                    ret[i].fieldKey = null;
                }
            };
            //再次进行遍历将数据字典子项加入集合
            for(var i=0;i<ret.length;i++){
                if(ret[i].dictTypeName!=null){
                    ret[i].selected=$scope.cache[ret[i].dictTypeName];
                }
            }
            $scope.temp=ret;
        }


	}
	
	/**
	 * 准备添加员工基本信息
	 */
	$scope.toAddEmpPanel = function(){
		$scope.temp=[];
		var param={};
		$scope.selectedEmp = {};
		$scope.addEmp=true;
	    $('#EmpPanel').modal('show');
	    EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.extField=resp.data;
    		}
    		for(var i=0;i<$scope.extField.length;i++){
    			if($scope.extField[i].dictTypeName!=null){
    				$scope.extField[i].fieldKey=null;
    				$scope.extField[i].selected=$scope.cache[$scope.extField[i].dictTypeName];
    			}else{
    				$scope.extField[i].fieldKey=null;
    			}
    		}
    		$scope.temp=$scope.extField;
    	});
	};
	

	
	

	
	/**
	 * 去添加教育经历
	 */
	$scope.toAddEdu = function(){
		$scope.eduUpdate=false;
		$scope.selectedEdu={};
		$("#eduModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改教育经历
	 */
	$scope.toUpdateEdu = function(edu){
		$scope.eduUpdate=true;
		$("#eduModal").modal("show");
		$scope.selectedEdu=edu;
	}
	
	/**
	 * 去删除教育经历
	 */
	$scope.toDeleteEdu = function(edu){
		$scope.eduDelete=true;
		$scope.selectedEdu=edu;
	}
	
	
	/**
	 * 去添加工作经历
	 */
	$scope.toAddExp = function(){
		$scope.expUpdate=false;
		$scope.selectedExp={};
		$("#expModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改工作经历
	 */
	$scope.toUpdateExp = function(exp){
		$scope.expUpdate=true;
		$("#expModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedExp=exp;
	}
	
	/**
	 * 去删除工作经历
	 */
	$scope.toDeleteExp = function(exp){
		$scope.expDelete=true;
		$scope.selectedExp=exp;
	}
	
	
	/**
	 * 去添加工作总结
	 */
	$scope.toAddSum = function(){
		$scope.sumUpdate=false;
		$scope.selectedSum={};
		$("#sumModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改工作总结
	 */
	$scope.toUpdateSum = function(sum){
		$scope.sumUpdate=true;
		$("#sumModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedSum=sum;
	}
	
	/**
	 * 去删除工作总结
	 */
	$scope.toDeleteSum = function(sum){
		$scope.sumDelete=true;
		$scope.selectedSum=sum;
	}
	
	
	/**
	 * 去添加奖惩信息
	 */
	$scope.toAddRew = function(){
		$scope.rewUpdate=false;
		$scope.selectedRew={};
		$("#rewModal").modal({"show":true,"backdrop":'static'});
	}
	
	/**
	 * 去修改奖惩信息
	 */
	$scope.toUpdateRew = function(rew){
		$scope.rewUpdate=true;
		$("#rewModal").modal({"show":true,"backdrop":'static'});
		$scope.selectedRew=rew;
	}
	
	/**
	 * 去删除奖惩信息
	 */
	$scope.toDeleteRew = function(rew){
		$scope.rewDelete=true;
		$scope.selectedRew=rew;
	}
	
	
	/**
	 * 添加员工基础信息
	 */
	$scope.addEmployee = function(){
		var param={};		
		/*if($scope.selectedItem.EMPLOYEE_NAME==""||$scope.selectedItem.EMPLOYEE_NAME==null){
				alert("姓名不能为空");
				return;
			}
		if($scope.selectedItem.ENCODING==""||$scope.selectedItem.ENCODING==null){
			alert("工号不能为空");
			return;
		}*/
		queryExtInfo();
		var retEmp=$scope.retEmp;
		for(var i=0;i<retEmp.length;i++){
			//过滤，获取填写过的信息，若字段值为null，MyBatis 插入空值时，需要指定JdbcType，否则报错
			if($scope.temp[i].fieldKey!=null){
				var str=retEmp[i].fieldKey;
				param[str]=$scope.temp[i].fieldKey;
				}
		}
		//添加任职信息
		param.work=$scope.selectedEmp;
		EmployeeManageService.add(param,function(resp){
			 if(resp.error == false){
				$('#EmpPanel').modal('hide');
				alert("添加成功");
				$scope.addEmp=false;
				$scope.employeeList[$scope.employeeList.length]=param;
				queryEmployee();
			}else{
				alert("添加失败！失败信息："+resp.message);
			}
		})
	};
	
	/**
	 * 修改员工档案
	 */
	$scope.updateEmployee = function(){
		/*if($scope.selectedEmp.EMPLOYEE_NAME==""||$scope.selectedEmp.EMPLOYEE_NAME==null){
				alert("姓名不能为空");
				return;
			}
		if($scope.selectedEmp.ENCODING==""||$scope.selectedEmp.ENCODING==null){
			alert("员工号不能为空");
			return;
		}*/
		var param={};
		$scope.addEmp=false;
		queryExtInfo();
		var retEmp=$scope.retEmp;
		for(var i=0;i<retEmp.length;i++){
			var str=retEmp[i].fieldKey;
			if($scope.temp[i].fieldKey!=null ){
				$scope.employee[0][str]=$scope.temp[i].fieldKey;
			}
		}
		
		$scope.employee[0].id=$scope.selectedEmp.id;
		param=$scope.employee[0];
		EmployeeManageService.updateEmployeeStatic($scope.selectedEmp,function(resp){
			if(resp.error==false){
			
			}
		})
		EmployeeManageService.update(param,function(resp){
			 if(resp.error==false){
				$('#EmpPanel').modal('hide');
				alert("修改成功");
			}else{
				alert("修改失败，失败信息："+resp.message);
			}
		});
	};
	
	
	
	/**
	 * 再次查询员工定义表中启用的字段信息，获取员工信息的key
	 */
	function queryExtInfo(){
		var param={};
		EmployeeExtService.queryField(param,function(resp){
    		if(resp.error==false){
    			$scope.retEmp=resp.data;
    		}
    	});
	}
	
	/**
	 * 添加员工教育经历
	 */
	$scope.addEdu = function(selectedEdu){
		var param = {};
		selectedEdu.employee_id=$scope.selectedEmp.id;
		param=selectedEdu;
		EmployeeManageService.addEmployeeEdu(param,function(resp){
			if(resp.error==false){
				alert("添加员工教育经历成功");
				$("#eduModal").modal("hide");
				queryEmployeeEdu();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工教育经历
	 */
	$scope.updateEdu = function(selectedEdu){
		var param = {};
		param = selectedEdu;
		EmployeeManageService.updateEmployeeEdu(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#eduModal").modal("hide");
				queryEmployeeEdu();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工教育经历
	 */
	$scope.deleteEdu = function(){
		var param = {};
		param.id=$scope.selectedEdu.id;
		EmployeeManageService.deleteEmployeeEdu(param,function(resp){
			if(resp.error==false){
				alert("删除员工教育经历成功");
				$("#DelModal").modal("hide");
				queryEmployeeEdu();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.eduDelete=false;
		})
	}
	
	/**
	 * 查询员工教育经历
	 */
	function queryEmployeeEdu(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeEdu(param,function(resp){
			if(resp.error==false){
				$scope.employeeEdu=resp.data;
			}
		})
	}
	
	/**
	 * 查询员工工作经历
	 */
	function queryEmployeeExp(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeExp(param,function(resp){
			if(resp.error==false){
				$scope.employeeExp=resp.data;
			}
		})
	}
	
	/**
	 * 添加员工工作经历
	 */
	$scope.addExp = function(selectedExp){
		var param = {};
		selectedExp.employee_id=$scope.selectedEmp.id;
		param=selectedExp;
		EmployeeManageService.addEmployeeExp(param,function(resp){
			if(resp.error==false){
				alert("添加员工工作经历成功");
				$("#expModal").modal("hide");
				queryEmployeeExp();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工工作经历
	 */
	$scope.updateExp = function(selectedExp){
		var param = {};
		param = selectedExp;
		EmployeeManageService.updateEmployeeExp(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#expModal").modal("hide");
				queryEmployeeExp();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工工作经历
	 */
	$scope.deleteExp = function(){
		var param = {};
		param.id=$scope.selectedExp.id;
		EmployeeManageService.deleteEmployeeExp(param,function(resp){
			if(resp.error==false){
				alert("删除员工工作经历成功");
				$("#DelModal").modal("hide");
				queryEmployeeExp();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.expDelete=false;
		})
	}
	
	/**
	 * 查询员工工作总结
	 */
	function queryEmployeeSum(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeSum(param,function(resp){
			if(resp.error==false){
				$scope.employeeSum=resp.data;
			}
		})
	}
	
	/**
	 * 添加员工工作总结
	 */
	$scope.addSum = function(selectedSum){
		var param = {};
		selectedSum.employee_id=$scope.selectedEmp.id;
		param=selectedSum;
		EmployeeManageService.addEmployeeSum(param,function(resp){
			if(resp.error==false){
				alert("添加员工工作总结成功");
				$("#sumModal").modal("hide");
				queryEmployeeSum();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工工作总结
	 */
	$scope.updateSum = function(selectedSum){
		var param = {};
		param = selectedSum;
		EmployeeManageService.updateEmployeeSum(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#sumModal").modal("hide");
				queryEmployeeSum();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工工作总结
	 */
	$scope.deleteSum = function(){
		var param = {};
		param.id=$scope.selectedSum.id;
		EmployeeManageService.deleteEmployeeSum(param,function(resp){
			if(resp.error==false){
				alert("删除员工工作总结成功");
				$("#DelModal").modal("hide");
				queryEmployeeSum();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.sumDelete=false;
		})
	}
	
	/**
	 * 查询员工奖惩信息
	 */
	function queryEmployeeRew(){
		var param = {};
		param.employee_id=$scope.selectedEmp.id;
		EmployeeManageService.queryEmployeeRew(param,function(resp){
			if(resp.error==false){
				$scope.employeeRew=resp.data;
			}
		})
	}
	
	/**
	 * 添加员工奖惩信息
	 */
	$scope.addRew = function(selectedRew){
		var param = {};
		selectedRew.employee_id=$scope.selectedEmp.id;
		param=selectedRew;
		EmployeeManageService.addEmployeeRew(param,function(resp){
			if(resp.error==false){
				alert("添加员工奖惩信息成功");
				$("#rewModal").modal("hide");
				queryEmployeeRew();
			}else{
				alert("添加失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 修改员工奖惩信息
	 */
	$scope.updateRew = function(selectedRew){
		var param = {};
		param = selectedRew;
		EmployeeManageService.updateEmployeeRew(param,function(resp){
			if(resp.error==false){
				alert("修改成功");
				$("#rewModal").modal("hide");
				queryEmployeeRew();
			}else{
				alert("修改失败："+resp.message+",请截图反馈给客服");
			}
		})
	}
	
	/**
	 * 删除员工奖惩信息
	 */
	$scope.deleteRew = function(){
		var param = {};
		param.id=$scope.selectedRew.id;
		EmployeeManageService.deleteEmployeeRew(param,function(resp){
			if(resp.error==false){
				alert("删除员工奖惩信息成功");
				$("#DelModal").modal("hide");
				queryEmployeeRew();
			}else{
				alert("删除失败："+resp.message+",请截图反馈给客服");
			}
			$scope.rewDelete=false;
		})
	}
	
	/**
     * 上传头像
     */
	$scope.headPic=function(){
		//var selectedEmpId=$scope.selectedEmp.id;
		window.location.href='templates/hrm/uploadImage/headPic?selectedEmpId='+$scope.selectedEmp.id;
		
	}
	
	
	 /**
     * 查询归属组织
     */
   function queryOrg(){
    	var param={};
        OrgService.get(param,function(resp){
            if(resp.error == false){
                $scope.orgs = resp.data;
            }
        })
    };
   
   
   /**
    * 查询岗位
    */
   function queryPost(){
	   var param={};
	   PostService.queryPost(param,function(resp){
		   if(resp.error == false){
			   $scope.postList = resp.data;
		   }
	   })
   };
    if($scope.employeeId){
        //查询当前员工的基本信息
        queryEmployeeInfo();
    }

    //queryOrg();
    queryPost();
  //查询数据字典所有子项
	queryDictSub();

}



/**
 * 
 */
angular.module('ework-ui')
	.controller('EmployeeCheckCtrl',[
		'$scope',
		'$log',
		'$state',
		'DictItemService',
		'EmployeeManageService',
		'EmployeeCheckService',
		'PostService',
		'workflowNew',
		EmployeeCheckCtrl]);

function EmployeeCheckCtrl($scope,
		$log,
		$state,
		DictItemService,
		EmployeeManageService,
		EmployeeCheckService,
		PostService,
		workflowNew){
	//异动列表
	$scope.changeList = [];
	//填写好的模板数据
	$scope.selecteditem={};
	//得分数组
	$scope.scoreList=[];
	//流程类型初始值
	$scope.processKeyModel="hrm.DXB_zhuanz";
	//
	$scope.processKey="hrm_apply_shenpi";
	
	$scope.openPanel='1';
	//当前审核状态（0 新申请 1审批中 2 审批通过 3 审批不通过）
	$scope.approval_status="1";
	//岗位默认值
	$scope.post=0;
	//转正后等级默认值
	$scope.poslevel = 0;
	//转正考核有四张模板中有等级字段，当点击详情查询时，仅显示
	$scope.showDetail = 1;
    var _ = (new Date()).getTime();
    $scope.modelDefineList = [
        {
            "name":"厝边素高大小班教师转正考核表",
            "value":"1",
            "url":"templates/hrm/model/change_post/DXB_teacher_post.html?_="+_,
            "processKeyModel":"hrm.DXB_zhuanz"
        },{
            "name":"厝边素高大小班校区部转正考核表",
            "value":"2",
            "url":"templates/hrm/model/change_post/DXB_school_post.html?_="+_,
            "processKeyModel":"hrm.DXB_school_zhuanz"
        },/*{
            "name":"厝边素高个性化教学部试讲评价表",
            "value":"3",
            "url":"templates/hrm/model/change_post/GXH_teaching_dept_lecture.html?_="+_,
            "processKeyModel":"hrm.gxh_school_pingjia"
        },*/{
            "name":"厝边素高个性化教师转正考核表",
            "value":"4",
            "url":"templates/hrm/model/change_post/GXH_teacher_post.html?_="+_,
            "processKeyModel":"hrm.gxh_zhuanz"
        },/*{
            "name":"厝边素高个性化学管部 360 度考评问卷",
            "value":"5",
            "url":"templates/hrm/model/change_post/GXH_teaching_dept_360.html?_="+_,
            "processKeyModel":"hrm.gxh_manger_360kaoping"
        },*/{
            "name":"厝边素高个性化学管部转正考核表",
            "value":"6",
            "url":"templates/hrm/model/change_post/GXH_teaching_dept_post.html?_="+_,
            "processKeyModel":"hrm.gxh_manger_zhuanz"
        },/*{
            "name":"厝边素高个性化咨询部 360 度考评问卷",
            "value":"7",
            "url":"templates/hrm/model/change_post/GXH_consulting_dept_360.html?_="+_,
            "processKeyModel":"hrm.gxh_zixun_360kaoping"
        },*/{
            "name":"厝边素高个性化咨询部转正考核表",
            "value":"8",
            "url":"templates/hrm/model/change_post/GXH_consulting_dept_post.html?_="+_,
            "processKeyModel":"hrm.gxh_zixun_zhuanz"
        },{
            "name":"厝边素高行政部职能部转正考核表",
            "value":"9",
            "url":"templates/hrm/model/change_post/tobecontinue.html?_="+_,
            "processKeyModel":"hrm.gxh_zixun_zhuanz"
        },{
            "name":"佳音英语（厦门）教师岗位转正考核表",
            "value":"10",
            "url":"templates/hrm/model/change_post/tobecontinue.html?_="+_,
            "processKeyModel":"hrm.gxh_zixun_zhuanz"
        },{
            "name":"佳音英语（厦门）行政教务岗位转正考核表",
            "value":"11",
            "url":"templates/hrm/model/change_post/tobecontinue.html?_="+_,
            "processKeyModel":"hrm.gxh_zixun_zhuanz"
        },{
            "name":"佳音英语（厦门）课程顾问岗位转正考核表",
            "value":"12",
            "url":"templates/hrm/model/change_post/tobecontinue.html?_="+_,
            "processKeyModel":"hrm.gxh_zixun_zhuanz"
        },{
            "name":"佳音英语（厦门）学管师岗位转正考核表",
            "value":"13",
            "url":"templates/hrm/model/change_post/tobecontinue.html?_="+_,
            "processKeyModel":"hrm.gxh_zixun_zhuanz"
        }
    ];

    $scope.selected = $scope.modelDefineList[0];
    
   /**
    * 选择工作流类型之后跳转到指定页面
    */
   $scope.selectModel=function(){
       $scope.openPanel = $scope.selected.value;
       $scope.processKeyModel = $scope.selected.processKeyModel;

       if($scope.selected.value == '2'){
           queryAllPost();
           queryDictSub();
       }
       if($scope.selected.value == '4'){
           queryDictSub();
       }

       if($scope.selected.value == '6'){
           queryDictSub();
       }

       if($scope.selected.value == '8'){
           queryDictSub();
       }
       /*$scope.selecteditem={};
	   switch(selected){
	   case "1":$scope.openPanel='1',$scope.processKeyModel="hrm.DXB_zhuanz";break;
	   case "2":$scope.openPanel='2',$scope.processKeyModel="hrm.DXB_school_zhuanz",queryAllPost(),queryDictSub();break;
	   case "3":$scope.openPanel='3',$scope.processKeyModel="hrm.gxh_school_pingjia";break;
	   case "4":$scope.openPanel='4',$scope.processKeyModel="hrm.gxh_zhuanz",queryDictSub();break;
	   case "5":$scope.openPanel='5',$scope.processKeyModel="hrm.gxh_manger_360kaoping";break;
	   case "6":$scope.openPanel='6',$scope.processKeyModel="hrm.gxh_manger_zhuanz",queryDictSub();break;
	   case "7":$scope.openPanel='7',$scope.processKeyModel="hrm.gxh_zixun_360kaoping";break;
	   case "8":$scope.openPanel='8',$scope.processKeyModel="hrm.gxh_zixun_zhuanz",queryDictSub();break;
	   default:alert("请选择模板");break;
	   }*/
   };
   

    /**
     * 查询归属团队
     */	
    $scope.showEmployeeQuery=function(){
    	$scope.showQuery=true;
    };
    
	/**
     * 选择员工时绑定员工
     */
    $scope.queryEmployeeInfo= function (){
    	var searchInfo=$("#employee_search_info").val();
    	 $scope.onGoingQuery=true;
    	   var param = {};
    	   param.searchInfo=searchInfo;
    	EmployeeManageService.queryEmployeeInfo(param,function(resp){
             if(resp.error == false){
                 $scope.employeeList = resp.data;
             }
         });
    };
    
    /**
     * 选择一个员工
     */
    $scope.selectedEmployee=function(employee){
    	$scope.selecteditem.employeeId=employee.ID;
    	$scope.selecteditem.employeeName=employee.EMPLOYEE_NAME;
    	$scope.onGoingQuery=false;
    	$scope.showQuery=false;
    };
    
    /**
     * 确定提交模板 
     */
    $scope.toSum=function(scoreList){
    	//初始化总分为0
    	var total_score=0;
    	//取得数组的长度，将得分设为数组，由于每个模板的得分个数不同，数组长度不定，便于该方法适用于每个模板
    	var size=scoreList.length;
    	for(var i=0;i<size;i++){
    		total_score+=scoreList[i];//parseInt() 函数可解析一个字符串，并返回一个整数。
    	}
    	$scope.selecteditem.total_score=total_score;
    };
    
    /**
     * 点击详情后获取数组
     */
    function strToArr(scoreList){
    	var ary = eval('(' + scoreList + ')');
    	for (var i = 0 ;i<ary.length;i++){
    		ary[i];
    	}
    	$scope.scoreList=ary;
    }
    
    
    //360考评问卷选择后统计总分
    $scope.toScore=function(scoreList){
    	var total_score=0;
    	var size=scoreList.length;
    	for(var i=0;i<size;i++){
    		var a='';
    		if(scoreList[i]!=null&&scoreList[i]!=''){
    			 a=scoreList[i];
    		}else{
    		  a=scoreList[i]=0;
    		}
    		total_score+=parseInt(a);
    	}
    	$scope.selecteditem.total_score=total_score;
    	   
    }
    
    
    $scope.cancel=function(){
    	$scope.openPanel='';
    	window.close();
    };
    
    /*--------先提交再保存start-------*/
    
    
    //将所有数据提交到工作流，发起流程并保存到数据库，保证不留脏数据和功能的一致性
    /**
     * 转正确定提交模板
     */
    $scope.save=function(selecteditem){
    	var param ={};
    	if(selecteditem.employeeId==null){
    		alert("员工不能为空");return;
    	}
		 if(selecteditem.entryDate==null||selecteditem.toPostDate==null){
	    		alert("日期不能为空");return;
	    	}
    	if($scope.processKeyModel=='hrm.DXB_school_zhuanz'||$scope.processKeyModel=='hrm.gxh_zhuanz'||
    			$scope.processKeyModel=='hrm.gxh_manger_zhuanz'||$scope.processKeyModel=='hrm.gxh_zixun_zhuanz'){
    		if(selecteditem.post!=null&&selecteditem.post!=''){
    			var temp={};
    			temp=selecteditem.post;
    			param.post=temp.ID;
    		}else{
    			param.post=0;
    		}
    		if(selecteditem.poslevel!=null&&selecteditem.poslevel!=''){
    			var temp={};
    			temp=selecteditem.poslevel;
    			param.poslevel=temp.id;
    		}else{
    			param.poslevel=0;
    		}
    	}
    	
    	 if($scope.scoreList.length!=0){
    		$scope.toSum($scope.scoreList);
    		param.scoreList=$scope.scoreList;
    	}
    	 param.approval_status=$scope.approval_status;
    	//选择的模板
    	param.processKeyModel=$scope.processKeyModel;
    	//流程类型,数据库中转正考核类型id为9
    	param.application_type=9;
    	param.step=1;
    	param.is_effect=1;
    	if(selecteditem.post!=null&&selecteditem.post!=''){
    		param.postshow=selecteditem.post.post_name;
    	}
    	if(selecteditem.poslevel!=null&&selecteditem.poslevel!=''){
    		param.poslevelshow=selecteditem.poslevel.name;
    	}
    	param.processKey=$scope.processKey;
    	param.employee_id=selecteditem.employeeId;
    	workflowNew.query({},function(resp){
    		if(!resp.error){
    			workflowNew.post(param,function(resp){
    	    		if(resp.error==false){
    	    			//selecteditem.processInstanceId=resp.data.processInstanceId;
    	    			//modelNew(selecteditem);
    	    			alert("申请成功");
    	    			$scope.selecteditem={};
    		    		$scope.scoreList=[];
    		    		$scope.processKeyModel="";
    	    		}else{
    	    			alert(resp.message);
    	    		}
    	    	});
    		}else{
    			alert("流程尚未启动，请联系管理员！");
    		}
    	})
    	
    };
    
    
    /**
     * 发起工作流成功后存到数据库
     */
   /* function modelNew(selecteditem){
    	if($scope.processKeyModel=='hrm.gxh_manger_360kaoping'||$scope.processKeyModel=='hrm.gxh_zixun_360kaoping'){
    		if($scope.scoreList.length!=0){
    			$scope.toScore($scope.scoreList);
    		selecteditem.scoreList=$scope.scoreList;
    		}
    	}//如果该模板 有得分数组，则获取每一项和总分
    	else if($scope.scoreList.length!=0){
    		$scope.toSum($scope.scoreList);
    		selecteditem.scoreList=$scope.scoreList;
    	}
    	selecteditem.approval_status=$scope.approval_status;
    	//选择的模板
    	selecteditem.processKeyModel=$scope.processKeyModel;
    	//流程类型,数据库中转正考核类型id为9
    	selecteditem.application_type=9;
    	selecteditem.step=1;
    	selecteditem.is_effect=1;
    	if(selecteditem.post!=null&&selecteditem.post!=''){
    	selecteditem.postshow=selecteditem.post.NAME;
    	}
    	if(selecteditem.poslevel!=null&&selecteditem.poslevel!=''){
    		selecteditem.poslevelshow=selecteditem.poslevel.name;
    	}
    	EmployeeCheckService.newModel(selecteditem,function(resp){
    		if(resp.error==false){
    			alert("提交成功");
    			$scope.selecteditem={};
	    		$scope.scoreList=[];
	    		$scope.processKeyModel="";
    			
    		}else{
    			alert(resp.message);
    		}
    		
    	});
    };*/
    
    /*--------先提交再保存end-------*/

    
    /**
	 * 查询数据字典子典所有数据
	 */
    function queryDictSub(){
    	var param={};
    	DictItemService.queryDictSubAll(param,function(resp){
    		if(resp.error==false){
    			$scope.poslevelList=resp.data.POSLEVEL;
    		}
    	})
    }
    
    
    /**
     * 查询岗位
     */
   function queryAllPost(){
    	var param={};
    	PostService.queryPost(param,function(resp){
    		if(resp.error==false){
    			$scope.posts=resp.data;
    		}
    	})
    }
    
}
/**
 * 
 */

angular.module('ework-ui').factory('workflowNew', [ '$resource', workflowNew ]);

angular.module('ework-ui').factory('workflowQuery', [ '$resource', workflowQuery ]);

angular.module('ework-ui').factory('workflowComplete', [ '$resource', workflowComplete ]);

angular.module('ework-ui').factory('DictsService', [ '$resource', DictsService ]);

angular.module('ework-ui').factory('DictTypeItemService', [ '$resource', DictTypeItemService ]);

angular.module('ework-ui').factory('DictItemService', [ '$resource', DictItemService ]);

angular.module('ework-ui').factory('OrgService', [ '$resource', OrgService ]);

angular.module('ework-ui').factory('EmployeeExtService', [ '$resource', EmployeeExtService ]);

angular.module('ework-ui').factory('EmployeeManageService', [ '$resource', EmployeeManageService ]);

angular.module('ework-ui').factory('PostService', [ '$resource', PostService ]);

angular.module('ework-ui').factory('PostLevelService', [ '$resource', PostLevelService ]);

angular.module('ework-ui').factory('PostRankService', [ '$resource', PostRankService ]);

angular.module('ework-ui').factory('PostDutyService', [ '$resource', PostDutyService ]);

angular.module('ework-ui').factory('RoleService', [ '$resource', RoleService ]);

angular.module('ework-ui').factory('hrm_AccountService', [ '$resource', hrm_AccountService ]);

angular.module('ework-ui').factory('ChangeEventService', [ '$resource', ChangeEventService ]);

angular.module('ework-ui').factory('ChangeEvent_HtService', [ '$resource', ChangeEvent_HtService ]);

angular.module('ework-ui').factory('EmployeeCheckService', [ '$resource', EmployeeCheckService ]);

angular.module('ework-ui').factory('hrmEmployeeService', [ '$resource', hrmEmployeeService ]);

angular.module('ework-ui').factory('hrmUploadImgService', [ '$resource', hrmUploadImgService ]);

angular.module('ework-ui').factory('hrmUploadImgService', [ '$resource', hrmUploadImgService ]);

angular.module('ework-ui').factory('hrmUpdateEmployeeImgService', [ '$resource', hrmUpdateEmployeeImgService ]);

function hrmUpdateEmployeeImgService($resource){
    return $resource('/hrm/employee/employeeservice/employeeInfo/image', {}, {
        update : {
            method : 'PUT',
            params : {},
            isArray : false
        }
    });
}
/**
 * 字典定义
 * @param $resource
 * @returns {*}
 * @constructor
 */
function hrmUploadImgService($resource){
    return $resource('/hrm/upload/base64Str', {}, {
        post : {
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}
/**
 * 字典定义
 * @param $resource
 * @returns {*}
 * @constructor
 */
function DictsService($resource){
    return $resource('/hrm/hrmSystemSettings/hrmDicttype/dictservice', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 字典类型服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function DictTypeItemService($resource){
    return $resource('/hrm/hrmSystemSettings/hrmDicttype/dictservice', {}, {
        add : {
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}


/**
 * 字典子项服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function DictItemService($resource){
    return $resource('/hrm/hrmSystemSettings/hrmDicttype/dictservice/sub', {}, {
    	query : {
            method : 'GET',
            params : {},
            isArray : false
        },
    	add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove:{
            method : 'DELETE',
            params : {},
            isArray : false
        },
        queryDictSubAll : {
        	url	:'/hrm/hrmSystemSettings/hrmDicttype/dictservice/suball',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}


/**
 * 组织机构
 * @param $resource
 * @returns {*}
 * @constructor
 */
function OrgService($resource){
    return $resource('/hrm/hrmSystemSettings/hrmOrgmgr/orgservice', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        //查询团队组织
        queryBu : {
        	url:'/hrm/hrmSystemSettings/hrmOrgmgr/orgservice/areas',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        //查询校区组织
        querySch : {
        	url:'/hrm/hrmSystemSettings/hrmOrgmgr/orgservice/schools',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
      //地址在组织机构
        queryOrgWithAccount:{
        	url:'/hrm/hrmSystemSettings/hrmAccountOrg/queryOrgWithAccount',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
		//查询产品线
		queryProductLine : {
			url : '/erp/dictionary/organization/productLine',
			method : 'GET',
			params : {},
			isArray : false
		},
	    add : {
	        method : 'POST',
	        params : {},
	        isArray : false
	    },
	    update : {
	        method : 'PUT',
	        params : {},
	        isArray : false
	    },
	    remove : {
	        method : 'DELETE',
	        params : {},
	        isArray : false
	    }
    });
}


/**
 * 员工档案定义
 * @param $resource
 * @returns {*}
 * @returns {*}
 * @constructor
 */
function EmployeeExtService($resource){
    return $resource('/hrm/hrmEmployee/hrmEmployeeExt/employee/employeeextservice', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        
        queryField : {
        	url	 :  '/hrm/hrmEmployee/hrmEmployeeExt/employee/employeeextfieldservice',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
	    add : {
	        method : 'POST',
	        params : {},
	        isArray : false
	    },
	    update : {
	        method : 'PUT',
	        params : {},
	        isArray : false
	    },
	    remove : {
	        method : 'DELETE',
	        params : {},
	        isArray : false
	    },
	    queryAreas:{
	    	url : '/hrm/hrmEmployee/hrmEmployeeExt/employee/employeeextservice/areas',
	    	method : 'GET',
            params : {},
            isArray : false
	    }
    });
}

/**
 * 查询单个员工信息服务
 * @param $resource
 * @returns {*}
 */
function hrmEmployeeService($resource){
    return $resource('/hrm/employee/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}
/**
 * 员工档案管理
 * @param $resource
 * @returns {*}
 * @constructor
 */
function EmployeeManageService($resource){
    return $resource('/hrm/employee/employeeservice', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryEmployeeForPage : 
        {
        	url:'/hrm/employee/employeeservice/page',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryEmployeeInfo:{
        	url:'/hrm/employee/employeeservice/employeeInfo',
        	method : 'GET',
            params : {},
            isArray : false
        },
	    add : {
	    	method : 'POST',
	        params : {},
	        isArray : false
	    },
	    update : {
	    	method : 'PUT',
	        params : {},
	        isArray : false
	    },
	    queryEmployeeEdu:{
	    	url:'/hrm/employee/employeeservice/employeeInfo/edu',
	    	method : 'GET',
	    	params : {},
	    	isArray : false
	    },
	    addEmployeeEdu : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/edu',
	    	method : 'POST',
	    	params : {},
	    	isArray : false
	    },
	    updateEmployeeEdu : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/edu',
	    	method : 'PUT',
	    	params : {},
	    	isArray : false
	    },
	    deleteEmployeeEdu : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/edu',
	    	method : 'DELETE',
	    	params : {},
	    	isArray : false
	    },
	    
	    queryEmployeeExp:{
	    	url:'/hrm/employee/employeeservice/employeeInfo/exp',
	    	method : 'GET',
	    	params : {},
	    	isArray : false
	    },
	    addEmployeeExp : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/exp',
	    	method : 'POST',
	    	params : {},
	    	isArray : false
	    },
	    updateEmployeeExp : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/exp',
	    	method : 'PUT',
	    	params : {},
	    	isArray : false
	    },
	    deleteEmployeeExp : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/exp',
	    	method : 'DELETE',
	    	params : {},
	    	isArray : false
	    },
	    
	    queryEmployeeSum:{
	    	url:'/hrm/employee/employeeservice/employeeInfo/sum',
	    	method : 'GET',
	    	params : {},
	    	isArray : false
	    },
	    addEmployeeSum : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/sum',
	    	method : 'POST',
	    	params : {},
	    	isArray : false
	    },
	    updateEmployeeSum : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/sum',
	    	method : 'PUT',
	    	params : {},
	    	isArray : false
	    },
	    deleteEmployeeSum : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/sum',
	    	method : 'DELETE',
	    	params : {},
	    	isArray : false
	    },
	    
	    queryEmployeeRew:{
	    	url:'/hrm/employee/employeeservice/employeeInfo/rew',
	    	method : 'GET',
	    	params : {},
	    	isArray : false
	    },
	    addEmployeeRew : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/rew',
	    	method : 'POST',
	    	params : {},
	    	isArray : false
	    },
	    updateEmployeeRew : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/rew',
	    	method : 'PUT',
	    	params : {},
	    	isArray : false
	    },
	    deleteEmployeeRew : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/rew',
	    	method : 'DELETE',
	    	params : {},
	    	isArray : false
	    },

	    updateEmployeeStatic : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/static',
	    	method : 'PUT',
	    	params : {},
	    	isArray : false
	    },
	    
	    queryPostByEmpId : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/post',
	    	method : 'GET',
	    	params : {},
	    	isArray : false
	    },
	    
	    addPost : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/post',
	    	method : 'POST',
	    	params : {},
	    	isArray : false
	    },
	    
	    removePost : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/post',
	    	method : 'DELETE',
	    	params : {},
	    	isArray : false
	    },
	    
	    setStatus : {
	    	url:'/hrm/employee/employeeservice/employeeInfo/status',
	    	method : 'DELETE',
	    	params : {},
	    	isArray : false
	    },

    });
}

/**
 * 岗位服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PostService($resource){
    return $resource('/hrm/common/postservice', {}, {
        /*queryPostForPage :
        {
            url: '/hrm/commonPage/postservice',
        	method : 'GET',
            params : {},
            isArray : false
        },*/
        queryPost:
        {
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        
	    add : {
	        method : 'POST',
	        params : {},
	        isArray : false
	    },
	    update : {
	        method : 'PUT',
	        params : {},
	        isArray : false
	    },
	    remove : {
	        method : 'DELETE',
	        params : {},
	        isArray : false
	    },
	    queryPostTypeName:
        {
	    	url:'/hrm/common/dict_type_sub/postservice',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
	    
    });
}

/**
 * 岗位层级服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PostLevelService($resource){
    return $resource('/hrm/common/postlevelservice', {}, {
        queryPostLevel:
        {
        	method : 'GET',
        	params : {},
        	isArray : false
        },
	    add : {
	        method : 'POST',
	        params : {},
	        isArray : false
	    },
	    update : {
	        method : 'PUT',
	        params : {},
	        isArray : false
	    }
    });
}

/**
 * 岗位职级服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PostRankService($resource){
    return $resource('/hrm/common/postrankservice', {}, {
    	queryPostRank:
        {
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        querySimplePostRank:
        {
        	url:'/hrm/common/postrankservice/simple',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
	    add : {
	        method : 'POST',
	        params : {},
	        isArray : false
	    },
	    update : {
	        method : 'PUT',
	        params : {},
	        isArray : false
	    }
    });
}

/**
 * 岗位职务服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function PostDutyService($resource){
    return $resource('/hrm/common/postdutyservice', {}, {
    	queryPostDuty:
        {
        	method : 'GET',
        	params : {},
        	isArray : false
        },
	    add : {
	        method : 'POST',
	        params : {},
	        isArray : false
	    },
	    update : {
	        method : 'PUT',
	        params : {},
	        isArray : false
	    }
    });
}


/**
 * 角色服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function RoleService($resource){
    return $resource('/hrm/hrmSystemSettings/hrmRoleMgr', {}, {
        queryRoleForPage:{
        	url:'/hrm/hrmSystemSettings/hrmRoleMgr/page',
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove:{
        	method : 'DELETE',
        	params : {},
        	isArray : false
        }, 
        
        queryRoleMenu:{
        	url:'/hrm/hrmSystemSettings/hrmRoleMgr/sub',
        	method : 'GET',
        	params : {},
        	isArray : false
        },
        
        updateRoleMenu:{
        	url:'/hrm/hrmSystemSettings/hrmRoleMgr/sub',
        	method : 'PUT',
        	params : {},
        	isArray : false
        } 
    });
}
/**
 * 账户服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function hrm_AccountService($resource){
    return $resource('/hrm/hrmSystemSettings/hrmAccountMgr', {}, {
         addAccount : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update:{
            method : 'PUT',
            params : {},
            isArray : false
        },
        remove:{
        	method : 'DELETE',
        	params : {},
        	isArray : false
        },
    	queryAccountForPage:{
        	url:'/hrm/hrmSystemSettings/hrmAccountMgr/page',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryRoleWithAccount:{
        	url:'/hrm/hrmSystemSettings/hrmAccountMgr/queryRoleWithAccount',
            method : 'GET',
            params : {},
            isArray : false
        },
        updateAccountRole : {
        	url:'/hrm/hrmSystemSettings/hrmAccountMgr/updateAccountRole',
            method : 'PUT',
            params : {},
            isArray : false
        },
        removeRole:{
        	url:'/hrm/hrmSystemSettings/hrmAccountMgr/removeAccountRole',
        	method : 'DELETE',
        	params : {},
        	isArray : false
        },
        updateAccountOrg : {
        	url:'/hrm/hrmSystemSettings/hrmAccountMgr/updateAccountOrg',
        	method : 'PUT',
        	params : {},
        	isArray : false
        },
        removeAccountRoleById : {
        	url : '/hrm/hrmSystemSettings/hrmAccountMgr/removeAccountRoleById',
        	method : 'DELETE',
        	params : {},
        	isArray : false
        }
    });
}

/**
 * 人事异动服务
 * @param $resource
 * @returns {*}
 * @constructor
 */
function ChangeEventService($resource){
	return $resource('/hrm/changeevent/service',{},{
		queryChangEventPage:{
			method:'GET',
			params:{},
			isArray:false
		},
		
		queryChangeEventType:{
			url : '/hrm/changeevent_type/service',
			method:'GET',
			params:{},
			isArray:false
		},
		
		queryDetail:{
			url : '/hrm/changeevent/service/detail',
			method:'GET',
			params:{},
			isArray:false
		},
		
		updateFollow:{
			url : '/hrm/changeeventfollow/service',
			method:'POST',
			params:{},
			isArray:false
		},
		//发送审批结果
		post:{
			url : '/hrm/updateapply/service',
			method:'POST',
			params:{},
			isArray:false
		}
		
	})
}

/**
 * 人事处理历史
 * @param $resource
 * @returns {*}
 * @constructor
 */
function ChangeEvent_HtService($resource){
	return $resource('/hrm/changeevent_ht/service',{},{
		queryChangEvent_HtPage:{
			method:'GET',
			params:{},
			isArray:false
		},
		queryDetail:{
			url:'/hrm/changeht/service/detail',
			method:'POST',
			params:{},
			isArray:false
		}
	})
}


/**
 * 人事异动管理
 * @param $resource
 * @returns {*}
 * @constructor
 */
function EmployeeCheckService($resource){
	return $resource('/hrm/applynew/service',{},{
		newModel:{
			method:'POST',
			params:{},
			isArray:false
		}
	})
}

/**
 * 工作流
 * @param $resource
 * @returns {*}
 * @constructor
 */
function workflowNew($resource){
	return $resource('/erp/workflow/task/new',{},{
		//发起一个新流程
		post:{
			method:'POST',
			params:{},
			isArray:false
		},
		query:{
			method:'GET',
			params:{},
			isArray:false
		}
	})
}


/**
 * 查询工作流分支
 * @param $resource
 * @returns {*}
 * @constructor
 */
function workflowQuery($resource){
	return $resource('/erp/workflow/task/outcomes',{},{
		query:{
			method:'GET',
			params:{},
			isArray:false
		}
	})
}

/**
 * 工作流分支选择处理
 * @param $resource
 * @returns {*}
 * @constructor
 */
function workflowComplete($resource){
	return $resource('/erp/workflow/task/complete',{},{
		post:{
			method:'POST',
			params:{},
			isArray:false
		}
	})
}
/**
 * 
 */
angular.module('ework-ui')
    .controller('OrgCtrl', [
        '$scope',
        '$log',
        '$state',
        '$timeout',
        '$uibModal',
        '$uibMsgbox',
        'OrgService',
        'erp_dictService',
        'erp_organizationService',
        OrgCtrl]);

function OrgCtrl($scope,
                  $log,
                  $state,
                  $timeout,
                  $uibModal,
                  $uibMsgbox,
                  OrgService,
                  erp_dictService,
                  erp_organizationService){
	$scope.orgDatas = [];
	$scope.itemOperateType = '';
    $scope.selectedItem = {};
    $scope.orgItem = {};
    $scope.productLineList = [];
    $scope.dictOrgList = [];
    $scope.bgImgUrlList = [];
    $scope.dictOrgKindList = []; // 校区类型选择框下拉值
    
    $scope.mapOptions = {
        searchInfo: '',
        longitude: 0,
        latitude: 0
    }
    $scope.reloadPage = function(){window.location.reload();}

    /**
     * 打开添加组织机构的面板
     */

    $scope.toAddItem = function(item){
    	$scope.itemOperateType = 'add';
    	
        $scope.selectedItem = item;
        $scope.selectedItem.address = null;
        $scope.selectedItem.longitude = null;
        $scope.selectedItem.latitude = null;
        $scope.selectedItem.domain = null;
        $scope.selectedItem.mchid = null;
        $scope.selectedItem.terminalNo = null;
        $scope.selectedItem.phone = null;
        $scope.selectedItem.org = "" + item.org;
        $scope.selectedItem.orgKind = "" + item.orgKind;
        
        if (item.org_type != 4) {
        	$scope.selectedItem.parent_id = item.id;
            $scope.selectedItem.parent_org_name = item.org_name;
        } else {
        	$scope.orgSelectType.type = item.org_type.toString();
        }
    	
        $('#OrgItemPanel').modal('show');
        $('#OrgItemPanel').on('shown.bs.modal', function(){
            $scope.initOrgMap('add-org-map');
        });
    }
    
    $scope.toUpdateItem = function(item){
        $scope.selectedItem = item;
        if (item.org) {
          $scope.selectedItem.org = "" + item.org;
        }

        if (item.orgKind) {
          $scope.selectedItem.orgKind = "" + item.orgKind;
        }
        $scope.itemOperateType = 'update';
        $scope.orgSelectType.type = item.org_type.toString();
        
        if (item.logo) {
        	$scope.bgImgUrlList = [];
        	$scope.bgImgUrlList.push(item.logo);
        }
        
        $('#OrgItemPanel').modal('show');
        $('#OrgItemPanel').on('shown.bs.modal', function(){
            $scope.initOrgMap('add-org-map');
        })
    }
    
    $scope.toDeleteItem = function(item){
        $scope.selectedItem = item;
    	$scope.title=$scope.selectedItem.status==1?"禁用":"启用";
    	$scope.modalBody="确认"+$scope.title+"当前【"+$scope.selectedItem.org_name+"】组织机构吗?";
        $scope.itemOperateType = 'remove';
        $('#DeleteOrgItemPanel').modal('show');
    }
    
    $scope.initOrgMap = function (mapElementId) {
        if (!$scope.orgMap) {
            $scope.orgMap = new BMap.Map(mapElementId);
            $scope.orgMap.centerAndZoom(new BMap.Point(116.404, 39.915), 11);  // 初始化地图,设置中心点坐标和地图级别
            $scope.orgMap.enableScrollWheelZoom(true);
            $scope.orgMapLocal = new BMap.LocalSearch($scope.orgMap, {
                renderOptions:{
                    map: $scope.orgMap,
                    panel: 'search-result-panel'
                },
                onInfoHtmlSet: function (poi, html) {
                    $scope.$apply(function() {
                        $scope.selectedItem.address = poi.address;
                        $scope.selectedItem.latitude = poi.point.lat;
                        $scope.selectedItem.longitude = poi.point.lng;
                    })
                }
            });
        }
        
    }

    $scope.orgMapSearch = function (address) {
        $scope.orgMapLocal.search(address)
    }

    /**
     * 添加组织机构
     */
    $scope.saveOrgItem = function(){
        if($scope.itemOperateType=='add'){
            $scope.addOrgItem();
        }else if($scope.itemOperateType=='update'){
            $scope.updateOrgItem();
        }else if($scope.itemOperateType=='remove'){
            $scope.removeOrgItem();
        }
    }

    $scope.addOrgItem = function(){
    	var item={};
    	$scope.orgItem.status = 1;
 		$scope.orgItem.parent_id = $scope.selectedItem.parent_id;
 		$scope.orgItem.org_name = $scope.selectedItem.name;
 		$scope.orgItem.org_type = $scope.orgSelectType.type;
 		if (!isEmpty($scope.selectedItem.address)) {
 			$scope.orgItem.address = $scope.selectedItem.address;
 		}
 		if (!isEmpty($scope.selectedItem.longitude)) {
 			$scope.orgItem.longitude = $scope.selectedItem.longitude;
 		}
 		if (!isEmpty($scope.selectedItem.latitude)) {
 			$scope.orgItem.latitude = $scope.selectedItem.latitude;
 		}
 		if (!isEmpty($scope.selectedItem.product_line)) {
 			$scope.orgItem.product_line = $scope.selectedItem.product_line;
 		}
 		if (!isEmpty($scope.selectedItem.org)) {
 			$scope.orgItem.org = $scope.selectedItem.org;
 		}
 		if (!isEmpty($scope.selectedItem.domain)) {
 			$scope.orgItem.domain = $scope.selectedItem.domain;
 		}
 		if (!isEmpty($scope.selectedItem.mchid)) {
 			$scope.orgItem.mchid = $scope.selectedItem.mchid;
 		}
 		if (!isEmpty($scope.selectedItem.terminalNo)) {
 			$scope.orgItem.terminalNo = $scope.selectedItem.terminalNo;
 		}
 		if (!isEmpty($scope.selectedItem.phone)) {
 			$scope.orgItem.phone = $scope.selectedItem.phone;
 		}
 		if (!isEmpty($scope.selectedItem.oldStuIntegral)) {
 			$scope.orgItem.oldStuIntegral = $scope.selectedItem.oldStuIntegral;
 		}
 		if (!isEmpty($scope.selectedItem.orgKind)) {
 			$scope.orgItem.orgKind = $scope.selectedItem.orgKind;
 		}
 		if (!isEmpty($scope.selectedItem.email)) {
 			$scope.orgItem.email = $scope.selectedItem.email;
 		}
      if (!isEmpty($scope.selectedItem.shortOrgName)) {
        $scope.orgItem.shortOrgName = $scope.selectedItem.shortOrgName;
      }
 		
 		if(!$scope.orgItem.org_name){
 			$uibMsgbox.error("新组织不能为空！");
			return;
		}

      if(!$scope.orgItem.shortOrgName){
        $uibMsgbox.error("组织机构简称不能为空！");
        return;
      }
 		
 		if (!$scope.orgItem.oldStuIntegral && $scope.orgItem.org_type == 3) {
 			$uibMsgbox.error("老学员积分不能为空！");
			return;
 		}
        var _waitingModal = $uibMsgbox.waiting('添加中，请稍候...');
        erp_organizationService.add($scope.orgItem,function(resp){
            _waitingModal.close();
        	if(!resp.error){
	                $('#AddOrgItemPanel').modal('hide');
	                $uibMsgbox.alert("添加成功！");
	                $scope.orgDatas[ $scope.orgDatas.length]= $scope.orgItem;
	                $scope.reloadPage();
            } else {
            	$uibMsgbox.error("添加失败！失败信息："+resp.message);
            }
        })
    }

    $scope.updateOrgItem = function(){
    	delete $scope.selectedItem.parent_org_name;
    	if (!$scope.selectedItem.oldStuIntegral && $scope.orgSelectType.type == 3) {
 			$uibMsgbox.error("老学员积分不能为空！");
			return;
 		}
        erp_organizationService.update($scope.selectedItem,function(resp){
            if(!resp.error){
                $('#UpdateOrgItemPanel').modal('hide');
                $uibMsgbox.alert("修改成功！");
                $scope.reloadPage();
            }else{
            	$uibMsgbox.error("修改失败！失败信息："+resp.message);
            }
        })
    }

    $scope.removeOrgItem = function(){
    	var item={};
    	$log.log("item id is " + $scope.selectedItem.id);
    	OrgService.remove({"id" : $scope.selectedItem.id}, function(resp){
    		if(resp.error == false){
                $('#DeleteOrgItemPanel').modal('hide');
                $uibMsgbox.alert($scope.title + "成功！");
                $scope.reloadPage();
            }else{
            	$uibMsgbox.error($scope.title + "失败！失败信息："+resp.message);
            }
        })
    }


    /**
     * 组织类型下拉框
     */   
    	$scope.orgSelectType = {type: '1'};
     
        $scope.orgType =
        [
            {type: '2', name: '地区级别'},
            {type: '3', name: '团队级别'},
            {type: '4', name: '校区级别'}
        ];
        
        /**
         * 查询组织机构
         */
        function queryOrg(){
            var param = {};
            OrgService.get(param,function(resp){
                if(resp.error == false){
                	$log.log( resp.data[0].items);
                    $scope.orgDatas = resp.data;
                    $scope.delayTree();
                }
            })
        };

        //延迟生成树结构  
        $scope.delayTree = function(){        
        	var todo = function() {
        		$scope.toTree();
        };
        	$timeout(todo,0);
        }

        $scope.toTree=function(){
        	   $("#tree_table_id").treetable({ expandable: true });
        	
			     // Highlight selected row
			     $("#tree_table_id tbody").on("mousedown", "tr", function() {
			       $(".selected").not(this).removeClass("selected");
			       $(this).toggleClass("selected");
			     });
			
		     $("#tree_table_id .folder").each(function() {
		       $(this).parents("#tree_table_id tr").droppable({
		         accept: ".file, .folder",
		         drop: function(e, ui) {
		           var droppedEl = ui.draggable.parents("tr");
		           $("#tree_table_id").treetable("move", droppedEl.data("ttId"), $(this).data("ttId"));
		         },
		         hoverClass: "accept",
		         over: function(e, ui) {
		           var droppedEl = ui.draggable.parents("tr");
		           if(this != droppedEl[0] && !$(this).is(".expanded")) {
		             $("#tree_table_id").treetable("expandNode", $(this).data("ttId"));
		           }
		         }
		       });
		     });
		     
        }
        
        $scope.queryProductLine = function() {
        	erp_organizationService.queryProductLine({}, function(resp) {
        		if (!resp.error && resp.data && resp.data.length > 0) {
        			$scope.productLineList = resp.data;
        		}
        	})
        }
        
        $scope.queryDictOrgList = function() {
        	erp_organizationService.queryDictOrgList({}, function(resp) {
        		if (!resp.error && resp.data && resp.data.length > 0) {
        			$scope.dictOrgList = resp.data;
        		}
        	})
        }
        
        $scope.queryDictOrgKindList = function() {
        	erp_dictService.query({"code" : "orgKind"}, function(resp) {
        		if (!resp.error && resp.data && resp.data.length > 0) {
        			$scope.dictOrgKindList = resp.data;
        		}
        	})
        }
		
		$scope.uploadLogo = function(img) {
			erp_organizationService.uploadLogo({
				id : $scope.selectedItem.id,
				logo : img
			}, function(resp) {
				if (!resp.error) {
					$uibMsgbox.alert("上传成功");
				} else {
					$uibMsgbox.error(resp.message);
				}
			});
		}
		
    	$scope.deleteLogo = function (img) {
    		erp_organizationService.deleteLogo({
				id : $scope.selectedItem.id
			}, function(resp) {
				if (!resp.error) {
					$uibMsgbox.alert("删除成功");
				} else {
					$uibMsgbox.error(resp.message);
				}
			});
    	}
    	
        queryOrg();
        $scope.queryProductLine();
        $scope.queryDictOrgList();
        $scope.queryDictOrgKindList();

}
/**
 * 
 */
angular.module('ework-ui')
    .controller('PostCtrl', [
        '$scope',
        '$log',
        '$state',
        'OrgService',
        'PostRankService',
        'PostDutyService',
        'PostService',
        PostCtrl]);

function PostCtrl($scope,
        $log,
        $state,
        OrgService,
        PostRankService,
        PostDutyService,
        PostService){
	$scope.postList = {};
	$scope.itemOperateType = '';
	$scope.selectedItem = {};
	
	/**
	 * 查询岗位列表
	 */
	function queryPost(){
		var param = {};
		
		$scope.isLoading = 'loading...';
		$scope.postList = [];
		
		/*$scope.pageParam = {
				pageNum:$scope.pageNum,
				pageSize:10
		};
		param.pageParam = $scope.pageParam;*/
		PostService.queryPost(param,function(resp){
			if(resp.error == false){
				$scope.postList = resp.data;
				//$scope.pageParam = resp.pageParam;
				$scope.isLoading = '';
			}
		})
	};
	
	
		queryPost();
	
	function queryPostRank(){
		var param = {};
		
		$scope.isLoading = 'loading...';
		$scope.postRankList = [];
		
		PostRankService.querySimplePostRank(param,function(resp){
			if(resp.error == false){
				$scope.postRankList = resp.data;
				$scope.isLoading = '';
			}
		})
	};
	queryPostRank();
	
	function queryPostDuty(){
		var param = {};
		
		$scope.isLoading = 'loading...';
		$scope.postDutyList = [];
		
		PostDutyService.queryPostDuty(param,function(resp){
			if(resp.error == false){
				$scope.postDutyList = resp.data;
				$scope.isLoading = '';
			}
		})
	};
	queryPostDuty();
	
	/**
	 * 打开添加岗位管理的面板
	 */
	
	$scope.toAddPostPanel = function(){
		//查询岗位类型
		//queryPostTypeName();
		$scope.selectedItem = {};
		$scope.itemOperateType = 'add';
	    $('#PostPanel').modal('show');
	};
	
	$scope.toUpdateItem = function(item){
		//查询岗位类型
		//queryPostTypeName();
	    $scope.selectedItem = item;
	    $scope.itemOperateType = 'update';
	    $('#PostPanel').modal('show');
	};
	
	/*$scope.toDeleteItem = function(post){
	    $scope.selectedItem = post;
		$scope.title=$scope.selectedItem.status==1?"禁用":"启用";
		$scope.modalBody="确认"+$scope.title+"当前【"+$scope.selectedItem.name+"】岗位吗?";
	    $scope.itemOperateType = 'remove';
	    $("#DeletePostPanel").modal("show");
	}*/
	
	/**
	 * 添加员工档案定义
	 */
	$scope.savePost = function(){
	    if($scope.itemOperateType=='add'){
	        $scope.addPost();
	    }else if($scope.itemOperateType=='update'){
	        $scope.updatePost();
	    }
	    /*else if($scope.itemOperateType=='remove'){
	        $scope.removePost();
	    }*/
	};
	
	//查询岗位类型名称
	function queryPostTypeName(){
		var param={};
		PostService.queryPostTypeName(param,function(resp){
			if(resp.error==false){
				$scope.post_typeList=resp.data;
			}
		})
	}
	
	$scope.addPost = function(){
		var item={};
		if($scope.selectedItem.post_name==""||$scope.selectedItem.post_name==null){
			alert("职务名称不能为空");
			return;
		}else{
			item.post_name=$scope.selectedItem.post_name;
		}
		if($scope.selectedItem.post_code==""||$scope.selectedItem.post_code==null){
			alert("职务编码不能为空");
			return;
		}else{
			item.post_code=$scope.selectedItem.post_code;
		}
		if($scope.selectedItem.post_type_id==""||$scope.selectedItem.post_type_id==null){
			alert("岗位不能为空");
			return;
		}else{
			item.post_type_id=$scope.selectedItem.post_type_id;
		}
		if($scope.selectedItem.rank_id==""||$scope.selectedItem.rank_id==null){
			alert("职级不能为空");
			return;
		}else{
			item.rank_id=$scope.selectedItem.rank_id;
		}
		/*if($scope.selectedItem.post_type==""||$scope.selectedItem.post_type==null){
			alert("类型不能为空");
			return;
		}else{item.post_type=$scope.selectedItem.post_type}*/
		PostService.add(item,function(resp){
			 if(resp.error == false){
				$('#PostPanel').modal('hide');
				alert("添加成功");
				//$scope.postList[$scope.postList.length]=$scope.selectedItem;
				queryPost();
			}else{
				alert("添加失败！失败信息："+resp.message);
			}
		})
	};
	
	$scope.updatePost = function(){
		var item={};
		item.id=$scope.selectedItem.id;
		if($scope.selectedItem.post_name==""||$scope.selectedItem.post_name==null){
			alert("职务名称不能为空");
			return;
		}else{
			item.post_name=$scope.selectedItem.post_name;
		}
		if($scope.selectedItem.post_type_id==""||$scope.selectedItem.post_type_id==null){
			alert("岗位不能为空");
			return;
		}else{
			item.post_type_id=$scope.selectedItem.post_type_id;
		}
		if($scope.selectedItem.rank_id==""||$scope.selectedItem.rank_id==null){
			alert("职级不能为空");
			return;
		}else{
			item.rank_id=$scope.selectedItem.rank_id;
		}
		/*if($scope.selectedItem.post_type==""||$scope.selectedItem.post_type==null){
			alert("类型不能为空");
			return;
		}else{item.post_type=$scope.selectedItem.post_type}*/
		PostService.update(item,function(resp){
			 if(resp.error==false){
				$('#PostPanel').modal('hide');
				alert("修改成功");
				queryPost();
			}else{
				alert("修改失败，失败信息："+resp.message);
			}
		})
	};
	
	/*$scope.removePost = function(){
		var param={};
		param.id=$scope.selectedItem.id;
		$("#DeletePostPanel").modal("hide");
		PostService.remove(param,function(resp){
			if(resp.error==false){
				alert("操作成功");
				$scope.queryInfo($scope.pageNum);
			}
		})
	};*/
	
    /**
     * 查询归属组织
     */
   /*function queryOrg(){
    	var param={};
        OrgService.get(param,function(resp){
            if(resp.error == false){
                $scope.orgs = resp.data;
            }
        })
    }*/
	
	


}
/**
 * 
 */
angular.module('ework-ui')
    .controller('PostDutyCtrl', [
        '$scope',
        '$log',
        '$state',
        'PostService',
        'PostRankService',
        'PostDutyService', 
        PostDutyCtrl]);

function PostDutyCtrl($scope,
        $log,
        $state,
        PostService,
        PostRankService,
        PostDutyService){
	$scope.postDutyList = [];
	$scope.itemOperateType = '';
	$scope.selectedItem = {};
	
	/**
	 * 查询列表
	 */
	function queryPostDuty(){
		var param = {};
		
		$scope.isLoading = 'loading...';
		$scope.postDutyList = [];
		
		PostDutyService.queryPostDuty(param,function(resp){
			if(resp.error == false){
				$scope.postDutyList = resp.data;
				$scope.isLoading = '';
			}
		})
	};
	
	queryPostDuty();
	
//	function queryPostRank(){
//		var param = {};
//		
//		$scope.isLoading = 'loading...';
//		$scope.postRankList = [];
//		
//		PostRankService.querySimplePostRank(param,function(resp){
//			if(resp.error == false){
//				$scope.postRankList = resp.data;
//				$scope.isLoading = '';
//			}
//		})
//	};
//	queryPostRank();
//	
//	function queryPost(){
//		var param = {};
//		
//		$scope.isLoading = 'loading...';
//		$scope.postList = [];
//		
//		PostService.queryPost(param,function(resp){
//			if(resp.error == false){
//				$scope.postList = resp.data;
//				$scope.isLoading = '';
//			}
//		})
//	};
//	queryPost();
	
	/**
	 * 打开添加面板
	 */
	
	$scope.toAddPostDutyPanel = function(){
		$scope.selectedItem = {};
		$scope.itemOperateType = 'add';
	    $('#PostDutyPanel').modal('show');
	};
	
	$scope.toUpdateItem = function(item){
	    $scope.selectedItem = item;
	    $scope.itemOperateType = 'update';
	    $('#PostDutyPanel').modal('show');
	};
	
	/**
	 * 添加
	 */
	$scope.savePostDuty = function(){
	    if($scope.itemOperateType=='add'){
	        $scope.addPostDuty();
	    }else if($scope.itemOperateType=='update'){
	        $scope.updatePostDuty();
	    }
	};
	
	$scope.addPostDuty = function(){
		var item={};
		item.remark=$scope.selectedItem.remark;
		if($scope.selectedItem.duty_name==""||$scope.selectedItem.duty_name==null){
				alert("岗位名称不能为空");
				return;
		}else{
			item.duty_name=$scope.selectedItem.duty_name;
		}
		
//		if($scope.selectedItem.post_id==""||$scope.selectedItem.post_id==null){
//			alert("对应岗位不能为空");
//			return;
//		}else{
//			item.post_id=$scope.selectedItem.post_id;
//		}
//		
//		if($scope.selectedItem.rank_id==""||$scope.selectedItem.rank_id==null){
//			alert("对应职级不能为空");
//			return;
//		}else{
//			item.rank_id=$scope.selectedItem.rank_id;
//		}
		
		PostDutyService.add(item,function(resp){
			 if(resp.error == false){
				$('#PostDutyPanel').modal('hide');
				alert("添加成功");
				queryPostDuty();
			}else{
				alert("添加失败！失败信息："+resp.message);
			}
		});
	};
	
	$scope.updatePostDuty = function(){
		var item={};
		item.id=$scope.selectedItem.id;
		item.remark=$scope.selectedItem.remark;
		if($scope.selectedItem.duty_name==""||$scope.selectedItem.duty_name==null){
			alert("岗位名称不能为空");
			return;
		}else{
			item.duty_name=$scope.selectedItem.duty_name;
		}
		
//		if($scope.selectedItem.post_id==""||$scope.selectedItem.post_id==null){
//			alert("对应岗位不能为空");
//			return;
//		}else{
//			item.post_id=$scope.selectedItem.post_id;
//		}
//		
//		if($scope.selectedItem.rank_id==""||$scope.selectedItem.rank_id==null){
//			alert("对应职级不能为空");
//			return;
//		}else{
//			item.rank_id=$scope.selectedItem.rank_id;
//		}
		
		PostDutyService.update(item,function(resp){
			 if(resp.error==false){
				$('#PostDutyPanel').modal('hide');
				alert("修改成功");
				queryPostDuty();
			}else{
				alert("修改失败，失败信息："+resp.message);
			}
		});
	};
	
}
/**
 * 
 */
angular.module('ework-ui')
    .controller('PostLevelCtrl', [
        '$scope',
        '$log',
        '$state',
        'PostLevelService',
        PostLevelCtrl]);

function PostLevelCtrl($scope,
        $log,
        $state,
        PostLevelService){
	$scope.postLevelList = [];
	$scope.itemOperateType = '';
	$scope.selectedItem = {};
	
	/**
	 * 查询列表
	 */
	function queryPostLevel(){
		var param = {};
		
		$scope.isLoading = 'loading...';
		$scope.postLevelList = [];
		
		PostLevelService.queryPostLevel(param,function(resp){
			if(resp.error == false){
				$scope.postLevelList = resp.data;
				$scope.isLoading = '';
			}
		})
	};
	
	queryPostLevel();
	
	$scope.levelTypeList = [
	    { "id": "PROFESSIONAL", "text": "专业通道(P)"},
	    { "id": "TECHNOLOGY", "text": "技术通道(T)"},
	    { "id": "MANAGEMENT", "text": "管理通道(M)"}
	];
	
	/**
	 * 打开添加面板
	 */
	
	$scope.toAddPostLevelPanel = function(){
		$scope.selectedItem = {};
		$scope.itemOperateType = 'add';
	    $('#PostLevelPanel').modal('show');
	};
	
	$scope.toUpdateItem = function(item){
	    $scope.selectedItem = item;
	    $scope.itemOperateType = 'update';
	    $('#PostLevelPanel').modal('show');
	};
	
	/**
	 * 添加
	 */
	$scope.savePostLevel = function(){
	    if($scope.itemOperateType=='add'){
	        $scope.addPostLevel();
	    }else if($scope.itemOperateType=='update'){
	        $scope.updatePostLevel();
	    }
	};
	
	$scope.addPostLevel = function(){
		var item={};
		if($scope.selectedItem.level_code==""||$scope.selectedItem.level_code==null){
				alert("层级不能为空");
				return;
			}else{item.level_code=$scope.selectedItem.level_code}
		if($scope.selectedItem.level_type==""||$scope.selectedItem.level_type==null){
			alert("类别不能为空");
			return;
		}else{item.level_type=$scope.selectedItem.level_type}
		PostLevelService.add(item,function(resp){
			 if(resp.error == false){
				$('#PostLevelPanel').modal('hide');
				alert("添加成功");
				queryPostLevel();
			}else{
				alert("添加失败！失败信息："+resp.message);
			}
		})
	};
	
	$scope.updatePostLevel = function(){
		var item={};
		item.id=$scope.selectedItem.id;
		if($scope.selectedItem.level_code==""||$scope.selectedItem.level_code==null){
			alert("层级不能为空");
			return;
		}else{item.level_code=$scope.selectedItem.level_code}
	if($scope.selectedItem.level_type==""||$scope.selectedItem.level_type==null){
		alert("类别不能为空");
		return;
	}else{item.level_type=$scope.selectedItem.level_type}
	PostLevelService.update(item,function(resp){
			 if(resp.error==false){
				$('#PostLevelPanel').modal('hide');
				alert("修改成功");
				queryPostLevel();
			}else{
				alert("修改失败，失败信息："+resp.message);
			}
		})
	};
	
}
/**
 * 
 */
angular.module('ework-ui')
    .controller('PostRankCtrl', [
        '$scope',
        '$log',
        '$state',
        'PostLevelService',
        'PostRankService',
        PostRankCtrl]);

function PostRankCtrl($scope,
        $log,
        $state,
        PostLevelService,
        PostRankService){
	$scope.postRankList = [];
	$scope.itemOperateType = '';
	$scope.selectedItem = {};
	
	/**
	 * 查询列表
	 */
	function queryPostRank(){
		var param = {};
		
		$scope.isLoading = 'loading...';
		$scope.postRankList = [];
		
		PostRankService.queryPostRank(param,function(resp){
			if(resp.error == false){
				$scope.postRankList = resp.data;
				$scope.isLoading = '';
			}
		})
	};
	queryPostRank();
	
	$scope.postLevelList = [];
	function queryPostLevel(){
		var param = {};
		
		$scope.isLoading = 'loading...';
		$scope.postLevelList = [];
		
		PostLevelService.queryPostLevel(param,function(resp){
			if(resp.error == false){
				$scope.postLevelList = resp.data;
				$scope.isLoading = '';
			}
		})
	};
	queryPostLevel();
	
	$scope.selectedList = [];
	$scope.removeSelected = function (select) {
		select.checked = false;
		_.remove($scope.selectedList, select);
    }

	$scope.handleSelectedListChange = function (select) {
		if (select.checked) {
			$scope.selectedList.push(select)
		} else {
			_.remove($scope.selectedList, select);
		}
	}
	
	/**
	 * 打开添加面板
	 */
	
	$scope.toAddPostRankPanel = function(){
		$scope.selectedItem = {};
		// 已选择的层级
		$scope.selectedList = [];
		// 清空选择
		_.forEach($scope.postLevelList, function(item) {
	    	item.checked = false;
	    });
		
		$scope.itemOperateType = 'add';
	    $('#PostRankPanel').modal('show');
	};
	
	$scope.toUpdateItem = function(item){
	    $scope.selectedItem = item;
	    // 已选择的层级
		$scope.selectedList = [];
	    // 层级Id
	    var level_ids = item.level_ids.split(/[,]/);
	    _.forEach($scope.postLevelList, function(item) {
	    	if(_.indexOf(level_ids, item.id) > -1) {
	    		item.checked = true;
	    		$scope.selectedList.push(item);
	    	} else {
	    		item.checked = false;
	    	}
	    });
	    
	    $scope.itemOperateType = 'update';
	    $('#PostRankPanel').modal('show');
	};
	
	/**
	 * 添加
	 */
	$scope.savePostRank = function(){
	    if($scope.itemOperateType=='add'){
	        $scope.addPostRank();
	    }else if($scope.itemOperateType=='update'){
	        $scope.updatePostRank();
	    }
	};
	
	$scope.addPostRank = function(){
		var item={};
		if($scope.selectedItem.rank_code==""||$scope.selectedItem.rank_code==null){
			alert("职级名称不能为空");
			return;
		} else {
			item.rank_code=$scope.selectedItem.rank_code;
		}
		
		if(!$scope.selectedList || $scope.selectedList.length < 1){
			alert("层级不能为空");
			return;
		} else {
			var level_ids = [];
		    _.forEach($scope.selectedList, function(item) {
		    	level_ids.push(item.id);
		    });
		    item.level_ids = level_ids.join(",");
		}
		PostRankService.add(item,function(resp){
			 if(resp.error == false){
				$('#PostRankPanel').modal('hide');
				alert("添加成功");
				queryPostRank();
			}else{
				alert("添加失败！失败信息："+resp.message);
			}
		});
	};
	
	$scope.updatePostRank = function(){
		var item={};
		item.id=$scope.selectedItem.id;
		
		if($scope.selectedItem.rank_code==""||$scope.selectedItem.rank_code==null){
			alert("职级名称不能为空");
			return;
		} else {
			item.rank_code=$scope.selectedItem.rank_code;
		}
		
		if(!$scope.selectedList || $scope.selectedList.length < 1){
			alert("层级不能为空");
			return;
		} else {
			var level_ids = [];
		    _.forEach($scope.selectedList, function(item) {
		    	level_ids.push(item.id);
		    });
		    item.level_ids = level_ids.join(",");
		}
		
		PostRankService.update(item,function(resp){
			 if(resp.error==false){
				$('#PostRankPanel').modal('hide');
				alert("修改成功");
				queryPostRank();
			}else{
				alert("修改失败，失败信息："+resp.message);
			}
		});
	};
	
}
/**
 * 
 */
angular.module('ework-ui')
	.controller('RoleCtrl', [
		'$scope',
		'$log',
		'$state',
        '$uibMsgbox',
		'MenusService',
		'RoleService',
	    RoleCtrl]);

function RoleCtrl($scope,
					$log,
					$state,
                    $uibMsgbox,
					MenusService,
					RoleService){
	$scope.RoleList = {};
	
    //当前角色的权限列表
    $scope.privileges=[];
    $scope.paginationBars=[];
	$scope.operateType = '';
    $scope.dialog={
        title:"角色管理",
    	confirmMsg:"确认禁用当前选中的角色吗?",
    }
    $scope.confirmMsg="确认禁用当前选中的角色吗?";
	/**
	 * 查询角色列表
	 */
	function queryRole(){
		var param = {};
		
		if($scope.roleName){
		param.roleName=$scope.roleName;
		}
		if($scope.selectedStatus!=null && $scope.selectedStatus!=''){
			param.status=$scope.selectedStatus;
		}else{
			param.status=-1;
		}
		$scope.isLoading = 'loading...';
		$scope.roleList = [];
		param.pageNum=$scope.pageNum;
		param.pageSize=10;
		/*$scope.pageParam = {
				pageNum:$scope.pageNum,
				pageSize:10
		};
		param.pageParam = $scope.pageParam;*/
		RoleService.queryRoleForPage(param,function(resp){
			if(!resp.error){
				$scope.roleList = resp.data;
				$scope.pageParam = resp.pageParam;
				$scope.isLoading = '';
				if ($scope.pageParam.pageNum > 1 && $scope.pageParam.pageNum < $scope.pageParam.pages) {
 	     	       $scope.paginationBars = [$scope.pageParam.pageNum - 1,$scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
 	         } else if ($scope.pageParam.pageNum == 1 && $scope.pageParam.pages > 1) {
 	     	       $scope.paginationBars = [ $scope.pageParam.pageNum, $scope.pageParam.pageNum + 1];
 	         } else if ($scope.pageParam.pageNum == $scope.pageParam.pages && $scope.pageParam.pages == 1) {
 	     	       $scope.paginationBars = [ $scope.pageParam.pageNum];
 	         } else if ($scope.pageParam.pageNum == $scope.pageParam.pages && $scope.pageParam.pages > 1) {
 	     	       $scope.paginationBars = [ $scope.pageParam.pageNum - 1,$scope.pageParam.pageNum];
 	         }
			}
		});
	};
	
	$scope.queryInfo=function(pageIndex){
		$scope.pageNum=pageIndex;
		queryRole();
	};
	
    /**
     * 增加角色
     */
    $scope.toAddRolePanel = function(){
        $scope.operateType = 'add';
        $scope.selectedRole = {};
        initialRoleTree(null);
        $("#roleMgrPanel").modal({"show":true,"backdrop":'static'});
    }

    /**
     * 修改角色
     * @param role
     */
    $scope.toUpdateRolePanel = function(role){
        $scope.selectedRole = role;
        queryRoleMenu();
        $scope.operateType = 'update';
        $("#roleMgrPanel").modal({"show":true,"backdrop":'static'});
    }

    /**
     * 禁用角色
     */
    $scope.toForbiddenRolePanel = function(role){
    	 $scope.title=role.status==1?"禁用":"启用"+"角色";
      	  $scope.modalBody="确认"+$scope.title+"当前【"+role.roleName+"】角色吗?";
      	  $scope.operateType = 'forbidden';
      	  $("#confirm_dialog").modal({"show":true,"backdrop":'static'});
      		 
             $scope.selectedRole = role;
    }

    /**
     * 操作确认
     */
    $scope.saveRole = function(){
        if($scope.operateType == 'add'){
            addRole();
        }else if($scope.operateType == 'update'){
            updateRole();
        	updateRoleMenu();
        }else if($scope.operateType == 'forbidden'){
            forbiddenRole();
        }
    }


    /**
     * 添加角色
     */
    function addRole(){
        var selectedMenus = genSelectedMenus();
        $scope.isSbumitting=true;
        $scope.selectedRole.selectedPrivileges = selectedMenus;
        if($scope.selectedRole.roleName==null&&$scope.selectedRole.roleName==''){
        	$uibMsgbox.alert("角色名不能为空");
        	return;
        }
        var _waitingModal = $uibMsgbox.waiting('操作中，请稍候...');
      RoleService.add($scope.selectedRole,function(resp){
            _waitingModal.close();
    	  $scope.isSbumitting=false;
            if(!resp.error){
                 $uibMsgbox.alert("添加成功!");
                 $scope.queryInfo($scope.pageNum);
                 $("#roleMgrPanel").modal("hide");
            }
            else if(resp.message){
            	$uibMsgbox.alert(resp.message);
            }
        })
    }

    /**
     * 禁用角色
     */
    function forbiddenRole(){
    	var param={}; 
    	$("#confirm_dialog").modal("hide");
    	param.roleId=$scope.selectedRole.id;
    	param.status=$scope.selectedRole.status==1?2:1;
        var _waitingModal = $uibMsgbox.waiting('操作中，请稍候...');
        RoleService.remove(param,function(resp){
            _waitingModal.close();
            if(!resp.error){
                $uibMsgbox.alert("操作成功!");
                $scope.queryInfo($scope.pageNum);
            }
        })
    }
    
    /**
     * 查询角色菜单权限
     */
    function queryRoleMenu(){
    	var param = {};
        param.id = $scope.selectedRole.id;
    	RoleService.queryRoleMenu(param,function(resp){
    		if(!resp.error){
    			initialRoleTree(resp.data);
    		}
    	})
    }

    /**
     * 修改角色
     */
    function updateRole(){
        var _waitingModal = $uibMsgbox.waiting('操作中，请稍候...');
        RoleService.update($scope.selectedRole,function(resp){
            _waitingModal.close();
            if(!resp.error){
                $uibMsgbox.alert("修改成功!");
                $("#roleMgrPanel").modal("hide");
               $scope.queryInfo($scope.pageNum);
            }
            else if(resp.message){
            	$uibMsgbox.alert(resp.message);
            }
        })
    }
    
    /**
     * 修改角色菜单权限关系
     */
    function updateRoleMenu(){
    	var param={};
    	param.roleId=$scope.selectedRole.id;
    	param.selectedPrivileges=genSelectedMenus();
    	RoleService.updateRoleMenu(param,function(resp){
    		if(!resp.error){
    			//$uibMsgbox.alert("修改角色菜单成功");
    		}
    	})
    }
    
    /**
     * 菜单数据转换成tree数据
     * @param treeNodeList
     * @param menus
     * @param root
     */
    function addMenu(treeNodeList,menus,root,privileges){
    $('#treeRole').jstree("destroy").empty();
        if(menus&&menus.length){
            $.each(menus,function(i,m){
                if(m.type == 'line'){
                    return;
                }
                var menuId=m.index;
                m.selected=false;
                for (var i in privileges) {
                  	if(privileges[i]==menuId){
                  		m['selected']=true;
                  		break;
                  }
                  }
                var node = {
                    "text": m.name,
                    "id": menuId,
                    "parent_id":root.id,
                    "type": m.menus&&m.menus.length?'menus':'leaf',
                    "state" : {
                        "selected" :  m.selected
                    }
                };
                treeNodeList.push(node);
                if(m.menus&&m.menus.length){
                    var subMenu = [];
                    node.children = subMenu;
                    addMenu(node.children, m.menus,node,privileges);
                }
            });
        }
    }
    $scope.allMenus = [];

    /**
     * 权限树初始化
     */
    function initialRoleTree(privileges){
        MenusService.get({},function(resp){
               var menus = resp.menus;
               $scope.allMenus = menus;
               var treeNode = [];
               var root = {id:"root"};
               addMenu(treeNode,menus,root,privileges);
               $('#treeRole').jstree({
                   "plugins" : ["types","checkbox"],
                   "types" : {
                       "menus" : {
                           "icon" : "fa fa-folder-o"
                       },
                       "leaf" : {
                           "icon" : "fa fa-file-text-o"
                       }
                   },
                   'core' : {
                       'data' : treeNode,
                       "check_callback" : function (operation, node, parent, position, more) {
                           //TODO
                       }
                   }
               });

        });
    }

    function genSelectedMenus(){
        var instance = $('#treeRole').jstree(true);
        var selectedMenus = instance.get_selected(true);
        var selected = [];
        for(var key in selectedMenus){
        	var type=selectedMenus[key].type;
        	if(type=='leaf')
            selected.push(selectedMenus[key].id);
        }
        $log.log(selected.join(","));
        return selected;
    }

	$scope.queryInfo(1);
}
/**
 * 
 */
"use strict";
angular
  .module('ework-ui')
  .controller('klxxedu_indexController', [
    '$rootScope',
    '$scope',
    '$cookieStore',
    '$log',
    '$uibModal',
    'erp_noticeService',
    klxxedu_indexController
  ]);

function klxxedu_indexController(
  $rootScope,
  $scope,
  $cookieStore,
  $log,
  $uibModal,
  erp_noticeService) {
  $scope.optype = 'view';
  $scope.notice = {};
  $scope.noticeList = [];

  $scope.totalNotice = 5;
  $scope.$watch('$parent.curSystem', function(newValue, oldValue) {
    if (newValue && newValue.menus) {
      $scope.menus = newValue.menus;
      if ($scope.menus) {
        $.each($scope.menus, function(i, menu) {
          menu.href = menu.href + "?_=" + (new Date()).getTime();
        });
      }
    }
  })
  
  $scope.queryNotice = function() {
    erp_noticeService.queryPage({
      pageSize: 5,
      currentPage: 1,
      p_status: 1
    }, function(resp) {
      if (resp.error) {
        $uibMsgbox.error(resp.message);
      } else {
        $scope.noticeList = resp.data;
        $scope.totalNotice = resp.total;
      }
    });
  }

  $scope.viewNotice = function(notice) {
    $scope.notice = notice;
    $uibModal.open({
      templateUrl: 'templates/block/modal/notice_detail.modal.html',
      controller: 'erp_noticeDetailController',
      resolve: {
        optype: function() {
          return 'view'
        }
      },
      scope: $scope
    }).result.then(function(detail) {}, function() {});

    erp_noticeService.addUserNoticeRel({
      notice_id: notice.id
    }, function(resp) {
        $scope.queryNotice()
    });
  }

  $scope.viewNoticeList = function() {
    $uibModal.open({
      size: 'lg',
      templateUrl: 'templates/block/modal/system-notice-list.modal.html',
      controller: 'erp_noticeListModalController',
      resolve: {
        optype: function() {
          return 'view';
        }
      }
    })
  }

  $('title').text('首页 | 厝边素高');

  $scope.queryNotice();
};

/**
 * Created by Liyong.zhu on 2017/1/15.
 */
'use strict';

//登出服务
angular.module('ework-ui').factory('LogoutService', [ '$resource', LogoutService ]);

//员工查询服务
angular.module('ework-ui').factory('klxx_EmployeeService', [ '$resource', klxx_EmployeeService ]);

//账户服务
angular.module('ework-ui').factory('klxx_accountService', [ '$resource', klxx_accountService ]);

/**
 * 账户查询服务
 * @param $resource
 * @returns {*}
 */
function klxx_accountService($resource){
    return $resource('/erp/common/accountservice', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 员工服务
 * @param $resource
 * @returns {*}
 */
function klxx_EmployeeService($resource){
    return $resource('/common/employeeservice/list', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

/**
 * 登出
 * @param $resource
 * @returns {*}
 * @constructor
 */
function LogoutService($resource){
    return $resource('/common/logout', {}, {
        query:{
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

'use strict';

/**
 * 报表任务设置
 */
angular.module('ework-ui').factory('report_taskSettingsService',
		[ '$resource', report_taskSettingsService ]);

/**
 * 报表任务运行状态
 */
angular.module('ework-ui').factory('report_taskResultService',
		[ '$resource', report_taskResultService ]);

/**
 * 业绩明细查询服务
 */
angular.module('ework-ui').factory('report_perfDetailsService',
		[ '$resource', report_perfDetailsService ]);

/**
 * 课程顾问绩效查询服务
 */
angular.module('ework-ui').factory('report_orderPerformaceService',
		[ '$resource', report_orderPerformaceService ]);

/**
 * 账户剩余表服务
 */
angular.module('ework-ui').factory('report_accountService',
		[ '$resource', report_accountService ]);

/**
 * 学员剩余课时费用表服务
 */
angular.module('ework-ui').factory('report_surplusAmountFeeService',
    [ '$resource', report_surplusAmountFeeService ]);

/**
 * 考勤消耗表服务
 */
angular.module('ework-ui').factory('report_attendanceReportService',
    [ '$resource', report_attendanceReportService ]);

/**
 * 自动考勤报表服务
 */
angular.module('ework-ui').factory('report_autoAttendanceReportService',
    [ '$resource', report_autoAttendanceReportService ]);

/**
 * 培英班教师工作量表服务
 */
angular.module('ework-ui').factory('report_teacherWorkloadService',
    [ '$resource', report_teacherWorkloadService ]);

/**
 * 账户流水报表
 */
angular.module('ework-ui').factory('report_accountFlowService',
		[ '$resource', report_accountFlowService ]);
/**
 * 充值取现报表
 */
angular.module('ework-ui').factory('report_rechargeCashService',
		[ '$resource', report_rechargeCashService ]);
/**
 * 出纳信息表
 */
angular.module('ework-ui').factory('report_accountCashierService',
		[ '$resource', report_accountCashierService ]);
/**
 * 报冻退转报表
 */
angular.module('ework-ui').factory('report_orderChangeReportService',
		[ '$resource', report_orderChangeReportService ]);
/**
 * 每日业绩汇总报表
 */
angular.module('ework-ui').factory('report_performanceSumService',
		[ '$resource', report_performanceSumService ]);
/**
 * 培英班续报率报表
 */
angular.module('ework-ui').factory('report_renewalRateService',
		[ '$resource', report_renewalRateService ]);
/**
 * 培英班满班率报表
 */
angular.module('ework-ui').factory('report_fullclassRateService',
    [ '$resource', report_fullclassRateService ]);

/**
 * 晚辅导教师考勤表
 */
angular.module('ework-ui').factory('report_wfdTeacherAttendanceService',
		[ '$resource', report_wfdTeacherAttendanceService ]);

/**
 * 月度消耗表服务
 */
angular.module('ework-ui').factory('report_attendanceMonthService',
    [ '$resource', report_attendanceMonthService ]);

/**
 * 月度分类考勤表
 */
angular.module('ework-ui').factory('report_busAttendMonthService',
    [ '$resource', report_busAttendMonthService ]);

/**
 * 在线支付订单明细表
 */
angular.module('ework-ui').factory('report_onLineOrderService',
    [ '$resource', report_onLineOrderService ]);

/**
 * 培英班运营汇总
 */
angular.module('ework-ui').factory('report_bizStatisticsService',
    [ '$resource', report_bizStatisticsService ]);

/**
 * 培英班教研组统计
 */
angular.module('ework-ui').factory('report_teacherGroupAttendanceService',
    [ '$resource', report_teacherGroupAttendanceService]);

/**
 * 班级分析报表
 */
angular.module('ework-ui').factory('report_courseAnalysisService',
    [ '$resource', report_courseAnalysisService]);

/**
 * 个性化学生状态报表
 */
angular.module('ework-ui').factory('report_gxhStudentStatusService',
    [ '$resource', report_gxhStudentStatusService]);

function report_taskSettingsService($resource) {
	return $resource('/report/settings/service', {}, {
        queryList : {
            method : 'GET',
            params : {},
            isArray : false
        },
        add : {
            method : 'POST',
            params : {},
            isArray : false
        },
        update : {
            method : 'PUT',
            params : {},
            isArray : false
        },
        changeStatus : {
        	url : '/report/settings/changeStatus',
        	method : 'PUT',
            params : {},
            isArray : false
        }
    });
}

function report_taskResultService($resource) {
	return $resource('/report/taskrun/service', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        execute : {
        	url : '/report/taskrun/execute',
            method : 'POST',
            params : {},
            isArray : false
        }
    });
}

function report_perfDetailsService($resource) {
	return $resource('/report/common/performanceDetails', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryList : {
        	url : '/report/common/performanceDetails/list',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/performanceDetails/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_orderPerformaceService($resource) {
	return $resource('/report/common/order/performance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryList : {
        	url : '/report/common/order/performance/list',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/order/performance/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}


function report_accountService($resource) {
    return $resource('/report/common/account', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        output : {
            url : '/report/common/account/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_surplusAmountFeeService($resource) {
    return $resource('/report/common/surplusamountfee', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        output : {
            url : '/report/common/surplusamountfee_output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_attendanceReportService($resource) {
    return $resource('/report/common/attendance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        output : {
            url : '/report/common/attendance_output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_autoAttendanceReportService($resource) {
    return $resource('/report/common/auto/attendance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        output : {
            url : '/report/common/auto/attendance_output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_teacherWorkloadService($resource) {
    return $resource('/report/bjk/teacherworkload', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        output : {
            url : '/report/bjk/teacherworkload_output',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryOrderStudents : {
            url : '/report/bjk/teacherworkload/order',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryAttendanceStudents : {
            url : '/report/bjk/teacherworkload/attend',
            method : 'GET',
            params : {},
            isArray : false
        },
        outputOrderStudents : {
            url : '/report/bjk/teacherworkload/order/output',
            method : 'GET',
            params : {},
            isArray : false
        },
        outputAttendanceStudents : {
            url : '/report/bjk/teacherworkload/attend/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_attendanceMonthService($resource) {
    return $resource('/report/common/monthattendance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        output : {
            url : '/report/common/monthattendance_output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_busAttendMonthService($resource) {
    return $resource('/report/common/monthbusinessattendance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        output : {
            url : '/report/common/monthbusinessattendance_output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_accountFlowService($resource) {
	return $resource('/report/common/accountFlow', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryList : {
        	url : '/report/common/accountFlow/list',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/accountFlow/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_rechargeCashService($resource) {
	return $resource('/report/common/accountFlow/recharge', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/accountFlow/recharge/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_accountCashierService($resource) {
	return $resource('/report/common/accountFlow/cashier', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/accountFlow/cashier/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
	
	
}

function report_orderChangeReportService($resource) {
	return $resource('/report/common/orderchange', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/orderchange/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });

}

function report_performanceSumService($resource) {
	return $resource('/report/common/performancesum', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/performancesum/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });	
	
	
}

function report_renewalRateService($resource) {
	return $resource('/report/common/renewalRate/sum', {}, {
		queryForSum : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcelForSum : {
        	url : '/report/common/renewalRate/sum/output',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryForLastBase : {
        	url : '/report/common/renewalRate/lastbase',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcelForLastBase : {
        	url : '/report/common/renewalRate/lastbase/output',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryForEstimate : {
        	url : '/report/common/renewalRate/estimate',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcelForEstimate : {
        	url : '/report/common/renewalRate/estimate/output',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryForActual : {
        	url : '/report/common/renewalRate/actual',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcelForActual : {
        	url : '/report/common/renewalRate/actual/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });	
	
}

function report_wfdTeacherAttendanceService($resource) {
	return $resource('/report/wfd/teacher_attendance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/wfd/teacher_attendance/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_onLineOrderService($resource) {
	return $resource('/report/common/onLineOrder', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        queryList : {
        	url : '/report/common/onLineOrder/list',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
        	url : '/report/common/onLineOrder/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_fullclassRateService($resource) {
    return $resource('/report/common/fullClass/rate', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
            url : '/report/common/fullClass/rate/output',
            method : 'GET',
            params : {},
            isArray : false
        },
        queryLast:{
            url : '/report/common/fullClass/last',
            method : 'GET',
            params : {},
            isArray : false
        },
        exportLastExcel:{
            url : '/report/common/fullClass/last/output',
            method : 'GET',
            params : {},
            isArray : false
        },
    });
}

function report_bizStatisticsService($resource) {
    return $resource('/report/common/order/statistics', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
            url : '/report/common/order/statistics/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_teacherGroupAttendanceService($resource) {
    return $resource('/report/common/teachergroup/attendance', {}, {
        query : {
            method : 'GET',
            params : {},
            isArray : false
        },
        exportExcel : {
            url : '/report/common/teachergroup/attendance/output',
            method : 'GET',
            params : {},
            isArray : false
        }
    });
}

function report_courseAnalysisService($resource) {
  return $resource('/report/bjk/courseAnalysisReport', {}, {
    query: {
      method: 'GET',
      params: {},
      isArray: false
    },
    exportExcel: {
      url: '/report/bjk/courseAnalysisReport/output',
      method: 'GET',
      params: {},
      isArray: false
    }
  });
}

function report_gxhStudentStatusService($resource) {
    return $resource('/report/common/gxh/student/status', {}, {
        query: {
            method: 'GET',
            params: {},
            isArray: false
        },
        output: {
            url: '/report/common/gxh/student/status/output',
            method: 'GET',
            params: {},
            isArray: false
        },
        queryBranch: {
            url: '/report/common/gxh/student/status/branch',
            method: 'GET',
            params: {},
            isArray: false
        },
        outputBranchExcel: {
            url: '/report/common/gxh/student/status/branch/output',
            method: 'GET',
            params: {},
            isArray: false
        },
        queryDetail: {
            url: '/report/common/gxh/student/status/detail',
            method: 'GET',
            params: {},
            isArray: false
        },
        outputDetailExcel: {
            url: '/report/common/gxh/student/status/detail/output',
            method: 'GET',
            params: {},
            isArray: false
        }
    });
}
angular.module('ework-ui').controller('report_taskResultController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    '$uibModal',
    'report_taskResultService',
    report_taskResultController
]);

function report_taskResultController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  $uibModal,
                                  report_taskResultService) {

    $scope.searchParam = {};
    
    $scope.taskResult = {};
    
    $scope.taskResultList = [];
    
    $scope.typeList = [{
		id : 'common',
		text : '通用'
	}, {
		id : 'bjk',
		text : '班级课'
	}, {
		id : 'ydy',
		text : '一对一'
	}, {
		id : 'wfd',
		text : '晚辅导'
	}];
    
    $scope.runResultList = [{
		id : 1,
		text : '成功'
	}, {
		id : 0,
		text : '失败'
	}];
    
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，默认]
     * @param  {Function} perPageOptions [description]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function() {
            $scope.queryTaskResult();
        }
    };

    $scope.paginationBars = [];
    
    $scope.queryTaskResult = function () {
		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
		$scope.searchParam.pageSize = $scope.paginationConf.itemsPerPage;
		$scope.searchParam.currentPage = $scope.paginationConf.currentPage;
		report_taskResultService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.taskResultList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };
    
    $scope.executeTask = function(taskResult) {
    	var _uibModalInstance = $uibMsgbox.waiting('运行中，请稍候...');
    	report_taskResultService.execute({
    		taskFlow : taskResult.taskFlow,
    		taskId : taskResult.taskId
    	}, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
            	$scope.queryTaskResult();
            	$uibMsgbox.alert("运行成功！");
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }    
    
    $scope.initPage = function() {
    	$scope.queryTaskResult();
    }
    
    $scope.initPage();
}
angular.module('ework-ui').controller(
		'report_taskSettingsModalController',
		[ '$scope', '$uibModalInstance', '$uibMsgbox', 'optype', 'taskSetting',
				report_taskSettingsModalController ])

function report_taskSettingsModalController($scope, $uibModalInstance, $uibMsgbox,
		optype, taskSetting) {
	$scope.taskSetting = taskSetting;
	$scope.optype = optype;

	$scope.unitList = [{
		id : 1,
		text : '天'
	}, {
		id : 2,
		text : '时'
	}, {
		id : 3,
		text : '分'
	}, {
		id : 4,
		text : '秒'
	}, {
		id : 5,
		text : '毫秒'
	}];
	
	$scope.typeList = [{
		id : 'common',
		text : '通用'
	}, {
		id : 'bjk',
		text : '班级课'
	}, {
		id : 'ydy',
		text : '一对一'
	}, {
		id : 'wfd',
		text : '晚辅导'
	}];

	$scope.confirm = function() {
		$uibMsgbox.confirm('确认保存？', function(res) {
			if (res == 'yes') {
				$uibModalInstance.close($scope.taskSetting);
			}
		});
	}
}

angular.module('ework-ui').controller('report_taskSettingsController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    '$uibModal',
    'report_taskSettingsService',
    report_taskSettingsController
]);

function report_taskSettingsController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  $uibModal,
                                  report_taskSettingsService) {

    $scope.searchParam = {};
    
    $scope.taskSetting = {};
    
    $scope.taskSettings = [];
    
    $scope.optype = 'add';
    
    $scope.typeList = [{
		id : 'common',
		text : '通用'
	}, {
		id : 'bjk',
		text : '班级课'
	}, {
		id : 'ydy',
		text : '一对一'
	}, {
		id : 'wfd',
		text : '晚辅导'
	}];
    
    $scope.queryTaskSettings = function () {
		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
		report_taskSettingsService.queryList($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.taskSettings = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };
    
    $scope.handleAddTaskSetting = function() {
    	$scope.optype = 'add';
    	$scope.openModal();
    }
    
    $scope.handlePutTaskSetting = function(taskSetting) {
    	$scope.optype = 'update';
    	$scope.taskSetting = taskSetting;
    	$scope.openModal();
    }
    
    $scope.openModal = function() {
    	$uibModal.open({
			resolve : {
				optype : function() {
					return $scope.optype;
				},
				taskSetting : function() {
					return ($scope.optype == 'add') ? {} : $scope.taskSetting;
				}
			},
			templateUrl : 'templates/block/modal/settings.modal.html',
			controller : 'report_taskSettingsModalController'
		}).result.then(function(taskSetting) {
			$scope.taskSetting = taskSetting;
			if ($scope.optype == 'add') {
				$scope.add();
			} else {
				$scope.update();
			}
		}, function() {
		});
    }
    
    $scope.check = function() {
    	if (!checkStartEndTime($scope.taskSetting.startDate, $scope.taskSetting.endDate)) {
    		$uibMsgbox.error("截止日期不能小于开始日期");
    		return false;
    	}
    	return true;
    }
    
    $scope.add = function() {
    	if ($scope.check()) {
    		report_taskSettingsService.add($scope.taskSetting, function(resp) {
        		if (!resp.error) {
        			$uibMsgbox.alert("添加成功！");
        		} else {
        			$uibMsgbox.error(resp.message);
        		}
        	});
    	}
    }

    $scope.update = function() {
    	if ($scope.check()) {
    		report_taskSettingsService.update($scope.taskSetting, function(resp) {
        		if (!resp.error) {
        			$uibMsgbox.alert("修改成功！");
        		} else {
        			$uibMsgbox.error(resp.message);
        		}
        	});
    	}
    }
    
    $scope.onStatusChange = function(taskSetting) {
		report_taskSettingsService.changeStatus(taskSetting, function(resp) {
    		if (!resp.error) {
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
    	});
    }
    
    $scope.initPage = function() {
    	$scope.queryTaskSettings();
    }
    
    $scope.initPage();
}
(function() {
  "use strict";

  angular.module('ework-ui')
    .config(frMyCourseConfig)
    .controller('frMyCourseCtrl', frMyCourseCtrl)
    .filter('frStatus', frStatusFilter)
    .service('frMyCourse', frMyCourseService)

  frMyCourseConfig.$inject = ['$stateProvider']
  function frMyCourseConfig($stateProvider) {
    $stateProvider
      .state('/myCourse/myCourseClass', {
        url: '/tr/myCourse/:id/myCourseClass',
        templateUrl: 'templates/tr/template/myCourseClass.html'
      })
      .state('/myCourse/video', {
        url: '/tr/myCourse/:id/video',
        templateUrl: 'templates/tr/video.html'
      })
  }

  frMyCourseCtrl.$inject = ['$scope','frMyCourse', '$log', '$state', '$uibMsgbox', '$rootScope'];
  function frMyCourseCtrl($scope, frMyCourse, $log, $state, $uibMsgbox, $rootScope) {
    window.myCourse = $scope.myCourse;
    var vm = this;
    //- init variable
    vm.title = "我的课程";
    vm.first = 1;
    vm.loading = true;
    vm.courseInfoList = [];
    vm.queryParams = {
      courseTitle: '',
      subjectId: '',
      gradeId: '',
      limit: 10,
      start: 0
    }
    vm.courseStatuses = [{
      label: '全部',
      value: ''
    },{
      label: '未结课',
      value: 1
    },{
      label: '已结课',
      value: 2
    }]
    vm.paginationConf = {
      currentPage: 1,
      totalItems: 0,
      itemsPerPage: 10,
      onChange: function() {
        // if (vm.queryParams.limit == vm.paginationConf.itemsPerPage && vm.first === 1 && vm.paginationConf.currentPage === 1) {
        //   return
        // }
        vm.queryParams.start = vm.paginationConf.currentPage - 1;
        sessionStorage.setItem('myCourseCurrentPage', parseInt(vm.queryParams.start))
        vm.queryParams.limit = vm.paginationConf.itemsPerPage;
        vm.getCourses(vm.queryParams);
        vm.first++;
      }
    }
    
    $scope.$watch('selectedSubject', function(newValue, oldValue) {
      vm.queryParams.subjectId = newValue;
      if (vm.queryParams.subjectId && vm.queryParams.gradeId) {
        activate();
      }
    })

    $scope.$watch('selectedGrade', function(newValue, oldValue) {
      vm.queryParams.gradeId = newValue;
      if (vm.queryParams.subjectId && vm.queryParams.gradeId) {
        activate();
      }
    })

    //- method
    vm.activate = activate;
    vm.go = go;
    vm.getCourses = getCourses;
    vm.search = search;
    vm.toggleShow = toggleShow;
    vm.queryByCondition = queryByCondition;

    //- 启动
    // activate();

    function activate() {
      if(sessionStorage.getItem('myCourseCurrentPage')) {
        vm.queryParams.start = parseInt(sessionStorage.getItem('myCourseCurrentPage'));
        vm.paginationConf.currentPage = parseInt(vm.queryParams.start) + 1;
      }
      if(sessionStorage.getItem('myCourseSearchParams')) {
        vm.queryParams.courseTitle = sessionStorage.getItem('myCourseSearchParams')
      }
      return getCourses(vm.queryParams).then(function() {
        $log.info('activated courses view')
        vm.loading = false;
      })
    }

    function go(stateName, id) {
      $state.go(stateName, {id: id});
    }

    function search(key) {
      vm.loading = true;
      vm.queryParams.courseTitle = key
      vm.queryParams.start = 0;
      sessionStorage.setItem("myCourseCurrentPage", vm.queryParams.start);
      return getCourses(vm.queryParams).then(function() {
        sessionStorage.setItem('myCourseSearchParams', key)
        $log.info('search condition:' + key);
        if (vm.courseInfoList.length === 0) {
          vm.paginationConf.totalItems = 0;
        }
        vm.loading = false;
      })
    }

    function toggleShow(key) {
      if (key == 'courseStatus') {
        vm[key + 'Field'] = !vm[key + 'Field'];
        return 
      }
    }

    function queryByCondition(type, key) {
      vm.loading = true;
      var arr = ['courseStatus']
      angular.forEach(arr, function(item) {
        vm[item+'Field'] = false;
      })
      vm.queryParams[key] = type;
      vm.queryParams.start = 0;
      getCourses(vm.queryParams).then(function() {
        $log.info('search selectType:' + type);
      }).finally(function() {
        vm.loading = false;
      })
    }

    /**
     * [depend on course name to search result]
     * @param  {[string]} key [course name]
     * @return {[type]}     [description]
     */
    function getCourses(params) {
      return frMyCourse.getCourses(params)
        .then(function(data) {
          if (data.error) {
            $uibMsgbox.error(data.message || '请求数据失败！');
            vm.paginationConf.totalItems = 0;
            return ;
          }
          vm.courseInfoList = data.data.courseList;
          vm.paginationConf.totalItems = data.total || 0;
          return vm.courseInfoList;
        }, function(error) {
          console.log(error);
        })
    }

  }

  function frStatusFilter() {
    return function(status) {
      if (angular.isUndefined(status)) {return ;}
      if (status == 1) {
        return '未结课';
      } else if(status == 2) {
        return '已结课';
      } else {
        return '';
      }
    }
  }

  frMyCourseService.$inject = ['$http', '$log', '$q'];
  function frMyCourseService($http, $log, $q) {
    return {
      getCourses: getCourses
    }

    function getCourses(params) {
      return $http.post('/erp/myCourse/queryCourseDetailList', params || {})
        .then(getCourseComplete)
        .catch(getCourseFailed);

      function getCourseComplete(response) {
        return response.data;
      }

      function getCourseFailed(error) {
        $log.error('XHR Failed for getCourses.' + error.data);
        return $q.reject(error);
      }
    }
  }

})();
(function() {
  "use strict";

  angular.module('ework-ui')
    .controller('frMyCourseClassCtrl', frMyCourseClassCtrl)
    .service('frMyCourseClass', frMyCourseClassService)

  frMyCourseClassCtrl.$inject = ['$scope', '$log', 'frMyCourseClass', '$stateParams', '$state'];
  function frMyCourseClassCtrl($scope, $log, frMyCourseClass, $stateParams, $state) {
    window.myCourseClass = $scope.myCourseClass;
    var vm = this;
    vm.id = $stateParams.id;
    //- init variable
    vm.title = "我的课次";
    vm.courseClassInfoList = [];
    vm.loading = true;

    //- method
    vm.activate = activate;
    vm.getCourseClass = getCourseClass;
    vm.back = back;
    vm.go = go;

    //- 启动
    activate();

    function activate() {
      return getCourseClass(vm.id).then(function() {
        $log.info('activated courseClass view');
        vm.loading = false;
      })
    }

    function getCourseClass(key) {
      var params = {
        courseId: key
      };
      return frMyCourseClass.getCourseClass(params)
        .then(function(data) {
          vm.courseClassInfoList = data.data.courseClassList;
          return vm.courseClassInfoList;
        }, function(error) {
          console.log(error);
        })
    }

    function back() {
      history.back();
    }

    function go(stateName, id, type) {
      $state.go(stateName, {id: id, type: type});
    }

  }

  frMyCourseClassService.$inject = ['$http', '$log', '$q'];
  function frMyCourseClassService($http, $log, $q) {
    return {
      getCourseClass: getCourseClass
    }

    function getCourseClass(params) {
      return $http.get('/erp/myCourse/queryCourseClassDetailList', {params: params})
        .then(getCourseClassComplete)
        .catch(getCourseClassFailed);

      function getCourseClassComplete(response) {
        return response.data;
      }

      function getCourseClassFailed(error) {
        $log.error('XHR Failed for getCourseClass.' + error);
        $q.reject(error);
      }
    }
  }

})();
(function() {
    "use strict";

    angular.module('ework-ui')
        .config(['$stateProvider', function($stateProvider) {
            $stateProvider
                .state('/workManagement/setting', {
                    url: '/tr/workManagement/:id/setting?productCode',
                    templateUrl: 'templates/tr/workManagement/workManagementSetting.html'
                })
                .state('/workManagement/work/add', {
                    url: '/tr/workManagement/work/add?productCode',
                    templateUrl: 'templates/tr/workManagement/add.html'
                })
                .state('/workManagement/work/edit', {
                    url: '/tr/workManagement/work/:id/edit?productCode',
                    templateUrl: 'templates/tr/workManagement/edit.html'
                })
                .state('/workManagement/work/view', {
                    url: '/tr/workManagement/work/:id/view?type,productCode',
                    templateUrl: 'templates/tr/workManagement/view.html'
                })
        }])
        .controller('frWorkManagementCtrl', frWorkManagementCtrl)
        .service('frWorkMgt', frWorkMgtService)
        .filter('frStatusCode', frStatusCodeFilter)
        .filter('frWorkType', frTypeFilter)


    frWorkManagementCtrl.$inject = ['$scope', '$state', 'frWorkMgt', '$log', '$uibMsgbox', '$location', '$q', '$rootScope']
    function frWorkManagementCtrl($scope, $state, frWorkMgt, $log, $uibMsgbox, $location, $q, $rootScope) {
        window.workMgt = $scope.workMgt;
        window.rootScope = $rootScope;
        var vm = this;
        vm.first = 1;
        vm.loading = true;
        vm.queryParams = {
            type: '',
            workTitle: '',
            statusCode: undefined,
            subjectId: '',
            gradeId: '',
            limit: 10,
            start: 0,
            productCode: 'DOUBLE_TEACHER'
        }
        $scope.$watch('selectedSubject', function(newValue, oldValue) {
            vm.queryParams.subjectId = newValue;
            if (vm.queryParams.subjectId && vm.queryParams.gradeId) {
                activate();
            }
        })

        $scope.$watch('selectedGrade', function(newValue, oldValue) {
            vm.queryParams.gradeId = newValue;
            if (vm.queryParams.subjectId && vm.queryParams.gradeId) {
                activate();
            }
        })
        vm.workTypes = [{
            value: '',
            label: '全部'
        },{
            value: 'PRE_CLASS',
            label: '课前预习'
        },{
            value: 'ENTRY_TEST',
            label: '入门测试'
        },{
            value: 'IN_CLASS',
            label: '课中例题'
        },{
          value: 'CLASS_TEST',
          label: '课堂测试'
        },{
            value: 'AFTER_CLASS',
            label: '课后作业'
        },{
          value: 'EXAM',
          label: '考试'
        }]
        vm.statusCodes = [{
            label: '全部',
            value: ''
        },{
            label: '已发布',
            value: 'PUBLISHED'
        },{
            label: '未发布',
            value: 'INIT'
        }]
        /**
         * 分页参数
         * @type {Object}
         */
        vm.paginationConf = {
            currentPage: 1,
            totalItems: 1,
            itemsPerPage: 10,
            onChange: function() {
                vm.queryParams.start = vm.paginationConf.currentPage - 1;
                sessionStorage.setItem("workManagementCurrentPage", vm.queryParams.start);
                vm.queryParams.limit = vm.paginationConf.itemsPerPage
                vm.getWorkList(vm.queryParams);
                vm.first++;
            }
        }

        //- methods
        vm.getWorkList = getWorkList;
        vm.setClass = setClass;
        vm.addWork = addWork;
        vm.edit = edit;
        vm.view = view;
        vm.delete = deleteWork;
        vm.remove = remove;
        vm.search = search;
        vm.toggleShow = toggleShow;
        vm.queryByCondition = queryByCondition;
        vm.changeProductLineStatus = changeProductLineStatus;

        //- 启动
        // activate();

        function activate() {
            if(parseInt(sessionStorage.getItem('workManagementCurrentPage'))) {
                vm.queryParams.start = parseInt(sessionStorage.getItem('workManagementCurrentPage'));
                vm.paginationConf.currentPage = vm.queryParams.start + 1;
            }
            if(sessionStorage.getItem('workManagementSearchParams')) {
                vm.queryParams.workTitle = sessionStorage.getItem('workManagementSearchParams')
            }
            return getWorkList(vm.queryParams).then(function() {
                $log.info('activated workList view')
                vm.loading = false;
            })
        }

        function getWorkList(params) {
            return frWorkMgt.getWorkList(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message || '请求数据失败！');
                        vm.paginationConf.totalItems = 0;
                        return
                    }
                    vm.workList = data.data.workList;
                    if (vm.workList.length === 0) {
                        vm.paginationConf.totalItems = 0;
                        return ;
                    }
                    vm.paginationConf.totalItems = data.total || 0;
                    return vm.workList;
                }, function(error) {
                    vm.paginationConf.totalItems = 0;
                    $uibMsgbox.error('请求失败');
                })
        }

        function setClass(workId) {
            //- 跳到课次设置
            $state.go('/workManagement/setting', {id: workId, productCode: vm.queryParams.productCode});
        }

        function addWork() {
            $state.go('/workManagement/work/add', {productCode: vm.queryParams.productCode});
        }

        function edit(id) {
            $state.go('/workManagement/work/edit', {id: id, productCode: vm.queryParams.productCode});
        }

        function view(id, type) {
            $state.go('/workManagement/work/view', {id: id, type: type, productCode: vm.queryParams.productCode});
        }

        function deleteWork(id) {
            $uibMsgbox.confirm('确定删除?', function (result) {
                if(result != 'yes') {
                    return;
                }
                vm.remove(id);
            });
        }

        function remove(id) {
            return frWorkMgt.delete({workId: id})
                .then(function() {
                    activate();
                },function() {
                    $uibMsgbox.error('删除失败！');
                })
        }

        function search(searchParam) {
            vm.loading = true;
            vm.queryParams.start = 0;
            sessionStorage.setItem("workManagementCurrentPage", vm.queryParams.start);
            vm.queryParams.workTitle = searchParam;
            return getWorkList(vm.queryParams).then(function() {
                sessionStorage.setItem('workManagementSearchParams', searchParam)
                $log.info('search condition:' + searchParam);
            }).finally(function() {
                vm.loading = false;
            })
        }

        function toggleShow(key) {
            // var arr = ['type', 'statusCode']
            if (key == 'type') {
                vm[key + 'Field'] = !vm[key + 'Field'];
                vm['statusCodeField'] = false;
                return
            }
            if (key == 'statusCode') {
                vm[key + 'Field'] = !vm[key + 'Field'];
                vm['typeField'] = false;
                return
            }
        }

        function queryByCondition(type, key) {
            vm.loading = true;
            var arr = ['type', 'statusCode']
            angular.forEach(arr, function(item) {
                vm[item+'Field'] = false;
            })
            vm.queryParams[key] = type;
            vm.queryParams.start = 0;
            getWorkList(vm.queryParams).then(function() {
                $log.info('search selectType:' + type);
            }).finally(function() {
                vm.loading = false;
            })
        }
        // 产品线切换, 目前为 HI_STYDY, DOUBLE_TEACHER
        function changeProductLineStatus (productCode) {
            vm.queryParams.productCode = productCode;
            vm.loading = true;
            vm.queryParams.start = 0;
            getWorkList(vm.queryParams).then(function() {
                $log.info('changeProductLineStatus:' + productCode);
            }).finally(function() {
                vm.loading = false;
            })
        }

    }

    frWorkMgtService.$inject = ['$http', '$log', '$q'];
    function frWorkMgtService($http, $log, $q) {
        return {
            getWorkList: getWorkList,
            delete: deleteWork
        }

        function getWorkList(params) {
            return $http.post('/erp/work/queryWorkInfoList', params || {})
                .then(getCourseComplete)
                .catch(getCourseFailed);
            function getCourseComplete(response) {
                return response.data;
            }

            function getCourseFailed(error) {
                $log.error('XHR Failed for getCourses.' + error.data);
                return $q.reject(error);
            }
        }

        function deleteWork(params) {
            return $http.delete('/erp/work/deleteWorkInfo', {params: params})
                .then(deleteComplete)
                .catch(deleteFailed);
            function deleteComplete(response) {
                return response.data;
            }

            function deleteFailed(error) {
                $log.error('XHR Failed for deleteWork.' + error);
                return $q.reject(error);
            }
        }
    }

    function frStatusCodeFilter() {
        return function(code) {
            if (angular.isUndefined(code)) {return ;}
            if (code == 'INIT') {
                return '未发布';
            } else {
                return '已发布';
            }
        }
    }

    function frTypeFilter() {
        return function(type) {
            if (angular.isUndefined(type)) {return ;}
            switch(type) {
                case 'PRE_CLASS':
                    return '课前预习';
                case 'ENTRY_TEST':
                    return '入门测试';
                case 'IN_CLASS':
                    return '课中例题';
                case 'AFTER_CLASS':
                    return '课后作业';
                case 'CLASS_TEST':
                    return '课堂测试';
                case 'EXAM':
                    return '考试';
            }
        }
    }

})();

(function() {
    "use strict";

    angular.module('ework-ui')
        .config(['$stateProvider', function($stateProvider) {
            $stateProvider
                .state('/workManagement2/setting', {
                    url: '/tr/workManagement2/:id/setting',
                    templateUrl: 'templates/tr/workManagement2/workManagementSetting.html'
                })
                .state('/workManagement2/work/add', {
                    url: '/tr/workManagement2/work/add',
                    templateUrl: 'templates/tr/workManagement2/add.html'
                })
                .state('/workManagement2/work/edit', {
                    url: '/tr/workManagement2/work/:id/edit',
                    templateUrl: 'templates/tr/workManagement2/edit.html'
                })
                .state('/workManagement2/work/view', {
                    url: '/tr/workManagement2/work/:id/view?type',
                    templateUrl: 'templates/tr/workManagement2/view.html'
                })
        }])
        .controller('frWorkManagementCtrl_2', frWorkManagementCtrl)
        .service('frWorkMgt', frWorkMgtService)
        .filter('frStatusCode', frStatusCodeFilter)
        .filter('frType', frTypeFilter)


    frWorkManagementCtrl.$inject = ['$scope', '$state', 'frWorkMgt', '$log', '$uibMsgbox', '$location', '$q', '$rootScope']
    function frWorkManagementCtrl($scope, $state, frWorkMgt, $log, $uibMsgbox, $location, $q, $rootScope) {
        window.workMgt = $scope.workMgt;
        window.rootScope = $rootScope;
        var vm = this;
        vm.first = 1;
        vm.loading = true;
        vm.queryParams = {
            type: '',
            workTitle: '',
            statusCode: undefined,
            subjectId: '',
            gradeId: '',
            limit: 10,
            start: 0,
            productCode: 'DOUBLE_TEACHER_2'
        }
        $scope.$watch('selectedSubject', function(newValue, oldValue) {
            vm.queryParams.subjectId = newValue;
            if (vm.queryParams.subjectId && vm.queryParams.gradeId) {
                activate();
            }
        })

        $scope.$watch('selectedGrade', function(newValue, oldValue) {
            vm.queryParams.gradeId = newValue;
            if (vm.queryParams.subjectId && vm.queryParams.gradeId) {
                activate();
            }
        })
        vm.workTypes = [{
            value: '',
            label: '全部'
        },{
            value: 'PRE_CLASS',
            label: '课前预习'
        },{
            value: 'ENTRY_TEST',
            label: '入门测试'
        },{
            value: 'IN_CLASS',
            label: '课中例题'
        },{
            value: 'CLASS_TEST',
            label: '课堂测试'
        },{
            value: 'AFTER_CLASS',
            label: '课后作业'
        }]
        vm.statusCodes = [{
            label: '全部',
            value: ''
        },{
            label: '已发布',
            value: 'PUBLISHED'
        },{
            label: '未发布',
            value: 'INIT'
        }]
        /**
         * 分页参数
         * @type {Object}
         */
        vm.paginationConf = {
            currentPage: 1,
            totalItems: 1,
            itemsPerPage: 10,
            onChange: function() {
                // if (vm.queryParams.limit == vm.paginationConf.itemsPerPage && vm.first === 1 && vm.paginationConf.currentPage === 1) {
                //   return
                // }
                vm.queryParams.start = vm.paginationConf.currentPage - 1;
                sessionStorage.setItem("workManagementCurrentPage", vm.queryParams.start);
                vm.queryParams.limit = vm.paginationConf.itemsPerPage
                vm.getWorkList(vm.queryParams);
                vm.first++;
            }
        }

        //- methods
        vm.getWorkList = getWorkList;
        vm.setClass = setClass;
        vm.addWork = addWork;
        vm.edit = edit;
        vm.view = view;
        vm.delete = deleteWork;
        vm.remove = remove;
        vm.search = search;
        vm.toggleShow = toggleShow;
        vm.queryByCondition = queryByCondition;

        //- 启动
        // activate();

        function activate() {
            if(parseInt(sessionStorage.getItem('workManagementCurrentPage'))) {
                vm.queryParams.start = parseInt(sessionStorage.getItem('workManagementCurrentPage'));
                vm.paginationConf.currentPage = vm.queryParams.start + 1;
            }
            if(sessionStorage.getItem('workManagementSearchParams')) {
                vm.queryParams.workTitle = sessionStorage.getItem('workManagementSearchParams')
            }
            return getWorkList(vm.queryParams).then(function() {
                $log.info('activated workList view')
                vm.loading = false;
            })
        }

        function getWorkList(params) {
            return frWorkMgt.getWorkList(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message || '请求数据失败！');
                        vm.paginationConf.totalItems = 0;
                        return
                    }
                    vm.workList = data.data.workList;
                    if (vm.workList.length === 0) {
                        vm.paginationConf.totalItems = 0;
                        return ;
                    }
                    vm.paginationConf.totalItems = data.total || 0;
                    return vm.workList;
                }, function(error) {
                    vm.paginationConf.totalItems = 0;
                    $uibMsgbox.error('请求失败');
                })
        }

        function setClass(workId) {
            //- 跳到课次设置
            $state.go('/workManagement2/setting', {id: workId});
        }

        function addWork() {
            $state.go('/workManagement2/work/add');
        }

        function edit(id) {
            $state.go('/workManagement2/work/edit', {id: id});
        }

        function view(id, type) {
            $state.go('/workManagement2/work/view', {id: id, type: type});
        }

        function deleteWork(id) {
            $uibMsgbox.confirm('确定删除?', function (result) {
                if(result != 'yes') {
                    return;
                }
                vm.remove(id);
            });
        }

        function remove(id) {
            return frWorkMgt.delete({workId: id})
                .then(function() {
                    activate();
                },function() {
                    $uibMsgbox.error('删除失败！');
                })
        }

        function search(searchParam) {
            vm.loading = true;
            vm.queryParams.start = 0;
            sessionStorage.setItem("workManagementCurrentPage", vm.queryParams.start);
            vm.queryParams.workTitle = searchParam;
            return getWorkList(vm.queryParams).then(function() {
                sessionStorage.setItem('workManagementSearchParams', searchParam)
                $log.info('search condition:' + searchParam);
            }).finally(function() {
                vm.loading = false;
            })
        }

        function toggleShow(key) {
            // var arr = ['type', 'statusCode']
            if (key == 'type') {
                vm[key + 'Field'] = !vm[key + 'Field'];
                vm['statusCodeField'] = false;
                return
            }
            if (key == 'statusCode') {
                vm[key + 'Field'] = !vm[key + 'Field'];
                vm['typeField'] = false;
                return
            }
        }

        function queryByCondition(type, key) {
            vm.loading = true;
            var arr = ['type', 'statusCode']
            angular.forEach(arr, function(item) {
                vm[item+'Field'] = false;
            })
            vm.queryParams[key] = type;
            vm.queryParams.start = 0;
            getWorkList(vm.queryParams).then(function() {
                $log.info('search selectType:' + type);
            }).finally(function() {
                vm.loading = false;
            })
        }

    }

    frWorkMgtService.$inject = ['$http', '$log', '$q'];
    function frWorkMgtService($http, $log, $q) {
        return {
            getWorkList: getWorkList,
            delete: deleteWork
        }

        function getWorkList(params) {
            return $http.post('/erp/work/queryWorkInfoList', params || {})
                .then(getCourseComplete)
                .catch(getCourseFailed);
            function getCourseComplete(response) {
                return response.data;
            }

            function getCourseFailed(error) {
                $log.error('XHR Failed for getCourses.' + error.data);
                return $q.reject(error);
            }
        }

        function deleteWork(params) {
            return $http.delete('/erp/work/deleteWorkInfo', {params: params})
                .then(deleteComplete)
                .catch(deleteFailed);
            function deleteComplete(response) {
                return response.data;
            }

            function deleteFailed(error) {
                $log.error('XHR Failed for deleteWork.' + error);
                return $q.reject(error);
            }
        }
    }

    function frStatusCodeFilter() {
        return function(code) {
            if (angular.isUndefined(code)) {return ;}
            if (code == 'INIT') {
                return '未发布';
            } else {
                return '已发布';
            }
        }
    }

    function frTypeFilter() {
        return function(type) {
            if (angular.isUndefined(type)) {return ;}
            switch(type) {
                case 'PRE_CLASS':
                    return '课前预习';
                case 'ENTRY_TEST':
                    return '入门测试';
                case 'IN_CLASS':
                    return '课中例题';
                case 'AFTER_CLASS':
                    return '课后作业';
                case 'CLASS_TEST':
                    return '课堂测试';
            }
        }
    }

})();

(function() {
  "use strict";

  angular.module('ework-ui')
    .controller('frWorkMgtSetCtrl', frWorkManagementSettingCtrl)
    .service('frWorkMgtSet', frWorkMgtSetService)

  frWorkManagementSettingCtrl.$inject = ['$scope', '$log', 'frWorkMgtSet', '$uibModal', '$stateParams', '$state', '$uibMsgbox'];
  function frWorkManagementSettingCtrl($scope, $log, frWorkMgtSet, $uibModal, $stateParams, $state, $uibMsgbox) {
    window.mgtSet = $scope.mgtSet;
    var vm = this;
    angular.extend(vm, {$stateParams})
    //- init variable
    vm.title = "绑定课次";
    vm.workId = $stateParams.id;    
    //- method
    vm.activate = activate;
    vm.back = back;
    vm.openDialog = openDialog;
    vm.delete = deleteCourseClass;
    vm.queryClassWork = queryClassWork;
    vm.bindClassWork = bindClassWork;
    vm.getSpecialParams = getSpecialParams;
    vm.submitLoading = false;
    //- 启动
    activate();

    function activate() {
      vm.loading = true;
      return queryClassWork(vm.workId).then(function() {
        $log.info('queryClassWork success!');
        vm.loading = false;
      })

    }

    function queryClassWork(id) {
      var params = {
        workId: id
      }
      return frWorkMgtSet.query(params)
        .then(function(data) {
          if (parseInt(data.status) === 200) {
            vm.classWorkInfo = data.data.classWorkInfo;
            //- 这里需要将字符串字符转化为标准的时间格式
            //- 发布时间是不给编辑，有选择的课次默认设置
            vm.dateDisabled = true;
            if (vm.classWorkInfo.workStartTime) {
              vm.date = new Date(vm.classWorkInfo.workStartTime);
              vm.time = new Date(vm.classWorkInfo.workStartTime).format("yyyy-MM-dd hh:mm").split(' ')[1];
            }
            if (vm.classWorkInfo.workEndTime) {
              vm.endDate = new Date(vm.classWorkInfo.workEndTime);
              vm.endTime = new Date(vm.classWorkInfo.workEndTime).format("yyyy-MM-dd hh:mm").split(' ')[1];
            }
            // 如果是课前作业，允许修改开始时间
            if (vm.classWorkInfo.type == 'PRE_CLASS' || vm.classWorkInfo.type == 'EXAM') {
              vm.dateDisabled = false;
            }
            // 如果作业类型是课后作业，才允许修改结束时间
            if(vm.classWorkInfo.type === 'AFTER_CLASS' || vm.classWorkInfo.type == 'EXAM') {
              vm.endDateDisabled = false;
            } else {
              vm.endDateDisabled = true;
            }
            return
          }
        }, function(error) {
          console.log(error);
        })
    }

    /**
     * 根据作业类型配置开始于结束时间
     * @params {作业类型} type 
     * @params {} date: Date
     * @return time
     */
    function timeRuleConfigByType(date, type, start, end) {
      switch(type) {
        case 'PRE_CLASS': {
          return {
            startTime: start,
            endTime: start,
            endDate: new Date(new Date(date).getTime() + 3*24*3600*1000)
          }
        }
        case 'ENTRY_TEST':
        case 'CLASS_TEST':
        case 'IN_CLASS':
        case 'EXAM': {
          var date1 = conputeTime(date, start, 15, false)
          var date2 = conputeTime(date, end, 120, true)
          return {
            startTime: date1.time,
            startDate: date1.startDate,
            endTime: date2.time,
            endDate: date2.endDate
          }
        }
        case 'AFTER_CLASS': {
          var date = date.format('yyyy-MM-dd')
          // end > 22: 00 ,tomorrow 22:00
          if ( Date.parse(new Date(date + ' ' + end)) > Date.parse(new Date(date + ' 22:00')) ) {
            var endDateUnix = Date.parse(new Date(date + ' ' + end)) + 24*60*60*1000
            var endDate = new Date(endDateUnix).format('yyyy-MM-dd')
            console.log(endDate)
            return {
              startTime: end,
              endTime: '22:00',
              startDate: date,
              endDate: endDate
            }
          } else {
            return {
              startTime: end,
              endTime: '22:00',
              startDate: date,
              endDate: date
            }
          }

        }
      }
    }

    // periodTime 分钟
    function conputeTime(date, time, periodTime, plus) {
      var date1 = date.format('yyyy-MM-dd')
      var timestamp
      var format, hour, min
      if(!plus) {
        timestamp = Date.parse(new Date(date1 + ' ' + time)) - periodTime * 60 * 1000;
      } else {
        timestamp = Date.parse(new Date(date1 + ' ' + time)) + periodTime * 60 * 1000;
      }
      var endDate = new Date(timestamp)
      hour = endDate.getHours()
      hour = hour < 10 ? '0' + hour : hour
      min = endDate.getMinutes()
      min = min < 10 ? '0' + min : min
      if (!plus) {
        return {
          startDate: endDate.format('yyyy-MM-dd'),
          time: hour + ':' + min
        }
      } else {
        return {
          endDate: endDate.format('yyyy-MM-dd'),
          time: hour + ':' + min
        }
      }
    }

    function back() {
      history.back();
    }

    function bindClassWork() {
      //- 这里是绑定课次请求
      if (!vm.date || !vm.endDate) {
        $uibMsgbox.error('请选择时间');
        return '';
      }
      vm.submitLoading = true;
      var params = {
        workId: vm.workId,
        workStartTime: vm.date.split(' ')[0] + ' ' + vm.time,
        workEndTime: vm.endDate.split(' ')[0] + ' ' + vm.endTime,
        productCode: vm.$stateParams.productCode,
        courseIds: vm.getSpecialParams(vm.classWorkInfo.classList || [], 'parentId'),
        seqs: vm.getSpecialParams(vm.classWorkInfo.classList || [], 'seq')
      };

      return frWorkMgtSet.bindClassWork(params)
        .then(function(data) {
          vm.submitLoading = false;
          if (data.error) {
            $uibMsgbox.error(data.message || '绑定失败');
          } else {
            $state.go('workManagement');
          }
        }, function(error) {
          vm.submitLoading = false;
          $uibMsgbox.error(error.message || '绑定失败');
        })
    }

    function getSpecialParams(items, key) {
      if (angular.isArray(items) && items.length > 0) {
        return items.map(function(item) {
          return item[key];
        }).join(',');
      }
      return '';
    }

    //- 打开绑定课次，选择需要绑定的课次
    function openDialog() {

      $uibModal.open({
        size: 'lg',
        templateUrl: 'templates/block/modal/class-work-modal.html',
        controller: 'frClassWorkModalCtrl',
        controllerAs: 'classWorkModal',
        resolve: {
          items: function() {
            return vm.classWorkInfo.classList;
          }
        }
      }).result.then(function (data) {
        vm.classWorkInfo.classList = data;
        // 根据里面的时间去除对应的课程时间段
        if(data.length) {
          if (vm.classWorkInfo.type == 'PRE_CLASS') {
            vm.date = new Date(new Date(data[0].startDate).getTime() - 3*24*3600*1000);
          } else {
            vm.date = new Date(data[0].startDate)
          }
          vm.endDate = new Date(data[0].startDate)
          var dateObj = timeRuleConfigByType(vm.date, vm.classWorkInfo.type, data[0].startTime, data[0].endTime)
          vm.time = dateObj.startTime
          vm.endTime = dateObj.endTime
          vm.endDate = dateObj.endDate || vm.date
          vm.date = dateObj.startDate || vm.date
        }
      }, function () {});
    }

    function deleteCourseClass(items, index) {
      return items.splice(index, 1);
    }

  }

  frWorkMgtSetService.$inject = ['$http', '$log', '$q'];
  function frWorkMgtSetService($http, $log, $q) {
    return {
      query: query,
      bindClassWork: bindClassWork
    }

    function query(params) {
      //- 查询课次绑定信息
      return $http.get('/erp/work/queryClassWork', {params: params})
        .then(queryComplete)
        .catch(queryFailed);

      function queryComplete(response) {
        return response.data;
      }

      function queryFailed(error) {
        $log.error('XHR Failed for courseClassSet.' + error);
        $q.reject(error);
      }
    }

    function bindClassWork(params) {
      return $http.post('/erp/work/bindClassWork', params || {})
        .then(bindClassWorkComplete)
        .catch(bindClassWorkFailed);

      function bindClassWorkComplete(response) {
        return response.data;
      }

      function bindClassWorkFailed(error) {
        $log.error('XHR Failed for ClassWork ' + error);
        $q.reject(error);
      }
    }

    Date.prototype.format = function(fmt) { 
      var o = { 
        "M+" : this.getMonth()+1,                 //月份
        "d+" : this.getDate(),                    //日
        "h+" : this.getHours(),                   //小时
        "m+" : this.getMinutes(),                 //分
        "s+" : this.getSeconds(),                 //秒
        "q+" : Math.floor((this.getMonth()+3)/3), //季度
        "S"  : this.getMilliseconds()             //毫秒
      }; 
      if(/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length)); 
      }
      for(var k in o) {
        if(new RegExp("("+ k +")").test(fmt)){
          fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));
        }
      }
      return fmt; 
    }
  }

})();
"use strict";
angular.module('ework-ui')
		.controller(
				'crmGcRptResConvationGcController',
				[
                    '$scope',
                    'crm_buService',
                    'crm_branchService',
                    'crm_resConvationGcService',
                    crmGcRptResConvationGcController ]);
function crmGcRptResConvationGcController(
    $scope,
    crm_buService,
    crm_branchService,
    crm_resConvationGcService
    ) {

	$scope.url = "/gxhcrm/report/query/resConvationGc";

	$scope.rescRecPage = new PageObj();
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};
	// 搜索参数
	$scope.searchParam = {};

	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	};

	// 初始化分页
	$scope.initRescRecPage = function() {
		$scope.searchParam = {};
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = Format('yyyy年MM月', new Date());
        crm_resConvationGcService.query( $scope.searchParam, $scope.queryrescRecs);
	};

//	$scope.initRescRecPage();

	$scope.begin = function() {
		$scope.rescRecPage.begin();
	};

	$scope.up = function() {
		$scope.rescRecPage.up();
	};
	$scope.down = function() {
		$scope.rescRecPage.down();
	};
	$scope.end = function() {
		$scope.rescRecPage.end();
	};

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
        crm_resConvationGcService.query( $scope.searchParam, $scope.queryrescRecs);
	};

	// 导出
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/resConvationGc?p_start_date="
					+ $scope.searchParam.p_start_date + "&p_branch_id="
					+ $scope.searchParam.p_branch_id;
		}
	};

	// 关闭窗口的方法
	$scope.closeSearchAdvWindow = function(obj) {
		$(obj).parent().parent().hide("slow");
	};

	$scope.setSchools = function(res) {
		$scope.schools = res.data;
	};

	$scope.closeWindow = function(obj) {
		$(obj).hide("slow");
	};

    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    }

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }


    queryBuList();
//    queryBranchList();

	function Format(fmt, date) { // author: meizz
		var o = {
			"M+" : date.getMonth() + 1, // 月份
			"d+" : date.getDate(), // 日
			"h+" : date.getHours(), // 小时
			"m+" : date.getMinutes(), // 分
			"s+" : date.getSeconds(), // 秒
			"q+" : Math.floor((date.getMonth() + 3) / 3), // 季度
			"S" : date.getMilliseconds()
		// 毫秒
		};
		if (/(y+)/.test(fmt))
			fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
		for ( var k in o)
			if (new RegExp("(" + k + ")").test(fmt))
				fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k])
						: (("00" + o[k]).substr(("" + o[k]).length)));
		return fmt;
	}
}
"use strict";
angular.module('ework-ui')
		.controller(
				'crmGcRptAchieveTotalController',
				[
                    '$scope',
                    'crm_buService',
                    'crm_branchService',
                    'crm_achievetotalService',
                    crmGcRptAchieveTotalController ]);
function crmGcRptAchieveTotalController(
        $scope,
        crm_buService,
        crm_branchService,
        crm_achievetotalService
    ) {

	$scope.url = "/gxhcrm/report/query/achievetotal";

	$scope.rescRecPage = new PageObj();

	// 搜索参数
	$scope.searchParam = {
		p_grp_company : true,
		p_grp_sch : true
	};
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};
	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	// 资源更多信息
	$scope.moreInfo = {};
	// 资源跟踪列表
	$scope.traceInfo = {};

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	};

	// 初始化分页
	$scope.initRescRecPage = function() {
		$scope.searchParam = {};
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
        crm_achievetotalService.query($scope.searchParam, $scope.queryrescRecs);
	};

//	$scope.initRescRecPage();

	$scope.begin = function() {
		$scope.rescRecPage.begin();
	};

	$scope.up = function() {
		$scope.rescRecPage.up();
	};
	$scope.down = function() {
		$scope.rescRecPage.down();
	};
	$scope.end = function() {
		$scope.rescRecPage.end();
	};

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
        crm_achievetotalService.query($scope.searchParam, $scope.queryrescRecs);
	};

	// 导出
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		var param = "";
		for ( var p in $scope.searchParam) {
			if ($scope.searchParam[p] != '') {
				param += p + "=" + $scope.searchParam[p] + "&";
			}
		}
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/achievetotal?"
					+ encodeURI(encodeURI(param));
		}
	};

    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    };

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }

    queryBuList();
//    queryBranchList();
}
"use strict";
angular.module('ework-ui').controller('crmGcRptAvgAchieveController',
		[
            '$scope',
            'crm_buService',
            'crm_branchService',
            'crm_avgachieveService',
            crmGcRptAvgAchieveController ]);
function crmGcRptAvgAchieveController(
        $scope,
        crm_buService,
        crm_branchService,
        crm_avgachieveService) {
	$scope.rescRecPage = new PageObj();

	// 搜索参数
	$scope.searchParam = {
		p_grp_company : true,
		p_grp_sch : true
	};
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};
	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	};

	// 初始化分页
	$scope.initRescRecPage = function() {
		$scope.searchParam = {};
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_grp_company = true;
		$scope.searchParam.p_grp_sch = true;
        crm_avgachieveService.query($scope.searchParam, $scope.queryrescRecs);
	};

//	$scope.initRescRecPage();

	$scope.begin = function() {
		$scope.rescRecPage.begin();
	};

	$scope.up = function() {
		$scope.rescRecPage.up();
	};
	$scope.down = function() {
		$scope.rescRecPage.down();
	};
	$scope.end = function() {
		$scope.rescRecPage.end();
	};

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		$scope.searchParam.p_end_date = $('#cdt_end_date').val();
        crm_avgachieveService.query($scope.searchParam, $scope.queryrescRecs);
	};

	// 导出
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		$scope.searchParam.p_end_date = $('#cdt_end_date').val();
		var param = "";
		for ( var p in $scope.searchParam) {
			if ($scope.searchParam[p] != '') {
				param += p + "=" + $scope.searchParam[p] + "&";
			}
		}
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/avgachieve?"
					+ encodeURI(encodeURI(param));
		}
	};


    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    }

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }
    queryBuList();
//    queryBranchList();
}
"use strict";
angular.module('ework-ui').controller(
    'crmGcRptChannelController',[
        '$scope',
        'crm_buService',
        'crm_branchService',
        'crm_queryDictDataService',
        'crm_channelService',
        crmGcRptChannelController]);

function crmGcRptChannelController(
    $scope,
    crm_buService,
    crm_branchService,
    queryDictDataService,
    crm_channelService){
	
	 $scope.paginationConf = {
	          currentPage: 1, // 当前页
	          totalItems: 0,
	          itemsPerPage: 10,
	          onChange: function() {
	            $scope.cdtSearch();
	          }
	        };
	
    function Format(fmt, date) { // author: meizz
        var o = {
            "M+" : date.getMonth() + 1, // 月份
            "d+" : date.getDate(), // 日
            "h+" : date.getHours(), // 小时
            "m+" : date.getMinutes(), // 分
            "s+" : date.getSeconds(), // 秒
            "q+" : Math
                .floor((date.getMonth() + 3) / 3), // 季度
            "S" : date.getMilliseconds()
            // 毫秒
        };
        if (/(y+)/.test(fmt))
            fmt = fmt.replace(RegExp.$1, (date
                .getFullYear() + "")
                .substr(4 - RegExp.$1.length));
        for ( var k in o)
            if (new RegExp("(" + k + ")").test(fmt))
                fmt = fmt
                    .replace(
                    RegExp.$1,
                    (RegExp.$1.length == 1) ? (o[k])
                        : (("00" + o[k])
                        .substr(("" + o[k]).length)));
        return fmt;
    }

	 $scope.url =  "/gxhcrm/report/queryPage/channelPage";
	
    $scope.rescRecPage = new PageObj();
    $scope.schs = {id:-1};
    
    // 搜索参数
    $scope.searchParam = {
   		   p_grp_company:true,
   		   p_grp_sch:true
    };
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};
    $scope.selectedChannel = {code:''}
    // 转移参数
    $scope.param = {};
    
    // 报表数据
    $scope.reportData = [];
    
    $scope.isLoading='';
    
    $scope.queryrescRecs = function(data){
   	 $scope.reportData = [];
   	$scope.paginationConf.totalItems = data.total; // 设置总条数
   	$scope.isLoading='';
   	 if(!$scope.$$phase){
   		 $scope.$apply(function(){
   			 $scope.reportData =data.rows;
   		 });
   	 }else{
   		 $scope.reportData =data.rows;
   	 }
    }
	    
	 	// 初始化分页
		$scope.initRescRecPage = function(){
			$scope.searchParam= {};
            $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
            $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
            $scope.searchParam.p_channel_code = $scope.selectedChannel.code;
			$scope.searchParam.p_grp_company =true;
			$scope.searchParam.p_grp_sch =true;
			$scope.searchParam.rows =$scope.paginationConf.itemsPerPage, // 每页显示条数;
			$scope.searchParam.page =$scope.paginationConf.currentPage, // 要获取的第几页的数据;
            crm_channelService.query($scope.searchParam,$scope.queryrescRecs);
		};
	    
//		$scope.initRescRecPage();
	    
		$scope.begin = function(){
			$scope.rescRecPage.begin();
		};
		
		$scope.up = function(){
			$scope.rescRecPage.up();
		};
		$scope.down = function(){
			$scope.rescRecPage.down();
		};
		$scope.end = function(){
			$scope.rescRecPage.end();
		};
        //查询
		$scope.cdtSearch = function(){
			$scope.isLoading='loading';
            $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
            $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
            $scope.searchParam.p_channel_code = $scope.selectedChannel.code;
			$scope.searchParam.p_start_date=$('#cdt_start_date').val();
			$scope.searchParam.p_end_date=$('#cdt_end_date').val();
			$scope.searchParam.rows =$scope.paginationConf.itemsPerPage, // 每页显示条数;
			$scope.searchParam.page =$scope.paginationConf.currentPage, // 要获取的第几页的数据;
			toolAjax($scope.url, 'get',$scope.searchParam,$scope.queryrescRecs, 'json');
		}
		

		// 导出
		$scope.exp = function(){
            $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
            $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
            $scope.searchParam.p_channel_code = $scope.selectedChannel.code;
			$scope.searchParam.p_start_date=$('#cdt_start_date').val();
			$scope.searchParam.p_end_date=$('#cdt_end_date').val();
			var param = "";
			for(var p in $scope.searchParam){
				console.log($scope.searchParam[p]);
				if($scope.searchParam[p] != ''){
					param += p+"="+$scope.searchParam[p]+"&";
				}
			}
			if(confirm("确定要导出?")){
				location.href =   "/gxhcrm/report/toExp/channel?" +encodeURI(encodeURI(param)) ;
			}
		};
		
		// 关闭窗口的方法
		$scope.closeSearchAdvWindow = function(obj){ 
		    $(obj).parent().parent().hide("slow"); 
		} 


		$scope.closeWindow = function(obj){
			$(obj).hide("slow");
		};

		

		$scope.changeCompany = function(){
           queryBranchList();
		};

        function queryBuList(){
            crm_buService.query({},function(resp){
                if(!resp.error){
                    $scope.companys = resp.data;
                    $scope.selectedCompany = $scope.companys[0];
                    
                    crm_branchService.query({
                        buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                    },function(resp){
                        if(!resp.error){
                            $scope.schs = resp.data;
                            $scope.schs.unshift({'id':-1, 'text':'全部'});
                            $scope.selectedSchool = $scope.schs[0];
                        }
                    });
                }
            })
        }

        function queryBranchList(){
            crm_branchService.query({
                buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
            },function(resp){
                if(!resp.error){
                    $scope.schs = resp.data;
                    $scope.schs.unshift({'id':-1, 'text':'全部'});
                    $scope.selectedSchool = $scope.schs[0];
                }
            })
        }

        function queryDictData(){
            // 查询渠道列表
            queryDictDataService.query({dictTypeCode:'Channel'},function(resp){
                $scope.channels = [];
                $scope.channels = resp;
                $scope.channels.unshift({'code':'', 'name':'全部'});
                $scope.selectedChannel = $scope.channels[0];
            });
        }
        queryBuList();
//        queryBranchList();
        queryDictData();

}


"use strict";
angular.module('ework-ui').controller(
		'crmGcRptConvertRateController',
		[
            '$scope',
            'crm_buService',
            'crm_branchService',
            'crm_convertRateService',
            crmGcRptConvertRateController ]);

function crmGcRptConvertRateController(
        $scope,
        crm_buService,
        crm_branchService,
        crm_convertRateService) {

	$scope.rescRecPage = new PageObj();
	
	///gxhcrm/report/query/convertrate
	
	$scope.url = "/gxhcrm/report/query/convertrate";

	// 搜索参数
	$scope.searchParam = {
		p_grp_company : true,
		p_grp_sch : true
	};
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};

	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	};

	// 初始化分页
	$scope.initRescRecPage = function() {
		$scope.searchParam = {};
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_grp_company = true;
		$scope.searchParam.p_grp_sch = true;
//		toolAjax($scope.url, 'post',$scope.searchParam,$scope.queryrescRecs, 'json');
        crm_convertRateService.query($scope.searchParam,$scope.queryrescRecs);
	};

//	$scope.initRescRecPage();

	$scope.begin = function() {
		$scope.rescRecPage.begin();
	};

	$scope.up = function() {
		$scope.rescRecPage.up();
	};
	$scope.down = function() {
		$scope.rescRecPage.down();
	};
	$scope.end = function() {
		$scope.rescRecPage.end();
	};

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		$scope.searchParam.p_end_date = $('#cdt_end_date').val();
//		toolAjax($scope.url, 'post',$scope.searchParam,$scope.queryrescRecs, 'json');
        crm_convertRateService.query($scope.searchParam,$scope.queryrescRecs);
	};

	// 导出
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		$scope.searchParam.p_end_date = $('#cdt_end_date').val();
		var param = "";
		for ( var p in $scope.searchParam) {
			if ($scope.searchParam[p] != '') {
				param += p + "=" + $scope.searchParam[p] + "&";
			}
		}
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/convertrate?"
					+ encodeURI(encodeURI(param));
		}
	};

	// 关闭窗口的方法
	$scope.closeSearchAdvWindow = function(obj) {
		$(obj).parent().parent().hide("slow");
	};

	$scope.setSchools = function(res) {
		$scope.schools = res.data;
	};

	$scope.closeWindow = function(obj) {
		$(obj).hide("slow");
	};


    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    }

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }
    queryBuList();
//    queryBranchList();
}
"use strict";
angular.module('ework-ui').controller('crmGcRptExcavateGcController',
		[
            '$scope',
            'crm_buService',
            'crm_branchService',
            'crm_excavategcService',
            crmGcRptExcavateGcController ]);
function crmGcRptExcavateGcController(
            $scope,
            crm_buService,
            crm_branchService,
            crm_excavategcService
    ) {

	$scope.url = "/gxhcrm/report/query/excavategc";

	$scope.rescRecPage = new PageObj();

	// 搜索参数
	$scope.searchParam = {};
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};

	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	}

	// 初始化分页
	$scope.initial = function() {
		$scope.searchParam = {};
		$scope.searchParam.p_start_date = Format('yyyy年MM月', new Date());
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
        crm_excavategcService.query($scope.searchParam, $scope.queryrescRecs);
	};

//	$scope.initial();

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
        crm_excavategcService.query($scope.searchParam, $scope.queryrescRecs);
	}

	// 导出
	$scope.exp = function() {
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/performancegc?p_start_date="
					+ $scope.searchParam.p_start_date + "&p_branch_id="
					+ $scope.searchParam.p_branch_id;
		}
	};

    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    }

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }


    queryBuList();
//    queryBranchList();

	function Format(fmt, date) { // author: meizz
		var o = {
			"M+" : date.getMonth() + 1, // 月份
			"d+" : date.getDate(), // 日
			"h+" : date.getHours(), // 小时
			"m+" : date.getMinutes(), // 分
			"s+" : date.getSeconds(), // 秒
			"q+" : Math.floor((date.getMonth() + 3) / 3), // 季度
			"S" : date.getMilliseconds()
		// 毫秒
		};
		if (/(y+)/.test(fmt))
			fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
		for ( var k in o)
			if (new RegExp("(" + k + ")").test(fmt))
				fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k])
						: (("00" + o[k]).substr(("" + o[k]).length)));
		return fmt;
	}
}
"use strict";
angular.module('ework-ui').controller(
    'crmGcRptMarketAnalyseController',[
        '$scope',
        'crm_buService',
        'crm_branchService',
        'crm_queryDictDataService',
        'crm_channelService',
        '$uibMsgbox',
        crmGcRptMarketAnalyseController]);

function crmGcRptMarketAnalyseController(
    $scope,
    crm_buService,
    crm_branchService,    queryDictDataService,
    crm_channelService,$uibMsgbox){
	
	 $scope.paginationConf = {
	          currentPage: 1, // 当前页
	          totalItems: 0,
	          itemsPerPage: 10,
	          onChange: function() {
	            $scope.cdtSearch();
	          }
	        };
	
   function Format(fmt, date) { // author: meizz
       var o = {
           "M+" : date.getMonth() + 1, // 月份
           "d+" : date.getDate(), // 日
           "h+" : date.getHours(), // 小时
           "m+" : date.getMinutes(), // 分
           "s+" : date.getSeconds(), // 秒
           "q+" : Math
               .floor((date.getMonth() + 3) / 3), // 季度
           "S" : date.getMilliseconds()
           // 毫秒
       };
       if (/(y+)/.test(fmt))
           fmt = fmt.replace(RegExp.$1, (date
               .getFullYear() + "")
               .substr(4 - RegExp.$1.length));
       for ( var k in o)
           if (new RegExp("(" + k + ")").test(fmt))
               fmt = fmt
                   .replace(
                   RegExp.$1,
                   (RegExp.$1.length == 1) ? (o[k])
                       : (("00" + o[k])
                       .substr(("" + o[k]).length)));
       return fmt;
   }

	 $scope.url =  "/gxhcrm/report/queryPage/marketAnalysePage";
	
   $scope.rescRecPage = new PageObj();
   $scope.schs = {id:-1};
   
   // 搜索参数
   $scope.searchParam = {
  		   p_grp_company:true,
  		   p_grp_sch:true
   };
   $scope.selectedCompany = {id:-1};
   $scope.selectedSchool = {id:-1};
   $scope.selectedChannel = {code:''}
   // 转移参数
   $scope.param = {};
   
   // 报表数据
   $scope.reportData = [];
   
   $scope.isLoading='';
   
   $scope.queryrescRecs = function(data){
  	 $scope.reportData = [];
  	$scope.paginationConf.totalItems = data.total; // 设置总条数
  	$scope.isLoading='';
  	 if(!$scope.$$phase){
  		 $scope.$apply(function(){
  			 $scope.reportData =data.rows;
  		 });
  	 }else{
  		 $scope.reportData =data.rows;
  	 }
   }
	    
	 	// 初始化分页
		$scope.initRescRecPage = function(){
			$scope.searchParam= {};
           $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
           $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
           $scope.searchParam.p_channel_code = $scope.selectedChannel.code;
			$scope.searchParam.p_grp_company =true;
			$scope.searchParam.p_grp_sch =true;
			$scope.searchParam.rows =$scope.paginationConf.itemsPerPage, // 每页显示条数;
			$scope.searchParam.page =$scope.paginationConf.currentPage, // 要获取的第几页的数据;
           crm_channelService.query($scope.searchParam,$scope.queryrescRecs);
		};
	    
//		$scope.initRescRecPage();
	    
		$scope.begin = function(){
			$scope.rescRecPage.begin();
		};
		
		$scope.up = function(){
			$scope.rescRecPage.up();
		};
		$scope.down = function(){
			$scope.rescRecPage.down();
		};
		$scope.end = function(){
			$scope.rescRecPage.end();
		};
       //查询
		$scope.cdtSearch = function(){
			$scope.isLoading='loading';
           $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
			$scope.searchParam.rows =$scope.paginationConf.itemsPerPage, // 每页显示条数;
			$scope.searchParam.page =$scope.paginationConf.currentPage, // 要获取的第几页的数据;
			toolAjax($scope.url, 'get',$scope.searchParam,$scope.queryrescRecs, 'json');
		}
		

		// 导出
		$scope.exp = function(){
           $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
			var param = "";
			for(var p in $scope.searchParam){
			
				if($scope.searchParam[p] != ''){
					param += p+"="+$scope.searchParam[p]+"&";
				}
			}
			if (confirm("确定要导出?")) {
				location.href =   "/gxhcrm/report/toExp/marketAnalyseAll?" +encodeURI(encodeURI(param));
			}
		};
		
       function queryBranchList(){
           crm_branchService.query({
               buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
           },function(resp){
               if(!resp.error){
                   $scope.schs = resp.data;
                   $scope.schs.unshift({'id':-1, 'text':'全部'});
                   $scope.selectedSchool = $scope.schs[0];
               }
           })
       }

       queryBranchList();

}


"use strict";
angular.module('ework-ui')
		.controller(
				'crmGcRptOrderedSortController',
				[
                    '$scope',
                    'crm_buService',
                    'crm_orderedsortService',
                    crmGcRptOrderedSortController ]);

function crmGcRptOrderedSortController(
    $scope,
    crm_buService,
    crm_orderedsortService) {
    $scope.selectedCompany = {id:-1};
	/* 分页_start */
	$scope.reportPageObj = new PageObj();
    $scope.reportPageObj.page = 1;
    $scope.reportPageObj.rows = 20;
    $scope.reportPageObj.totalPage = 0;

	$scope.reportPageLib = {};
    // 搜索参数
    $scope.searchParam = {
        p_grp_company : true,
        p_grp_sch : true
    };
	$scope.reportPageLib.dataLoad = '';
	$scope.reportPageLib.pageCallBack = function(ResMapper) {
		$scope.reportData = [];
		$scope.reportPageLib.dataLoad = '';
		try {
			for (var i = 0; i < ResMapper.rows.length; i++)
				$scope.reportData.push(ResMapper.rows[i]);
			$scope.reportPageObj.totalPage = ResMapper.totalPage;
			$scope.reportPageLib.total = ResMapper.total;

		} catch (e) {
			alert('查询异常，请联系系统管理员！');
		}
		$scope.reportPageLib.dataLoad = '';
	}

	$scope.searchPage = function() {
        $scope.searchParam.bu_id = $scope.selectedCompany.id;
		/* 配置时间参数_start */
        $scope.searchParam.moth = $('#cdt_start_date').val();
		/* 配置时间参数_end */
        $scope.searchParam.dataLoad = 'loading';
        $scope.reportPageLib.dataLoad = 'loading';
        $scope.searchParam.page = $scope.reportPageObj.page;
        $scope.searchParam.rows = $scope.reportPageObj.rows;

        crm_orderedsortService.query($scope.searchParam,$scope.reportPageLib.pageCallBack);
	}

    $scope.foundPage = function(page){
        $scope.reportPageObj.page = page;
        $scope.searchPage();
    }

    /* 分页_end */
	$scope.searchParam = {};
	/* 导出_start */
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_moth = $('#cdt_start_date').val();
		var param = "";
		for ( var p in $scope.searchParam) {
			if ($scope.searchParam[p] != '') {
				param += p + "=" + $scope.searchParam[p] + "&";
			}
		}
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/expOrderedsort?"
					+ encodeURI(encodeURI(param));
		}
	};
	/* 导出_end */

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
            }
        })
    }
    queryBuList();
//    $scope.searchPage();

}
"use strict";
angular.module('ework-ui')
		.controller(
				'crmGcRptPlanVisitGcController',
				[
                    '$scope',
                    'crm_buService',
                    'crm_branchService',
                    'crm_planVisitService',
						crmGcRptPlanVisitGcController ]);
function crmGcRptPlanVisitGcController(
    $scope,
    crm_buService,
    crm_branchService,
    crm_planVisitService
    ) {

	$scope.url = "/gxhcrm/report/query/planVisit";

	$scope.rescRecPage = new PageObj();
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};
	// 搜索参数
	$scope.searchParam = {};

	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	// 资源更多信息
	$scope.moreInfo = {};
	// 资源跟踪列表
	$scope.traceInfo = {};

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	};

	// 初始化分页
	$scope.initRescRecPage = function() {
		$scope.searchParam = {};
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
        crm_planVisitService.query( $scope.searchParam, $scope.queryrescRecs);
	};

//	$scope.initRescRecPage();

	$scope.begin = function() {
		$scope.rescRecPage.begin();
	};

	$scope.up = function() {
		$scope.rescRecPage.up();
	};
	$scope.down = function() {
		$scope.rescRecPage.down();
	};
	$scope.end = function() {
		$scope.rescRecPage.end();
	};

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
        crm_planVisitService.query( $scope.searchParam, $scope.queryrescRecs);
	};

	// 导出
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/planVisit?p_start_date="
					+ $scope.searchParam.p_start_date + "&p_branch_id="
					+ $scope.searchParam.p_branch_id;
		}
	};

	// 关闭窗口的方法
	$scope.closeSearchAdvWindow = function(obj) {
		$(obj).parent().parent().hide("slow");
	};

	$scope.setSchools = function(res) {
		$scope.schools = res.data;
	};

	$scope.closeWindow = function(obj) {
		$(obj).hide("slow");
	};

    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    }

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }


    queryBuList();
//    queryBranchList();

	function Format(fmt, date) { // author: meizz
		var o = {
			"M+" : date.getMonth() + 1, // 月份
			"d+" : date.getDate(), // 日
			"h+" : date.getHours(), // 小时
			"m+" : date.getMinutes(), // 分
			"s+" : date.getSeconds(), // 秒
			"q+" : Math.floor((date.getMonth() + 3) / 3), // 季度
			"S" : date.getMilliseconds()
		// 毫秒
		};
		if (/(y+)/.test(fmt))
			fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
		for ( var k in o)
			if (new RegExp("(" + k + ")").test(fmt))
				fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k])
						: (("00" + o[k]).substr(("" + o[k]).length)));
		return fmt;
	}
}
"use strict";
angular.module('ework-ui')
		.controller(
				'crmGcRptPerformanceGcController',
				[
                    '$scope',
                    'crm_buService',
                    'crm_branchService',
                    'crm_performancegcService',
						crmGcRptPerformanceGcController ]);
function crmGcRptPerformanceGcController(
    $scope,
    crm_buService,
    crm_branchService,
    crm_performancegcService
    ) {

	$scope.url = "/gxhcrm/report/query/performancegc";

	$scope.rescRecPage = new PageObj();
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};
	// 搜索参数
	$scope.searchParam = {};

	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	};

	// 初始化分页
	$scope.initRescRecPage = function() {
		$scope.searchParam = {};
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = Format('yyyy年MM月', new Date());
        crm_performancegcService.query( $scope.searchParam, $scope.queryrescRecs);
	};

//	$scope.initRescRecPage();

	$scope.begin = function() {
		$scope.rescRecPage.begin();
	};

	$scope.up = function() {
		$scope.rescRecPage.up();
	};
	$scope.down = function() {
		$scope.rescRecPage.down();
	};
	$scope.end = function() {
		$scope.rescRecPage.end();
	};

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
        crm_performancegcService.query( $scope.searchParam, $scope.queryrescRecs);
	};

	// 导出
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/performancegc?p_start_date="
					+ $scope.searchParam.p_start_date + "&p_branch_id="
					+ $scope.searchParam.p_branch_id;
		}
	};

	// 关闭窗口的方法
	$scope.closeSearchAdvWindow = function(obj) {
		$(obj).parent().parent().hide("slow");
	};

	$scope.setSchools = function(res) {
		$scope.schools = res.data;
	};

	$scope.closeWindow = function(obj) {
		$(obj).hide("slow");
	};

    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    }

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }


    queryBuList();
//    queryBranchList();

	function Format(fmt, date) { // author: meizz
		var o = {
			"M+" : date.getMonth() + 1, // 月份
			"d+" : date.getDate(), // 日
			"h+" : date.getHours(), // 小时
			"m+" : date.getMinutes(), // 分
			"s+" : date.getSeconds(), // 秒
			"q+" : Math.floor((date.getMonth() + 3) / 3), // 季度
			"S" : date.getMilliseconds()
		// 毫秒
		};
		if (/(y+)/.test(fmt))
			fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
		for ( var k in o)
			if (new RegExp("(" + k + ")").test(fmt))
				fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k])
						: (("00" + o[k]).substr(("" + o[k]).length)));
		return fmt;
	}
}
"use strict";
angular.module('ework-ui')
		.controller(
				'crmGcRptSceneGcController',
				[
                    '$scope',
                    'crm_buService',
                    'crm_branchService',
                    'crm_sceneService',
						crmGcRptSceneGcController ]);
function crmGcRptSceneGcController(
    $scope,
    crm_buService,
    crm_branchService,
    crm_sceneService
    ) {

	$scope.url = "/gxhcrm/report/query/scene";

	$scope.rescRecPage = new PageObj();
    $scope.selectedCompany = {id:-1};
    $scope.selectedSchool = {id:-1};
	// 搜索参数
	$scope.searchParam = {};

	// 转移参数
	$scope.param = {};

	// 报表数据
	$scope.reportData = [];

	$scope.isLoading = '';

	$scope.queryrescRecs = function(data) {
		$scope.reportData = [];
		$scope.isLoading = '';
		if (!$scope.$$phase) {
			$scope.$apply(function() {
				$scope.reportData = data.datalist;
			});
		} else {
			$scope.reportData = data.datalist;
		}
	};

	// 初始化分页
	$scope.initRescRecPage = function() {
		$scope.isLoading = 'loading';
		$scope.searchParam = {};
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
        crm_sceneService.query( $scope.searchParam, $scope.queryrescRecs);
	};

//	$scope.initRescRecPage();

	$scope.begin = function() {
		$scope.rescRecPage.begin();
	};

	$scope.up = function() {
		$scope.rescRecPage.up();
	};
	$scope.down = function() {
		$scope.rescRecPage.down();
	};
	$scope.end = function() {
		$scope.rescRecPage.end();
	};

	$scope.cdtSearch = function() {
		$scope.isLoading = 'loading';
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
        crm_sceneService.query( $scope.searchParam, $scope.queryrescRecs);
	};

	// 导出
	$scope.exp = function() {
        $scope.searchParam.p_bu_id = $scope.selectedCompany.id;
        $scope.searchParam.p_branch_id = $scope.selectedSchool.id;
		$scope.searchParam.p_start_date = $('#cdt_start_date').val();
		if (confirm("确定要导出?")) {
			location.href = "/gxhcrm/report/toExp/scene?p_start_date="
					+ $scope.searchParam.p_start_date + "&p_branch_id="
					+ $scope.searchParam.p_branch_id;
		}
	};

	// 关闭窗口的方法
	$scope.closeSearchAdvWindow = function(obj) {
		$(obj).parent().parent().hide("slow");
	};

	$scope.setSchools = function(res) {
		$scope.schools = res.data;
	};

	$scope.closeWindow = function(obj) {
		$(obj).hide("slow");
	};

    $scope.changeCompany = function(){
        queryBranchList();
    };

    function queryBuList(){
        crm_buService.query({},function(resp){
            if(!resp.error){
                $scope.companys = resp.data;
                $scope.selectedCompany = $scope.companys[0];
                crm_branchService.query({
                    buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
                },function(resp){
                    if(!resp.error){
                        $scope.schs = resp.data;
                        $scope.schs.unshift({'id':-1, 'text':'全部'});
                        $scope.selectedSchool = $scope.schs[0];
                    }
                });
            }
        })
    }

    function queryBranchList(){
        crm_branchService.query({
            buId:$scope.selectedCompany.id?$scope.selectedCompany.id:null
        },function(resp){
            if(!resp.error){
                $scope.schs = resp.data;
                $scope.schs.unshift({'id':-1, 'text':'全部'});
                $scope.selectedSchool = $scope.schs[0];
            }
        })
    }


    queryBuList();
//    queryBranchList();

	function Format(fmt, date) { // author: meizz
		var o = {
			"M+" : date.getMonth() + 1, // 月份
			"d+" : date.getDate(), // 日
			"h+" : date.getHours(), // 小时
			"m+" : date.getMinutes(), // 分
			"s+" : date.getSeconds(), // 秒
			"q+" : Math.floor((date.getMonth() + 3) / 3), // 季度
			"S" : date.getMilliseconds()
		// 毫秒
		};
		if (/(y+)/.test(fmt))
			fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
		for ( var k in o)
			if (new RegExp("(" + k + ")").test(fmt))
				fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k])
						: (("00" + o[k]).substr(("" + o[k]).length)));
		return fmt;
	}
}
/**
 * Created by Liyong.zhu on 2017/2/18.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_attendanceBJKController', [
        '$scope',
        '$log',
        'erp_subjectService',
        'erp_gradeService',
        'erp_courseService',
        'erp_studentBuOrgsService',
        'erp_timeSeasonService',
        'PUBORGSelectedService',
        'erp_attendanceCourseTimesService',
        erp_attendanceBJKController]);

function erp_attendanceBJKController(
    $scope,
    $log,
    erp_subjectService,
    erp_gradeService,
    erp_courseService,
    erp_studentBuOrgsService,
    erp_timeSeasonService,
    PUBORGSelectedService,
    erp_attendanceCourseTimesService) {
    $scope.isShowSenior = false;
    $scope.businessType = 1;
    $scope.queryParam  = {
        page:1
    };
    $scope.showSenior = function(){
        if($scope.isShowSenior){
            $scope.isShowSenior = false;
        }else{
            $scope.isShowSenior = true;
        }
    }


    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.queryParam.selectedBranch?$scope.queryParam.selectedBranch.id:-1,
            season_id:$scope.queryParam.selectedTimeSeason?$scope.queryParam.selectedTimeSeason.id:-1,
            grade_id:$scope.queryParam.selectedGrade?$scope.queryParam.selectedGrade.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.queryParam.selectedBranch?$scope.queryParam.selectedBranch.id:-1,
            season_id:$scope.queryParam.selectedTimeSeason?$scope.queryParam.selectedTimeSeason.id:-1
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
                if($scope.student && $scope.student.grade_id){
                    $.each($scope.gradeList,function(i,grade){
                        if(grade.id == $scope.student.grade_id){
                            $scope.queryParam.selectedGrade = grade;
                        }
                    })
                }
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBuOrgs(){
        erp_studentBuOrgsService.query({},function(resp){
            if(!resp.error){
                $scope.branchList = resp.data;
                querySelectedOrg();
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }
        })
    }

    /**
     * 选择年级
     * @param grade
     */
    $scope.selectGrade = function(grade){
        $scope.queryParam.selectedGrade = grade;
        querySubject();
        $scope.querySelectingCourse();
    }

    /**
     * 选择科目
     * @param subject
     */
    $scope.selectSubject = function(subject){
        $scope.queryParam.selectedSubject = subject;
        $scope.querySelectingCourse();
    }

    /**
     * 查询课程
     */
    $scope.querySelectingCourse = function(){
        var param = {
            branch_id:$scope.queryParam.selectedBranch?$scope.queryParam.selectedBranch.id:-1,
            season_id:$scope.queryParam.selectedTimeSeason?$scope.queryParam.selectedTimeSeason.id:-1,
            grade_id:$scope.queryParam.selectedGrade?$scope.queryParam.selectedGrade.id:-1,
            subject_id:$scope.queryParam.selectedSubject?$scope.queryParam.selectedSubject.id:-1,
            business_type:$scope.businessType,
            search_info:$scope.queryParam.courseSearchInfo
        };
        param.currentPage = $scope.queryParam.currentPage;
        param.pageSize = $scope.queryParam.pageSize;
        param.student_num = 'true';

        $scope.toSelectingCourseList = [];
        if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
        }else{
            alert("请选择校区!");
            return;
        }
        $scope.isQuerySelectingCourse = 'isQuerySelectingCourse';
        erp_courseService.query(param,function(resp){
            $scope.isQuerySelectingCourse = '';
            if(!resp.error){
                $scope.toSelectingCourseList = resp.data;
                $scope.queryParam.total          = resp.total;
                $scope.queryParam.totalPage     = resp.totalPage;
                $scope.queryParam.pageSize      = resp.pageSize;
                $scope.queryParam.currentPage  = resp.currentPage;
                $scope.queryParam.paginationBars = [];
                for(var index = ($scope.queryParam.page-1) * 10  ;index < $scope.queryParam.totalPage && index < $scope.queryParam.page * 10;index++){
                    $scope.queryParam.paginationBars.push(index);
                }
            }else{
                alert(resp.message);
            }
        })
    }

    /**
     * 分页查询
     * @param currentPage
     */
    $scope.pageQuery = function(currentPage){
        $scope.queryParam.currentPage  = currentPage;

        $scope.querySelectingCourse();
    }
    $scope.firstPage = function(){
        $scope.queryParam.page = 1;
        $scope.queryParam.currentPage  = 1;
        $scope.querySelectingCourse();
    }
    $scope.endPage = function(){

        $scope.queryParam.currentPage  = $scope.queryParam.totalPage;
        $scope.queryParam.page = Math.floor($scope.queryParam.totalPage / 10) + 1;
        $log.log("endPage,page is "+$scope.queryParam.page+",currentPage is "+$scope.queryParam.currentPage);
        $scope.querySelectingCourse();
    }
    $scope.nextPage = function(page){
        $scope.queryParam.page = page;
        $scope.queryParam.currentPage  = (page-1) * 10 + 1;
        $scope.querySelectingCourse();
    }

    function querySelectedOrg(){
        PUBORGSelectedService.query({},function(resp){
            if(!resp.error){
                $scope.selectedOrg = resp.data;
                if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
                    $.each($scope.branchList,function(i,b){
                        if(b.id == $scope.selectedOrg.id){
                            $scope.queryParam.selectedBranch = b;
                        }
                    });
                    $scope.querySelectingCourse();
                }else{
                    alert("请选择校区!");
                }
            }else{
                alert(resp.message);
            }
        })
    }

    $scope.showCourseTimes = function(course){
        if(course.isShowCourseTime){
            course.isShowCourseTime = false;
        }else{
            _.forEach($scope.toSelectingCourseList, function (item) {
                item.isShowCourseTime = false;
            })
            course.isShowCourseTime = true;
            queryAttendanceCourseTimes(course);
        }
    }



    function queryAttendanceCourseTimes(course){
        var param = {};
        param.courseId = course.id;
        course.isQueryAttendanceCourseTimes = 'isQueryAttendanceCourseTimes';
        erp_attendanceCourseTimesService.query(param,function(resp){
            course.isQueryAttendanceCourseTimes = '';
           if(!resp.error){
               $scope.courseTimeAttendanceList = resp.data;
           }
        });
    }
    $('title').text("班级课考勤 | 厝边素高");
    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();
}
/**
 * Created by Liyong.zhu on 2017/2/18.
 */
"use strict";
angular.module('ework-ui').controller(
		'erp_attendanceBJKMakeupController',
		[ '$scope', 
		  '$log',
			'$uibMsgbox',
		  'erp_attendanceCourseTimesService',
		   erp_attendanceBJKMakeupController ]);

function erp_attendanceBJKMakeupController($scope, $log, $uibMsgbox,
		erp_attendanceCourseTimesService) {
	$scope.searchParam = {
			start_date:"",
			end_date:""
	};
	function queryMakeUp() {
		
		if(!checkStartEndTime($scope.searchParam.start_date,$scope.searchParam.end_date)){
			$uibMsgbox.alert('截止日期必须大于或等于开始日期');
			return;
		}
		var param = {};
		param.startDate = $scope.searchParam.start_date;
		param.endDate = $scope.searchParam.end_date;
		if (!$scope.studentId) {
			// studentId不存在，根据courseId和courseTime查询补课信息
			param.courseId = $scope.courseId;
			param.courseTime = $scope.courseTime;
		} else {
			param.studentId = $scope.studentId;
		}
		$scope.isQueryCourseTimeMakeup = 'isQueryCourseTimeMakeup';// 正在查询标识
		erp_attendanceCourseTimesService.makeup(param, function(resp) {
			$scope.isQueryCourseTimeMakeup = '';// 查询结束
			if (!resp.error) {
				$scope.courseTimeMakeupList = resp.data;
			} else {
				$uibMsgbox.alert(resp.message);
			}
		});
	}

	$scope.queryInfo = function() {
		queryMakeUp();
	}
	
	

	function initial() {
		$scope.courseId = $("#rootIndex_courseId").val();
		$scope.courseTime = $("#rootIndex_courseTime").val();
		$scope.studentId = $("#rootIndex_studentId").val();
		if (!$scope.studentId) {
			// 不存在 studentId
			$('title').text("补课");
		} else {
			$('title').text("我的补课");
		}
	}
	initial();
}
/**
 * Created by Liyong.zhu on 2017/2/18.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_attendanceBJKStudentsController', [
        '$scope',
        '$log',
        '$uibMsgbox',
        'erp_subjectService',
        'erp_gradeService',
        'erp_courseService',
        'erp_studentBuOrgsService',
        'erp_timeSeasonService',
        'PUBORGSelectedService',
        'erp_attendanceCourseTimesService',
        'erp_teacherService',
        'erp_attendanceMakeupService',
        'EmployeeManageService',
        erp_attendanceBJKStudentsController]);

function erp_attendanceBJKStudentsController(
    $scope,
    $log,
    $uibMsgbox,
    erp_subjectService,
    erp_gradeService,
    erp_courseService,
    erp_studentBuOrgsService,
    erp_timeSeasonService,
    PUBORGSelectedService,
    erp_attendanceCourseTimesService,
    erp_teacherService,
    erp_attendanceMakeupService,
    EmployeeManageService) {
    $scope.isShowSenior = false;
    $scope.businessType = 1;
    $scope.queryParam  = {
        page:1
    };
    $scope.attendTypeList = [
        {
            "name":"置空",
            "id":10
        },{
            "name":"挂起",
            "id":11
        },{
            "name":"正常上课",
            "id":12
        }
    ];
    $scope.paramSettingsList = [
        {   id:null,
            courseId:null,
            courseName : '学管师',
            courseVal:'',
            courseKey:'course_manager',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'',
            extandVal4:'',
            remark:''
        },{
            id:null,
            courseId:null,
            courseName : '中文老师',
            courseVal:'',
            courseKey:'course_tearcher_cn',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'课时长度',
            extandVal4:'',
            remark:''
        },{
            id:null,
            courseId:null,
            courseName : '外文老师',
            courseVal:'',
            courseKey:'course_tearcher_en',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'课时长度',
            extandVal4:'',
            remark:''
        }
    ];

    $scope.selectQueryAttendType = function(attendType){
        $scope.queryParam.selectedAttendType = attendType;
    }

    $scope.selectAttendType = function(attendType){
        $scope.queryParam.selectedAllAttendType = attendType;
        $.each($scope.selectedStudent,function(i,stu){
            stu.attendType = attendType.id;
            stu.STATUSTYPENAME = attendType.name;
        });
    }

    $scope.isOpenParamSettings = false;
    $scope.openParamSettingsPanel = function(){
        $scope.isOpenParamSettings = true;
        queryCourseParamSettings();
    };
    $scope.closeParamSettingsPanel = function(){
        $scope.isOpenParamSettings = false;
    };

    function queryCourseParamSettings(){
        var param = {};
        param.schedulingId = $scope.schedulingId;
        $scope.isQueryCourseParamSettings = 'isQueryCourseParamSettings';
        //先查询课次级别的参数配置
        erp_courseService.querySchedulingTimeAssist(param,function(resp){
            if(!resp.error){
                var data = resp.data;
                if(data&&data.length){
                    $scope.isQueryCourseParamSettings = '';
                    $scope.paramSettingsList = data;
                }else{
                    //查询课程级别的参数配置
                    var param = {};
                    param.courseId = $scope.courseId;
                    erp_courseService.querySchedulingAssist(param,function(resp){
                        $scope.isQueryCourseParamSettings = '';
                        if(!resp.error){
                            var data = resp.data;
                            if(data&&data.length){
                                $scope.paramSettingsList = data;
                            }
                        }else{
                            $uibMsgbox.error(resp.message);
                        }
                    });
                }
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.selectParam = function(paramSetting,data){
        paramSetting.courseVal = data.id + '';
        paramSetting.courseValName = data.name;
    }

    $scope.saveParamSettings = function(){
        $uibMsgbox.confirm('修改高级参数，不会改变历史考勤记录，如果需要变更历史，请置空后重新考勤，是否继续？', function (res) {
            if (res == 'yes') {
                if($scope.paramSettingsList&&$scope.paramSettingsList.length){
                    $.each($scope.paramSettingsList,function(i,p){
                        p.schedulingId = $scope.schedulingId;
                    });
                    var param = {};
                    param.schedulingId = $scope.schedulingId;
                    param.schedulingAssistList =   $scope.paramSettingsList;
                    $scope.isSubmit = 'saveCourseParamSettings';
                    erp_courseService.updateSchedulingTimeAssist(param,function(resp){
                        $scope.isSubmit = '';
                        if(!resp.error){
                            $uibMsgbox.alert("保存成功！");
                            $scope.closeParamSettingsPanel();
                        }else{
                            $uibMsgbox.error(resp.message);
                        }
                    });
                }
            }
        })
    }

    /**
     *
     * 提交考勤
     *
     */
    $scope.submitAttendance = function(){
        if(!$scope.selectedStudent.length){
            $uibMsgbox.alert("请选择考勤的学员！");
            return;
        }
        var param = {};
        var attendanceList = [];
        $.each($scope.selectedStudent,function(i,stu){
            var student = {};
            student.schedulingId = stu.schedulingId;
            student.studentId = stu.studentId;
            student.studentName = stu.studentName;
            student.lock_status = stu.attShenpiStatus;
            student.teacherId = stu.teacherId;
            student.remark = stu.remark;
            student.order_encoding = stu.orderEncoding;
            student.courseDate = stu.courseDate;
            student.attendanceId = stu.attendanceId;
            student.attendType = stu.attendType;
            attendanceList.push(student);
        });
        param.submitAttendanceList = attendanceList;
        $scope.isSubmitAttendance = 'isSubmitAttendance';
        erp_attendanceCourseTimesService.attendance(param,function(resp){
            $scope.isSubmitAttendance = '';
           if(!resp.error){
               $uibMsgbox.alert("考勤成功！");
           }else{
               $uibMsgbox.error(resp.message);
           }
        });
    }
    $scope.selectedStudent = [];
    $scope.checkedStudent=function(student){
        if(student.checked){
            student.checked = false;
        }else{
            student.checked = true;

        }

        var selectedStudent = [];
        $.each($scope.attendanceStudents,function(i,stu){
            if(stu.checked){
                selectedStudent.push(stu);
            }
        });
        $scope.selectedStudent = selectedStudent;
    }

    $scope.checkedAllStudent=function(){
        var selectedStudent = [];
        $.each($scope.attendanceStudents,function(i,stu){
            if(stu.checked){
                stu.checked = false;
            }else{
                stu.checked = true;
                selectedStudent.push(stu);
            }
        });
        $scope.selectedStudent = selectedStudent;
    }



    $scope.selectTeacher = function(teacher,student){
        student.teacherId = teacher.id;
        student.teacherName = teacher.teacher_name;
        $uibMsgbox.alert("选择成功！");
    }

    $scope.changeSearchInfo = function(paramSetting){
        if(paramSetting.courseKey == 'course_manager') {
            queryEmployeeInfo();
        } else {
            queryTeacher();
        }

    }


    function queryTeacher(){
        var param = {};
        if($scope.queryParam.search_info){
            param.search_info = $scope.queryParam.search_info;
        }
        $scope.isLoadingDataList = 'isLoadingDataList';
        $scope.queryParam.dataList = [];
        erp_teacherService.page(param,function(resp){
            $scope.isLoadingDataList = '';
            if(!resp.error){
                $scope.queryParam.dataList = $.map(resp.data,function(n,i){
                    n.name = n.teacher_name;
                    return n;
                });
            }else{
                $uibMsgbox.error(resp.data);
            }
        });
    }

    $scope.changeHourLen = function(paramSetting) {
        if(!paramSetting.courseVal) {
            paramSetting.extandVal1 = null;
            paramSetting.extandVal2 = null;
        }
    }

    function queryEmployeeInfo(){
        var param = {};
        if($scope.queryParam.search_info){
            param.searchInfo = $scope.queryParam.search_info;
        }
        $scope.isLoadingDataList = 'isLoadingDataList';
        $scope.queryParam.dataList = [];
        EmployeeManageService.queryEmployeeInfo(param,function(resp){
            $scope.isLoadingDataList = '';
            if(!resp.error){
                $scope.queryParam.dataList = $.map(resp.data,function(n,i){
                    n.name = n.EMPLOYEE_NAME;
                    n.encoding = n.ENCODING;
                    n.id = n.ID;
                    return n;
                });
            }else{
                $uibMsgbox.error(resp.data);
            }
        });
    }

    $scope.showSenior = function(){
        if($scope.isShowSenior){
            $scope.isShowSenior = false;
        }else{
            $scope.isShowSenior = true;
        }
    }






    function initial(){
        $('title').text("班级课考勤 | 厝边素高");
        $scope.courseId = $("#rootIndex_courseId").val();
        $scope.courseTime = $("#rootIndex_courseTime").val();
        $scope.schedulingId = $("#rootIndex_schedulingId").val();

        if($scope.courseId && $scope.courseTime){

            $scope.isQueryCourse = 'isQueryCourse';

            var param = {};
            param.course_id = $scope.courseId;
            param.business_type = 1;
            erp_courseService.query(param,function(resp){

                if(!resp.error&&resp.data&&resp.data.length){
                    $scope.course = resp.data[0];
                    $scope.isQueryCourse = '';
                    $scope.isReady = true;
                }else{
                    $scope.isQueryCourse='courseNotFound';
                }
            });

            var param = {};
            param.courseId = $scope.courseId;
            erp_attendanceCourseTimesService.query(param,function(resp){
                if(!resp.error){
                    $scope.courseTimeAttendanceList = resp.data;
                    if($scope.courseTimeAttendanceList){
                        $.each($scope.courseTimeAttendanceList,function(i,m){
                            if((m.courseTimes+'') == $scope.courseTime){
                                m.checked = true;
                                $scope.selectedCourseTime = m;
                            }
                        });
                    }
                }
            });

            queryStudents();
            queryTeacher();
        }


    }

    function queryStudents(){
        var param = {};
        param.courseId = $scope.courseId;
        param.courseTime = $scope.courseTime;
        param.businessType = $scope.businessType;

        $scope.isQueryAttendanceStudents = true;
        erp_attendanceCourseTimesService.students(param,function(resp){
            $scope.isQueryAttendanceStudents = false;
            if(!resp.error){
                $scope.attendanceStudents = resp.data;
            }
        });
    }


    $scope.outputExcel = function (){
        var param = {};
        param.courseId = $scope.courseId;
        param.courseTime = $scope.courseTime;
        param.businessType = $scope.businessType;

        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        erp_attendanceCourseTimesService.outputExcel(param, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
        ////第五种方法
        //var idTmr;
        //function  getExplorer() {
        //    var explorer = window.navigator.userAgent ;
        //    //ie
        //    if (explorer.indexOf("MSIE") >= 0) {
        //        return 'ie';
        //    }
        //    //firefox
        //    else if (explorer.indexOf("Firefox") >= 0) {
        //        return 'Firefox';
        //    }
        //    //Chrome
        //    else if(explorer.indexOf("Chrome") >= 0){
        //        return 'Chrome';
        //    }
        //    //Opera
        //    else if(explorer.indexOf("Opera") >= 0){
        //        return 'Opera';
        //    }
        //    //Safari
        //    else if(explorer.indexOf("Safari") >= 0){
        //        return 'Safari';
        //    }
        //}
        //function method5(tableid) {
        //    if(getExplorer()=='ie')
        //    {
        //        var curTbl = document.getElementById(tableid);
        //        var oXL = new ActiveXObject("Excel.Application");
        //        var oWB = oXL.Workbooks.Add();
        //        var xlsheet = oWB.Worksheets(1);
        //        var sel = document.body.createTextRange();
        //        sel.moveToElementText(curTbl);
        //        sel.select();
        //        sel.execCommand("Copy");
        //        xlsheet.Paste();
        //        oXL.Visible = true;
        //
        //        try {
        //            var fname = oXL.Application.GetSaveAsFilename("Excel.xls", "Excel Spreadsheets (*.xls), *.xls");
        //        } catch (e) {
        //            print("Nested catch caught " + e);
        //        } finally {
        //            oWB.SaveAs(fname);
        //            oWB.Close(savechanges = false);
        //            oXL.Quit();
        //            oXL = null;
        //            idTmr = window.setInterval("Cleanup();", 1);
        //        }
        //
        //    }
        //    else
        //    {
        //        tableToExcel(tableid)
        //    }
        //}
        //function Cleanup() {
        //    window.clearInterval(idTmr);
        //    CollectGarbage();
        //}
        //var tableToExcel = (function() {
        //    var uri = 'data:application/vnd.ms-excel;base64,',
        //        template = '<html><head><meta charset="UTF-8"></head><body><table>{table}</table></body></html>',
        //        base64 = function(s) { return window.btoa(unescape(encodeURIComponent(s))) },
        //        format = function(s, c) {
        //            return s.replace(/{(\w+)}/g,
        //                function(m, p) { return c[p]; }) }
        //    return function(table, name) {
        //        if (!table.nodeType) table = document.getElementById(table);
        //        var ctx = {worksheet: name || 'Worksheet', table: table.innerHTML};
        //        window.location.href = uri + base64(format(template, ctx));
        //    }
        //})();
        //
        //method5(tableid);
    }

    $scope.toOutputExcel = function(){
        $scope.isOpenStudentsList = 'openStudentsList';
    }

    $scope.closeOutputExcel = function(){
        $scope.isOpenStudentsList = '';
    }

    /*补课——start*/
    $scope.selectAttend={};
    $scope.teach={};
    $scope.extralesson = function(attend){
        $scope.attDetailsResult = [];
        $scope.phone =  attend.PHONE;
        $scope.selectAttend = attend;
        $scope.selectCourse_id = $scope.courseId;
        var param = {};
        param.scheduling_id = attend.schedulingId;
        $scope.openDialog = 'openExtralesson';
        erp_attendanceMakeupService.query(param,function(resp){
            $scope.openDialog = '';
            if(!resp.error){
                //if(resp.data.length==0){
                    //$uibMsgbox.alert("该课程视频未上传，请联系相关人员上传视频~");
                    //return;
               // }else{
                    $scope.openDialog = 'open.dialog.extralesson';
                    $scope.attDetailsLoad = 'loading';
                    $scope.selectAttend = attend;
               // }
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.closeExtralesson = function(){
        $scope.openDialog = '';
    }

    $scope.saveExtralesson = function(){
        if(isEmpty($("#phone").val())){
            $uibMsgbox.alert("手机号码不能为空");
            return;
        }
        if(isEmpty($("#elStartDate").val())){
            $uibMsgbox.alert("开始时间不能为空");
            return;
        }
        if(isEmpty($("#elEndDate").val())){
            $uibMsgbox.alert("截止时间不能为空");
            return;
        }

        var elStartDate = $("#elStartDate").val();
        var elEndDate = $("#elEndDate").val();
        var param = {};
        param.scheduling_id = $scope.selectAttend.schedulingId;
        param.order_course_id = $scope.selectAttend.orderCourseId;
        param.status = '1';
        param.valid_start_date = elStartDate;
        param.valid_end_date = elEndDate;
        param.student_id = $scope.selectAttend.studentId;
        param.phone = $("#phone").val();
        
        $scope.openDialog = 'saveExtralesson';
        erp_attendanceMakeupService.post(param, function(resp){
            $scope.openDialog = '';
            if(!resp.error){
                $uibMsgbox.alert('预约补课完成,预约码为【'+resp.activation_code+'】');
                initial();
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }

    /*补课——end*/


    initial();
}
/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_attendanceWfdController', [
        '$scope',
        '$log',
        '$uibMsgbox',
        '$state',
        'erp_attendanceCourseTimesService',
        erp_attendanceWfdController]);

function erp_attendanceWfdController(
    $scope,
    $log,
    $uibMsgbox,
    $state,
    erp_attendanceCourseTimesService
    ) {
    // 搜索字段
    $scope.searchParam = {
        start_date: getCurrentDate(),
        end_date: getCurrentDate(),
        range:"today"
    };
    // 晚辅导考勤统计情况列表
	$scope.wfdList = [];
    
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，默认]
     * @param  {Function} perPageOptions [description]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function() {
        	$scope.query();
        }
    }

    $scope.paginationBars = [];
    
    // 考勤按钮触发
    $scope.handleAttendance = function (wfd) {
    	window.open("?attendance_date=" + wfd.DATE_TIME + "#/orders/attendanceMgr/attendanceMgrWFDDetails");
    }

    // 查询晚辅导考勤统计情况
    $scope.query = function () {
		erp_attendanceCourseTimesService.branchinfo({
    		pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            p_start_date: $scope.searchParam.start_date,
            p_end_date: $scope.searchParam.end_date
        },
        function(resp){
            if(!resp.error) {
           	 	$scope.wfdList = resp.data;
           	 	$scope.paginationConf.totalItems = resp.total || 0;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    }
    
    $scope.query();
}
/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_attendanceWfdDetailsController', [
        '$scope',
        '$log',
        '$uibMsgbox',
        '$state',
        'erp_attendanceCourseTimesService',
        erp_attendanceWfdDetailsController]);

function erp_attendanceWfdDetailsController($scope,
                                            $log,
                                            $uibMsgbox,
                                            $state,
                                            erp_attendanceCourseTimesService) {
    $scope.initOrResetStudent = function () {
        $scope.selectAllStudentFlag = false;//学生全选标识
        $scope.studentList = [];//学生列表
        $scope.studentList_attend = [];//已考勤学生列表
        $scope.studentList_no_attend = [];//未考勤学生列表
    };
    $scope.initOrResetTeacher = function () {
        $scope.selectAllTeacherFlag = false;//教师全选标识
        $scope.teacherList = [];//教师列表
        $scope.teacherList_attend = [];//已考勤教师列表
        $scope.teacherList_no_attend = [];//未考勤教师列表
    };
    $scope.initOrResetTeacherGroup = function () {
        $scope.teacherGroupList = [];//教师组列表
        $scope.current_teacher_group = '';//当前选中的教师组
        $scope.initOrResetTeacher();
    };
    $scope.init = function () {
        $scope.selectedTab = 'student';//当前激活的Tab标签页
        $scope.attendance_date = $("#rootIndex_attendance_date").val();//考勤日期
        $scope.current_teacher_group = '';//当前选中的教师组
        $scope.teacher_search_info = "";//教师查询条件
        $scope.student_search_info = "";//学生查询条件
        $scope.initOrResetStudent();
        $scope.initOrResetTeacher();
    };

    /**
     * 全选/取消全选
     * @param type ‘student’表示全选student列表；‘teacher'表示全选teacher列表
     */
    $scope.switchFlag = function (type) {
        var tempArr = [];
        var tempFlag = '';
        var i = 0;
        if (type == 'student') {
            tempArr = $scope.studentList;
            tempFlag = $scope.selectAllStudentFlag;
        } else {
            tempArr = $scope.teacherList;
            tempFlag = $scope.selectAllTeacherFlag;
        }
        if (tempFlag == true) {
            for (i in tempArr) {
                tempArr[i].selectFlag = true;
            }
        } else {
            for (i in tempArr) {
                tempArr[i].selectFlag = false;
            }
        }
    };

    /**
     * 改变标签页，并且加载数据
     * @param tabName 'stduent' 或'teacher'
     */
    $scope.changeTabAndLoadData = function (tabName) {
        $scope.selectedTab = tabName;
        if (tabName == "student") {
            //查询学生列表
            $scope.queryStudents();
        } else {
            //查询教师列表
            $scope.queryTeacherGroups();
        }
    };

    /**
     * 查询学生列表
     */
    $scope.queryStudents = function () {
        $scope.initOrResetStudent();
        erp_attendanceCourseTimesService.studentsForWfdAttn({
                p_attendance_date: $("#rootIndex_attendance_date").val(),
                p_search_info: $scope.student_search_info
            },
            function (resp) {
                if (!resp.error) {
                    $scope.studentList = resp.data;
                    //将studentList中的已考勤学员和未考勤学员分离
                    for (var i in $scope.studentList) {
                        if ($scope.studentList[i].ATTEND_ == 1) {
                            $scope.studentList_attend.push($scope.studentList[i]);
                        } else {
                            $scope.studentList_no_attend.push($scope.studentList[i]);
                        }
                    }
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    };

    /**
     * 查询教师组
     */
    $scope.queryTeacherGroups = function () {
        $scope.initOrResetTeacherGroup();
        erp_attendanceCourseTimesService.teachersGroupForWfdAttn({},
            function (resp) {
                if (!resp.error) {
                    $scope.teacherGroupList = resp.data;
                    //获取教师组后，根据第一个教师组的id查询教师信息
                    $scope.current_teacher_group = resp.data[0].ID;
                    $scope.queryTeachers($scope.current_teacher_group);
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    };

    /**
     * 查询教师列表
     * @param teacher_group_id 教师组ID
     */
    $scope.queryTeachers = function (teacher_group_id) {
        if (teacher_group_id) {
            $scope.current_teacher_group = teacher_group_id;
        }
        $scope.initOrResetTeacher();
        var modalInstance = $uibMsgbox.waiting('正在处理，请稍候...')
        erp_attendanceCourseTimesService.teachersForWfdAttn({
                p_attendance_date: $("#rootIndex_attendance_date").val(),
                p_label_id: $scope.current_teacher_group,
                p_search_info: $scope.teacher_search_info
            },
            function (resp) {
                modalInstance.close();
                if (!resp.error) {
                    $scope.teacherList = resp.data;
                    //将teacherList中的已考勤教师和未考勤教师分离
                    for (var i in $scope.teacherList) {
                        if ($scope.teacherList[i].ATTEND_TYPE == 1) {
                            $scope.teacherList_attend.push($scope.teacherList[i]);
                        } else {
                            $scope.teacherList_no_attend.push($scope.teacherList[i]);
                        }
                    }
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    };
    /**
     * 考勤学生
     * @param flag 'attendBatch'表示批量考勤；'attend'表示考勤单个学生；'cancel'取消单个学生考勤
     */
    $scope.submitStudentAttend = function (flag, cancleStudent) {
        //构造请求参数
        var requestParam = [];
        //构造请求参数
        if (flag == 'attendBatch') {//批量考勤
            var student = null;
            var i = null;
            for (i in $scope.studentList_no_attend) {
                student = $scope.studentList_no_attend[i];
                if (student.selectFlag == true) {
                    var temp = {};
                    temp.student_id = student.STUDENT_ID;
                    temp.order_course_id = student.ORDER_DETAIL_ID;
                    temp.course_date = $("#rootIndex_attendance_date").val();
                    temp.attend_type = 31;
                    requestParam.push(temp);
                }
            }
        } else {//单个学员考勤
            var temp = {};
            temp.student_id = cancleStudent.STUDENT_ID;
            temp.order_course_id = cancleStudent.ORDER_DETAIL_ID;
            temp.course_date = $("#rootIndex_attendance_date").val();
            if (flag == 'attend') {
                temp.attend_type = 31;
            } else {//flag == 'cancle'
                temp.attend_id = cancleStudent.ATTEND_ID;
                temp.attend_type = 30;
            }
            requestParam.push(temp);
        }
        if (requestParam && requestParam.length > 0) {
            var modalInstance = $uibMsgbox.waiting('正在处理，请稍候...')
            erp_attendanceCourseTimesService.attendanceWfd({
                students: requestParam,
                course_date: $("#rootIndex_attendance_date").val(),
                remark: ''
            }, function (resp) {
                modalInstance.close();
                if (!resp.error) {
                    if (requestParam && requestParam.length == 1 && requestParam[0].attend_type == 30) {
                        var attendDate = new Date(Date.parse(requestParam[0].course_date));
                        var attendYear = attendDate.getFullYear();
                        var attendMonth = attendDate.getMonth();
                        var current = new Date();
                        if (attendYear != current.getFullYear() || attendMonth != current.getMonth()) {
                            $uibMsgbox.alert("跨月考勤置空成功，请查看审批流");
                            $scope.queryStudents();
                        } else {
                            $uibMsgbox.alert("考勤置空成功");
                            $scope.queryStudents();
                        }
                        return;
                    }
                    $uibMsgbox.alert("考勤成功");
                    $scope.queryStudents();
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        } else {
            $uibMsgbox.warn("当前没有选中的记录");
        }
    };
    /**
     * 考勤教师
     * @param flag 'attendBatch'表示批量考勤；'attend'表示考勤单个教师；'cancel'取消单个教师考勤
     */
    $scope.submitTeacherAttend = function (flag, cancleTeacher) {
        //构造请求参数
        var requestParam = [];
        if (flag == 'attendBatch') {//批量考勤
            var teacher = null;
            var i = null;
            for (i in $scope.teacherList_no_attend) {
                teacher = $scope.teacherList_no_attend[i];
                if (teacher.selectFlag == true) {
                    var temp = {};
                    temp.teacher_id = teacher.TEACHER_ID;
                    temp.attend_type = 31;
                    requestParam.push(temp);
                }
            }
        } else {//单个教师考勤
            var temp = {};
            temp.teacher_id = cancleTeacher.TEACHER_ID;
            if (flag == 'attend') {
                temp.attend_type = 31;
            } else {//flag == 'cancle'
                temp.attend_id = cancleTeacher.ATTEND_ID;
                temp.attend_type = 30;
            }
            requestParam.push(temp);
        }
        if (requestParam && requestParam.length > 0) {
            var modalInstance = $uibMsgbox.waiting('正在处理，请稍候...')
            erp_attendanceCourseTimesService.attendanceTeachers({
                teachers: requestParam,
                course_date: $("#rootIndex_attendance_date").val(),
                remark: ''
            }, function (resp) {
                modalInstance.close();
                if (!resp.error) {
                    $scope.queryTeachers();
                    if (requestParam && requestParam.length == 1 && requestParam[0].attend_type == 30) {
                        $uibMsgbox.alert("取消考勤成功");
                    } else {
                        $uibMsgbox.alert("考勤成功");
                    }
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        } else {
            $uibMsgbox.warn("当前没有选中的记录");
        }

    };
    $scope.goSetTeacherGroup = function () {
        $state.go('attendanceGroup', {
            path: '/teachers/attendanceGroup',
            href: 'templates/erp/tearchers/attendanceGroup.html'
        })
    };

    $scope.init();
    $scope.queryStudents(); //初始化加载学生列表
}
/**
 * Created by Liyong.zhu on 2016/9/30.
 * Modify by Baiqb@klxuexi.org 2017-08-25
 */
"use strict";
angular.module('ework-ui').controller('erp_attendanceYdyController', [
	'$rootScope',
	'$scope',
	'$uibModal',
	'$uibMsgbox',
	'klxx_accountService',
	'erp_studentCounselorService',
	'erp_studentCourseSchedulingService',
	'erp_attendanceService',
	'erp_dictService',
	erp_attendanceYdyController
]);

function erp_attendanceYdyController(
	$rootScope,
	$scope,
	$uibModal,
	$uibMsgbox,
	klxx_accountService,
	erp_studentCounselorService,
	erp_studentCourseSchedulingService,
	erp_attendanceService,
	erp_dictService
) {
	// 考勤类型【考勤】
	$scope.attendTypeList = []
	// 考勤类型【排课取消】
	$scope.attendTypeCancelList = []
    // 排课状态
	$scope.attendTypeList = [
		{ "key": null, "value": "全部"},
		{ "key": 28, "value": "未考勤" },
		{ "key": 21, "value": "正常上课" },
		{ "key": 23, "value": "排课取消" },
		{ "key": 29, "value": "考勤作废" }
	];

	$scope.attendance = {
		start_date: getCurrentDate(),
		end_date: getCurrentDate(),
		start_time: '07:00',
		end_time: '23:00',
		attend_type: null
	};
	$scope.attendanceListLoading = false;
	$scope.attendanceList = [];

	$scope.checkAllFlag = false;

	$scope.queryStudentSchedulings = function () {
		$scope.attendList = []
		$scope.attendanceListLoading = true;
		var attendType = null; // 正常排课
		if ($scope.attendance.attend_type) {
			attendType = $scope.attendance.attend_type;
		}
		erp_studentCourseSchedulingService.query({
			counselor_id: $rootScope.curAccount.employeeId,
			start_date: $scope.attendance.start_date,
			end_date: $scope.attendance.end_date,
			start_time: $scope.attendance.start_time,
			end_time: $scope.attendance.end_time,
			attend_type: attendType,
			student_info: $scope.attendance.student_info
		}, function (resp) {
			$scope.attendanceListLoading = false;
			$scope.token = resp.token;
			_.forEach(resp.data, function (item) {
				item.optype="saved"
			})
			if (!resp.error) {
				$scope.attendanceList = resp.data;
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}
	/**
	 * 批量操作
	 * @param operate 操作类型 21-考勤 23-排课取消
	 */
	$scope.handleBatchAttendance = function (operate) {
		var attendList = _.cloneDeep($scope.getSelections());
		$scope.handleAttend(attendList, operate);

	}
    /**批量打印
	 *
     * @param operate
     */
    $scope.morePrint=function() {
        var attendList = _.cloneDeep($scope.getSelections());
        if (!attendList || attendList.length == 0|| attendList.length == 1) {
            $uibMsgbox.error("请至少选择二条记录");
            return false;
        }
        else{
            var useragent = navigator.userAgent;
            if(useragent.indexOf('Android') > -1 || useragent.indexOf('Adr') > -1)  {
                var attendanceListIds=[];
                for (var i=0;i<attendList.length;i++){
                    attendanceListIds.push(attendList[i].id);
                }
                if(location.href.indexOf('klxuexi.org')>0){
				window.open("/printhtml/print_ydy.html?attendanceListIds=" + attendanceListIds.join(','));}
				else{
                window.open("/klxxedu/printhtml/print_ydy.html?attendanceListIds=" + attendanceListIds.join(','));
				}
			} else {
                $scope.printMoreYdyAttendance(attendList);
            }
        }

    }
	/**
	 * 在考勤之前先对批量操作的数据进行校验
	 */
	$scope.checkBeforeAttend = function (originAttendList, operate) {
		var attendList = _.cloneDeep(originAttendList)
		if (!attendList || attendList.length == 0) {
			$uibMsgbox.error("请至少选择一条记录");
			return false;
		}

		var idList = [];
		$.each(attendList, function (idx, attend) {
			if (attend.attend_type == operate) {
				idList.push(attend.id);
			} else {
				attend.attend_type = operate;
			}
		});
		if (operate == 21) {
			var futureDaysList = []
			_.forEach(attendList, function (item) {
				if(moment(item.course_date, "YYYYMMDD") > moment()) {
					futureDaysList.push(item.id)
				}
			})
			if (futureDaysList.length > 0) {
				var errMsg = '考勤单号[' + futureDaysList.join(',') + '还未到上课日期，不能进行考勤！';
				return $uibMsgbox.error(errMsg);
			}
		}
		if (idList.length > 0) {
			var errMsg = '考勤单号[' + idList.join(',') + ((operate == 21) ? ']已正常上课,不能再次考勤！' : ']已排课取消，不能再次取消！');
			$uibMsgbox.error(errMsg);
			return false;
		}

		return true;
	}

	// 考勤置空
	$scope.cancelAttendance = function (attend) {
		if (attend.attend_type != 21) {
			$uibMsgbox.error("该记录未考勤，不能置空");
			return;
		}

		attend.attend_type = 20;
		$scope.handleAttend([attend], 20);
	}
	// 排课取消
	$scope.cancelScheduing = function (attend) {
		if (attend.attend_type == 23) {
			$uibMsgbox.error("该记录已排课取消，不能再次排课取消");
			return;
		}

		attend.attend_type = 23;
		$scope.handleAttend([attend], 23);
	}
	
	function openAttendModal (recordList, operate) {
		return $uibModal.open({
			templateUrl: 'batchAttendYdy.html',
			resolve: {
				subAttendTypeCancelList: function () {
					return $scope.subAttendTypeCancelList
				},
				subAttendTypeList: function () {
					return $scope.subAttendTypeList
				},
				attendList: function () {
					return recordList
				},
				operate: function () {
					return operate
				},

			},
			size: 'xlg',
			controller: ['$scope', 'subAttendTypeList', 'subAttendTypeCancelList','attendList', 'operate', function (
				$scope, subAttendTypeList, subAttendTypeCancelList, attendList, operate
			) {
				// 考勤时，默认考勤类型为 正常上课（code: 21）
				// 排课取消时，默认考勤类型为 排课取消（code: 23）
				var defaultAttendType = operate == '21' ? '21':'23'
				_.forEach(attendList, function (item) {
					item.sub_attend_type = defaultAttendType
				})
				$scope.attendList = attendList
				$scope.operate = operate
				$scope.subAttendTypeList = subAttendTypeList
				$scope.subAttendTypeCancelList = subAttendTypeCancelList
				var titleMap = {
					20: '置空',
					21: '考勤',
					23: '排课取消',
					29: '考勤作废'
				}
				$scope.title = titleMap[operate]
				$scope.onSave = function () {
					$scope.$close($scope.attendList)
				}
			}]
		})
	}

	// 处理考勤
	$scope.handleAttend = function (attendList, operate) {
		if (!$scope.checkBeforeAttend(attendList, operate)) {
			return false;
		}
		openAttendModal(attendList, operate).result.then(function () {
			_.forEach(attendList, function (item) {
				if (item.copyInfo) {delete item.copyInfo}
				item.attend_type = operate
			});
            var _waitingModal = $uibMsgbox.waiting('操作中，请稍候...');
			erp_attendanceService.ydyAttend({"token" : $scope.token, "attendList" : attendList}, function (resp) {
                _waitingModal.close();
				if (!resp.error) {
					var msgMap = {
						20: '置空成功',
						21: '考勤成功',
						23: '排课取消成功',
						29: '考勤作废成功'
					}
					$uibMsgbox.alert(msgMap[operate]);
					$scope.queryStudentSchedulings();
				} else {
					$uibMsgbox.error(resp.message);
				}
			});
		}, function () {
			$scope.queryStudentSchedulings();
		})
	}

	// 获取所选择的数据
	$scope.getSelections = function () {
		var selections = [];
		if ($scope.attendanceList && $scope.attendanceList.length > 0) {
			$.each($scope.attendanceList, function (idx, attendance) {
				if (attendance.selectFlag) {
					selections.push(attendance);
				}
			});
		}
		return selections;
	}
	// 处理全选事件
	$scope.onCheckAll = function () {
		if ($scope.attendanceList && $scope.attendanceList.length > 0) {
			$.each($scope.attendanceList, function (idx, attendance) {
				attendance.selectFlag = attendance.attend_type != 28 ? false : !!$scope.checkAllFlag;
			});
		}
	}

	$scope.getAttendTypes = function () {
		erp_dictService.getDictData({
			typeCode: 'ydyAttendType',
			subTypeCode: 'cancelSchedule'
		}).$promise.then(function (resp) {
			$scope.subAttendTypeCancelList = _.sortBy(resp.data, 'code')
		})

		erp_dictService.getDictData({
			typeCode: 'ydyAttendType',
			subTypeCode: 'attend'
		}).$promise.then(function (resp) {
			$scope.subAttendTypeList = _.sortBy(resp.data, 'code')
		})
	}
	
	// 考勤记录表信息修改
	$scope.editAttendRecord = function (record) {
		record.optype="edit"
		record.copyInfo = {
			sub_attend_type: record.sub_attend_type,
			remark: record.remark
		}
	}
	// 考勤记录表信息修改保存
	$scope.saveAttendRecord = function (record) {
		record.optype="saved"
		erp_attendanceService.ydyAttendPut(_.pick(record, ['id', 'sub_attend_type','remark']), function (resp) {
			if (!resp.error) {
				$uibMsgbox.alert('修改成功');
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}
	// 考勤记录表信息修改取消
	$scope.cancelAttendRecord = function (record) {
		record.optype="saved"
		record.sub_attend_type = record.copyInfo.sub_attend_type
		record.remark = record.copyInfo.remark
	}

    // 打印一对一考勤信息
    $scope.printYdyAttendance = function(attendance) {
        $scope.printPage = 'beginPrint';
        erp_attendanceService.batchPrint({
            attendanceListIds: attendance.id,
        }, function (resp) {
            if (!resp.error) {
            	var attendanceListId = attendance.id;
                var useragent = navigator.userAgent;
            	if(useragent.indexOf('Android') > -1 || useragent.indexOf('Adr') > -1){
            		if(location.href.indexOf('klxuexi.org')>0){
                    window.open("/printhtml/print_ydy.html?attendanceListIds=" + attendanceListId);}
                    else{
                    window.open("/klxxedu/printhtml/print_ydy.html?attendanceListIds=" + attendanceListId);
					}
				}else {
            		CreatePrintPageYdyAttendance(resp.data);
            	}
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }
    //批量打印考勤信息

    $scope.printMoreYdyAttendance = function(attendanceList) {
        $scope.printPage = 'beginPrint';
        var attendanceListIds=[];
        for (var i=0;i<attendanceList.length;i++){
            attendanceListIds.push(attendanceList[i].id);
        }
        erp_attendanceService.batchPrint({
            attendanceListIds:attendanceListIds.join(',')
        }, function (resp) {
            if (!resp.error) {
                CreatePrintPageMoreYdyAttendance(resp.data);
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }




            $scope.init = function () {
                // 获取考勤类型
                $scope.getAttendTypes()
                // 获取考勤列表
                $scope.$watch('curAccount.employeeId', function (newValue, oldValue) {
                    if (newValue) {
                        $scope.queryStudentSchedulings();
                    }
                })
                if (!$rootScope.curAccount && !$rootScope.curAccount.employeeId) {
                    klxx_accountService.query({}, function (resp) {
                        if (!resp.error) {
                            $rootScope.curAccount = resp.data;
                        } else {
                            $uibMsgbox.error('获取员工帐号信息失败：' + resp.message);
                        }
                    })
                }
            }
            $scope.init()

        }


/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_cameraController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_cameraService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    'erp_roomService',
    erp_cameraController
]);

function erp_cameraController($rootScope,
                            $scope,
                            $log,
                            $state,
                            $uibModal,
                            $uibMsgbox,
                            erp_cameraService,
                            erp_studentBuOrgsService,
                            PUBORGSelectedService,
                            erp_roomService) {


    /**
     * 查询校区
     */
    function queryBranchOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                $scope.branchList = resp.data;
                querySelectedOrg();
            }
        })
    }

    $scope.roomList = [];

    /**
     * 查询教室
     */
    function queryRoom(branch_id) {
        erp_roomService.queryRoom({
            p_branch_id: branch_id
        }, function (res) {
            if (!res.error) {
                $scope.roomList = res.data;
            } else {
                $uibMsgbox.error(res.message);
            }
        });
    }
    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && $scope.selectedOrg.type == "4") {
                    $.each($scope.branchList, function (i, b) {
                        if (b.id == $scope.selectedOrg.id) {
                            $scope.searchParam.selectedBranch = b;
                        }
                    });
                    $scope.branchList = [$scope.searchParam.selectedBranch];
                } else {
                    $scope.searchParam.selectedBranch = $scope.branchList[0];
                }
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }
    $scope.init = function () {

        $scope.searchParam = { // 搜索条件
            p_branch_id: null,
            p_queryKey: null
        };
        $scope.cameraList = []; // 课程列表
        $scope.branchList = [];//校区列表

        /**
         * 分页配置
         * @param  {Number} currentPage     [当前页面，初始化时默认为1]
         * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
         * @param  {Number} itemsPerPage    [每页显示条数]
         * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
         * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
         * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
         */
        $scope.paginationConf = {
            currentPage: 1, //当前页
            totalItems: 0,
            itemsPerPage: 10,
            onChange: function () {
                $scope.query();
            }
        };
        queryBranchOrgs();
    };
    // 查询方法
    $scope.query = function () {

        erp_cameraService.pageCamera({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            p_branch_id: $scope.searchParam.selectedBranch.branch_id,
            p_bu_id: $scope.searchParam.p_bu_id,
            p_queryKey: $scope.searchParam.p_queryKey
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.cameraList = resp.data;
            } else {
                alert(resp.message);
            }
        });
    };
    //
    // // 删除
    // $scope.delRoom = function (room) {
    //     $uibMsgbox.confirm('确定删除？', function (result) {
    //         if(result != 'yes') {
    //             return;
    //         }
    //         erp_roomService.del({
    //             id: room.id
    //         }, function (resp) {
    //             if (!resp.error) {
    //                 $scope.query();
    //                 $uibMsgbox.alert("删除成功");
    //             } else {
    //                 alert(resp.message);
    //             }
    //         });
    //     });
    // };
    // 添加
    $scope.addCamera = function () {
        var CameraDefault = {};
        if($scope.selectedBranch) {
            CameraDefault.branch_id = $scope.selectedBranch;
        } else{
            CameraDefault.branch_id = $scope.searchParam.selectedBranch.id
        }
        CameraDefault.bu_id = $scope.searchParam.p_bu_id;
        queryRoom(CameraDefault.branch_id);
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'camera_modal.html',
            controller: 'erp_cameraModalController',
            scope: $scope,
            resolve: {
                params: function () {
                    return {
                        optype: "添加",
                        cameraDetail: CameraDefault,
                        branchList : $scope.branchList
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("操作成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };
    // 修改
    $scope.putCamera = function (camera) {
        var cameraDetail = {};
        angular.copy(camera,cameraDetail);
        queryRoom(cameraDetail.branch_id);
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'camera_modal.html',
            controller: 'erp_cameraModalController',
            scope: $scope,
            resolve: {
                params: function () {
                    return {
                        optype: "修改",
                        cameraDetail: cameraDetail,
                        branchList : $scope.branchList
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("操作成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };
    $scope.init();
}


angular.module('ework-ui')
    .controller('erp_cameraModalController', [
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        'erp_cameraService',
        'params',
        erp_cameraModalController
    ])

function erp_cameraModalController($scope,
                                 $uibModalInstance, $uibMsgbox, erp_cameraService, params) {
    $scope.optype = params.optype;
    $scope.cameraDetail = params.cameraDetail;
    $scope.branchList = params.branchList;
    if($scope.optype == "添加" &&  $scope.branchList &&  $scope.branchList.length) {
        if(!$scope.cameraDetail.branch_id) {
            $scope.cameraDetail.branch_id = $scope.branchList[0].id;
        }
    }
    /**
     * 模态框取消
     */
    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel')
    }
    /**
     * 模态框确认
     */
    $scope.handleModalConfirm = function () {
        var _waitingModal = $uibMsgbox.waiting('操作中，请稍候...');
        if ($scope.optype == "修改") {
            //更新数据
            erp_cameraService.put($scope.cameraDetail, function (resp) {
                _waitingModal.close();
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        } else {
            //添加数据
            erp_cameraService.post($scope.cameraDetail, function (resp) {
                _waitingModal.close();
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    }
}
(function() {
  'use strict';

  angular
    .module('ework-ui')
    .controller('erp_arrangerController', erp_arrangerController);

  erp_arrangerController.$inject = [
    '$scope',
    '$state',
    '$uibMsgbox',
    'erp_arrangerService'
  ];
  function erp_arrangerController(
    $scope,
    $state,
    $uibMsgbox,
    erp_arrangerService
  ) {
    var vm = this;
    $scope.arrangerList = [];
    $scope.paginationConf = {
      currentPage: 1, //当前页
      totalItems: 0,
      itemsPerPage: 10,
      onChange: function(){
          $scope.getArrangerList();
      }
  };

    $scope.onAddArranger = function() {
      $state.go('systemDataArrangerEdit', {
        optype: 'add'
      })
    }

    $scope.onEditArranger = function (item) {
      $state.go('systemDataArrangerEdit', {
        optype: 'edit',
        id: item.id
      })
    }

    $scope.onDeleteArranger = function (item) {
      $uibMsgbox.confirm('确认删除所选的排课专员？', function (res) {
        if (res == 'yes') {
          erp_arrangerService.delete({
            id: item.id
          }).$promise.then(function(resp) {
            if (!resp.error) {
              $uibMsgbox.success('删除成功！');
              $scope.getArrangerList();
            } else {
              $uibMsgbox.error(resp.message || '删除失败！请重试或联系管理员！')
            }
          }, function(resp) {
            console.error(resp);
            $uibMsgbox.error('请求失败！请联系重试或者管理员！');
          })
        }
      })
    }

    $scope.getArrangerList = function () {
      $scope.searchParams = {
        pageSize: $scope.paginationConf.itemsPerPage,
        currentPage: $scope.paginationConf.currentPage
      }
      erp_arrangerService.query($scope.searchParams).$promise
        .then(function (resp) {
          if (!resp.error) {
            _.forEach(resp.data, function(item) {
              _.forEach(item.courseArrangeSpSubjectList, function(subject) {
                subject.gradeNameList = []
                _.forEach(subject.courseArrangeSpGradeList, function(grade) {
                  subject.gradeNameList.push(grade.gradeName)
                })
              })
            })
            $scope.arrangerList = resp.data;
            $scope.paginationConf.totalItems = resp.total; 
            setTimeout(function(){
              $('[data-toggle="popover"]').popover()
            })
          } else {
            $uibMsgbox.error(resp.message || '请求数据失败，请联系管理员！')
          }
        }, function(resp) {
          console.error(resp)
          $uibMsgbox.error('请求数据失败，请联系管理员！' + resp.message || '')
        })
    }

    activate();
    ////////////////

    function activate() { 
      $scope.getArrangerList();
    }
  }
})();
(function() {
  'use strict';

  angular
    .module('ework-ui')
    .controller('erp_arrangerEditController', erp_arrangerEditController);

  erp_arrangerEditController.$inject = [
    '$scope',
    '$state',
    '$stateParams',
    '$uibModal',
    '$uibMsgbox',
    'erp_arrangerService'
  ];
  
  function erp_arrangerEditController(
    $scope,
    $state,
    $stateParams,
    $uibModal,
    $uibMsgbox,
    erp_arrangerService
  ) {
    var vm = this;
    
    // panel title, default: 排课专员
    $scope.panelTitle = '排课专员';
    
    // arranger detail
    $scope.arranger = {
      id: null,
      employeeId: null,
      employeeName: null,
      buId: null,
      buName: null,
      courseArrangeSpSubjectList: []
    }

    // Go back to arrange list page
    $scope.goBack = function () {
      $state.go('systemDataArranger')
    }

    // Get Arranger Detail
    $scope.getArrangerDetail = function (id) {
      erp_arrangerService.getDetail({
        id: id
      }).$promise.then(function (resp) {
        if (!resp.error) {
          $scope.arranger = resp.data;
        } else {
          $uibMsgbox.error(resp.message + ' 点击确定，返回排课专员列表', 
            function (res) {
              $scope.goBack();
            }
          );
        }
      }, function(resp) {
        $uibMsgbox.error('请求数据失败！请联系管理员！', function(res) {
          $scope.goBack();
        })
      })
    }
    $scope.onRemoveSubject = function (index) {
      $uibMsgbox.confirm('确定删除所选科目?', function (res) {
        if (res == 'yes') {
          $scope.arranger.courseArrangeSpSubjectList.splice(index, 1);
        }
      })
    }

    $scope.onAddSubject = function () {
      openSubjectDetailModal('add', {})
        .then(function (subject) {
          var tag=true;
          $scope.arranger.courseArrangeSpSubjectList.forEach(function(e){
            if(e.subjectId==subject.subjectId){
              tag=false
            }
          });
          if(tag){
            $scope.arranger.courseArrangeSpSubjectList.push(subject)
          }
          else{
            $uibMsgbox.warn('已存在该科目，请勿重复添加');
          }
        }, function () {
        })
    }
    
    $scope.onEditSubject = function (index, subject) {
      openSubjectDetailModal('edit', subject)
        .then(function(item) {
          subject = _.cloneDeep(item)
          $scope.arranger.courseArrangeSpSubjectList.splice(index, 1, subject)
        }, function() {})
    }

    $scope.onSave = function () {
      if (!arrangerValid($scope.arranger)){
        return false
      }
      var saveRes = null;
      if ($stateParams.optype == 'edit') {
        saveRes = erp_arrangerService.put(genSavedArranger($scope.arranger)).$promise;
      } else if ($stateParams.optype == 'add') {
        saveRes = erp_arrangerService.post(genSavedArranger($scope.arranger)).$promise;
      }
      if (saveRes) {
        var waitModal = $uibMsgbox.waiting('保存中，请稍候...');
        saveRes.then(function(resp) {
          waitModal.close();
          if (!resp.error) {
            $uibMsgbox.success('保存成功！', function (res) {
              $scope.goBack();
            })
          } else {
            $uibMsgbox.error(resp.message || '保存失败！请重新保存或者联系管理员！')
          }
        }, function (resp) {
          waitModal.close();
          console.error(resp);
          $uibMsgbox.error('请求失败！请重新保存或者联系管理员！');
        })
      }
    }
    
    $scope.onCancel = function () {
      $uibMsgbox.confirm('排课专员信息还未保存，返回之后将不做任何修改，确定返回？', function(res) {
        if (res == 'yes') {
          $scope.goBack()
        }
      })
    }
    activate();
    
    ////////////////
    function  genSavedArranger (arranger) {
      var data = _.pick(arranger, ['id', 'employeeId', 'employeeName', 'buId'])
      data.courseArrangeSpSubjectList = []
      _.forEach(arranger.courseArrangeSpSubjectList, function(item) {
        var subjectDetail = _.pick(item, ['subjectId', 'subjectName'])
        if (!subjectDetail) {
          return
        }
        subjectDetail.courseArrangeSpGradeList = []
        _.forEach(item.courseArrangeSpGradeList, function (grade) {
          subjectDetail.courseArrangeSpGradeList.push({
            gradeId: grade.gradeId
          })
        })

        data.courseArrangeSpSubjectList.push(subjectDetail)
      })
      return data
    }

    function arrangerValid(arranger) {
      if (!arranger.employeeId) {
        $uibMsgbox.error('请选择关联员工！');
        return false;
      }
      if (!arranger.buId) {
        $uibMsgbox.error('请选择所属团队！');
        return false;
      }
      if (!arranger.courseArrangeSpSubjectList || arranger.courseArrangeSpSubjectList.length == 0) {
        $uibMsgbox.error('请至少选择一个科目！');
        return false;
      }
      return true;
    }

    function openSubjectDetailModal(optype, subjectDetail) {
      return $uibModal.open({
        templateUrl: 'subjectModal.html',
        resolve: {
          optype: function () {
            return optype
          },
          subject: function () {
            return _.cloneDeep(subjectDetail)
          }
        },
        controller: ['$scope', '$uibMsgbox', 'optype', 'subject', 'erp_gradeService', function(
          $scope, $uibMsgbox, optype, subject, erp_gradeService
        ) {
          $scope.subject = subject
          $scope.subject.courseArrangeSpGradeList = $scope.subject.courseArrangeSpGradeList || []
          $scope.gradeList = []
          $scope.gradeSearchInfo = ''

          $scope.getSubjectList = function () {
            erp_gradeService.query({
              pageSize: 999
            }).$promise.then(function(resp) {
              if (!resp.error) {
                var gradeList = []
                _.forEach(resp.data, function(item) {
                  gradeList.push({
                    checked: false,
                    gradeId: item.id,
                    gradeName: item.grade_name,
                    gradeEncodeing: item.encoding
                  })
                })
                handleCheckedGrade(gradeList, $scope.subject.courseArrangeSpGradeList)
                $scope.gradeList = gradeList
              } else {
                console.error(resp)
              }
            }, function (resp) {
              console.error(resp)
            })
          }

          $scope.handleRemoveGrade = function (grade) {
            removeGrade($scope.subject.courseArrangeSpGradeList, grade);
            handleCheckedGrade($scope.gradeList, $scope.subject.courseArrangeSpGradeList);
          }

          $scope.handleGradeChange = function (grade) {
            if (grade.checked) {
              insertGrade($scope.subject.courseArrangeSpGradeList, grade);
            } else {
              removeGrade($scope.subject.courseArrangeSpGradeList, grade);
            }
          }

          $scope.onSave = function () {
            if (!$scope.subject.subjectId) {
              return $uibMsgbox.error('请选择科目！');
            }
            if (!$scope.subject.courseArrangeSpGradeList || $scope.subject.courseArrangeSpGradeList.length == 0) {
              return $uibMsgbox.error('请至少选择一个年级！');
            }
            $scope.$close($scope.subject);
          }
          activate ()

          ////////
          function handleCheckedGrade(gradeList, checkedGradeList) {
            _.forEach(gradeList, function(item) {item.checked = false})

            var intersectionList = _.intersectionBy(gradeList, checkedGradeList, 'gradeId')
            
            _.forEach(intersectionList, function(item) {
              item.checked = true
            })
          }

          function insertGrade (gradeList, grade) {
            if (_.findIndex(gradeList, {gradeId: grade.gradeId}) == -1) {
              gradeList.push(_.cloneDeep(grade))
            }
          }

          function removeGrade (gradeList, grade) {
            var index = _.findIndex(gradeList, {gradeId: grade.gradeId})
            if (index != -1) {
              gradeList.splice(index, 1)
            }
          }

          function activate() {
            $scope.getSubjectList();
          }
        }]

      }).result
    }

    function activate() { 
      // process router params
      if ($stateParams.optype == 'add') {
        $scope.panelTitle = '新增排课专员';
      } else if($stateParams.optype == 'edit' && $stateParams.id) {
        $scope.panelTitle = '编辑排课专员';
        $scope.getArrangerDetail($stateParams.id);
      } else {
        return $scope.goBack()
      }
    }
  }
})();
/**
 * 公司设备
 */
"use strict";
angular.module('ework-ui').controller('erp_companyAccountController', [
    '$rootScope',
    '$scope',
    '$log',
    'erp_companyAccountService',
    erp_companyAccountController
    ]);

function erp_companyAccountController(
    $rootScope,
    $scope,
    $log,
    erp_companyAccountService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索的科目名称
    $scope.searchParam = {
        device_code: '',
        account_num: ''
    };
    // 明细列表
    $scope.companyAccountList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.companyAccountDetail = {
        id: 0,
        account_name: '',
        account_num: '',
        description: '',
        status:1
    };

    $scope.statusList = [
        {key: 1, value: '有效'},
        {key: 2, value: '无效'}
    ];

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function(){
            $scope.query()
        }
    };

    $scope.paginationBars = [];

    // 处理【添加】按钮点击事件
    $scope.handleAddAccount = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        $('#erpSystemDictAccountPanel').modal('show');
    };

    // 处理【删除】按钮点击事件
    $scope.handleDeleteAccount = function (id) {
        var r = window.confirm('确定删除选中公司账户？')
        if (r == true) {
            $scope.delete(id)
        }
    };
    
    // 处理【修改】按钮点击事件
    $scope.handlePutAccount = function (account) {
        $scope.optype = 'put';
        $scope.companyAccountDetail = {
            id: account.ID,
            account_name: account.ACCOUNT_NAME,
            account_num: account.ACCOUNT_NUM,
            description: account.DESCRIPTION,
            status : account.STATUS
        };
        $("#erpSystemDictAccountPanel").modal('show');
    };

    // 处理【查询】按钮点击事件
    $scope.handleQueryAccount = function () {
        $scope.query();
    };

    // 处理【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemDictAccountPanel').modal('hide');
    };

    // 处理【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
        if ($scope.optype == 'add') {
            // 添加的内容
            $scope.add();
        } else if ($scope.optype == 'put') {
            $scope.put();
        }
        $('#erpSystemDictAccountPanel').modal('hide');
    };
    // 状态变化
    $scope.onStatusChange = function (device) {
        erp_deviceService.changeStatus({
            deviceId: device.id,
            status: device.status
        }, function (resp) {
            if (!resp.error) {
                $scope.query();
            } else {
                alert(resp.message)
            }
        })
    }
    // 添加
    $scope.add = function () {
    	erp_companyAccountService.add({
    		 account_name: $scope.companyAccountDetail.account_name,
             account_num: $scope.companyAccountDetail.account_num,
             description: $scope.companyAccountDetail.description,
             status: $scope.companyAccountDetail.status
        }, function (resp) {
            if (!resp.error) {
                window.alert('添加成功！');
                $scope.query();
            } else {
                window.alert(resp.message);
            }
        })
    };

    // 修改
    $scope.put = function () {
    	erp_companyAccountService.update({
            id: $scope.companyAccountDetail.id,
            account_name: $scope.companyAccountDetail.account_name,
            account_num: $scope.companyAccountDetail.account_num,
            description: $scope.companyAccountDetail.description,
            status: $scope.companyAccountDetail.status
        }, function (resp) {
            if (!resp.error) {
                window.alert('修改成功！');
                $scope.query();
            } else {
                window.alert(resp.message);
            }
        })
    };

    // 删除
    $scope.delete = function (id) {
    	erp_companyAccountService.delete({
    		id: id
        }, function (resp) {
            if (!resp.error) {
                window.alert('删除成功！');
                $scope.query();
            } else {
                window.alert(resp.message);
            }
        })
    };

    // 查询
    $scope.query = function () {
    	erp_companyAccountService.query({
            pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            p_account_name: $scope.searchParam.account_name,
            p_account_num: $scope.searchParam.account_num
        }, function (resp) {
            if (!resp.error) {
                $scope.companyAccountList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                alert(resp.message)
            }
        })
    };

    // 重置表单
    $scope.resetForm = function () {
        //$("#erpSystemCommonDevicePanel form")[0].reset()
        $scope.companyAccountDetail = {
            status : 1
        };
    };

    $scope.query();
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_schoolController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    'erp_schoolService',
    erp_schoolController
    ]);

function erp_schoolController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    erp_schoolService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索的学校名称
    $scope.searchParam = {
    	schoolName: ''
    };
    // 学校列表
    $scope.schoolList = [];
    // 学校类型列表
    $scope.schoolTypeList = [];
    // 省份列表
    $scope.regionList = [];
    // 市区列表
    $scope.regionCityList = [];
    // 区域列表
    $scope.regionAreaList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.schoolDetail = {
        id: '',
        school_name: '',
        simple_name: '',
        school_type: '',
        linkman: '',
        phone: '',
        description: '',
        province_id: 0,
        city_id: 0,
        area_id: 0,
        org_id: 0,
        address: ''
    };

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };
    
    // 处理【添加学校】按钮点击事件
    $scope.handleAddSchool = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        $scope.querySelectDatas('');
        $scope.queryRegionProvince('');
        $('#erpSystemDictSchoolPanel').modal('show');
    };

    // 处理【删除学校】按钮点击事件
    $scope.handleDeleteSchool = function (id) {
        var r = window.confirm('确定删除选中学校？');
        if (r == true) {
            $scope.del(id);
        }
    };
    
    // 处理【修改学校】按钮点击事件
    $scope.handlePutSchool = function (school) {
        $scope.optype = 'put';
        $scope.schoolDetail = school;
        console.log('schoolDetail');
        console.log($scope.schoolDetail);
        $scope.querySelectDatas('');
        $scope.queryRegionProvince('');
        if (school.province_id) {
            $scope.queryRegionCity(school.province_id);
        }
        if (school.city_id) {
            $scope.queryRegionArea(school.city_id);
        }
        $("#erpSystemDictSchoolPanel").modal('show');
    };

    // 处理【查询学校】按钮点击事件
    $scope.handleQuerySchool = function () {
        $scope.query();
    };

    // 处理学校表单【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemDictSchoolPanel').modal('hide');
    };

    // 处理学校表单【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
    	if ($scope.optype == 'add') {
    		$scope.add();
    	} else {
    		$scope.put();
    	}
    	$scope.query();
        $('#erpSystemDictSchoolPanel').modal('hide');
    };

    // 查询
    $scope.query = function () {
    	erp_schoolService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            p_school_name: $scope.searchParam.schoolName
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.schoolList=resp.data;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    $scope.converToInt = function (value) {
        return parseInt(value, 10);
    };
    // 添加
    $scope.add = function () {
    	erp_schoolService.addSchool($scope.schoolDetail, function (resp) {
    		if (!resp.error) {
	   			$uibMsgbox.success(resp.message);
	   			$scope.query();
    		} else {
    			$uibMsgbox.error(resp.message);
    		}          
        });
    };

    // 修改
    $scope.put = function () {
    	erp_schoolService.updateSchool($scope.schoolDetail, function (resp) {
    		if (!resp.error) {
	   			$uibMsgbox.success(resp.message);
	   			$scope.query();
    		} else {
    			$uibMsgbox.error(resp.message);
    		}          
        });
    };

    // 删除
    $scope.del= function (id) {
    	erp_schoolService.delSchool({school_ids:id}, function (resp) {
    		if (!resp.error) {
	   			$uibMsgbox.success(resp.message);
	   			$scope.query();
    		} else {
    			$uibMsgbox.error(resp.message);
    		}          
        });
    };

    //查询下拉列表数据，目前主要是学校类型下拉数据
    $scope.querySelectDatas = function (id) {
    	erp_schoolService.querySelectDatas({
    		id : id
    	},function(resp) {
            if(!resp.error) {
                $scope.schoolTypeList = resp.schoolTypeList;
            }
        });
    };
    $scope.onProvinceChange = function (id) {
        id = parseInt(id);
        if (isNaN(id) || id < 1) {
            $scope.regionCityList = [];
            $scope.regionAreaList = [];
        } else {
            $scope.queryRegionCity(id);
        }
    }
    $scope.onCityChange = function (id) {
        id = parseInt(id);
        if (isNaN(id) || id < 1) {
            $scope.regionAreaList = [];
        } else {
            $scope.queryRegionArea(id)
        }
    }
    $scope.queryRegionProvince = function (id) {
        erp_schoolService.queryRegionDatas({
            id : id
        },function(resp) {
            if(!resp.error) {
                $scope.regionList = resp.data;
            } else {
                console.log(resp.message);
                $scope.regionList = resp.data;
            }
        });
    }
    
    $scope.queryRegionCity = function (id) {
        erp_schoolService.queryRegionDatas({
            id: id
        }, function (resp) {
            if (!resp.error) {
                $scope.regionCityList = resp.data;
            } else {
                console.log(resp.message);
                $scope.regionCityList = [];
            }
        })
    }

    $scope.queryRegionArea = function (id) {
        erp_schoolService.queryRegionDatas({
            id: id
        }, function (resp) {
            if (!resp.error) {
                $scope.regionAreaList = resp.data;
            } else {
                console.log(resp.message);
                $scope.regionAreaList = [];
            }
        })
    }

    
    /*
     * 修改状态
     * @param flag true-生效 false-无效
     */
    $scope.changeStatus = function (id, flag) {
    	erp_schoolService.changeStatus({"id" : id, "status" : flag}, function (resp) {
    		if(!resp.error) {
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }
    
    $scope.onStatusChange = function (shcool) {
    	$scope.changeStatus(shcool.id, shcool.status);
    }
    
    // 重置表单
    $scope.resetForm = function () {
        $("#erpSystemDictSchoolPanel form")[0].reset();
    };

    $scope.query();
}

/**
 * 公司设备
 */
"use strict";
angular.module('ework-ui').controller('erp_deviceController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox',
    'erp_deviceService',
    'erp_organizationService',
    erp_deviceController
    ]);

function erp_deviceController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    erp_deviceService,
    erp_organizationService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索的科目名称
    $scope.searchParam = {
        device_code: '',
        account_num: ''
    };
    // 明细列表
    $scope.deviceList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.deviceDetail = {
        id: 0,
        simple_name: '',
        device_code: '',
        account_id: '',
        bu_id:null,
        description: ''
    };

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        // itemsPerPage: 10,
        // pagesLength: 9,
        // perPageOptions: [10, 20, 30, 40, 50],
        onChange: function(){
            $scope.query()
        }
    };

    $scope.paginationBars = [];

    //查询下拉框数据
    erp_deviceService.init({},function(resp) {
        if(!resp.error) {
            //公司账户列表
            $scope.accountList = resp.accountList;
        }
    });

    // 处理【添加】按钮点击事件
    $scope.handleAddDevice = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        $('#erpSystemCommonDevicePanel').modal('show');
    };

    // 处理【删除】按钮点击事件
    $scope.handleDeleteDevice = function (id) {
        $uibMsgbox.confirm('确定删除选中公司设备？', function (result) {
            if(result != 'yes') {
                return;
            }
            $scope.delete(id);
        });
    };
    
    // 处理【修改】按钮点击事件
    $scope.handlePutDevice = function (device) {
        $scope.optype = 'put';
        $scope.deviceDetail = {
            id: device.id,
            simple_name: device.simple_name,
            device_code: device.device_code,
            account_id: device.account_id,
            bu_id:device.bu_id,
            description: device.description
        };
        $("#erpSystemCommonDevicePanel").modal('show');
    };

    // 处理【查询】按钮点击事件
    $scope.handleQueryDevice = function () {
        $scope.query();
    };

    // 处理【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemCommonDevicePanel').modal('hide');
    };

    // 处理【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
        if ($scope.optype == 'add') {
            // 添加的内容
            $scope.add();
        } else if ($scope.optype == 'put') {
            $scope.put();
        }
        $('#erpSystemCommonDevicePanel').modal('hide');
    };
    // 状态变化
    $scope.onStatusChange = function (device) {
        erp_deviceService.changeStatus({
            deviceId: device.id,
            status: device.status
        }, function (resp) {
            if (!resp.error) {
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };
    // 添加
    $scope.add = function () {
        erp_deviceService.add({
            simple_name: $scope.deviceDetail.simple_name,
            device_code: $scope.deviceDetail.device_code,
            account_id: $scope.deviceDetail.account_id,
            bu_id:$scope.deviceDetail.bu_id,
            description: $scope.deviceDetail.description
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('添加成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 修改
    $scope.put = function () {
        erp_deviceService.update({
            id: $scope.deviceDetail.id,
            simple_name: $scope.deviceDetail.simple_name,
            device_code: $scope.deviceDetail.device_code,
            account_id: $scope.deviceDetail.account_id,
            bu_id:$scope.deviceDetail.bu_id,
            description: $scope.deviceDetail.description
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('修改成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 删除
    $scope.delete = function (id) {
        erp_deviceService.delete({
            deviceId: id
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('删除成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 查询
    $scope.query = function () {
        erp_deviceService.query({
            pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            device_code: $scope.searchParam.device_code,
            account_num: $scope.searchParam.account_num
        }, function (resp) {
            if (!resp.error) {
                $scope.deviceList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    };

    // 重置表单
    $scope.resetForm = function () {
        //$("#erpSystemCommonDevicePanel form")[0].reset()
        $scope.deviceDetail = {};
    };

    $scope.initialize = function() {
        $scope.query();
        erp_organizationService.teamList({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
                $scope.buList.unshift({id:null,org_name:'通用'})
            }
        });
    }

    $scope.initialize();
}

/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_invoiceCompanyController', [
        '$scope',
        '$log',
        '$uibMsgbox',
        'erp_invoiceCompanyService',
        erp_invoiceCompanyController]);

function erp_invoiceCompanyController(
    $scope,
    $log,
    $uibMsgbox,
    erp_invoiceCompanyService
    ) {
	// 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    
    // 搜索的开票单位名称
    $scope.searchParam = {
    	company_name: ''
    };

	$scope.invoiceCompanyList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.invoiceCompany = {
    		"id" : '',
    		"company_name" : '',
    		"description" : ''
    }
    
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，默认]
     * @param  {Function} perPageOptions [description]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function() {
            $scope.query();
        }
    }

    $scope.paginationBars = [];

    // 处理【添加开票单位】按钮点击事件
    $scope.handleAddInvoiceCompany = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        $('#erpSystemCommonInvoiceCompanyPanel').modal('show');
    }
    
    // 处理【修改开票单位】按钮点击事件
    $scope.handlePutInvoiceCompany = function (invoiceCompany) {
        $scope.optype = 'put';
        $scope.invoiceCompany = invoiceCompany;
        $("#erpSystemCommonInvoiceCompanyPanel").modal('show');
    }
    
    // 处理【删除开票单位】按钮点击事件
    $scope.handleDeleteInvoiceCompany = function (id) {
        if (window.confirm('确定删除选中开票公司？')) {
            $scope.changeStatus(id, "delete");
        }
    }

    // 处理【查询课程季】按钮点击事件
    $scope.handleQueryInvoiceCompany = function () {
        $scope.query();
    }

    // 处理课程季表单【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemCommonInvoiceCompanyPanel').modal('hide');
    }

    // 处理开票单位表单【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
    	if ($scope.optype == 'add') {
    		$scope.add();
    	} else {
    		$scope.put();
    	}
    }
    $scope.onStatusChange = function (invoiceCompany) {
    	var flag = (invoiceCompany.status == '1') ? 'valid' : 'invalid';
    	$scope.changeStatus(invoiceCompany.id, flag);
    }
    // 查询开票单位
    $scope.query = function () {
    	erp_invoiceCompanyService.query({
    		pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            p_company_name: $scope.searchParam.company_name,
        },
        function(resp){
            if(!resp.error) {
           	 	$scope.invoiceCompanyList = resp.data;
           	 	$scope.paginationConf.totalItems = resp.total || 180;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    }

    // 添加开票单位
    $scope.add = function () {
    	erp_invoiceCompanyService.post($scope.invoiceCompany, function (resp) {
    		if (!resp.error) {
    			$uibMsgbox.success("添加成功");
    			$('#erpSystemCommonInvoiceCompanyPanel').modal('hide');
    			$scope.query();
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }

    // 修改开票单位
    $scope.put = function () {
    	erp_invoiceCompanyService.put($scope.invoiceCompany, function (resp) {
    		if (!resp.error) {
    			$uibMsgbox.success("修改成功");
    			$('#erpSystemCommonInvoiceCompanyPanel').modal('hide');
    			$scope.query();
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }

    /*
     * 修改开票公司状态
     * @param flag true-生效 false-无效
     */
    $scope.changeStatus = function (id, flag) {
    	erp_invoiceCompanyService.changeStatus({"id" : id, "flag" : flag}, function (resp) {
    		if(!resp.error) {
    			if (flag == 'delete') {
    				$uibMsgbox.success("删除成功");
        			$scope.query();
    			} else {
    				$uibMsgbox.success("状态修改成功");
    			}    			
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }

    // 重置开票单位表单
    $scope.resetForm = function () {
        $("#erpSystemCommonInvoiceCompanyPanel form")[0].reset();
    }
    
    $scope.query();
}
/**
 * Created by Liyong.zhu on 2016/11/25.
 */
/**
 * Created by Liyong.zhu on 2016/10/27.
 */

"use strict";
angular
    .module('ework-ui')
    .controller('erp_todoTaskListController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_workflowUserTaskService',
        erp_todoTaskListController]);

function erp_todoTaskListController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_workflowUserTaskService) {
    $scope.todoTaskList = {};
    $scope.today = Format('yyyy-MM-dd',new Date());

    function queryTodoTaskList(){
        var param = {};
        erp_workflowUserTaskService.query(param,function(resp){
            if(!resp.error){
                $scope.todoTaskList = resp.data;
                if($scope.todoTaskList.resultList){
                    $.each($scope.todoTaskList.resultList,function(i,model){
                        if(model.createTime){
                            var dt = new Date();
                            dt.setTime(model.createTime);
                            model.createTimeStr = Format('yyyy-MM-dd hh:mm:ss',dt);
                            model.createDate = Format('yyyy-MM-dd',dt);
                        }

                        if(model.extData&&model.extData.businessDetailInfo){
                            model.extData.businessDetails = model.extData.businessDetailInfo.split("$$$$");
                        }
                    });
                }
            }
        })
    }

    queryTodoTaskList();
}
"use strict"
angular.module('ework-ui')
  .controller('erp_courseModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox',
    'saveCourse',
    'erp_courseService',
    erp_courseModalController
  ])

function erp_courseModalController(
  $rootScope,
  $scope,
  $uibModalInstance,
  $uibMsgbox,
  saveCourse,
  erp_courseService
) {

  $scope.isMtCourse = $scope.courseDetail.lecturer_id && ($scope.courseDetail.more_teacher_course_type == '4');
  $scope.isMainMtCourse = $scope.isMtCourse && ($scope.courseDetail.teacher_id == $scope.courseDetail.lecturer_id);

  $scope.handleModalCancel = function() {
    $uibModalInstance.dismiss('cancel')
  }

$scope.setCourseTeacher = function (teacher) {
    $scope.courseDetail.assteacher_name = teacher.teacher_name;
    $scope.courseDetail.assteacher_id = teacher.id;
  };

    // 移除辅导老师-培英
   $scope.removeAssTeacher = function () {
       $scope.courseDetail.assteacher_name = null;
       $scope.courseDetail.assteacher_id = null;
   };

    //教材选择是后选择自动添加计划人数999999
    $scope.changepeoplecount=function(){
         if($scope.courseDetail.is_textbooks==1) {
             $scope.courseDetail.people_count = 999999;
    }else if($scope.courseDetail.is_textbooks==0){
             $scope.courseDetail.people_count = $scope.courseDetail.people_count;
         }
    };

     $scope.queryEndDate=function(){
         if($scope.courseDetail.start_date&&$scope.courseDetail.attend_class_period
          &&$scope.courseDetail.course_count) {
            erp_courseService.queryEndTimesByPeriod({
              start_date : $scope.courseDetail.start_date,
              attend_class_period:$scope.courseDetail.attend_class_period,
              course_count:$scope.courseDetail.course_count
            }, function (resp) {
                if (!resp.error) {
                    $scope.courseDetail.end_date=moment(resp.end_date).format('YYYY-MM-DD');
                }else{
                    $uibMsgbox.error(resp.message);
                }
            });
         }
    };

    $scope.queryHourLen=function(){
        if($scope.courseDetail.start_time && $scope.courseDetail.end_time){
            erp_courseService.queryHourLen({
                start_time: $scope.courseDetail.start_time,
                end_time: $scope.courseDetail.end_time
            },function(resp){
                if (!resp.error) {
                    $scope.courseDetail.hour_len=resp.hour_len;
                }else{
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    };

  $scope.handleModalConfirm = function() {
      if(!$scope.courseDetail.attend_class_period) {
          $uibMsgbox.error("上课周期必填！");
          return;
      }
      else if(!$scope.courseDetail.people_count){
          $uibMsgbox.error("计划人数必填！");
          return;
      }
      else if($scope.courseDetail.hour_len<0){
          $uibMsgbox.error("课时长度必须大于0！");
          return;
      }
      else if($scope.courseDetail.unit_price < 0){
          $uibMsgbox.error("课程单价不允许为负数");
          return;
      }
      else {
          var rule =/^([1-7](~\d{2}:\d{2}-\d{2}:\d{2})?,)*([1-7](~\d{2}:\d{2}-\d{2}:\d{2})?)$/;
          var re = new RegExp(rule);
          if (!re.test($scope.courseDetail.attend_class_period)) {
              $uibMsgbox.error("上课周期格式错误！<br>例1：周一、周三，请输入： 1,3; <br>例2：周一 08:00-12:00、周三，请输入：1~08:00-12:00,3");
              return;
          }
      }
    var _watingModal = $uibMsgbox.waiting('保存中，请稍候...')
    saveCourse($scope.courseDetail).$promise.then(function(resp) {
      _watingModal.close();
      if (!resp.error) {
        $uibModalInstance.close($scope.courseDetail)
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_courseController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    '$state',
    '$uibModal',
    'erp_courseService',
    'erp_subjectService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'erp_TeacherSearchService',
    'erp_timeSeasonService',
    'PUBORGSelectedService',
    'erp_teacherService',
    erp_courseController
    ]);

function erp_courseController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $state,
    $uibModal,
    erp_courseService,
    erp_subjectService,
    erp_gradeService,
    erp_studentBuOrgsService,
    erp_TeacherSearchService,
    erp_timeSeasonService,
    PUBORGSelectedService,
    erp_teacherService
  ) {
    $scope.checkAllFlag = false;
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索课程名称
    $scope.searchParam = {
        course_Name: '',
        branch_id:-1
    };
    $scope.queryParam = {
        };
    
    //状态列表
    $scope.statusList =  [{"id" : 1, "name" : "启用"},
                   		   {"id" : 2, "name" :"停用"}];
    
    // 课程列表
    $scope.courseList = [];

    $scope.selectedCourseList = []

    // 与表单绑定的数据，用于添加和修改
    $scope.courseDetail = {
        id: '',
        course_name: '',
        encoding: '',
        last_id: '',
        last_encoding: '',
        last_name: '',
        sort: '',
        description: '',
        is_cramclass:0,
        is_textbooks:0
    };
    
    // 是否教材
	$scope.is_textbooksList = [{"id" : 1, "value" : "是"},{"id" : 0, "value" : "否"}];
	 // 是否补课
	$scope.is_cramclassList = [{"id" : 1, "value" : "是"}, {"id" : 0, "value" : "否"}];


    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };
    
    function getSelectedCourseList () {
        var courseList = [];
        _.forEach($scope.courseList ,function(course) {
            if (course.selectFlag) {
                courseList.push(course)
            }
        })
        return courseList;
    }
    
    //获取所有选中的id
    function getSelectedIds () {
        var ids = "";
        _.forEach($scope.courseList ,function(course) {
            if (course.selectFlag) {
            	ids+= "," + course.id;
            }
        })
        if (!ids) {
            $uibMsgbox.alert('请选择要操作的课程！');
        }
        return ids.substring(1);
    }

    // 全选事件
    $scope.onCheckAll = function () {
        _.forEach($scope.courseList ,function(course) {
            course.selectFlag = $scope.checkAllFlag;
        })
    }

    // 某一行Checkbox选择事件
    $scope.onCourseChecked = function (course) {
        $scope.checkAllFlag = _.every($scope.courseList, {selectFlag: true});
    }

    $scope.handleImportClass = function () {
        // 跳转到班级课导入页面
        $state.go('ordersMgrCourseInput', {
            path: '/orders/ordersMgr/ordersMgrCourseInput',
            href: 'templates/erp/course/fileUpload_bjk.html'
        })
    }
    
    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
            grade_id:$scope.searchParam.grade_id?$scope.searchParam.selectedCourse.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                    $scope.modalBranchList = _.cloneDeep(resp.data);
                    //将全部option添加到branchList
                    $scope.branchList.unshift(
                        {
                            id : -1,
                            org_name:"-- 全部 --"
                        }
                    );
                }
                //查询选中的组织，并为校区设置默认值
                querySelectedOrg();
            }
        })
    }

    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && ($scope.selectedOrg.type == "4" || $scope.selectedOrg.type == "3" )) {
                    if($scope.selectedOrg.type == "4") {
                        $.each($scope.branchList, function (i, b) {
                            if (b.id == $scope.selectedOrg.id) {
                                $scope.searchParam.branch_id = b.id;
                            }
                        });
                    }
                } else {
                    $uibMsgbox.warn("请选择团队或校区");
                }
                //界面初始化查询
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 选择课程
     * @param grade
     */
    $scope.selectCourse = function(grade){
        $scope.queryParam.selectedCourse = grade;
        querySubject();
    }

    /**
     * 选择科目
     * @param subject
     */
    $scope.selectSubject = function(subject){
        $scope.queryParam.selectedSubject = subject;
    }

    // 处理【添加课程】按钮点击事件
    $scope.handleAddCourse = function () {
        $scope.optype = 'add';
        $scope.resetForm();
//        $('#erpCoursePanel').modal('show');
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-course.modal.html',
            controller: 'erp_courseModalController',
            scope: $scope,
            resolve: {
                saveCourse: function () {
                    return $scope.add;
                }
            }
        }).result.then(function (detail) {
        		// $scope.add();
            $scope.query(); 
        }, function () { });
    };

    // 处理【查询排课】按钮点击事件
    $scope.queryCourseScheduing = function (id) {
    	window.location.href="?courseId="+id+"#/orders/classesScheduleCourse";
    };

    $scope.performanceBelongList = [
        {
            value:'代办校区',
            id:1
        },{
            value:'课程校区',
            id:2
        },
    ];

    // 处理【修改课程】按钮点击事件
    $scope.handlePutCourse = function (course) {
        $scope.optype = 'put';
        angular.copy(course,$scope.courseDetail);
    	$scope.courseDetail.is_cramclass=0;
        if($scope.courseDetail.more_teacher_courseid!=null){
        	$scope.courseDetail.is_cramclass=1;
        }
//        $("#erpCoursePanel").modal('show');
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-course.modal.html',
            controller: 'erp_courseModalController',
            scope: $scope,
            resolve: {
                saveCourse: function () {
                    return $scope.put
                }
            }
        }).result.then(function (detail) {
        		// $scope.put();
                $scope.query();
        }, function () { });
    };

    // 处理【查询课程】按钮点击事件
    $scope.handleQueryCourse = function () {
        $scope.query();
    };
    // 处理【上架课程】按钮点击事件
    $scope.handleUpCourse = function (status) {
    	var ids = getSelectedIds();
   	    $scope.changeStatus(ids,status);
        $scope.query();
    };
    // 处理【下架课程】按钮点击事件
    $scope.handleDownCourse = function (status) {
    	var ids = getSelectedIds();
    	$scope.changeStatus(ids,status);
    	 $scope.query();
    };
    // 处理【自动排课】按钮点击事件
    $scope.handleAutoSchedule = function () {
    	var ids = getSelectedIds();
    	$scope.toAutoCourseScheduling(ids);
    };

    // 处理课程表单【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpCoursePanel').modal('hide');
    };

    // 添加
    $scope.add = function (courseDetail) {
        $scope.courseDetail.business_type = 1; //班级课
    	return erp_courseService.add(courseDetail || $scope.courseDetail, function (resp) {
    		return resp;
        });
    };

    // 修改
    $scope.put = function () {
    	return erp_courseService.update($scope.courseDetail, function (resp) {
    		return resp
        });
    };

    // 查询方法
    $scope.query = function () {
    	erp_courseService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            business_type:1,
        	branch_id:$scope.searchParam.branch_id,
        	season_id:$scope.searchParam.timeSeason_id,
			status:$scope.searchParam.status,
			course_name:$scope.searchParam.course_name,
			teacher_id:$scope.searchParam.teacher_id,
			assteacher_id:$scope.searchParam.assteacher_id,
			subject_id:$scope.searchParam.subject_id,
			grade_id:$scope.searchParam.grade_id
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.courseList=resp.data;
                $scope.onCourseChecked();
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    // 自动排课
    $scope.toAutoCourseScheduling = function (id) {
        if (id) {
        	erp_courseService.toAutoCourseScheduling({"ids" : id
            }, function (resp) {
                if (!resp.error) {
                	$uibMsgbox.success("排课成功！");
                } else {
                	$uibMsgbox.error(resp.message);
                }
            });
        }
    };

    $scope.querySelectDatas = function (id) {
    	erp_courseService.querySelectDatas({
    		id : id
    	},function(resp) {
            if(!resp.error) {
                $scope.lastCourseList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    
    /*
     * 修改状态
     * @param flag true-生效 false-无效
     */
    $scope.changeStatus = function (id, flag) {
        if (id) {
            erp_courseService.changeStatus({"ids" : id, "status" : flag.toString()}, function (resp) {
                if(!resp.error) {
                    $uibMsgbox.alert("操作成功!");
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    }
    
    $scope.onStatusChange = function (course) {
    	$scope.changeStatus(course.id, course.status);
    }
    
    
    // 重置表单
    $scope.resetForm = function () {
    	$scope.courseDetail = {
	    };
    };
    
    function queryTeacher(){
        var param = {};
        if($scope.queryParam.search_info){
            param.search_info = $scope.queryParam.search_info;
        }
        $scope.isLoadingTeacherList = 'isLoadingTeacherList';
        $scope.queryParam.teacherList = [];
        erp_teacherService.page(param,function(resp){
            $scope.isLoadingTeacherList = '';
            if(!resp.error){
                $scope.queryParam.teacherList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    }
    
    $scope.changeSearchInfo = function(){
        queryTeacher();
    }
    
    $scope.selectCourseTeacher = function(teacher){
        $scope.courseDetail.teacher_id = teacher.id;
        $scope.courseDetail.teacher_code = teacher.encoding;
        $scope.courseDetail.teacher_name = teacher.teacher_name;
    }
    $scope.handleExportExcel = function() {
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        erp_courseService.exportExcel({
            business_type:1,
            branch_id:$scope.searchParam.branch_id,
            season_id:$scope.searchParam.timeSeason_id,
            status:$scope.searchParam.status,
            course_name:$scope.searchParam.course_name,
            teacher_id:$scope.searchParam.teacher_id,
            assteacher_id:$scope.searchParam.assteacher_id,
            subject_id:$scope.searchParam.subject_id,
            grade_id:$scope.searchParam.grade_id
        }, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载excel
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }
    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();
    queryTeacher();
}

"use strict";
angular.module('ework-ui').controller('erp_courseListeningController', [
    '$scope',
    '$log',
    '$uibModal',
    '$uibMsgbox',
    'erp_courseListeningService',
    erp_courseListeningController
]);

function erp_courseListeningController($scope,
                                       $log,
                                       $uibModal,
                                       $uibMsgbox,
                                       erp_courseListeningService) {
    // 搜索字段
    $scope.searchParam = {
        start_date: getCurrentDate(),
        end_date: getCurrentDate()
    };
    // 列表
    $scope.dataList = undefined;

    // 团队、校区查询条件改变
    $scope.onBranchChange = function () {
        $scope.quietQuery();
    };

    // 起止日期改变
    $scope.onDateChange = function () {
        $scope.quietQuery();
    };

    // 安静的查询，只有条件满足时才触发查询
    $scope.quietQuery = function () {
        if (!$scope.searchParam.bu_id || $scope.searchParam.bu_id == -1) {
            return;
        }
        if (!$scope.searchParam.start_date) {
            return;
        }
        if (!$scope.searchParam.end_date) {
            return;
        }
        if (!checkStartEndTime($scope.searchParam.start_date, $scope.searchParam.end_date)) {
            return;
        }

        $scope.query();
    };

    $scope.beforeQuery = function () {
        if (!$scope.searchParam.bu_id || $scope.searchParam.bu_id == -1) {
            $uibMsgbox.error("请选择团队");
            return false;
        }
        if (!$scope.searchParam.start_date) {
            $uibMsgbox.error("请选择开始日期");
            return false;
        }
        if (!$scope.searchParam.end_date) {
            $uibMsgbox.error("请选择截止日期");
            return false;
        }
        if (!checkStartEndTime($scope.searchParam.start_date, $scope.searchParam.end_date)) {
            $uibMsgbox.alert('截止日期必须大于或等于开始日期');
            return false;
        }
        return true;
    };

    // 查询
    $scope.query = function () {
        if ($scope.beforeQuery()) {
            erp_courseListeningService.queryList({
                p_bu_id: $scope.searchParam.bu_id,
                p_branch_id: $scope.searchParam.branch_id,
                p_start_date: $scope.searchParam.start_date,
                p_end_date: $scope.searchParam.end_date
            }, function (resp) {
                if (!resp.error) {
                    $scope.dataList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    };

    // 导出数据
    $scope.exportExcel = function () {
        if ($scope.beforeQuery()) {
            erp_courseListeningService.exportExcel({
                p_bu_id: $scope.searchParam.bu_id,
                p_branch_id: $scope.searchParam.branch_id,
                p_start_date: $scope.searchParam.start_date,
                p_end_date: $scope.searchParam.end_date
            }, function (resp) {
                if (!resp.error) {
                    window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    };

    $scope.initialize = function () {
        if (!$scope.dataList) {
            $scope.quietQuery();
        }
    };

    $scope.initialize();
}

/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_courseSchdulingController', [
        '$scope',
        '$log',
        'erp_subjectService',
        'erp_gradeService',
        'erp_courseService',
        'erp_studentBuOrgsService',
        'erp_timeSeasonService',
        'PUBORGSelectedService',
        erp_courseSchdulingController]);

function erp_courseSchdulingController(
    $scope,
    $log,
    erp_subjectService,
    erp_gradeService,
    erp_courseService,
    erp_studentBuOrgsService,
    erp_timeSeasonService,
    PUBORGSelectedService) {
    $scope.isShowSenior = false;
    $scope.businessType = 1;
    $scope.queryParam  = {
        page:1
    };
    $scope.showSenior = function(){
        if($scope.isShowSenior){
            $scope.isShowSenior = false;
        }else{
            $scope.isShowSenior = true;
        }
    }


    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.queryParam.selectedBranch?$scope.queryParam.selectedBranch.id:-1,
            season_id:$scope.queryParam.selectedTimeSeason?$scope.queryParam.selectedTimeSeason.id:-1,
            grade_id:$scope.queryParam.selectedGrade?$scope.queryParam.selectedGrade.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.queryParam.selectedBranch?$scope.queryParam.selectedBranch.id:-1,
            season_id:$scope.queryParam.selectedTimeSeason?$scope.queryParam.selectedTimeSeason.id:-1
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
                if($scope.student && $scope.student.grade_id){
                    $.each($scope.gradeList,function(i,grade){
                        if(grade.id == $scope.student.grade_id){
                            $scope.queryParam.selectedGrade = grade;
                        }
                    })
                }
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBuOrgs(){
        erp_studentBuOrgsService.query({},function(resp){
            if(!resp.error){
                $scope.branchList = resp.data;
                querySelectedOrg();
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }
        })
    }

    /**
     * 选择年级
     * @param grade
     */
    $scope.selectGrade = function(grade){
        $scope.queryParam.selectedGrade = grade;
        querySubject();
        $scope.querySelectingCourse();
    }

    /**
     * 选择科目
     * @param subject
     */
    $scope.selectSubject = function(subject){
        $scope.queryParam.selectedSubject = subject;
        $scope.querySelectingCourse();
    }

    /**
     * 查询课程
     */
    $scope.querySelectingCourse = function(){
        var param = {
            branch_id:$scope.queryParam.selectedBranch?$scope.queryParam.selectedBranch.id:-1,
            season_id:$scope.queryParam.selectedTimeSeason?$scope.queryParam.selectedTimeSeason.id:-1,
            grade_id:$scope.queryParam.selectedGrade?$scope.queryParam.selectedGrade.id:-1,
            subject_id:$scope.queryParam.selectedSubject?$scope.queryParam.selectedSubject.id:-1,
            business_type:$scope.businessType,
            search_info:$scope.queryParam.courseSearchInfo
        };
        param.currentPage = $scope.queryParam.currentPage;
        param.status = -1;
        param.pageSize = $scope.queryParam.pageSize;

        $scope.toSelectingCourseList = [];
        if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
        }else{
            alert("请选择校区!");
            return;
        }
        $scope.isQuerySelectingCourse = 'isQuerySelectingCourse';
        erp_courseService.query(param,function(resp){
            $scope.isQuerySelectingCourse = '';
            if(!resp.error){
                $scope.toSelectingCourseList = resp.data;
                $scope.queryParam.total          = resp.total;
                $scope.queryParam.totalPage     = resp.totalPage;
                $scope.queryParam.pageSize      = resp.pageSize;
                $scope.queryParam.currentPage  = resp.currentPage;
                $scope.queryParam.paginationBars = [];
                for(var index = ($scope.queryParam.page-1) * 10  ;index < $scope.queryParam.totalPage && index < $scope.queryParam.page * 10;index++){
                    $scope.queryParam.paginationBars.push(index);
                }
            }else{
                alert(resp.message);
            }
        })
    }

    /**
     * 分页查询
     * @param currentPage
     */
    $scope.pageQuery = function(currentPage){
        $scope.queryParam.currentPage  = currentPage;

        $scope.querySelectingCourse();
    }
    $scope.firstPage = function(){
        $scope.queryParam.page = 1;
        $scope.queryParam.currentPage  = 1;
        $scope.querySelectingCourse();
    }
    $scope.endPage = function(){

        $scope.queryParam.currentPage  = $scope.queryParam.totalPage;
        $scope.queryParam.page = Math.floor($scope.queryParam.totalPage / 10) + 1;
        $log.log("endPage,page is "+$scope.queryParam.page+",currentPage is "+$scope.queryParam.currentPage);
        $scope.querySelectingCourse();
    }
    $scope.nextPage = function(page){
        $scope.queryParam.page = page;
        $scope.queryParam.currentPage  = (page-1) * 10 + 1;
        $scope.querySelectingCourse();
    }

    function querySelectedOrg(){
        PUBORGSelectedService.query({},function(resp){
            if(!resp.error){
                $scope.selectedOrg = resp.data;
                if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
                    $.each($scope.branchList,function(i,b){
                        if(b.id == $scope.selectedOrg.id){
                            $scope.queryParam.selectedBranch = b;
                        }
                    });
                    $scope.querySelectingCourse();
                }else{
                    alert("请选择校区!");
                }
            }else{
                alert(resp.message);
            }
        })
    }



    $scope.changeStatus = function(status,course){
        var param = {};
        param.ids =course.id;
        param.status = status;
        $scope.isSubmit = 'isSubmit';
        erp_courseService.changeStatus(param,function(resp){
            $scope.isSubmit = '';
            if(!resp.error){
                alert("保存成功！");
                $scope.querySelectingCourse();
            } else{
                alert(resp.message);
            }
        });
    }


    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();
}
/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_courseSchduleChangeController', [
        '$scope',
        '$log',
        '$state',
        '$uibMsgbox',
        'erp_courseService',
        'erp_courseTimesService',
        'erp_teacherService',
        'EmployeeManageService',
        erp_courseSchduleChangeController]);

function erp_courseSchduleChangeController(
    $scope,
    $log,
    $state,
    $uibMsgbox,
    erp_courseService,
    erp_courseTimesService,
    erp_teacherService,
    EmployeeManageService) {
    $scope.businessType = 1;
    $scope.queryParam  = {
        page:1
    };
    $scope.class_period_list = [
        { id : 1,name:'周一'},
        { id : 2,name:'周二'},
        { id : 3,name:'周三'},
        { id : 4,name:'周四'},
        { id : 5,name:'周五'},
        { id : 6,name:'周六'},
        { id : 7,name:'周日'}
    ];
    $scope.user_type_list = [
        { id : 1,name:'全部课次'}
    ];

    $scope.paramSettingsList = [
        {   id:null,
            courseId:null,
            courseName : '学管师',
            courseVal:'',
            courseKey:'course_manager',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'',
            extandVal4:'',
            remark:''
        },{
            id:null,
            courseId:null,
            courseName : '中文老师',
            courseVal:'',
            courseKey:'course_tearcher_cn',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'课时长度',
            extandVal4:'',
            remark:''
        },{
            id:null,
            courseId:null,
            courseName : '外文老师',
            courseVal:'',
            courseKey:'course_tearcher_en',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'课时长度',
            extandVal4:'',
            remark:''
        }
    ];

    $scope.course_id = $("#rootIndex_courseId").val();


    /**
     * 查询课程
     */
    $scope.querySelectingCourse = function(){
        var param = {
            branch_id:$scope.queryParam.selectedBranch?$scope.queryParam.selectedBranch.id:-1,
            season_id:$scope.queryParam.selectedTimeSeason?$scope.queryParam.selectedTimeSeason.id:-1,
            grade_id:$scope.queryParam.selectedGrade?$scope.queryParam.selectedGrade.id:-1,
            subject_id:$scope.queryParam.selectedSubject?$scope.queryParam.selectedSubject.id:-1,
            business_type:$scope.businessType,
            search_info:$scope.queryParam.courseSearchInfo
        };
        param.currentPage = $scope.queryParam.currentPage;
        param.status = -1;
        param.pageSize = $scope.queryParam.pageSize;

        $scope.toSelectingCourseList = [];
        if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
        }else{
            $uibMsgbox.alert("请选择校区!");
            return;
        }
        $scope.isQuerySelectingCourse = 'isQuerySelectingCourse';
        erp_courseService.query(param,function(resp){
            $scope.isQuerySelectingCourse = '';
            if(!resp.error){
                $scope.toSelectingCourseList = resp.data;
                $scope.queryParam.total          = resp.total;
                $scope.queryParam.totalPage     = resp.totalPage;
                $scope.queryParam.pageSize      = resp.pageSize;
                $scope.queryParam.currentPage  = resp.currentPage;
                $scope.queryParam.paginationBars = [];
                for(var index = ($scope.queryParam.page-1) * 10  ;index < $scope.queryParam.totalPage && index < $scope.queryParam.page * 10;index++){
                    $scope.queryParam.paginationBars.push(index);
                }
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 修改排课信息
     */
    $scope.updateCourseSchdule = function(){
        $scope.course.start_date = $("#start_date").val();
        $scope.course.end_date = $("#end_date").val();
        $scope.course.start_time = $("#start_time").val();
        $scope.course.end_time = $("#end_time").val();
        var param = {};

        param = $scope.course;
        param.updateType = 'updateType';
        var modalInstance = $uibMsgbox.waiting("数据提交中，请稍候...");
        erp_courseService.update(param,function(resp){
            modalInstance.close();
            if(!resp.error){
                $uibMsgbox.alert("修改成功！");
                $state.reload();
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    function queryCourse(){
        var param = {};
        param.course_id = $scope.course_id;
        param.business_type = 1 ;
        param.status = -1;
        $scope.isLoadingCourse = 'isLoadingCourse';
        erp_courseService.query(param,function(resp){
           if(!resp.error ){
               if(resp.data.length){
                   $scope.course = resp.data[0];
                   $scope.isLoadingCourse = '';
                   queryCourseTimes();
                   initialPeriodList();

                   $scope.isMtCourse = $scope.course.more_teacher_courseid && $scope.course.more_teacher_course_type == 4;
                   $scope.isMainMtCourse = $scope.course.teacher_id == $scope.course.lecturer_id;
               }else{
                   $scope.isLoadingCourse = 'courseLoadingFailed';
                   $scope.courseLoadingFailed = "没有查询到课程!";
               }
           } else{
               $scope.isLoadingCourse = 'courseLoadingFailed';
               $scope.courseLoadingFailed = resp.message;
           }
        });
    }

    function initialPeriodList(){
        if($scope.course&&$scope.course.attend_class_period){
            $.each($scope.class_period_list,function(i,p){
                p.checked = undefined;
            });
            var periodList = $scope.course.attend_class_period.split(",");
            if(periodList.length){
                $.each(periodList,function(i,p){
                    var id = parseInt(p);
                    $.each($scope.class_period_list,function(j,pRecord){
                        if(pRecord.id == id){
                            pRecord.checked = true;
                        }
                    });
                });
            }
        }
    }

    function queryCourseTimes(){
        var param = {};
        param.courseId = $scope.course_id;
        $scope.isQueryCourseTimes = 'isQueryCourseTimes';
        erp_courseTimesService.query(param,function(resp){
            $scope.isQueryCourseTimes = '';
            if(!resp.error){
                $scope.courseTimesList = resp.data;
            } else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    function queryTeacher(){
        var param = {};
        if($scope.queryParam.search_info){
            param.search_info = $scope.queryParam.search_info;
        }
        $scope.isLoadingTeacherList = 'isLoadingTeacherList';
        $scope.queryParam.teacherList = [];
        erp_teacherService.page(param,function(resp){
            $scope.isLoadingTeacherList = '';
            if(!resp.error){
                $scope.queryParam.teacherList = resp.data;
            }else{
                $uibMsgbox.error(resp.data);
            }
        });
    }

    $scope.changeSearchInfo = function(){
        queryTeacher();
    }

    $scope.changeHighParamSearchInfo = function(paramSetting){
        if(paramSetting.courseKey == 'course_manager') {
            queryEmployeeInfo();
        } else {
            queryHighParamTeacher();
        }
    }
    function queryHighParamTeacher(){
        var param = {};
        if($scope.queryParam.search_info){
            param.search_info = $scope.queryParam.search_info;
        }
        $scope.isLoadingDataList = 'isLoadingDataList';
        $scope.queryParam.dataList = [];
        erp_teacherService.page(param,function(resp){
            $scope.isLoadingDataList = '';
            if(!resp.error){
                $scope.queryParam.dataList = $.map(resp.data,function(n,i){
                    n.name = n.teacher_name;
                    return n;
                });
            }else{
                alert(resp.data);
            }
        });
    }

    function queryEmployeeInfo(){
        var param = {};
        if($scope.queryParam.search_info){
            param.searchInfo = $scope.queryParam.search_info;
        }
        $scope.isLoadingDataList = 'isLoadingDataList';
        $scope.queryParam.dataList = [];
        EmployeeManageService.queryEmployeeInfo(param,function(resp){
            $scope.isLoadingDataList = '';
            if(!resp.error){
                $scope.queryParam.dataList = $.map(resp.data,function(n,i){
                    n.name = n.EMPLOYEE_NAME;
                    n.encoding = n.ENCODING;
                    n.id = n.ID;
                    return n;
                });
            }else{
                alert(resp.data);
            }
        });
    }

    $scope.selectCourseTeacher = function(teacher){
        $scope.course.teacher_id = teacher.id;
        $scope.course.teacher_code = teacher.encoding;
        $scope.course.teacher_name = teacher.teacher_name;
        $uibMsgbox.alert("选择成功！");
    }

    $scope.selectCourseTimeTeacher = function(courseTime,teacher){
        courseTime.teacher_id = teacher.id;
        courseTime.teacher_code = teacher.encoding;
        courseTime.teacher_name = teacher.teacher_name;
        $uibMsgbox.alert("选择成功！");
    }

    $scope.selectParam = function(paramSetting,data){
        paramSetting.courseVal = data.id + '';
        paramSetting.courseValName = data.name;
    }

    $scope.checkPeriod = function(period){
        if(period.checked){
            period.checked = false;
        }else{
            period.checked = true;
        }
        var periodList = [];
        $.each($scope.class_period_list,function(i,p){
            if(p.checked){
                periodList.push(p.id);
            }
        });
        if(periodList.length){
            $scope.course.attend_class_period = periodList.join(",");
        }
    }

    $scope.modifyCourseTime = function(courseTime) {
        courseTime.courseTimeCopy = undefined;
        var copy = angular.copy(courseTime)
        courseTime.courseTimeCopy = copy;
        courseTime.isEdit = true;
    }

    $scope.cancelMofifyCourseTime = function (courseTime) {
        courseTime.isEdit = undefined;
        angular.copy(courseTime.courseTimeCopy, courseTime)
    }

    $scope.saveCourseTime = function(courseTime){
        var course_date = $("#course_date_"+courseTime.id).val();
        var start_time = $("#start_time_"+courseTime.id).val();
        var end_time = $("#end_time_"+courseTime.id).val();
        courseTime.course_date = course_date;
        courseTime.start_time = start_time;
        courseTime.end_time = end_time;
        var param = {};
        param.id = courseTime.id;
        param.title = courseTime.title;
        param.course_date = courseTime.course_date;
        param.start_time = courseTime.start_time;
        param.end_time = courseTime.end_time;
        param.remark = courseTime.remark;
        param.course_times = courseTime.course_times;
        param.teacher_id = courseTime.teacher_id;
        param.assteacher_id = courseTime.assteacher_id;
        param.course_id=$scope.course_id;
        var _waitingModal = $uibMsgbox.waiting('正在提交....')
        erp_courseTimesService.update(param,function(resp){
            _waitingModal.close();
            if(!resp.error){
                $uibMsgbox.alert("保存成功!");
                courseTime.isEdit = undefined;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    $scope.changeStatus = function(status){
        var param = {};
        param.ids = $scope.course.id;
        param.status = status;
        var _waitingModal = $uibMsgbox.waiting('正在提交....')
        erp_courseService.changeStatus(param,function(resp){
            _waitingModal.close();
            if(!resp.error){
                $uibMsgbox.alert("保存成功！");
                $scope.course.status = status;
            } else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    function queryCourseParamSettings(){
        var param = {};
        param.courseId = $scope.course_id;
        $scope.isQueryCourseParamSettings = 'isQueryCourseParamSettings';
        erp_courseService.querySchedulingAssist(param,function(resp){
            $scope.isQueryCourseParamSettings = '';
            if(!resp.error){
                var data = resp.data;
                if(data&&data.length){
                    $scope.paramSettingsList = data;
                }
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.saveParamSettings = function(){

        $uibMsgbox.confirm('修改高级参数，不会改变历史考勤记录，如果需要变更历史，请置空后重新考勤，是否继续？', function (res) {
            if (res == 'yes') {
                if($scope.paramSettingsList&&$scope.paramSettingsList.length){
                    $.each($scope.paramSettingsList,function(i,p){
                        p.courseId = $scope.course.id;
                    });
                    var param = {};
                    param.courseId = $scope.course.id;
                    param.schedulingAssistList =   $scope.paramSettingsList;
                    var _waitingModal = $uibMsgbox.waiting('正在保存，请稍候...');
                    erp_courseService.updateSchedulingAssist(param,function(resp){
                        _waitingModal.close();
                        if(!resp.error){
                            $uibMsgbox.alert("保存成功！");
                            $scope.closeParamSettingsPanel();
                        }else{
                            $uibMsgbox.error(resp.message);
                        }
                    });
                }
            }
        })
    }
    $scope.isOpenParamSettings = false;
    $scope.openParamSettingsPanel = function(){
        $scope.isOpenParamSettings = true;
        queryCourseParamSettings();
    };
    $scope.closeParamSettingsPanel = function(){
        $scope.isOpenParamSettings = false;
    };

    $scope.changeHourLen = function(paramSetting) {
        if(!paramSetting.courseVal) {
            paramSetting.extandVal1 = null;
            paramSetting.extandVal2 = null;
        }
    }

    if($scope.course_id){
        queryCourse();
        queryTeacher();
    }else{
        $scope.courseLoadingFailed = "没有要排课的课程！";
    }

    $scope.course_scheduling = '走进化学\n反比例函数的基本性质\n空气、氧气\n阅读理解训练营之填空题\nn分子和原\nn原子的结构';
    //批量修改课次标题弹出框
    $scope.batchModifySchedullingModalShow = function() {
        $("#course_scheduling_change_batch_modify_modal").modal('show');
    }
    $scope.batchModifySchedulling = function() {
        if($scope.batchUpdateCourseTimeTitlePlaceholder == $scope.course_scheduling ){
            $uibMsgbox.alert("请输入课次标题！");
            return;
        }
        var _waitingModal = $uibMsgbox.waiting('正在保存，请稍候...');
        erp_courseTimesService.batchUpdate({
                course_id:$scope.course_id,
                courseSchedulingDetails:$scope.course_scheduling
            },function(resp) {
            _waitingModal.close();
            if(!resp.error){
                $("#course_scheduling_change_batch_modify_modal").modal('hide');
                queryCourseTimes();
                $uibMsgbox.alert("保存成功！");
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.printCallNameTable = function(){
                if(location.href.indexOf('klxuexi.org')>0){
            window.open("/printhtml/print_callname.html?courseId=" + $scope.course_id)
                }else{
            window.open("/klxxedu/printhtml/print_callname.html?courseId=" + $scope.course_id)
                }
    }
    $scope.batchUpdateCourseTimeTitlePlaceholder = '走进化学\n反比例函数的基本性质\n空气、氧气\n阅读理解训练营之填空题\nn分子和原\nn原子的结构';
    $scope.focus = function(){
        if($scope.course_scheduling === $scope.batchUpdateCourseTimeTitlePlaceholder){
            $scope.course_scheduling = '';
        }
    };

    $scope.blur = function(){
        if($scope.course_scheduling ===''){
            $scope.course_scheduling = $scope.batchUpdateCourseTimeTitlePlaceholder;
        }
    };
    $scope.resetCourseTeacher = function (courseTime) {
        courseTime.assteacher_name = '';
        courseTime.assteacher_id = 0;
        courseTime.assteacher_code = '';
    }
    $scope.setCourseTeacher = function (courseTime,teacher) {
        courseTime.assteacher_name = teacher.teacher_name;
        courseTime.assteacher_id = teacher.id;
        courseTime.assteacher_code = teacher.encoding;
    };
 }
/**
 * 1对1排课申请
 * Created By baiqb@klxuexi.org 2017-08-11
 * 
 */
angular.module('ework-ui').controller('erp_courseSchedulingYdyApplyController',  [
  '$rootScope',
  '$scope',
  '$log',
  '$state',
  '$uibMsgbox',
  'erp_stuCourseSchedApplyYdyService',
  erp_courseSchedulingYdyApplyController
])

function erp_courseSchedulingYdyApplyController (
  $rootScope,
  $scope,
  $log,
  $state,
  $uibMsgbox,
  erp_stuCourseSchedApplyYdyService
) {
  // $scope.applyStatus = {
  //   1: {name: '已提交', cls: 'text-primary'},
  //   2: {name: '匹配中', cls: 'text-danger'},
  //   3: {name: '已匹配', cls: 'text-success'},
  //   4: {name: '已排课', cls: 'text-warning'},
  //   5: {name: '草稿', cls: 'text-default'},
  //   0: {name: '取消', cls: 'text-muted'}
  // }
  // $scope.applyStatusList = [
  //   {
  //     code: null, name: '全部'
  //   }, {
  //     code: 1, name: '已提交'
  //   }, {
  //     code: 2, name: '匹配中'
  //   }, {
  //     code: 3, name: '已匹配'
  //   }, {
  //     code: 4, name: '已排课'
  //   }, {
  //     code: 5, name: '草稿'
  //   }, {
  //     code: 0, name: '已取消'
  //   }
  // ]
  $scope.applyStatus = {
    1: {name: '待匹配', cls: 'text-primary'},
    2: {name: '匹配中', cls: 'text-danger'},
    3: {name: '已完成', cls: 'text-success'},
    4: {name: '有压单', cls: 'text-success'},
    5: {name: '草稿', cls: 'text-default'},
    0: {name: '取消', cls: 'text-muted'}
  }
  $scope.applyStatusList = [
    {
      code: null, name: '全部'
    }, {
      code: 1, name: '待匹配'
    }, {
      code: 2, name: '匹配中'
    }, {
      code: 3, name: '已完成'
    }, {
      code: 4, name: '有压单'
    }, {
      code: 5, name: '草稿'
    }, {
      code: 0, name: '取消'
    }
  ]

  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 30,
    onChange: function () {
      $scope.getList()
    }
  }
  $scope.searchParam = {
    beginDateFrom: moment().startOf('month').format('YYYY-MM-DD'),
    beginDateTo: moment().endOf('month').format('YYYY-MM-DD'),
    defaultName: $rootScope.curEmployee.employeeName,
    employeeId: $rootScope.curEmployee.id,    
    range: 'curMonth',
    buId: null,
    type: 'apply',
    status: null,
    auditStatus: null,
    branchId: null,
    create_user_name: null,
  }
  
  $scope.auditStatusList = [
    {value: null, label: '全部'},
    {value: 0, label: '审批不通过'},
    {value: 1, label: '审批通过'},
    // {value: 2, label: '审批中'},
    {value: 3, label: '待审批'},
  ];

  $scope.applyList = []

  $scope.newApply = function () {
    $state.go('classesScheduleYdyApplyAdd')
  }
  $scope.editApplyDetail = function (item) {
    $state.go('classesScheduleYdyApplyEdit', {
      id: item.id
    })
  }
  $scope.viewApplyDetail = function (item) {
    $state.go('classesScheduleYdyApplyDetail', {
      id: item.id
    })
  }
  $scope.onDateRangeChange = function () {
    $scope.getList()
  }
  /* 获取申请列表 */
  $scope.getList = function () {
    var params = _.cloneDeep($scope.searchParam)
    params.currentPage = $scope.pageConf.currentPage
    params.pageSize = $scope.pageConf.itemsPerPage
    erp_stuCourseSchedApplyYdyService.query(params, function (resp) {
      if (!resp.error) {
        $scope.applyList = resp.data
        $scope.pageConf.totalItems = resp.total
      } else {
        $uibMsgbox.alert(resp.message)
      }
    })
  }
  $scope.cancelApply = function (item) {
    $uibMsgbox.confirm('确认取消该申请单？', function (res) {
      if (res == 'yes') {
        erp_stuCourseSchedApplyYdyService.putStatus({
          id: item.id,
          status: 0
        }).$promise.then(function (resp) {
          if (!resp.error) {
            $scope.getList()
          } else {
            $uibMsgbox.error(resp.message)
          }
        }, function (resp) {
          $uibMsgbox.error('请求失败!' + resp)
        })
      }
    })
  }
  $scope.deleteApply = function (item) {
    $uibMsgbox.confirm('确定删除该申请单？', function (res) {
      if (res == 'yes') {
        erp_stuCourseSchedApplyYdyService.delete({
          id: item.id
        }).$promise.then(function (resp) {
          if (!resp.error) {
            $uibMsgbox.alert('删除成功！')
            $scope.getList()
          } else {
            $uibMsgbox.error(resp.message)
          }
        }, function (resp) {
          $uibMsgbox.error(resp.message)
        })
      }
    })
  }
  $scope.init = function () {
    $scope.getList()
  }
  $scope.init()
}
angular.module('ework-ui').controller('erp_courseSchedulingYdyApplyAddController', [
  '$scope',
  '$log',
  '$state',
  '$stateParams',
  '$uibModal',
  '$uibMsgbox',
  'erp_studentsService',
  'erp_studentScoreService',
  'erp_stuCourseSchedApplyYdyService',
  erp_courseSchedulingYdyApplyAddController
])

function erp_courseSchedulingYdyApplyAddController (
  $scope,
  $log,
  $state,
  $stateParams,
  $uibModal,
  $uibMsgbox,
  erp_studentsService,
  erp_studentScoreService,
  erp_stuCourseSchedApplyYdyService
) {

  /*************** Begin 双向绑定的Scope数据 **********************************/
  $scope.optype = 'add'
  $scope.curStep = 1
  $scope.steps = [
    {title: '第一步 选择学员'},
    {title: '第二步 学生档案模块'},
    {title: '第三步 课程设计模块'},
    {title: '第四步 申请完成'}
  ]
  // 学生搜索信息
  $scope.stuSearchInfo = {
    searchInfo: ''
  }
  // 已选择的学生
  $scope.selectedStudent = {}
  // 学生列表
  $scope.studentList = []
  $scope.stuGrade = {}
  $scope.totalRequirement = 0 //每周总课程规划节数
  // 排课申请单详细信息
  $scope.apply = {
    id: 38,
    encoding: '', // 申请单号
    applyType: '', // 申请类型, 1-新单， 2-加课单， 3-换单
    beginDate: '', // 开课日期 
    stuScoreList: '',//单科考试成绩
    stuScoreRankingList: '',//综合排名信息
    counselorId: 0, // 咨询师ID
    counselor: '', // 咨询师姓名
    counselorPhone: '', // 咨询师手机
    counselorLine: '', // 咨询师座机
    courseAdminId: 0, // 学管师ID
    courseAdmin: '', // 学管师姓名
    courseAdminPhone: '', // 学管师手机
    courseAdminLine: '', // 学管师座机
    classPlace: '', // 上课地点
    branchEmail: '', // 校区邮箱
    remark: '', // 申请档期-特殊说明
    studentRanking: '', // 学生考试排名
    studentCharacter: '', // 学生性格
    parentInfo: '', // 家长情况
    studentSituation: '', // 学生情况分析
    teacherSpecification: '', // 教师要求说明
    firstClassContent: '', //第一次课内容
    changeTeacherReasons: '', // 换老师原因
    workDirections: '', // 学管师工作方向
    workRemark: '', // 学管师工作备注
    teacherGroupId: 0, // 教研组组长ID
    teacherGroup: '', // 教研组组长姓名
    auditUserId: 0, // 审批人ID
    auditUser: '', // 审批人
    auditDate: '', // 审批时间
    auditStatus: 1, // 审批状态 1-审批通过， 0-审批不通过， 2-审核中， 3-未审核
    studentId: '', // 学生ID
    studentName: '', // 学生姓名
    branchId: 0, // 校区id
    gradeId: 0, // 年级ID
    gradeName: '', // 年级名称
    term: '', // 学期 1-上学期，2-下学期
    examType: '', // 考试类型
    status: 1, // 申请单状态 1-已提交，2-匹配中， 3-已匹配，4-已排课，0-已取消
    stuScoreList: [], // 学生成绩列表
    stuReqList: [], // 课程规划
    schedule: JSON.stringify($scope.stuSchedTimeList),
    stuSchedList: [] // 学生档期
  }
  /*************** End 双向绑定的Scope数据 ***************************/

  // 步骤之间的跳转 
  $scope.nextStep = function (from, to) {
    if (from == 1 && to == 2) {
      var waitingModal = $uibMsgbox.waiting('操作中，请稍候...')
      return erp_stuCourseSchedApplyYdyService.post({
        studentId: $scope.selectedStudent.id
      }).$promise.then(function (resp) {
        waitingModal.close()
        if (!resp.error) {
          _.assignInWith($scope.apply, resp.data, function (objValue, srcValue) {
            return _.isNil(srcValue) ? objValue : srcValue
          })
          $scope.apply.studentName = $scope.selectedStudent.student_name;
          $scope.apply.sexName = $scope.selectedStudent.sex == 1 ? '男' : '女';
          $scope.apply.schoolName = $scope.selectedStudent.attend_school_name;
          $scope.apply.stuGradeName = $scope.selectedStudent.grade_name;
          $scope.apply.beginDate = '';
          $scope.curStep = to
        } else {
          $uibMsgbox.alert(resp.message)
        }
      }).then(function () {
        waitingModal.close()
        erp_studentScoreService.queryDetail({
          studentId: $scope.selectedStudent.id
        }).$promise.then(function (resp) {})
      })
    }
    if (from == 2 && to == 1) {
      if ($scope.optype == 'edit') {
        return false
      }
      return $uibMsgbox.confirm('已经为学生【'+$scope.apply.studentName+'】创建了状态为【草稿】的申请单，返回上一步，将删除该申请单，确定返回？', function (res) {
        if (res == 'yes') {
          erp_stuCourseSchedApplyYdyService.delete({
            id: $scope.apply.id
          }, function (resp) {
            if (!resp.error) {
              $scope.curStep = 1
            } else {
              $uibMsgbox.error(resp.message)
            }
          })
        }
      })
    }
    if (from == 2 && to == 3) {
      return $scope.goToStep3()
    }

    if (from == 3 && to == 4) {
      var apply = getApply($scope.apply)
      if (!$scope.isApplyPlanValid(apply)) {
        return false;
      }
      apply.status = 1
      var waitingModal = $uibMsgbox.waiting('申请单保存中，请稍候...')
      return erp_stuCourseSchedApplyYdyService.put(apply).$promise
        .then(function (resp) {
          waitingModal.close()
          if (!resp.error) {
            $scope.curStep = 4
          } else {
            $uibMsgbox.error(resp.message)
          }
        }, function (resp) {
          waitingModal.close()
          $uibMsgbox.error('请求失败，请联系管理员！' + resp.message)
        })
    }
    $scope.curStep = to
  }
  $scope.isApplyPlanValid = function (apply) {
    
    console.log(JSON.parse(apply.schedule))
    var scheduleList = null
    if (apply.schedule) {
      var _scheduleList = JSON.parse(apply.schedule)
      scheduleList = []
      _.forEach(_scheduleList, function(item) {
        scheduleList.push(item.idles)
      })
      scheduleList = _.flatten(scheduleList)
      if (!_.includes(scheduleList, 'Y')) {
        $uibMsgbox.error('请选择学生申请档期！')
        return false
      }
    }
    if (apply.stuReqList=='') {
      $uibMsgbox.warn('请选择课程规划！')
      return false
    }
    if (!apply.beginDate) {
      $uibMsgbox.error('请输入开课日期！');
      return false;
    }
    if (!apply.classPlace) {
      $uibMsgbox.warn('请输入上课地点！')
      return false
    }
    if (!apply.schedule) {
      $uibMsgbox.warn('请选择学生申请档期！')
      return false
    }
    return true;
  }
  $scope.newApply = function () {
    $state.go('classesScheduleYdyApplyAdd', {}, {
      reload: true
    })
  }
  $scope.goBack = function () {
    $state.go('classesScheduleYdyApply')
  }
  // 进入第三步
  $scope.goToStep3 = function () {
    if (!$scope.apply.applyType) {
      $uibMsgbox.warn('请选择申请类型！')
      return false
    }
    // if (!$scope.apply.studentRanking) {
    //   $uibMsgbox.warn('请输入近期考试排名！')
    //   return false
    // }
    if ($scope.apply.stuScoreList=='') {
      $uibMsgbox.warn('请输入近期考试成绩！')
      return false
    }
    if ($scope.apply.stuScoreRankingList=='') {
      $uibMsgbox.warn('请输入综合排名信息！')
      return false
    }
    if (!$scope.apply.teacherSpecification) {
      $uibMsgbox.warn('请输入老师要求说明！')
      return false
    }
    // if (!$scope.apply.studentCharacter) {
    //   $uibMsgbox.warn('请输入学生性格！')
    //   return false
    // }
    // if (!$scope.apply.parentInfo) {
    //   $uibMsgbox.warn('请输入家长情况！')
    //   return false
    // }
    if (!$scope.apply.studentSituation) {
      $uibMsgbox.warn('请输入学生情况分析！')
      return false
    }

    if (!$scope.apply.workDirections) {
      $uibMsgbox.warn('请输入学管师工作方向！')
      return false
    }
    if ($scope.apply.applyType == '3' && !$scope.apply.changeTeacherReasons) {
      $uibMsgbox.warn('请输入换老师的原因！')
      return false
    }
    // if (!$scope.apply.workRemark) {
    //   $uibMsgbox.warn('请输入备注！')
    //   return false
    // }
    $scope.curStep = 3
    $scope.$broadcast('recalcReqSum');
    return true
    // erp_stuCourseSchedApplyYdyService.put(getApply($scope.apply), function (resp) {
    //   if (!resp.error) {
    //     $scope.curStep = 3
    //   } else {
    //     $uibMsgbox.error(resp.message)
    //   }
    // })
  }
  function getApply (apply) {
    var applyCopy =  _.pick(apply, [
      'id', 'applyType', 'beginDate', 'branchId', 'classPlace', 'branchEmail',
      'remark', 'studentRanking', 'studentCharacter', 'parentInfo', 'studentSituation',
      'teacherSpecification', 'firstClassContent', 'changeTeacherReasons', 'workDirections',
      'workRemark', 'teachGroupId', 'term', 'examType', 'gradeId', 'status', 'stuReqList',
      'schedule',
    ])
    return applyCopy
  }
  // 获取学员列表
  // TODO 后台需要增加剩余课时字段
  $scope.getStudentList = function (studentId) {
    var param = {
      pageSize: 10,
      row_num: 10,
      need_contact: '1',
      searchInfo: $scope.stuSearchInfo.searchInfo,
      searchType: 0
    }
    if(studentId) {
      param.studentId = studentId
    }
    erp_studentsService.query(param, function (resp) {
      if (!resp.error) {
        _.forEach(resp.data, function (stu) {
          if (studentId && stu.id == studentId) {
            $scope.selectedStudent = stu;
            $scope.selectedStudent.checked = true;
            $scope.apply.student = stu;
          } else {
            stu.checked = false
          }
        })
        $scope.studentList = resp.data;
      }else{
        $uibMsgbox.alert(resp.message);
      }
    })
  }
  // 学员选择
  $scope.onStudentCheckedChange = function (student) {
    if (!student.course_schedule_count) {
        return false;
    }
    student.checked = !student.checked
    if (student.checked) {
      $scope.selectedStudent = student
      $scope.apply.student = student
      $scope.stuGrade = {
        id: student.grade_id,
        grade_name: student.grade_name
      }

    } else {
      $scope.selectedStudent = {}
      $scope.apply.student = {}
      $scope.stuGrade = {}
    }
  }
  

  $scope.init = function () {
    if ($state.current.name == 'classesScheduleYdyApplyEdit') {
      if (!$stateParams.id) {
        $uibMsgbox.error('没有相关的申请单信息！', function () {
          $state.go('classesScheduleYdyApply')
        })
        return false
      }

      $scope.optype = 'edit'
      $scope.curStep = 2
      erp_stuCourseSchedApplyYdyService.getDetail({
        id: $stateParams.id
      }, function (resp) {
        if (!resp.error) {
          if (!resp.data) {
            return
          }
          _.assignInWith($scope.apply, resp.data, function (objValue, srcValue) {
            return _.isNil(srcValue) ? objValue : srcValue
          })
          if (resp.data.schedule) {
            $scope.stuSchedTimeList = JSON.parse(resp.data.schedule)
          }
          if (resp.data.stuReqList) {
            $scope.apply.stuReqList = _.sortBy(resp.data.stuReqList, 'seq')
          }
          $scope.getStudentList(resp.data.studentId)
        } else {
          $uibMsgbox.error(resp.message)
        }
      })
    } else {
      $scope.getStudentList($stateParams.studentId)
    }
  }
  $scope.init()
}
angular.module('ework-ui').controller('erp_courseSchedulingYdyApplyDetailController', [
  '$scope',
  '$log',
  '$state',
  '$stateParams',
  '$uibMsgbox',
  'erp_stuCourseSchedApplyYdyService',
  erp_courseSchedulingYdyApplyDetailController
])

function erp_courseSchedulingYdyApplyDetailController (
  $scope,
  $log,
  $state,
  $stateParams,
  $uibMsgbox,
  erp_stuCourseSchedApplyYdyService
) {
  $scope.applyBaseReadOnly = true
  $scope.termTypes = [{
    value: "1",
    label: '上学期'
  }, {
    value: "2",
    label: '下学期'
  }]
  $scope.applyTypes = [{
    value: "1",
    label: '新单'
  }, {
    value: "2",
    label: '加课单'
  }, {
    value: "3",
    label: '换单'
  }]
  
  $scope.stuSchedTimeList = [
    {startTime: '08:00', endTime: '10:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '10:15', endTime: '12:15', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '14:00', endTime: '16:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '16:15', endTime: '18:15', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '19:00', endTime: '21:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']}
  ]

  $scope.apply = {}
  $scope.applyId = 0
  
  $scope.getApplyDetail = function (applyId) {
    erp_stuCourseSchedApplyYdyService.getDetail({
      id: applyId
    }, function (resp) {
      if (!resp.error) {
        if (!resp.data) {
          return
        }
        $scope.apply = resp.data
        // console.log(resp.data)stuSchedPlanList
        if (resp.data.schedule) {
          $scope.stuSchedTimeList = JSON.parse(resp.data.schedule)
        }
      } else {
        $uibMsgbox.error(resp.message)
      }
    })
  }

  $scope.init = function () {
    $scope.applyId = $stateParams.id
    $scope.getApplyDetail($scope.applyId)
  }

  $scope.goBack = function() {
    $state.go('classesScheduleYdyApply')
  }
  $scope.init()
}
/**
 * 1对1排课审批
 * Created By baiqb@klxuexi.org 2017-08-11
 * 
 */
angular.module('ework-ui').controller('erp_courseSchedulingYdyApprovalController',  [
  '$scope',
  '$log',
  '$state',
  '$uibModal',
  '$uibMsgbox',
  'erp_dictService',
  'erp_stuCourseSchedApplyYdyService',
  erp_courseSchedulingYdyApprovalController
])

function erp_courseSchedulingYdyApprovalController (
  $scope,
  $log,
  $state,
  $uibModal,
  $uibMsgbox,
  erp_dictService,
  erp_stuCourseSchedApplyYdyService
) {
  /**
   * 个性化排课申请类别 schedApplyType
   * 个性化排课申请状态 schedApplyStatus
   * 个性化排课申请审批状态 schedApplyAuditStatus
   * 学期 term
   * 个性化排课申请课程规划状态 schedApplyCourseReqStatus
   * 校区类型 orgKind
   */
  $scope.optype = 'showList'
  $scope.selectedApply = {}
  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 30,
    onChange: function () {
      $scope.getList()
    }
  }
  $scope.onDateRangeChange = function () {
    $scope.getList();
  }
  $scope.applyStatus = {
    1: {name: '已提交', cls: 'text-primary'},
    2: {name: '匹配中', cls: 'text-danger'},
    3: {name: '已匹配', cls: 'text-success'},
    4: {name: '已排课', cls: 'text-warning'},
    5: {name: '草稿', cls: 'text-default'},
    0: {name: '取消', cls: 'text-muted'}
  }
  $scope.applyStatusList = [
    {
      code: null, name: '全部'
    }, {
      code: 1, name: '已提交'
    }, {
      code: 2, name: '匹配中'
    }, {
      code: 3, name: '已匹配'
    }, {
      code: 4, name: '已排课'
    }, {
      code: 5, name: '草稿'
    }, {
      code: 0, name: '已取消'
    }
  ]
  $scope.searchParam = {
    beginDateFrom: moment().startOf('month').format('YYYY-MM-DD'),
    beginDateTo: moment().endOf('month').format('YYYY-MM-DD'),
    type: 'audit',
    buId: null,
    status: null,
    branchId: null,
    courseAdmin: null,
    studentName: null,
    encoding: null
  }
  $scope.auditStatusList = []
  $scope.applyList = []

  $scope.getList = function () {
    var params = _.cloneDeep($scope.searchParam)
    params.currentPage = $scope.pageConf.currentPage
    params.pageSize = $scope.pageConf.itemsPerPage
    erp_stuCourseSchedApplyYdyService.get(params, function (resp) {
      $scope.applyList = resp.data
      $scope.pageConf.totalItems = resp.total
    })
  }
  $scope.getDicts = function () {
    erp_dictService.get({
      code: 'schedApplyAuditStatus'
    }).$promise.then(function (resp) {
      resp.data.unshift({
        code: null,
        name: '全部'
      })
      $scope.auditStatusList = resp.data
    })
  }
  $scope.init = function () {
    $scope.getDicts()
    $scope.getList()
  }
  
  $scope.onAsignArranger = function (item) {
    openAuditDialog('asign', item)
  }

  $scope.onRefuseArranger = function (item) {
    openAuditDialog('reject', item)
  }

  $scope.onViewDetail = function (item) {
    // $scope.selectedApply = item;
    erp_stuCourseSchedApplyYdyService.getDetail({
      id: item.id
    }, function (resp) {
      if (!resp.error) {
        if (!resp.data) {
          return
        }
        $scope.selectedApply = resp.data
      } else {
        $uibMsgbox.error(resp.message)
      }
    })
    $scope.optype = 'viewDetail';
  }

  $scope.init()

  /////////
  /**
   * 打开排课审批对话框
   * @param {string} optype 可选值：'asign'-指派排课专员， 'reject'-拒绝
   * @param {object} apply 申请单
   */
  function openAuditDialog (optype, apply) {
    return $uibModal.open({
      templateUrl: 'approvalModal.html',
      backdrop: 'static',
      resolve: {
        optype: function () {
          return optype
        },
        apply: function () {
          return apply
        }
      },
      controller: [
        '$scope', 
        '$uibMsgbox',
        'optype',
        'apply',
        'erp_arrangerService',
        'erp_stuCourseSchedApplyYdyService',
        function (
          $scope,
          $uibMsgbox,
          optype,
          apply,
          erp_arrangerService,
          erp_stuCourseSchedApplyYdyService
        ) {
          var auditStatusMap = {
            asign: 1,
            reject: 0
          }
          $scope.optype = optype
          $scope.arrangerList = []
          $scope.audit = {
            id: apply.id,
            auditStatus: auditStatusMap[optype],
            courseArrangerId: null,
            rejectReason: null
          }

          activate(apply);

          $scope.onSave = function () {
            if (!arrangerValid()) {
              return false;
            }
            var waitModal = $uibMsgbox.waiting('保存中，请稍候...')
            erp_stuCourseSchedApplyYdyService.putAudit($scope.audit)
              .$promise.then(function(resp) {
                waitModal.close();
                if (!resp.error) {
                  $uibMsgbox.success('操作成功！', function() {
                    $scope.$close();
                  })
                } else {
                  $uibMsgbox.error(resp.message)
                }
              }, function(resp) {
                waitModal.close();
                $uibMsgbox.error('请求失败！' + resp.statusText);
                console.error(resp)
              })
          }
          //////////
          function activate(apply) {
            erp_arrangerService.query({
              "p_branchId" : apply.branchId,
              "p_gradeId" : apply.gradeId,
              "p_subjectId" : apply.schedulableSubjectId
            }).$promise.then(function(resp) {
              $scope.arrangerList = resp.data;
            })
          }

          function arrangerValid() {
            if (optype == 'asign' && !$scope.audit.courseArrangerId) {
              $uibMsgbox.error('请选择排课专员！');
              return false;
            }
            if (optype == 'reject' && !$scope.audit.rejectReason) {
              $uibMsgbox.error('请输入拒绝原因！');
              return false;
            }
            return true;
          }
        }
      ]
    }).result.then(function(){
      $scope.getList(); 
    })
  }
}

/**
 * 1对1师生匹配
 * Created By baiqb@klxuexi.org 2017-08-11
 * 
 */
angular.module('ework-ui').controller('erp_courseSchedulingYdyMatchController',  [
    '$rootScope',
  '$scope',
  '$log',
  '$state',
  '$uibMsgbox',
  'erp_dictService',
  'erp_arrangerService',
  'erp_stuCourseSchedApplyYdyService',
  erp_courseSchedulingYdyMatchController
])

function erp_courseSchedulingYdyMatchController (
    $rootScope,
  $scope,
  $log,
  $state,
  $uibMsgbox,
  erp_dictService,
  erp_arrangerService,
  erp_stuCourseSchedApplyYdyService
) {
  /**
   * 个性化排课申请类别 schedApplyType
   * 个性化排课申请状态 schedApplyStatus
   * 个性化排课申请审批状态 schedApplyAuditStatus
   * 学期 term
   * 个性化排课申请课程规划状态 schedApplyCourseReqStatus
   * 校区类型 orgKind
   */
  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 30,
    onChange: function () {
      $scope.getList()
    }
  }
  $scope.onDateRangeChange = function () {
    $scope.getList();
  }
  $scope.applyStatus = {
    1: {name: '待匹配', cls: 'text-primary'},
    2: {name: '匹配中', cls: 'text-danger'},
    3: {name: '已完成', cls: 'text-success'},
    4: {name: '有压单', cls: 'text-success'},
  }
  $scope.applyStatusList = [
    {
      code: null, name: '全部'
    }, {
      code: 1, name: '待匹配'
    }, {
      code: 2, name: '匹配中'
    }, {
      code: 3, name: '已完成'
    }, {
      code: 4, name: '有压单'
    }
  ]

  $scope.searchParam = {
    beginDateFrom: moment().startOf('month').format('YYYY-MM-DD'),
    beginDateTo: moment().endOf('month').format('YYYY-MM-DD'),
    type: 'match',
    buId: null,
    status: null,
    branchId: null,
    courseArrangerId: null
  }
  $scope.auditStatusList = []
  $scope.applyList = []

  $scope.getList = function () {
    var params = _.cloneDeep($scope.searchParam)
    params.currentPage = $scope.pageConf.currentPage
    params.pageSize = $scope.pageConf.itemsPerPage
    erp_stuCourseSchedApplyYdyService.get(params, function (resp) {
      $scope.applyList = resp.data
      $scope.pageConf.totalItems = resp.total
    })
  }
  $scope.getDicts = function () {
    erp_dictService.get({
      code: 'schedApplyAuditStatus'
    }).$promise.then(function (resp) {
      resp.data.unshift({
        code: null,
        name: '全部'
      })
      $scope.auditStatusList = resp.data
    })
  }

  // 获取排课专员信息
  $scope.arrangerList = [];
  $scope.queryCourseArranger = function() {
    erp_arrangerService.query({}, function(resp) {
      if (!resp.error && resp.data) {
        $scope.arrangerList = resp.data;
        $.each($scope.arrangerList, function(idx, arranger) {
          if ($rootScope.curEmployee && $rootScope.curEmployee.id && arranger.employeeId == $rootScope.curEmployee.id) {
            $scope.searchParam.curEmployeeId = +$rootScope.curEmployee.id;
            $scope.curEmployeeId = $rootScope.curEmployee.id;
          }
        });
      }
      $scope.getList();
    });
  }

  $scope.init = function () {
    $scope.getDicts();
    $scope.queryCourseArranger();
  }

  $scope.doMatch = function (item) {
    $state.go('classesScheduleYdyMatchEdit', {
      id: item.id,
      schedulableSubjectId: item.schedulableSubjectId,
      curCourseArrangerId: item.courseArrangerEmpId
    })
  }

  $scope.viewDetail = function (item) {
    $state.go('classesScheduleYdyMatchDetail', {
      id: item.id,
      schedulableSubjectId: item.schedulableSubjectId,
      curCourseArrangerId: item.courseArrangerEmpId
    })
  }

  $scope.init()
}
angular.module('ework-ui')
  .controller('erp_courseSchedulingYdyMatchEditController', [
    '$scope',
    '$log',
    '$state',
    '$stateParams',
    '$uibModal',
    '$uibMsgbox',
    'erp_stuCourseSchedApplyYdyService',
    erp_courseSchedulingYdyMatchEditController
  ])

function erp_courseSchedulingYdyMatchEditController (
  $scope,
  $log,
  $state,
  $stateParams,
  $uibModal,
  $uibMsgbox,
  erp_stuCourseSchedApplyYdyService
) {
  // 申请单
  $scope.apply = {}
  // 申请单ID
  $scope.applyId = 0

  // 获取申请单详情
  $scope.getApplyDetail = function (applyId) {
    return erp_stuCourseSchedApplyYdyService.getDetail({
      id: applyId
    }).$promise.then(function (resp) {
      if (!resp.error) {
        $scope.apply = resp.data
      } else {
        $uibMsgbox.error(resp.message)
      }
    }, function (resp) {})
  }
  // 获取初步排课意向表
  $scope.getApplyPlanList = function (applyId) {
    applyId = applyId || $scope.applyId;
    return erp_stuCourseSchedApplyYdyService.getApplyPlanList({
      applyId: applyId
    }).$promise.then(function (resp) {
      if (!resp.error) {
        $scope.applyPlanList = resp.data
      } else {
        $uibMsgbox.error(resp.message)
      }
    }, function (resp) { })
  }
  // 初始化页面
  $scope.init = function () {
    $scope.applyId = $stateParams.id
    if ($state.current.name == "classesScheduleYdyMatchDetail") {
      $scope.optype = 'view'
    } else {
      $scope.optype = 'edit'
    }
    $scope.getApplyDetail($scope.applyId).then(function () {
      return $scope.getApplyPlanList($scope.applyId)
    })
  }
  // 返回
  $scope.goBack = function() {
    $state.go('classesScheduleYdyMatch')
  }
  // 调用初始化页面方法
  $scope.init()
}
/**
 * 1对1讲义打印
 * Created By yans@klxuexi.org 2017-12-25
 * 
 */
angular.module('ework-ui').controller('erp_courseSchedulingYdyPrintController', [
  '$rootScope',
  '$scope',
  '$log',
  '$state',
  '$uibMsgbox',
  'erp_studentBuOrgsService',
  'erp_stuCourseSchedYdyPrintService',
  'PUBORGSelectedService',
  erp_courseSchedulingYdyPrintController
])

function erp_courseSchedulingYdyPrintController(
  $rootScope,
  $scope,
  $log,
  $state,
  $uibMsgbox,
  erp_studentBuOrgsService,
  erp_stuCourseSchedYdyPrintService,
  PUBORGSelectedService
) {
  $scope.printStatus = 'TO_PRINT';
  /**
   * 校区类型 orgKind
   */
  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 30,
    onChange: function () {
      $scope.getList()
    }
  }
  $scope.onDateRangeChange = function () {
    $scope.showId=null;
    $scope.getList();
  }

  $scope.searchParam = {
    minDate: moment().startOf('day').format('YYYY-MM-DD'),
    startDate: moment().startOf('day').format('YYYY-MM-DD'),
    endDate: moment().endOf('day').format('YYYY-MM-DD'),
    range: 'today',
  }

  //切换打印状态
  $scope.changeStatus = function(arr){
    $scope.showId=null;
    $scope.searchParam = {
      minDate: moment().startOf('day').format('YYYY-MM-DD'),
      startDate: moment().startOf('day').format('YYYY-MM-DD'),
      endDate: moment().endOf('day').format('YYYY-MM-DD'),
      range: 'today',
      branchId: $scope.defaultBranchId
    }
    if(arr=='0'){
      $scope.printFlag = 'TO_PRINT'
    }else{
      $scope.printFlag = 'PRINT'
    }
    $scope.getList();
  }

  //获取讲义内容
  $scope.applyList = []
  $scope.getList = function () {
    var params = _.cloneDeep($scope.searchParam)
    params.printFlag = $scope.printFlag
    params.pageSize = $scope.pageConf.itemsPerPage
    params.currentPage = $scope.pageConf.currentPage    
    erp_stuCourseSchedYdyPrintService.post(params, function (resp) {
      if(!resp.error){
        $scope.applyList = resp.data
        $scope.pageConf.totalItems = resp.total || 0;
      } else{
        alert(resp.message);
      }
    })
  }

  //打印跳转新页面
  $scope.printOrder = function(arr){
    var params = arr
    erp_stuCourseSchedYdyPrintService.printpost(params, function (resp) {
      $scope.printList = resp.data
      window.open($scope.printList,'_blank');
      $scope.getList();
      $scope.pageConf.totalItems = resp.total || 0;
    })
  }
  //显示下拉详情
  $scope.showDetail = function(arr){
    if($scope.showId != arr.id){
      $scope.isCollapsed = true;
    }
    $scope.isCollapsed = !$scope.isCollapsed
    $scope.showId = arr.id;
  }
  function querySelectedOrg() {
    PUBORGSelectedService.query({}, function (resp) {
      if (!resp.error) {
        $scope.selectedOrg = resp.data;
        if ($scope.selectedOrg && $scope.selectedOrg.id && $scope.selectedOrg.type == "4") {
          $.each($scope.branchList, function (i, b) {
            if (b.id == $scope.selectedOrg.id) {
              $scope.searchParam.branchId = b.id;
              $scope.defaultBranchId = b.id;
              $scope.getList();              
            }
          });
        } else {
          $uibMsgbox.confirm("请选择校区!");
        }
      } else {
        alert(resp.message);
      }
    })
  }
  /**
    * 查询校区
    */
  function queryBuOrgs() {
    erp_studentBuOrgsService.query({}, function (resp) {
      if (!resp.error) {
        $scope.branchList = resp.data;
        querySelectedOrg() 
      }
    })
  }

  $scope.init = function () {
    queryBuOrgs();
  }
  
  $scope.init()
}
/**
 * 1对1排课处理
 * Created By baiqb@klxuexi.org 2017-08-11
 * 
 */
angular.module('ework-ui').controller('erp_courseSchedulingYdyProcessController',  [
  '$rootScope',
  '$scope',
  '$log',
  '$state',
  '$stateParams',
  '$uibMsgbox',
  'erp_stuCourseSchedApplyYdyService',
  erp_courseSchedulingYdyProcessController
])

function erp_courseSchedulingYdyProcessController (
  $rootScope,
  $scope,
  $log,
  $state,
  $stateParams,
  $uibMsgbox,
  erp_stuCourseSchedApplyYdyService
) {
  $scope.selectedApply = {};
  $scope.optype="showList";
  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 30,
    onChange: function () {
      $scope.getApplyList()
    }
  }
  
  if (!$rootScope.curEmployee) {
    $rootScope.curEmployee = {}
  }
  
  $scope.searchParam = {
    beginDateFrom: moment().startOf('month').format('YYYY-MM-DD'),
    beginDateTo: moment().endOf('month').format('YYYY-MM-DD'),
    range: 'curMonth',
    auditStatus: null,
    buId: null,
    type: 'handle',
    status: null,
    branchId: null,
    courseAdmin: null,
    studentName: null,
    encoding: null,
    defaultName:$rootScope.curEmployee.employeeName,
    employeeId:$rootScope.curEmployee.id
  }

  $scope.$watch('curEmployee', function(newValue) {
    if (newValue && newValue.employeeId) {
      $scope.searchParam.defaultName = $rootScope.curEmployee.employeeName
      $scope.searchParam.employeeId = $rootScope.curEmployee.employeeId
    }
  })

  $scope.applyStatus = {
    3: {name: '已完成', cls: 'text-success'},
    4: {name: '有压单', cls: 'text-success'},
  }
  $scope.applyStatusList = [
    {
      code: null, name: '全部'
    }, {
      code: 3, name: '已完成'
    }, {
      code: 4, name: '有压单'
    }
  ]
  $scope.auditStatusList = [
    {value: null, label: '全部'},
    {value: 0, label: '审批不通过'},
    {value: 1, label: '审批通过'},
    // {value: 2, label: '审批中'},
    // {value: 3, label: '未审批'},
  ];

  $scope.applyList= [];

  $scope.getApplyList = function () {
    var params = _.cloneDeep($scope.searchParam)
    params.currentPage = $scope.pageConf.currentPage
    params.pageSize = $scope.pageConf.itemsPerPage
    
    return erp_stuCourseSchedApplyYdyService.get(params)
      .$promise.then(function(resp) {
        if (!resp.error) {
          // console.log(resp)
          $scope.applyList = resp.data;
          $scope.pageConf.totalItems = resp.total;
        } else {
          $uibMsgbox.error(resp.message);
        }
      }, function (resp) {
        $uibMsgbox.error(resp);
      })
  }

  $scope.exportReport = function () {
      var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
      erp_stuCourseSchedApplyYdyService.exportScheduleProcessExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../erp/studentservice/schedulingDeal/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
      
    };

  $scope.editApplyDetail = function (apply) {
    $scope.selectedApply = _.cloneDeep(apply);
    $scope.optype = 'edit';
  }

  $scope.viewApplyDetail = function (apply) {
    $scope.selectedApply = _.cloneDeep(apply);
    $scope.optype = 'view';
  }

  $scope.showList = function () {
    $scope.optype = 'showList';
    $scope.getApplyList();
  }
  $scope.onAddNewScheduling = function () {
    window.open('?studentId='+$scope.searchParam.studentId+'#/studentMgr/studentMgrYDYSchedule?optype=newScheduling')
  }
  activate();
  ////////////////

  function activate() {
    if ($stateParams.studentName && $stateParams.studentId) {
      $scope.searchParam.studentId = $stateParams.studentId;
      $scope.searchParam.studentName = $stateParams.studentName;
    }
    setTimeout(() => {
      $scope.getApplyList().then();
    }, 0);
  }
} 


 
/**
 * 1对1排课记录
 * Created By baiqb@klxuexi.org 2017-08-11
 *
 */
angular.module('ework-ui').controller('erp_courseSchedulingYdyRecordController',
    [
      '$scope',
      '$state',
      '$uibMsgbox',
      'erp_dictService',
      'erp_StudentManagerService',
      erp_courseSchedulingYdyRecordController
    ])

function erp_courseSchedulingYdyRecordController($scope,
    $state,
    $uibMsgbox,
    erp_dictService,
    erp_StudentManagerService) {

  $scope.courseSchedInfoList = [];

  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 10,
    onChange: function () {
      $scope.queryCourseSchedInfo();
    }
  }

  $scope.searchParam = {
    range: 'curMonth',
    p_startDate: moment().startOf('month').format('YYYY-MM-DD'),
    p_endDate: moment().endOf('month').format('YYYY-MM-DD'),
    labelName : '上课日期'
  };

  $scope.subAttendTypeList = [];
  $scope.subAttendTypeAll = [];
  $scope.attendTypeList = [{
    "code" : 28,
    "name" : "未考勤"
  }, {
    "code" : 21,
    "name" : "正常上课"
  }, {
    "code" : 23,
    "name" : "排课取消"
  }, {
    "code" : 29,
    "name" : "考勤作废"
  }];

  $scope.querySubAttendTypeList = function() {
    erp_dictService.query({"code" : "ydyAttendType"}, function(resp) {
      if (!resp.error) {
        $scope.subAttendTypeAll = resp.data;
        $scope.subAttendTypeList = $scope.subAttendTypeAll;
      }
    });
  }
  //考勤状态和考勤类型联动
  $scope.changeType = function(){
    var type =$scope.searchParam.p_attendType;
    var arr=$scope.subAttendTypeAll;
      if(type==null){
        $scope.subAttendTypeList = arr;
      }else if(type==28){
        $scope.subAttendTypeList = []
      }else if(type==21){
        $scope.subAttendTypeList = [arr[0],arr[1]]
      }else{
        $scope.subAttendTypeList = arr.filter(obj => obj.code !== "21").filter(obj => obj.code !== "22");
      }
  }
  $scope.queryCourseSchedInfo = function () {
    $scope.searchParam.pageSize = $scope.pageConf.itemsPerPage;
    $scope.searchParam.currentPage = $scope.pageConf.currentPage;
    erp_StudentManagerService.queryCourseSchedInfo($scope.searchParam, function(resp) {
      if (!resp.error) {
        $scope.courseSchedInfoList = resp.data;
        $scope.pageConf.totalItems = resp.total || 0;
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  $scope.exportCourseSchedInfo = function() {
        erp_StudentManagerService.exportCourseSchedInfo($scope.searchParam, function(resp) {
          if (!resp.error) {
            window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
          } else {
            $uibMsgbox.error(resp.message);
          }
        });
    }

  $scope.querySubAttendTypeList();
  $scope.queryCourseSchedInfo();
}
angular.module('ework-ui')
    .controller('erp_fileUploadBjkModalController', [
        '$rootScope',
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        '$filter',
        'uibDateParser',
        'erp_subjectService',
        'erp_gradeService',
        'erp_studentBuOrgsService',
        'erp_timeSeasonService',
        'PUBORGSelectedService',
        'erp_teacherService',
        'erp_courseInputService',
        'erp_organizationService',
        'course',
        erp_fileUploadBjkModalController
    ]);

function erp_fileUploadBjkModalController($rootScope,
                                          $scope,
                                          $uibModalInstance,
                                          $uibMsgbox,
                                          $filter,
                                          uibDateParser,
                                          erp_subjectService,
                                          erp_gradeService,
                                          erp_studentBuOrgsService,
                                          erp_timeSeasonService,
                                          PUBORGSelectedService,
                                          erp_teacherService,
                                          erp_courseInputService,
                                          erp_organizationService,
                                          course) {
    // 初始化课程信息
    $scope.courseDetail = angular.copy(course);
    // 组织架构
    
    // 地区列表
    $scope.areaList = [];
    // 团队列表
    $scope.buList = [];
    // 校区列表
    $scope.branchList = [];

    //$rootScope.$watch('orgRootNode', function (newVal, oldVal) {
    //    initAreaList();
    //    initBuList();
    //    initBranchList();
    //});
    // 年级
    $scope.gradeList = [];
    // 科目
    $scope.subjectList = [];
    // 课程季
    $scope.timeSeasonList = [];
    // 是否补课
    $scope.is_cramclassList = [{"id": 1, "value": "是"}, {"id": 0, "value": "否"}];
    // 是否教材
    $scope.is_textbooksList = [{"id": 1, "value": "是"}, {"id": 0, "value": "否"}];
    // 上架/下架
    $scope.saleList = [{"id": 1, "value": "上架"}, {"id": 2, "value": "下架"}];
    //销售类型
    $scope.productTypeList = [{"id": 1, "value": "正价"}, {"id": 2, "value": "促销"}, {"id": 3, "value": "赠送"}];
    //产品线
    // $scope.productLineList = [
    //     {"id": 1, "value": "大小班"}, {"id": 2, "value": "个性化"},
    //     {"id": 3, "value": "艺考班"}, {"id": 4, "value": "小学部"},
    //     {"id": 5, "value": "中厦合作"}, {"id": 6, "value": "承诺班"},
    //     {"id": 7, "value": "【南昌】小学部"}, {"id": 8, "value": "合作项目"},
    //     {"id": 9, "value": "雅思项目"}
    // ];


    $scope.searchParam = {
        bu_id: '',
        order_no: '',
        branch_id: '',
        business_type: 1,
        student_name: ''
    };

    $scope.queryParam = {};

    $scope.selectCourseTeacher = function(teacher){
        $scope.courseDetail.teacher_id = teacher.id;
        $scope.courseDetail.teacher_code = teacher.encoding;
        $scope.courseDetail.teacher_name = teacher.teacher_name;
        $scope.courseDetail.errorMsgObj.teacher_code = '';
    };

    $scope.selectAssTeacher = function (teacher) {
        $scope.courseDetail.assteacher_name = teacher.teacher_name;
        $scope.courseDetail.assteacher_code = teacher.encoding;
        $scope.courseDetail.assteacher_id = teacher.id;
        $scope.courseDetail.errorMsgObj.assteacher_code = '';
    };

    // 移除辅导老师-培英
    $scope.removeAssTeacher = function () {
        $scope.courseDetail.assteacher_name = null;
        $scope.courseDetail.assteacher_code = null;
        $scope.courseDetail.assteacher_id = null;
        $scope.courseDetail.errorMsgObj.assteacher_code = '';
    };

    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss($scope.courseDetail);
    };
    $scope.handleModalConfirm = function () {
        if(!$scope.courseDetail.course_no) {
            $uibMsgbox.error("课程编码必填！");
            return false;
        }
        if(!$scope.courseDetail.course_name) {
            $uibMsgbox.error("课程名称必填！");
            return false;
        }
        //if(!$scope.courseDetail.city_id) {
        //    $uibMsgbox.error("地区必填！");
        //    return false;
        //}
        if(!$scope.courseDetail.branch_id) {
            $uibMsgbox.error("校区必填！");
            return false;
        }
        if(!$scope.courseDetail.grade_id) {
            $uibMsgbox.error("年级必填！");
            return false;
        }
        if(!$scope.courseDetail.season_id || $scope.courseDetail.season_id == -1) {
            $uibMsgbox.error("课程季必填！");
            return false;
        }
        if(!$scope.courseDetail.subject_id) {
            $uibMsgbox.error("科目必填！");
            return false;
        }
        if(!$scope.courseDetail.attend_class_period) {
            $uibMsgbox.error("上课周期必填！");
            return false;
        } else {
            var rule =/^([1-7](~\d{2}:\d{2}-\d{2}:\d{2})?,)*([1-7](~\d{2}:\d{2}-\d{2}:\d{2})?)$/;
            var re = new RegExp(rule);
            if (!re.test($scope.courseDetail.attend_class_period)) {
                $uibMsgbox.error("上课周期格式错误！<br>例1：周一、周三，请输入： 1,3; <br>例2：周一 08:00-12:00、周三，请输入：1~08:00-12:00,3");
                return false;
            }
        }
        if(!$scope.courseDetail.start_date) {
            $uibMsgbox.error("开课日期必填！");
            return false;
        }
        if(!$scope.courseDetail.end_date) {
            $uibMsgbox.error("结课日期必填！");
            return false;
        }
        if(!$scope.courseDetail.start_time) {
            $uibMsgbox.error("上课时间必填！");
            return false;
        }
        if(!$scope.courseDetail.end_time) {
            $uibMsgbox.error("下课时间必填！");
            return false;
        }
        if(!$scope.courseDetail.course_count) {
            $uibMsgbox.error("课时数量必填！");
            return false;
        }
        if(!$scope.courseDetail.unit_price) {
            $uibMsgbox.error("课时单价必填！");
            return false;
        }
        if(!$scope.courseDetail.sum_price) {
            $uibMsgbox.error("课程总价必填！");
            return false;
        }
        if(!$scope.courseDetail.teacher_id) {
            $uibMsgbox.error("老师必填！");
            return false;
        }
        if(!$scope.courseDetail.assteacher_id && $scope.courseDetail.assteacher_code) {
            $uibMsgbox.error("辅导老师编号错误！");
            return false;
        }
        // if(!$scope.courseDetail.product_line) {
        //     $uibMsgbox.error("产品线必填！");
        //     return false;
        // }
        if(!$scope.courseDetail.status) {
            $uibMsgbox.error("状态必填！");
            return false;
        }
        for(var i=0; i<$scope.allCourseArray.length; i++) {
            //行号相同
            if($scope.allCourseArray[i].row_no == course.row_no) {
                continue;
            }
            if($scope.courseDetail.course_no == $scope.allCourseArray[i].course_no) {
                $uibMsgbox.error("文档中已存在此课程编码！");
                return false;
            }
        }
        // 系统中课程编码唯一性校验
        var param = {
            business_type: 1,
            course: $scope.courseDetail
        };
        erp_courseInputService.checkOne(param, function (resp) {
            if (!resp.error) {
                angular.copy($scope.courseDetail, course);
                course.validateStatus = 2;
                course.errorMsgObj = {};
                course.errorList = [];
                $uibModalInstance.close(course);
            } else {
                $uibMsgbox.error(resp.message);
            }
        })

    };
    /**
     * 改变下拉框的值，将selectorShowFiled绑定到selectorDetail.valueFiled中
     * @param selectorDetail 下拉框绑定的对象
     * @param selectorList 下拉框名值对集合
     * @param selectorValFiled 下拉框值绑定的字段
     * @param selectorShowFiled 下拉框显示label绑定的字段
     * @param valueFiled 如果存在，则获取集合中选中对象的valueFiled值
     */
    $scope.changeSelector = function(selectorDetail,selectorList,selectorValFiled,selectorShowFiled,valueFiled) {
        selectorDetail.errorMsgObj[selectorShowFiled] = "";
        valueFiled = valueFiled?valueFiled:'value';
        selectorDetail[selectorShowFiled] = _.find(selectorList, {id:selectorDetail[selectorValFiled]})[valueFiled];
    }
    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
            grade_id:$scope.searchParam.grade_id?$scope.searchParam.selectedCourse.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                $scope.branchList = resp.data;
                $scope.searchParam.branch_id = $scope.courseDetail.branch_id;
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    //function querySelectedOrg() {
    //    PUBORGSelectedService.query({}, function (resp) {
    //        if (!resp.error) {
    //            $scope.selectedOrg = resp.data;
    //            if ($scope.selectedOrg && $scope.selectedOrg.id && $scope.selectedOrg.type == "4") {
    //                $.each($scope.branchList, function (i, b) {
    //                    if (b.id == $scope.selectedOrg.id) {
    //                        $scope.searchParam.branch_id = b.id;
    //                    }
    //                });
    //            } else {
    //                $uibMsgbox.warn("请选择校区!");
    //            }
    //        } else {
    //            $uibMsgbox.error(resp.message);
    //        }
    //    })
    //}

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }
    $scope.performanceBelongList = [
        {
            value:'代办校区',
            id:1
         },{
            value:'课程校区',
            id:2
         },
    ];

    $scope.changeSearchInfo = function(){
        queryTeacher();
    }

    function queryTeacher(){
        var param = {};
        if($scope.queryParam.search_info){
            param.search_info = $scope.queryParam.search_info
        }
        $scope.isLoadingTeacherList = 'isLoadingTeacherList';
        $scope.queryParam.teacherList = [];
        erp_teacherService.page(param,function(resp){
            $scope.isLoadingTeacherList = '';
            if(!resp.error){
                $scope.queryParam.teacherList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    function initAreaList() {
        var node = $rootScope.orgRootNode
        if (node && node.children) {
            $scope.areaList = _.slice(node.children)
        }
    }

    function initBuList() {
        var list = $scope.areaList;
        var bList = [];
        _.forEach(list, function (item) {
            bList = _.concat(bList, item.children);
        })
        $scope.buList = bList
    }

    function initBranchList() {
        var list = $scope.buList;
        var bList = [];
        _.forEach(list, function (item) {
            bList = _.concat(bList, item.children);
        })
        $scope.branchList = bList
    }

    $scope.queryProductLine = function() {
        erp_organizationService.queryProductLine({}, function(resp) {
            if (!resp.error && resp.data && resp.data.length > 0) {
                //产品线
                $scope.productLineList = resp.data;
            }
        })
    }

    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();
    queryTeacher();
    $scope.queryProductLine();
}

angular.module('ework-ui')
    .controller('erp_fileUploadBjkController', [
        '$rootScope',
        '$scope',
        '$log',
        '$state',
        '$uibMsgbox',
        '$uibModal',
        'erp_courseInputService',
        erp_fileUploadBjkController
    ]);

function erp_fileUploadBjkController($rootScope,
                                     $scope,
                                     $log,
                                     $state,
                                     $uibMsgbox,
                                     $uibModal,
                                     erp_courseInputService) {
    $scope.importSuccessProgress = 0;
    $scope.importFailureProgress = 0;
    $scope.importSuccessItems = 0;
    $scope.importFailureItems = 0;
    $scope.currentImportItems = 1;

    // 当前步骤
    $scope.currentStep = 1;
    // 所有班级课数据
    $scope.allCourseArray = [];

    // 过滤后的数据
    $scope.filteredData = [];

    // 检验成功的数据
    $scope.validateSuccess = [];

    // 校验失败
    $scope.validateFailure = [];

    // 未校验数据
    $scope.uncheckedData = [];

    // 显示的数据
    $scope.currentPageData = [];

    // 校验状态
    $scope.validateStatus = '0';

    // 是否可以开始校验
    $scope.validateDisabled = true;

    // 需要上传的文件
    $scope.fileUpload = null;

    // 等待模态框
    $scope.waitingModal = null;

    // 分页配置
    $scope.paginationConf = {
        currentPage: 1,
        totalItems: 0,
        itemsPerPage: 10,
        showFirstAndLast: true,
        onChange: function () {
            $scope.getPageData();
        }
    };

    // 所有的步骤
    $scope.steps = [{
        title: '1. 上传文件'
    }, {
        title: '2. 数据校验'
    }, {
        title: '3. 数据导入'
    }];

    // 校验文件
    $scope.handleValidate = function () {
        $scope.waitingModal = $uibMsgbox.waiting('正在上传，请稍候...')
        uploadFiles();
    };

    // 修改课程
    $scope.handleModifyCourse = function (course) {
        var oldCourse = _.cloneDeep(course)
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-fileupload-bjk.modal.html',
            controller: 'erp_fileUploadBjkModalController',
            scope: $scope,
            resolve: {
                course: function () {
                    return course;
                }
            }
        }).result.then(function (res) {
            if (course.validateStatus != oldCourse.validateStatus) {
                _.remove($scope.validateFailure, course);
                $scope.validateSuccess.push(course)
            }
        }, function (res) {});
    };

    // 上传的文件改变事件
    $scope.onFileChange = function (files) {
        $scope.fileUpload = files[0];
        $scope.validateDisabled = !$scope.fileUpload;
        $scope.$apply();
    };

    // 关闭当前页
    $scope.closeCurrentPage = function (argument) {
        history.back();
    };

    // 导入课程
    $scope.courseImport = function () {
        //TODO 控制导入按钮状态
        if($scope.allCourseArray.length != $scope.validateSuccess.length) {
            $uibMsgbox.warn("存在校验失败的数据，不能导入！");
            return;
        }
        $uibMsgbox.confirm('即将导入校验成功的数据，共'
            + $scope.allCourseArray.length + '条，确认导入？',
            function (res) {
                if (res == 'yes') {
                    $('#progress-modal').modal('show');
                    $scope.importSuccessItems = 0;
                    $scope.importFailureItems = 0;
                    $scope.importSuccessProgress = 0;
                    $scope.importFailureProgress = 0;
                    inputData(0);
                }
            })
    };

    // 全部导出
    $scope.exportAll = function (step) {
        //步骤2 与 步骤3的全部导出应该可以相同
        outputExcel($scope.allCourseArray);
    };

    // 错误导出
    $scope.exportError = function (step) {
        //步骤2
        if(step == 2) {
            outputExcel($scope.validateFailure);
        }
        //TODO 步骤2 与 步骤3的错误导出应该不一样
    };

    function outputExcel(courseList) {
        var param = {
            business_type: 1,
            courseList: courseList
        };
        erp_courseInputService.outputExcel(param, function (resp) {
            if (!resp.error) {
                //下载
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.goback=function() {
        window.history.go(-1)
    }
    
    function inputData(index) {
        index = index || 0;
        var array = $scope.allCourseArray;
        if (index >= array.length) {
            $scope.currentStep = 3;
            $('#progress-modal').modal('hide');
            return;
        }
        $scope.currentImportItems = index + 1;
        erp_courseInputService.inputData(array[index], function (resp) {
            if (!resp.error) {
                $scope.importSuccessItems++;
                $scope.importSuccessProgress = Number(($scope.importSuccessItems / array.length * 100)).toFixed(2);
            } else {
                $scope.importFailureItems++;
                $scope.importFailureProgress = Number(($scope.importFailureItems / array.length * 100)).toFixed(2)
            }
            inputData(index + 1);
        })
    }

    function uploadFiles() {
        $.ajaxFileUpload({
            url: '/erp/coursemanagerment/inputExcel',
            secureuri: false,
            fileElementId: 'fileUpload_bjk',
            dataType: 'json',
            method: 'post',
            data:{business_type:1},
            success: function (resp) {
                if ($scope.waitingModal) {
                    $scope.waitingModal.close();
                }
                if (!resp.error) {
                    $scope.currentStep = 2;
                    $scope.allCourseArray.splice(0, $scope.allCourseArray.length);
                    $scope.allCourseArray = resp.data;
                    validateData();
                } else {
                    $uibMsgbox.warn(resp.message)
                }
            },
            error: function (html, status, e) {
                if ($scope.waitingModal && $scope.waitingModal.close) {
                    $scope.waitingModal.close();
                }
                $uibMsgbox.error('上传失败！' + status)
            }
        })
    }

    // 获取某一页的数据
    $scope.getPageData = function () {
        var currentPage = $scope.paginationConf.currentPage;
        var itemsPerPage = $scope.paginationConf.itemsPerPage;
        var end = itemsPerPage * currentPage;
        var start = end - itemsPerPage;
        var newArray = $scope.filteredData.slice(start, end);
        $scope.currentPageData.splice(0, $scope.currentPageData.length);
        for (var i = 0; i < newArray.length; i++) {
            $scope.currentPageData.push(newArray[i]);
        }
    };

    // 过滤数据
    $scope.filterData = function () {
        if ($scope.validateStatus == 0) {
            $scope.filteredData = $scope.allCourseArray;
        } else if ($scope.validateStatus == 1) {
            $scope.filteredData = $scope.uncheckedData;
        } else if ($scope.validateStatus == 2) {
            $scope.filteredData = $scope.validateSuccess;
        } else if ($scope.validateStatus == 3) {
            $scope.filteredData = $scope.validateFailure;
        }
        $scope.paginationConf.currentPage = 1;
        $scope.paginationConf.totalItems = $scope.filteredData.length;
        $scope.paginationConf.onChange();
    };

    // 数据校验
    function validateData() {
        var modalInstance = $uibMsgbox.waiting('正在校验数据，请稍候...');
        var param = {
            business_type: 1,
            courseList: $scope.allCourseArray
        };
        erp_courseInputService.checkAll(param, function (resp) {
            modalInstance.close();
            if (!resp.error) {
                $scope.allCourseArray = resp.data;
                $scope.validateSuccess.splice(0, $scope.validateSuccess.length);
                $scope.validateFailure.splice(0, $scope.validateFailure.length);

                for (var i = 0; i < $scope.allCourseArray.length; i++) {
                    var item = $scope.allCourseArray[i];
                    if (!item.errorList) {
                        item.validateStatus = 1;
                        $scope.uncheckedData.push(item)
                    } else if (item.errorList.length == 0) {
                        item.validateStatus = 2;
                        $scope.validateSuccess.push(item)
                    } else {
                        item.validateStatus = 3;
                        item.errorMsgObj = {};
                        for (var j = 0; j < item.errorList.length; j++) {
                            item.errorMsgObj[item.errorList[j].field_name] = item.errorList[j].err_msg;
                        }
                        $scope.validateFailure.push(item)
                    }
                }
                $scope.filterData();
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    }
}

angular.module('ework-ui')
    .controller('erp_fileUploadWfdModalController', [
        '$rootScope',
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        '$filter',
        'uibDateParser',
        'erp_subjectService',
        'erp_gradeService',
        'erp_studentBuOrgsService',
        'erp_timeSeasonService',
        'PUBORGSelectedService',
        'erp_teacherService',
        'erp_courseInputService',
        'course',
        erp_fileUploadWfdModalController
    ]);

function erp_fileUploadWfdModalController($rootScope,
                                          $scope,
                                          $uibModalInstance,
                                          $uibMsgbox,
                                          $filter,
                                          uibDateParser,
                                          erp_subjectService,
                                          erp_gradeService,
                                          erp_studentBuOrgsService,
                                          erp_timeSeasonService,
                                          PUBORGSelectedService,
                                          erp_teacherService,
                                          erp_courseInputService,
                                          course) {
    // 初始化课程信息
    $scope.courseDetail = angular.copy(course);
    // 组织架构

    // 地区列表
    $scope.areaList = [];
    // 团队列表
    $scope.buList = [];
    // 校区列表
    $scope.branchList = [];

    // 年级
    $scope.gradeList = [];
    // 科目
    $scope.subjectList = [];
    // 课程季
    $scope.timeSeasonList = [];
    // 是否补课
    $scope.is_cramclassList = [{"id": 1, "value": "是"}, {"id": 0, "value": "否"}];
    // 是否教材
    $scope.is_textbooksList = [{"id": 1, "value": "是"}, {"id": 0, "value": "否"}];
    // 上架/下架
    $scope.saleList = [{"id": 1, "value": "上架"}, {"id": 2, "value": "下架"}];
    //销售类型
    $scope.productTypeList = [{"id": 1, "value": "正价"}, {"id": 2, "value": "促销"}, {"id": 3, "value": "赠送"}];


    $scope.searchParam = {
        bu_id: '',
        order_no: '',
        branch_id: '',
        business_type: 3,
        student_name: ''
    };

    $scope.queryParam = {};

    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.handleModalConfirm = function () {
        if(!$scope.courseDetail.course_no) {
            $uibMsgbox.error("课程编码必填！");
            return false;
        }
        if(!$scope.courseDetail.course_name) {
            $uibMsgbox.error("课程名称必填！");
            return false;
        }
        //if(!$scope.courseDetail.city_id) {
        //    $uibMsgbox.error("地区必填！");
        //    return false;
        //}
        if(!$scope.courseDetail.branch_id) {
            $uibMsgbox.error("校区必填！");
            return false;
        }
        if(!$scope.courseDetail.grade_id) {
            $uibMsgbox.error("年级必填！");
            return false;
        }
        if(!$scope.courseDetail.unit_price) {
            $uibMsgbox.error("单价必填！");
            return false;
        }
        if(!$scope.courseDetail.start_date) {
            $uibMsgbox.error("开课日期必填！");
            return false;
        }
        if(!$scope.courseDetail.end_date) {
            $uibMsgbox.error("结课日期必填！");
            return false;
        }
        if(!$scope.courseDetail.status) {
            $uibMsgbox.error("状态必填！");
            return false;
        }
        for(var i=0; i<$scope.allCourseArray.length; i++) {
            //行号相同
            if($scope.allCourseArray[i].row_no == course.row_no) {
                continue;
            }
            if($scope.courseDetail.course_no == $scope.allCourseArray[i].course_no) {
                $uibMsgbox.error("文档中已存在此课程编码！");
                return false;
            }
        }
        // 系统中课程编码唯一性校验
        var param = {
            business_type: 3,
            course: $scope.courseDetail
        };
        erp_courseInputService.checkOne(param, function (resp) {
            if (!resp.error) {
                angular.copy($scope.courseDetail, course);
                course.validateStatus = 2;
                course.errorMsgObj = {};
                course.errorList = [];
                $uibModalInstance.close(course);
            } else {
                $uibMsgbox.error(resp.message);
            }
        })

    };
    /**
     * 改变下拉框的值，将selectorShowFiled绑定到selectorDetail.valueFiled中
     * @param selectorDetail 下拉框绑定的对象
     * @param selectorValFiled 下拉框值绑定的字段
     * @param selectorShowFiled 下拉框显示label绑定的字段
     * @param selectorList 下拉框名值对集合
     * @param valueFiled 如果存在，则获取集合中选中对象的valueFiled值
     */
    $scope.changeSelector = function(selectorDetail,selectorList,selectorValFiled,selectorShowFiled,valueFiled) {
        selectorDetail.errorMsgObj[selectorShowFiled] = "";
        valueFiled = valueFiled?valueFiled:'value';
        selectorDetail[selectorShowFiled] = _.find(selectorList, {id:selectorDetail[selectorValFiled]})[valueFiled];
    }
    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
            grade_id:$scope.searchParam.grade_id?$scope.searchParam.selectedCourse.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                $scope.branchList = resp.data;
                $scope.searchParam.branch_id = $scope.courseDetail.branch_id;
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }


    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();
}

angular.module('ework-ui')
    .controller('erp_fileUploadWfdController', [
      '$rootScope',
      '$scope',
      '$log',
      '$state',
      '$uibMsgbox',
      '$uibModal',
      'erp_courseInputService',
      erp_fileUploadWfdController
    ]);

function erp_fileUploadWfdController($rootScope,
                                     $scope,
                                     $log,
                                     $state,
                                     $uibMsgbox,
                                     $uibModal,
                                     erp_courseInputService) {
  $scope.importSuccessProgress = 0;
  $scope.importFailureProgress = 0;
  $scope.importSuccessItems = 0;
  $scope.importFailureItems = 0;
  $scope.currentImportItems = 1;

  // 当前步骤
  $scope.currentStep = 1;
  // 所有班级课数据
  $scope.allCourseArray = [];

  // 过滤后的数据
  $scope.filteredData = [];

  // 检验成功的数据
  $scope.validateSuccess = [];

  // 校验失败
  $scope.validateFailure = [];

  // 未校验数据
  $scope.uncheckedData = [];

  // 显示的数据
  $scope.currentPageData = [];

  // 校验状态
  $scope.validateStatus = '0';

  // 是否可以开始校验
  $scope.validateDisabled = true;

  // 需要上传的文件
  $scope.fileUpload = null;

  // 等待模态框
  $scope.waitingModal = null;

  // 分页配置
  $scope.paginationConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 10,
    showFirstAndLast: true,
    onChange: function () {
      $scope.getPageData();
    }
  };

  // 所有的步骤
  $scope.steps = [{
    title: '1. 上传文件'
  }, {
    title: '2. 数据校验'
  }, {
    title: '3. 数据导入'
  }];

  // 校验文件
  $scope.handleValidate = function () {
    $scope.waitingModal = $uibMsgbox.waiting('正在上传，请稍候...')
    uploadFiles();
  };

  // 修改课程
  $scope.handleModifyCourse = function (course) {
    _.remove($scope.validateFailure, course)
    $uibModal.open({
      size: 'lg',
      templateUrl: 'templates/block/modal/course-fileupload-wfd.modal.html',
      controller: 'erp_fileUploadWfdModalController',
      scope: $scope,
      resolve: {
        course: function () {
          return course;
        }
      }
    }).result.then(function (res) {
      console.log(course.validateStatus)
      $scope.validateSuccess.push(course)
    }, function (res) {
      console.log(course.validateStatus)
      $scope.validateFailure.push(course)
    });
  };

  // 上传的文件改变事件
  $scope.onFileChange = function (files) {
    $scope.fileUpload = files[0];
    $scope.validateDisabled = !$scope.fileUpload;
    $scope.$apply();
  };

  // 关闭当前页
  $scope.closeCurrentPage = function (argument) {
    history.back();
  };

  // 导入课程
  $scope.courseImport = function () {
    //TODO 控制导入按钮状态
    if($scope.allCourseArray.length != $scope.validateSuccess.length) {
      $uibMsgbox.warn("存在校验失败的数据，不能导入！");
      return;
    }
    $uibMsgbox.confirm('即将导入校验成功的数据，共'
        + $scope.allCourseArray.length + '条，确认导入？',
        function (res) {
          if (res == 'yes') {
            $('#progress-modal').modal('show');
            $scope.importSuccessItems = 0;
            $scope.importFailureItems = 0;
            $scope.importSuccessProgress = 0;
            $scope.importFailureProgress = 0;
            inputData(0);
          }
        })
  };

  // 全部导出
  $scope.exportAll = function (step) {
    //步骤2 与 步骤3的全部导出应该可以相同
    outputExcel($scope.allCourseArray);
  };

  // 错误导出
  $scope.exportError = function (step) {
    //步骤2
    if(step == 2) {
      outputExcel($scope.validateFailure);
    }
    //TODO 步骤2 与 步骤3的错误导出应该不一样
  };

  function outputExcel(courseList) {
    var param = {
      business_type: 3,
      courseList: courseList
    };
    erp_courseInputService.outputExcel(param, function (resp) {
      if (!resp.error) {
        //下载
        window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  function inputData(index) {
    index = index || 0;
    var array = $scope.allCourseArray;
    if (index >= array.length) {
      $scope.currentStep = 3;
      $('#progress-modal').modal('hide');
      return;
    }
    $scope.currentImportItems = index + 1;
    erp_courseInputService.inputData(array[index], function (resp) {
      if (!resp.error) {
        $scope.importSuccessItems++;
        $scope.importSuccessProgress = Number(($scope.importSuccessItems / array.length * 100)).toFixed(2);
      } else {
        $scope.importFailureItems++;
        $scope.importFailureProgress = Number(($scope.importFailureItems / array.length * 100)).toFixed(2)
      }
      inputData(index + 1);
    })
  }

  $scope.goback=function() {
      window.history.go(-1)
  }
  
  function uploadFiles() {
    $.ajaxFileUpload({
      url: '/erp/coursemanagerment/inputExcel',
      secureuri: false,
      fileElementId: 'fileUpload_wfd',
      dataType: 'json',
      method: 'post',
      data:{business_type:3},
      success: function (resp) {
        if ($scope.waitingModal) {
          $scope.waitingModal.close();
        }
        if (!resp.error) {
          $scope.currentStep = 2;
          $scope.allCourseArray.splice(0, $scope.allCourseArray.length);
          $scope.allCourseArray = resp.data;
          validateData();
        } else {
          $uibMsgbox.warn(resp.message)
        }
      },
      error: function (html, status, e) {
        if ($scope.waitingModal && $scope.waitingModal.close) {
          $scope.waitingModal.close();
        }
        $uibMsgbox.error('上传失败！' + status)
      }
    })
  }

  // 获取某一页的数据
  $scope.getPageData = function () {
    var currentPage = $scope.paginationConf.currentPage;
    var itemsPerPage = $scope.paginationConf.itemsPerPage;
    var end = itemsPerPage * currentPage;
    var start = end - itemsPerPage;
    //console.log('getPageData data ' + start);
    var newArray = $scope.filteredData.slice(start, end);
    $scope.currentPageData.splice(0, $scope.currentPageData.length);
    for (var i = 0; i < newArray.length; i++) {
      $scope.currentPageData.push(newArray[i]);
    }
  };

  // 过滤数据
  $scope.filterData = function () {
    if ($scope.validateStatus == 0) {
      $scope.filteredData = $scope.allCourseArray;
    } else if ($scope.validateStatus == 1) {
      $scope.filteredData = $scope.uncheckedData;
    } else if ($scope.validateStatus == 2) {
      $scope.filteredData = $scope.validateSuccess;
    } else if ($scope.validateStatus == 3) {
      $scope.filteredData = $scope.validateFailure;
    }
    $scope.paginationConf.currentPage = 1;
    $scope.paginationConf.totalItems = $scope.filteredData.length;
    $scope.paginationConf.onChange();
  };

  // 数据校验
  function validateData() {
    var modalInstance = $uibMsgbox.waiting('正在校验数据，请稍候...');
    var param = {
      business_type: 3,
      courseList: $scope.allCourseArray
    };
    erp_courseInputService.checkAll(param, function (resp) {
      modalInstance.close();
      if (!resp.error) {
        $scope.allCourseArray = resp.data;
        $scope.validateSuccess.splice(0, $scope.validateSuccess.length);
        $scope.validateFailure.splice(0, $scope.validateFailure.length);

        for (var i = 0; i < $scope.allCourseArray.length; i++) {
          var item = $scope.allCourseArray[i];
          if (!item.errorList) {
            item.validateStatus = 1;
            $scope.uncheckedData.push(item)
          } else if (item.errorList.length == 0) {
            item.validateStatus = 2;
            $scope.validateSuccess.push(item)
          } else {
            item.validateStatus = 3;
            item.errorMsgObj = {};
            for (var j = 0; j < item.errorList.length; j++) {
              item.errorMsgObj[item.errorList[j].field_name] = item.errorList[j].err_msg;
            }
            $scope.validateFailure.push(item)
          }
        }
        $scope.filterData();
      } else {
        $uibMsgbox.error(resp.message)
      }
    })
  }
}

angular.module('ework-ui')
    .controller('erp_fileUploadYdyModalController', [
        '$rootScope',
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        '$filter',
        'uibDateParser',
        'erp_subjectService',
        'erp_gradeService',
        'erp_studentBuOrgsService',
        'erp_timeSeasonService',
        'PUBORGSelectedService',
        'erp_courseInputService',
        'course',
        erp_fileUploadYdyModalController
    ]);

function erp_fileUploadYdyModalController($rootScope,
                                          $scope,
                                          $uibModalInstance,
                                          $uibMsgbox,
                                          $filter,
                                          uibDateParser,
                                          erp_subjectService,
                                          erp_gradeService,
                                          erp_studentBuOrgsService,
                                          erp_timeSeasonService,
                                          PUBORGSelectedService,
                                          erp_courseInputService,
                                          course) {
    // 初始化课程信息
    $scope.courseDetail = angular.copy(course);
    // 组织架构

    // 地区列表
    $scope.areaList = [];
    // 团队列表
    $scope.buList = [];
    // 校区列表
    $scope.branchList = [];

    //$rootScope.$watch('orgRootNode', function (newVal, oldVal) {
    //    initAreaList();
    //    initBuList();
    //    initBranchList();
    //});
    // 年级
    $scope.gradeList = [];
    // 科目
    $scope.subjectList = [];
    // 课程季
    $scope.timeSeasonList = [];
    // 是否补课
    $scope.is_cramclassList = [{"id": 1, "value": "是"}, {"id": 0, "value": "否"}];
    // 是否教材
    $scope.is_textbooksList = [{"id": 1, "value": "是"}, {"id": 0, "value": "否"}];
    // 上架/下架
    $scope.saleList = [{"id": 1, "value": "上架"}, {"id": 2, "value": "下架"}];
    //销售类型
    $scope.productTypeList = [{"id": 1, "value": "正价"}, {"id": 2, "value": "促销"}, {"id": 3, "value": "赠送"}];
    //是否应用所有校区
    $scope.isAllList = [{"id": 1, "name": "是"}, {"id": 0, "name": "否"}];//是否应用所有校区

    $scope.switchSelectAll = function (event) {
        for (var i in $scope.branchList) {
            $scope.branchList[i].selectFlag = event.target.checked;
        }
    }

    $scope.searchParam = {
        bu_id: '',
        order_no: '',
        branch_id: '',
        business_type: 2,
        student_name: ''
    };

    $scope.queryParam = {};


    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.handleModalConfirm = function () {
        if(!$scope.courseDetail.course_no) {
            $uibMsgbox.error("课程编码必填！");
            return false;
        }
        if(!$scope.courseDetail.course_name) {
            $uibMsgbox.error("课程名称必填！");
            return false;
        }
        //if(!$scope.courseDetail.city_id) {
        //    $uibMsgbox.error("地区必填！");
        //    return false;
        //}
        // if(!$scope.courseDetail.branch_id) {
        //     $uibMsgbox.error("校区必填！");
        //     return false;
        // }
        if(!$scope.courseDetail.grade_id) {
            $uibMsgbox.error("年级必填！");
            return false;
        }
        if(!$scope.courseDetail.unit_price) {
            $uibMsgbox.error("单价必填！");
            return false;
        }
        if(!$scope.courseDetail.hour_len) {
            $uibMsgbox.error("课时长度必填！");
            return false;
        }
        if(!$scope.courseDetail.start_date) {
            $uibMsgbox.error("开课日期必填！");
            return false;
        }
        if(!$scope.courseDetail.end_date) {
            $uibMsgbox.error("结课日期必填！");
            return false;
        }
        if(!$scope.courseDetail.status) {
            $uibMsgbox.error("状态必填！");
            return false;
        }
        if(!$scope.courseDetail.is_all) {
            if(!$scope.courseDetail.branch_ids) {
                $uibMsgbox.error("应用所有校区和课程校区必须2选1！");
                return false;
            }
        }
        for(var i=0; i<$scope.allCourseArray.length; i++) {
            //行号相同
            if($scope.allCourseArray[i].row_no == course.row_no) {
                continue;
            }
            if($scope.courseDetail.course_no == $scope.allCourseArray[i].course_no) {
                $uibMsgbox.error("文档中已存在此课程编码！");
                return false;
            }
        }
        // 系统中课程编码唯一性校验
        var param = {
            business_type: 2,
            course: $scope.courseDetail
        };
        erp_courseInputService.checkOne(param, function (resp) {
            if (!resp.error) {
                var branch_ids = '';
                var branch_names = '';
                if(!$scope.courseDetail.is_all) {
                    $.each($scope.branchList,function(i,n) {
                        if(n.selectFlag) {
                            branch_ids = branch_ids+ ',' + n.id;
                            branch_names = branch_names + ',' + n.org_name;
                        }
                    })
                }
                $scope.courseDetail.branch_ids = branch_ids.length>0?branch_ids.substr(1):'';
                $scope.courseDetail.branch_names = branch_names.length>0?branch_names.substr(1):'';
                angular.copy($scope.courseDetail, course);
                course.validateStatus = 2;
                course.errorMsgObj = {};
                course.errorList = [];
                $uibModalInstance.close(course);
            } else {
                $uibMsgbox.error(resp.message);
            }
        })

    };
    /**
     * 改变下拉框的值，将selectorShowFiled绑定到selectorDetail.valueFiled中
     * @param selectorDetail 下拉框绑定的对象
     * @param selectorValFiled 下拉框值绑定的字段
     * @param selectorShowFiled 下拉框显示label绑定的字段
     * @param selectorList 下拉框名值对集合
     * @param valueFiled 如果存在，则获取集合中选中对象的valueFiled值
     */
    $scope.changeSelector = function(selectorDetail,selectorList,selectorValFiled,selectorShowFiled,valueFiled) {
        selectorDetail.errorMsgObj[selectorShowFiled] = "";
        valueFiled = valueFiled?valueFiled:'value';
        selectorDetail[selectorShowFiled] = _.find(selectorList, {id:selectorDetail[selectorValFiled]})[valueFiled];
    }
    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
            grade_id:$scope.searchParam.grade_id?$scope.searchParam.selectedCourse.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }

    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                $scope.branchList = resp.data;
                $scope.searchParam.branch_id = $scope.courseDetail.branch_id;
                initSelectedBranch();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }
    function initSelectedBranch() {
        var branch_ids = $scope.courseDetail.branch_ids.split(/[,，]/);
        $.each(branch_ids,function(i,n) {
            for(var i in $scope.branchList) {
                if($scope.branchList[i].id==n) {
                    $scope.branchList[i].selectFlag = true;
                    break;
                }
             }
        })
    }

    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();

}

angular.module('ework-ui')
    .controller('erp_fileUploadYdyController', [
        '$rootScope',
        '$scope',
        '$log',
        '$state',
        '$uibMsgbox',
        '$uibModal',
        'erp_courseInputService',
        erp_fileUploadYdyController
    ]);

function erp_fileUploadYdyController($rootScope,
                                     $scope,
                                     $log,
                                     $state,
                                     $uibMsgbox,
                                     $uibModal,
                                     erp_courseInputService) {
    $scope.importSuccessProgress = 0;
    $scope.importFailureProgress = 0;
    $scope.importSuccessItems = 0;
    $scope.importFailureItems = 0;
    $scope.currentImportItems = 1;

    // 当前步骤
    $scope.currentStep = 1;
    // 所有班级课数据
    $scope.allCourseArray = [];

    // 过滤后的数据
    $scope.filteredData = [];

    // 检验成功的数据
    $scope.validateSuccess = [];

    // 校验失败
    $scope.validateFailure = [];

    // 未校验数据
    $scope.uncheckedData = [];

    // 显示的数据
    $scope.currentPageData = [];

    // 校验状态
    $scope.validateStatus = '0';

    // 是否可以开始校验
    $scope.validateDisabled = true;

    // 需要上传的文件
    $scope.fileUpload = null;

    // 等待模态框
    $scope.waitingModal = null;

    // 分页配置
    $scope.paginationConf = {
        currentPage: 1,
        totalItems: 0,
        itemsPerPage: 10,
        showFirstAndLast: true,
        onChange: function () {
            $scope.getPageData();
        }
    };

    // 所有的步骤
    $scope.steps = [{
        title: '1. 上传文件'
    }, {
        title: '2. 数据校验'
    }, {
        title: '3. 数据导入'
    }];

    // 校验文件
    $scope.handleValidate = function () {
        $scope.waitingModal = $uibMsgbox.waiting('正在上传，请稍候...')
        uploadFiles();
    };

    // 修改课程
    $scope.handleModifyCourse = function (course) {
        var oldCourse = _.cloneDeep(course)
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-fileupload-ydy-modal.html',
            controller: 'erp_fileUploadYdyModalController',
            scope: $scope,
            resolve: {
                course: function () {
                    return course;
                }
            }
        }).result.then(function (res) {
            if (course.validateStatus != oldCourse.validateStatus) {
                _.remove($scope.validateFailure, course)
                $scope.validateSuccess.push(course)
            }
        }, function (res) {});
    };

    // 上传的文件改变事件
    $scope.onFileChange = function (files) {
        $scope.fileUpload = files[0];
        $scope.validateDisabled = !$scope.fileUpload;
        $scope.$apply();
    };

    $scope.goback=function() {
        window.history.go(-1)
    }

    // 关闭当前页
    $scope.closeCurrentPage = function (argument) {
        history.back();
    };

    // 导入课程
    $scope.courseImport = function () {
        //TODO 控制导入按钮状态
        if($scope.allCourseArray.length != $scope.validateSuccess.length) {
            $uibMsgbox.warn("存在校验失败的数据，不能导入！");
            return;
        }
        $uibMsgbox.confirm('即将导入校验成功的数据，共'
            + $scope.allCourseArray.length + '条，确认导入？',
            function (res) {
                if (res == 'yes') {
                    $('#progress-modal').modal('show');
                    $scope.importSuccessItems = 0;
                    $scope.importFailureItems = 0;
                    $scope.importSuccessProgress = 0;
                    $scope.importFailureProgress = 0;
                    inputData(0);
                }
            })
    };

    // 全部导出
    $scope.exportAll = function (step) {
        //步骤2 与 步骤3的全部导出应该可以相同
        outputExcel($scope.allCourseArray);
    };

    // 错误导出
    $scope.exportError = function (step) {
        //步骤2
        if(step == 2) {
            outputExcel($scope.validateFailure);
        }
        //TODO 步骤2 与 步骤3的错误导出应该不一样
    };

    function outputExcel(courseList) {
        var param = {
            business_type: 2,
            courseList: courseList
        };
        erp_courseInputService.outputExcel(param, function (resp) {
            if (!resp.error) {
                //下载
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }

    function inputData(index) {
        index = index || 0;
        var array = $scope.allCourseArray;
        if (index >= array.length) {
            $scope.currentStep = 3;
            $('#progress-modal').modal('hide');
            return;
        }
        $scope.currentImportItems = index + 1;
        erp_courseInputService.inputData(array[index], function (resp) {
            if (!resp.error) {
                $scope.importSuccessItems++;
                $scope.importSuccessProgress = Number(($scope.importSuccessItems / array.length * 100)).toFixed(2);
            } else {
                $scope.importFailureItems++;
                $scope.importFailureProgress = Number(($scope.importFailureItems / array.length * 100)).toFixed(2)
            }
            inputData(index + 1);
        })
    }

    function uploadFiles() {
        $.ajaxFileUpload({
            url: '/erp/coursemanagerment/inputExcel',
            secureuri: false,
            fileElementId: 'fileUpload_ydy',
            dataType: 'json',
            method: 'post',
            data:{business_type:2},
            success: function (resp) {
                if ($scope.waitingModal) {
                    $scope.waitingModal.close();
                }
                if (!resp.error) {
                    $scope.currentStep = 2;
                    $scope.allCourseArray.splice(0, $scope.allCourseArray.length);
                    $scope.allCourseArray = resp.data;
                    validateData();
                } else {
                    $uibMsgbox.warn(resp.message)
                }
            },
            error: function (html, status, e) {
                if ($scope.waitingModal && $scope.waitingModal.close) {
                    $scope.waitingModal.close();
                }
                $uibMsgbox.error('上传失败！' + status)
            }
        })
    }

    // 获取某一页的数据
    $scope.getPageData = function () {
        var currentPage = $scope.paginationConf.currentPage;
        var itemsPerPage = $scope.paginationConf.itemsPerPage;
        var end = itemsPerPage * currentPage;
        var start = end - itemsPerPage;
        //console.log('getPageData data ' + start);
        var newArray = $scope.filteredData.slice(start, end);
        $scope.currentPageData.splice(0, $scope.currentPageData.length);
        for (var i = 0; i < newArray.length; i++) {
            $scope.currentPageData.push(newArray[i]);
        }
    };

    // 过滤数据
    $scope.filterData = function () {
        if ($scope.validateStatus == 0) {
            $scope.filteredData = $scope.allCourseArray;
        } else if ($scope.validateStatus == 1) {
            $scope.filteredData = $scope.uncheckedData;
        } else if ($scope.validateStatus == 2) {
            $scope.filteredData = $scope.validateSuccess;
        } else if ($scope.validateStatus == 3) {
            $scope.filteredData = $scope.validateFailure;
        }
        $scope.paginationConf.currentPage = 1;
        $scope.paginationConf.totalItems = $scope.filteredData.length;
        $scope.paginationConf.onChange();
    };

    // 数据校验
    function validateData() {
        var modalInstance = $uibMsgbox.waiting('正在校验数据，请稍候...');
        var param = {
            business_type: 2,
            courseList: $scope.allCourseArray
        };
        erp_courseInputService.checkAll(param, function (resp) {
            modalInstance.close();
            if (!resp.error) {
                $scope.allCourseArray = resp.data;
                $scope.validateSuccess.splice(0, $scope.validateSuccess.length);
                $scope.validateFailure.splice(0, $scope.validateFailure.length);

                for (var i = 0; i < $scope.allCourseArray.length; i++) {
                    var item = $scope.allCourseArray[i];
                    if (!item.errorList) {
                        item.validateStatus = 1;
                        $scope.uncheckedData.push(item)
                    } else if (item.errorList.length == 0) {
                        item.validateStatus = 2;
                        $scope.validateSuccess.push(item)
                    } else {
                        item.validateStatus = 3;
                        item.errorMsgObj = {};
                        for (var j = 0; j < item.errorList.length; j++) {
                            item.errorMsgObj[item.errorList[j].field_name] = item.errorList[j].err_msg;
                        }
                        $scope.validateFailure.push(item)
                    }
                }
                $scope.filterData();
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    }
}

"use strict"
angular.module('ework-ui')
  .controller('erp_mtCourseModalController', [
    '$rootScope',
    '$scope',
    'erp_mtcourseService',
    '$uibModalInstance',
    '$uibMsgbox',
    'uibDateParser',
    erp_mtCourseModalController
  ])

function erp_mtCourseModalController(
  $rootScope,
  $scope,
  erp_mtcourseService,
  $uibModalInstance,
  $uibMsgbox,
  uibDateParser
) {
  $scope.modalCourseList = [];

   if (!$scope.courseDetail.type) {
     $scope.courseDetail.type = 4;
   }

  $scope.$watch('courseDetail.start_time', function () {
    calculateHourLength()
  })
  $scope.insertCourse = function (course) {
    function insertCourse (course) {
          
      if (!_.some($scope.modalCourseList, {id: course.id})) {
        if ($scope.modalCourseList.length > 0) {
          var _course = $scope.modalCourseList[0]
          if (_course.start_date != course.start_date ||
            _course.end_date != course.end_date ||
            _course.start_time != course.start_time ||
            _course.end_time != course.end_time ||
            _course.course_count != course.course_count ) {
            $uibMsgbox.error('请确保选择的课程的开课日期、结课日期、上课时间、下课时间、课次 均保持一致！')
            return false
          }
        }
        $scope.modalCourseList.push(course);
          $scope.courseDetail.start_date = new Date(course.start_date);
          $scope.courseDetail.end_date = new Date(course.end_date);
          $scope.courseDetail.start_time = course.start_time;
          $scope.courseDetail.end_time = course.end_time;
          $scope.courseDetail.attend_class_period = course.attend_class_period;

          if (!course.hour_len) {
            calculateHourLength();
          } else {
            $scope.courseDetail.hour_len = course.hour_len;
          }

          $scope.courseDetail.branch_id = course.branch_id;
          $scope.courseDetail.unit_price = course.unit_price;
          $scope.courseDetail.course_count = course.course_count;
          $scope.courseDetail.description = course.description;
      }
    }
    if (course.more_teacher_courseid && course.more_teacher_courseid != $scope.courseDetail.id) {
      $uibMsgbox.confirm('您添加的班级课程已经在 另外一个双师课程档案('+course.more_teacher_courseName+')已存在，如果继续，对方将消失该班级课，是否继续？', function (res) {
        if (res == 'yes') {
          insertCourse(course)
        }
      })
    } else {
      insertCourse(course)
    }
  }

  $scope.removeCourse = function (course) {
    _.remove($scope.modalCourseList, {id: course.id})
  }

  $scope.$watch('courseDetail.end_time', function() {
    calculateHourLength()
  })
  $scope.handleModalCancel = function() {
    $uibModalInstance.dismiss('cancel')
  }
  $scope.handleModalConfirm = function() {
     var mainCourseCount = 0;
     $.each($scope.modalCourseList, function(idx, course) {
       if (course.teacher_id == $scope.courseDetail.teacher_id) {
         mainCourseCount += 1;
       }
     });

     if (mainCourseCount == 0 || mainCourseCount > 1) {
       $uibMsgbox.error("所选课程老师必须有且只有一个与双师包的老师一致！");
       return false;
     }

	$scope.courseDetail.courseRel=$scope.modalCourseList;
    $uibModalInstance.close($scope.courseDetail);
  }
  $scope.setMtCourseTeacher = function (teacher) {
    $scope.courseDetail.teacher_name = teacher.teacher_name;
    $scope.courseDetail.teacher_id = teacher.id;
    console.log($scope.courseDetail)
  }
  function calculateHourLength() {
    var start = uibDateParser.parse($scope.courseDetail.start_time, 'HH:mm')
    var end = uibDateParser.parse($scope.courseDetail.end_time, 'HH:mm')
    if (start && end && start.getTime && end.getTime) {
      $scope.courseDetail.hour_len = ((end.getTime() - start.getTime()) / 1000 / 60 / 60).toFixed(2)
    } else {
      $scope.courseDetail.hour_len = 0
    }
  }
  
  $scope.selectedCourseList = function () {
      if(!$scope.courseDetail.id) {
        return;
      }
	  erp_mtcourseService.selectedCourseList({"id":$scope.courseDetail.id}, function (resp) {
  		if(!resp.error){
  			$scope.modalCourseList=resp.selectedCourList;
           }else{
           	$uibMsgbox.error(resp.message);
           }
      });
  };
  
  $scope.selectedCourseList();
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_mtCourseController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    '$state',
    '$uibModal',
    'erp_mtcourseService',
    'erp_subjectService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'erp_TeacherSearchService',
    'erp_timeSeasonService',
    'PUBORGSelectedService',
    'erp_teacherService',
    erp_mtCourseController
    ]);

function erp_mtCourseController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $state,
    $uibModal,
    erp_mtcourseService,
    erp_subjectService,
    erp_gradeService,
    erp_studentBuOrgsService,
    erp_TeacherSearchService,
    erp_timeSeasonService,
    PUBORGSelectedService,
    erp_teacherService
  ) {
    $scope.allCheckedFlag = false;
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索课程名称
    $scope.searchParam = {
        course_Name: ''
    };
    $scope.queryParam = {
    };
    //状态列表
    $scope.statusList =  [{"id" : 1, "name" : "上架"},
                   		   {"id" : 2, "name" :"下架"}];
    
    // 课程列表
    $scope.courseList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.courseDetail = {
        id: '',
        course_name: ''
    };
    
    // 课程类型
	$scope.courseTypeList = [{"id" : 1, "name" : "线上+线下课程"},{"id" : 2, "name" : "线下双师课程"},{"id" : 3, "name" : "线上补课课程"},{"id" : 4, "name" : "暑期双师课程"}];
	// 同步状态
	$scope.sendStatusList = [{"id" : 0, "name" : "未同步"},{"id" : 1, "name" : "同步成功"},{"id" : 2, "name" : "同步失败"}];
  // 运营类型
  $scope.operationTypeList = [{"id" : "0", "name" : "直营"},{"id" : "1", "name" : "直营+加盟"}];

	$scope.onAllCheckedChange = function () {
        _.forEach($scope.courseList,function (course) {
            course.selectedFlag = $scope.allCheckedFlag;
        })
    }
	
    $scope.onCourseCheckedChange = function (course) {
        $scope.allCheckedFlag = _.every($scope.courseList, {selectedFlag: true});
    }

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };
    
    $scope.handleImportClass = function () {
        // 跳转到班级课导入页面
        $state.go('ordersMgrCourseInput', {
            path: '/orders/ordersMgr/ordersMgrCourseInput',
            href: 'templates/erp/course/fileUpload_bjk.html'
        })
    }

    /**
     * 查询校区
     */
    function queryBranchOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                    //将全部option添加到branchList
                    $scope.branchList.unshift(
                        {
                            id : -1,
                            org_name:"-- 全部 --"
                        }
                    );
                }
                //查询选中的组织，并为校区设置默认值
                querySelectedOrg();
            }
        })
    }

    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && ($scope.selectedOrg.type == "4" || $scope.selectedOrg.type == "3" )) {
                    if($scope.selectedOrg.type == "4") {
                        $.each($scope.branchList, function (i, b) {
                            if (b.id == $scope.selectedOrg.id) {
                                $scope.searchParam.branch_id = b.id;
                            }
                        });
                    }
                } else {
                    $uibMsgbox.warn("请选择团队或校区");
                }
                //界面初始化查询
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }
    
    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
            grade_id:$scope.searchParam.grade_id?$scope.searchParam.selectedCourse.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询课程
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 选择课程
     * @param grade
     */
    $scope.selectCourse = function(grade){
        $scope.queryParam.selectedCourse = grade;
        querySubject();
    }

    /**
     * 选择科目
     * @param subject
     */
    $scope.selectSubject = function(subject){
        $scope.queryParam.selectedSubject = subject;
    }


    
  //获取所有选中的id
    function getSelectedIds () {
        var ids = "";
        if(!_.some($scope.courseList, {selectedFlag: true})) {
            $uibMsgbox.alert('请选择课程！')
            return "";
        }
        _.forEach($scope.courseList ,function(course) {
            if (course.selectedFlag) {
            	ids+= "," + course.id;
            }
        })
        return ids.substring(1);
    }
    
    // 处理【添加课程】按钮点击事件
    $scope.handleAddCourse = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        // $('#erpMTCoursePanel').modal('show');
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-mtcourse.modal.html',
            controller: 'erp_mtCourseModalController',
            scope: $scope
        }).result.then(function (detail) {
        	$scope.add();
        }, function () { });
    };

    // 处理【查询排课】按钮点击事件
    $scope.queryCourseScheduing = function (id) {
    	if(id == "" || id == undefined || id == null){
    		$uibMsgbox.alert('课程包中需要绑定主场课程！');
    		return;
    	}
    	window.location.href="?courseId="+id+"#/orders/classesScheduleCourse";
    };
    
    // 处理【修改课程】按钮点击事件
    $scope.handlePutCourse = function (course) {
        $scope.optype = 'put';
        $scope.courseDetail = course;
    	//查找出匹配的课程
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-mtcourse.modal.html',
            controller: 'erp_mtCourseModalController',
            scope: $scope
        }).result.then(function (detail) {
        		$scope.put();
        }, function () { });
    };

    // 处理【查询课程】按钮点击事件
    $scope.handleQueryCourse = function () {
        $scope.query();
    };
    // 处理【上架课程】按钮点击事件
    $scope.handleUpCourse = function (status) {
    	var ids = getSelectedIds();
        $scope.changeStatus(ids,status, '确定上架所选课程？');
    };
    // 处理【下架课程】按钮点击事件
    $scope.handleDownCourse = function (status) {
    	var ids = getSelectedIds();
   	    $scope.changeStatus(ids,status, '确定下架所选课程？');
    };
    // 处理【删除课程】按钮点击事件
    $scope.handleDelCourse = function (status) {
    	var ids = getSelectedIds();
   	    $scope.changeStatus(ids,status, '确定删除所选课程？');
    };
    // 处理【同步叮当】按钮点击事件
    $scope.handleImportClass = function () {
    	var ids = getSelectedIds();
    	$scope.synToDoubleCourse(ids, null, '确定同步所选课程到叮当？');
       // $scope.query();
    };
    // 处理【自动排课】按钮点击事件
    $scope.handleAutoSchedule = function () {
    	var ids = getSelectedIds();
   	    $scope.changeStatus(ids,status);
    };

    // 处理课程表单【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpMTCoursePanel').modal('hide');
    };

    // 处理课程表单【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
    	if ($scope.optype == 'add') {
    		$scope.add();
    	} else {
    		$scope.put();
    	}
        $('#erpMTCoursePanel').modal('hide');
    };

    // 添加
    $scope.add = function () {
        var waitingModal = $uibMsgbox.waiting('操作中，请稍候...')
    	erp_mtcourseService.add($scope.courseDetail, function (resp) {
            waitingModal.close();
    		if(!resp.error){
    			if(resp.message){
    				$uibMsgbox.success(resp.message);
    			}
    	        $scope.query();
             }else{
             	$uibMsgbox.error(resp.message);
             }
        });
    };

    // 修改
    $scope.put = function () {
        var waitingModal = $uibMsgbox.waiting('操作中，请稍候...')
    	erp_mtcourseService.update($scope.courseDetail, function (resp) {
            waitingModal.close();
    		if(!resp.error){
    			if(resp.message){
    				$uibMsgbox.success(resp.message);
    			}
    	        $scope.query();
             }else{
             	$uibMsgbox.error(resp.message);
             }
        });
    };

    // 查询方法
    $scope.query = function () {
    	erp_mtcourseService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            mtcourse_type:$scope.searchParam.mtcourse_type,
			status:$scope.searchParam.status,
			course_name:$scope.searchParam.course_name,
			teacher_id:$scope.searchParam.teacher_id,
            branch_id:$scope.searchParam.branch_id
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.courseList=resp.data;
                $scope.onCourseCheckedChange()
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    // 同步双师
    $scope.synToDoubleCourse = function (ids) {
        if (ids) {
        	erp_mtcourseService.synToDoubleCourse({"doubleCourseIds":ids }, function (resp) {
                if (!resp.error) {
                	if(resp.message){
        				$uibMsgbox.success(resp.message);
        			}
                	$scope.query();
                } else {
                	$uibMsgbox.error(resp.message);
                }
            });
        }
    };
    
    $scope.querySelectDatas = function (id) {
    	erp_mtcourseService.querySelectDatas({
    		id : id
    	},function(resp) {
            if(!resp.error) {
                $scope.lastCourseList = resp.data;
            }
        });
    };
    
    
    /*
     * 修改状态
     * @param flag true-生效 false-无效
     */
    $scope.changeStatus = function (ids, flag, msg) {
        if (ids) {
            if (msg) {
                $uibMsgbox.confirm(msg, function (res) {
                    if (res == 'yes') {
                        erp_mtcourseService.changeStatus({"ids" : ids, "status" : flag}, function (resp) {
                            if(!resp.error) {
                                $uibMsgbox.alert("操作成功!");
                                $scope.query();
                            } else {
                                $uibMsgbox.error(resp.message)
                            }
                        });
                    }
                })
            } else {
            	erp_mtcourseService.changeStatus({"ids" : ids, "status" : flag}, function (resp) {
            		if(!resp.error) {
            			$uibMsgbox.alert("操作成功!");
            	        $scope.query();
            		} else {
            			$uibMsgbox.error(resp.message)
            		}
                });
            }
        }
    }
    
    $scope.onStatusChange = function (course) {
    	$scope.changeStatus(course.id, course.status);
    }
    
    
    // 重置表单
    $scope.resetForm = function () {
    	 $scope.courseDetail = {
             status : 1 //课程状态，默认：1 上架
    		    };
    };
    
    function queryTeacher(){
        var param = {};
        if($scope.queryParam.search_info){
            param.search_info = $scope.queryParam.search_info;
        }
        $scope.isLoadingTeacherList = 'isLoadingTeacherList';
        $scope.queryParam.teacherList = [];
        erp_teacherService.page(param,function(resp){
            $scope.isLoadingTeacherList = '';
            if(!resp.error){
                $scope.queryParam.teacherList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    }
    
    $scope.changeSearchInfo = function(){
        queryTeacher();
    }
    
    $scope.selectCourseTeacher = function(teacher){
        $scope.courseDetail.teacher_id = teacher.id;
        $scope.courseDetail.teacher_code = teacher.encoding;
        $scope.courseDetail.teacher_name = teacher.teacher_name;
    }
    
    
    // 业务类型
    $scope.courseType = function (type) {
        return getTypeName($scope.courseTypeList, type);       
    }
    // 同步状态
    $scope.statusType = function (type) {
        return getTypeName($scope.sendStatusList, type);
    }
    
    // 获取某类型key对应的Value
    function getTypeName(typeArray, type) {
        var text = '';
        for (var i = 0; i < typeArray.length; i++) {
            if (type == typeArray[i].id) {
                text = typeArray[i].name;
            }
        }
        return text;
    }
    
    querySubject();
    queryGrade();
    queryBranchOrgs();
    queryTimeSeason();
    queryTeacher();

}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_courseWfdController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_courseService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    'erp_teacherService',
    erp_courseWfdController
]);

function erp_courseWfdController($rootScope,
                                 $scope,
                                 $log,
                                 $state,
                                 $uibModal,
                                 $uibMsgbox,
                                 erp_courseService,
                                 erp_gradeService,
                                 erp_studentBuOrgsService,
                                 PUBORGSelectedService,
                                 erp_teacherService) {
    // 搜索课程名称
    $scope.searchParam = {
        branch_id : -1
    };
    //批量选中标识
    $scope.selectAllFlag = false;

    //状态列表
    $scope.statusList = [{"id": 1, "name": "启用"},
        {"id": 2, "name": "停用"}];

    // 课程列表
    $scope.courseList = [];

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function () {
            $scope.query();
        }
    };

    /**
     * 查询年级
     */
    function queryGrade() {
        erp_gradeService.querySelectDatas({
            branch_id: $scope.searchParam.branch_id ? $scope.searchParam.branch_id : -1,
            season_id: $scope.searchParam.season_id ? $scope.searchParam.season_id : -1,
        }, function (resp) {
            if (!resp.error) {
                $scope.gradeList = resp.data;
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBranchOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                    //将全部option添加到branchList
                    $scope.branchList.unshift(
                        {
                            id : -1,
                            org_name:"-- 全部 --"
                        }
                    );
                }
                //查询选中的组织，并为校区设置默认值
                querySelectedOrg();
            }
        })
    }

    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && ($scope.selectedOrg.type == "4" || $scope.selectedOrg.type == "3" )) {
                    if($scope.selectedOrg.type == "4") {
                        $.each($scope.branchList, function (i, b) {
                            if (b.id == $scope.selectedOrg.id) {
                                $scope.searchParam.branch_id = b.id;
                            }
                        });
                    }
                } else {
                    $uibMsgbox.warn("请选择团队或校区");
                }
                //界面初始化查询
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    // 修改
    $scope.updateCourse = function (course) {
        var courseDetail = {
            id: course.id,
            course_no:course.course_no,
            course_name:course.course_name,
            branch_id:course.branch_id,
            grade_id:course.grade_id,
            start_date:course.start_date,
            end_date:course.end_date,
            unit_price:course.unit_price,
            business_type: 3,
            description:course.description,
            product_line:course.product_line,
            performance_belong_type:course.performance_belong_type

        };
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'wfd_modal.html',
            controller: 'erp_wfdModalController',
            scope: $scope,
            resolve: {
                params: function () {
                    return {
                        optype: "修改",
                        courseDetail: courseDetail
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("操作成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };

    $scope.handleImportClass = function () {
        // 跳转到晚辅导课导入页面
        $state.go('ordersMgrCourseWFDInput', {
            path: '/orders/ordersMgr/ordersMgrCourseWFDInput',
            href: 'templates/erp/course/fileUpload_wfd.html'
        })
    }
    // 添加
    $scope.addCourse = function () {
        var courseDefault = {};
        courseDefault.branch_id = $scope.searchParam.branch_id;
        courseDefault.start_date = new Date();
        courseDefault.end_date = new Date();
        courseDefault.course_no = '服务端自动生成';
        courseDefault.grade_id = 100000182;//默认为晚辅导
        courseDefault.business_type = 3;
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'wfd_modal.html',
            controller: 'erp_wfdModalController',
            scope: $scope,
            resolve: {
                params: function () {
                    return {
                        optype: "添加",
                        courseDetail: courseDefault
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("操作成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };

    // 查询方法
    $scope.query = function () {
        erp_courseService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            business_type: 3,
            branch_id: $scope.searchParam.branch_id,
            status: $scope.searchParam.status,
            course_name: $scope.searchParam.course_name,
            grade_id: $scope.searchParam.grade_id
        }, function (resp) {
            $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
            $scope.courseList = resp.data;
            if (resp.error) {
                $uibMsgbox.error(resp.message);
            }
            $scope.selectAllFlag = false;
        });
    };

    /*
     * 单记录上架下架
     * @param flag true-生效 false-无效
     */
    $scope.onStatusChange = function (course) {
        var ids = course.id.toString();
        var status = course.status.toString();
        course.status = course.status == 1 ? 2 : 1;
        $uibMsgbox.confirm('确认上架/下架？', function(res) {
            if (res == 'yes') {
                erp_courseService.changeStatus({"ids": ids, "status": status}, function (resp) {
                    if (!resp.error) {
                        $scope.query();
                        $uibMsgbox.alert("操作成功");
                    } else {
                        $uibMsgbox.error(resp.message);
                    }
                });
            }
        });
    }
    /**
     * 批量上架，下架, 删除
     * @param opt 1表示上架，2表示下架 ，0表示删除
     */
    $scope.batchChangeStatus = function (status) {
        var ids = $scope.getSelectedIds();
        if (!ids) {
            $uibMsgbox.warn("未选中记录");
            return;
        }
        var status = status.toString();
        if (status == 0) {
            $uibMsgbox.confirm('确认删除？', function(res) {
                if (res == 'yes') {
                    erp_courseService.changeStatus({"ids": ids, "status": status}, function (resp) {
                        if (!resp.error) {
                            $scope.query();
                            $uibMsgbox.alert("操作成功");
                        } else {
                            $uibMsgbox.error(resp.message);
                        }
                    });
                }
            });
        } else {
            $uibMsgbox.confirm('确认上架/下架？', function(res) {
                if (res == 'yes') {
                    erp_courseService.changeStatus({"ids": ids, "status": status}, function (resp) {
                        if (!resp.error) {
                            $scope.query();
                            $uibMsgbox.alert("操作成功");
                        } else {
                            $uibMsgbox.error(resp.message);
                        }
                    });
                }
            });
        }
    };

    //多选监控
    $scope.$watch('selectAllFlag', function (newValue, oldValue) {
        var i;
        if (newValue == true) {
            for (i in $scope.courseList) {
                $scope.courseList[i].selectItemFlag = true;
            }
        } else {
            for (i in $scope.courseList) {
                $scope.courseList[i].selectItemFlag = false;
            }
        }
    });
    //获取所有选中的id
    $scope.getSelectedIds = function () {
        var selectItemFlag = null;
        var i = null;
        var syncTeacherIds = "";
        for (i in $scope.courseList) {
            selectItemFlag = $scope.courseList[i].selectItemFlag;
            if (selectItemFlag) {
                //拼接需要同步到叮当的教师id
                syncTeacherIds += ("," + $scope.courseList[i].id);
            }
        }
        return syncTeacherIds.substring(1);
    }

    queryGrade();
    queryBranchOrgs();
}
angular.module('ework-ui')
    .controller('erp_wfdModalController', [
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        'erp_courseService',
        'params',
        erp_wfdModalController
    ])

function erp_wfdModalController($scope,
                                $uibModalInstance, $uibMsgbox, erp_courseService, params) {
    $scope.optype = params.optype;

    $scope.branchList = [];
    angular.copy($scope.$parent.branchList,$scope.branchList);
    $scope.branchList.shift();
    $scope.gradeList = $scope.$parent.gradeList;
    if($scope.optype == "添加") {
        //如果是添加操作，默认选中第一个校区
        params.courseDetail.branch_id = $scope.branchList[0].id;
        params.courseDetail.grade_id = $scope.gradeList[0].id;
    }
    $scope.courseDetail = params.courseDetail;

    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel')
    }
    $scope.handleModalConfirm = function () {
        $scope.disabled = true;
        if ($scope.optype == "修改") {
            //更新数据
            erp_courseService.update($scope.courseDetail, function (resp) {
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        } else {
            //添加数据
            erp_courseService.add($scope.courseDetail, function (resp) {
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
        $scope.disabled = false;
    }
}
"use strict"
angular.module('ework-ui').controller('erp_wfdComboModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox',
    erp_wfdComboModalController
]);

function erp_wfdComboModalController($rootScope,
                                     $scope,
                                     $uibModalInstance,
                                     $uibMsgbox) {
    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.handleModalConfirm = function () {
        if(!$scope.modalData.combo_name) {
            $uibMsgbox.error("套餐名称必填！");
            return;
        }
        if(!$scope.modalData.grade_id) {
            $uibMsgbox.error("年级必填！");
            return;
        }
        if(!$scope.modalData.combo_type || $scope.modalData.combo_type < 1) {
            $uibMsgbox.error("套餐类型必填！");
            return;
        }
        if(!$scope.modalData.branch_id) {
            $uibMsgbox.error("校区必填！");
            return;
        }
        if(!$scope.modalData.price) {
            $uibMsgbox.error("价格必填！");
            return;
        }
        if(!$scope.modalData.course_count) {
            $uibMsgbox.error("课次必填！");
            return;
        }

        $uibModalInstance.close();
    };
}

/**
 * 晚辅导套餐
 */
"use strict";
angular.module('ework-ui').controller('erp_wfdComboController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_wfdComboService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    erp_wfdComboController
    ]);

function erp_wfdComboController(
    $rootScope,
    $scope,
    $log,
    $state,
    $uibModal,
    $uibMsgbox,
    erp_wfdComboService,
    erp_gradeService,
    erp_studentBuOrgsService,
    PUBORGSelectedService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.opType = 'add'; 
    // 查询参数
    $scope.searchParam = {
        p_branch_id: '',
        p_combo_type: '',
        p_combo_name: '',
        p_grade_id: ''
    };
    
    // 列表信息
    $scope.dataList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.modalData = {};

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        // itemsPerPage: 10,
        // pagesLength: 9,
        // perPageOptions: [10, 20, 30, 40, 50],
        onChange: function(){
            $scope.query();
        }
    };

    $scope.paginationBars = [];

    $scope.img_src = ''; //图片预览

    // 处理【添加】按钮点击事件
    $scope.handleAdd = function () {
        $scope.opType = 'add';
        $scope.modalData = {};
        $scope.img_src = '';
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-wfd-combo.modal.html',
            controller: 'erp_wfdComboModalController',
            scope: $scope
        }).result.then(function () {
            $scope.add();
        }, function () { });
    };

    // 处理【修改】按钮点击事件
    $scope.handleUpdate = function (rowData) {
        $scope.opType = 'put';
        $scope.modalData = angular.copy(rowData);
        $scope.img_src = $scope.modalData.img_path;
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-wfd-combo.modal.html',
            controller: 'erp_wfdComboModalController',
            scope: $scope
        }).result.then(function () {
            $scope.update(rowData);
        }, function () { });
    };

    // 处理【删除】按钮点击事件
    $scope.handleDelete = function (data) {
        $uibMsgbox.confirm('确定删除选中数据？', function (result) {
            if(result != 'yes') {
                return;
            }
            $scope.remove(data.id);
        });
    };
    
    // 处理【查询】按钮点击事件
    $scope.handleQuery = function () {
        $scope.query();
    };

    // 添加
    $scope.add = function () {
        erp_wfdComboService.add($scope.modalData, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('添加成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 修改
    $scope.update = function (rowData) {
        erp_wfdComboService.update($scope.modalData, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('修改成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 删除
    $scope.remove = function (ids) {
        erp_wfdComboService.remove({
            ids: ids
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('删除成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 状态变化
    $scope.onStatusChange = function (data) {
        erp_wfdComboService.changeStatus({
            id: data.id,
            status: data.status
        }, function (resp) {
            if (!resp.error) {
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 查询
    $scope.query = function () {
        var queryParam = angular.copy($scope.searchParam);
        queryParam.pageSize = $scope.paginationConf.itemsPerPage;
        queryParam.currentPage = $scope.paginationConf.currentPage;
        erp_wfdComboService.query(queryParam, function (resp) {
            if (!resp.error) {
                $scope.dataList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    };

    // 上传的文件改变事件
    $scope.onFileChange = function(files) {
        var file = files[0];
        if(!file.type.match(/jpg|jpeg|bmp|png/i)) {
            $uibMsgbox.error("图片格式无效！");
            return;
        }
        var fileReader = new FileReader();
        fileReader.onload = function () {
            $scope.modalData.img_src = this.result;
            $scope.img_src = this.result;
            $scope.$apply();
        };
        fileReader.readAsDataURL(file);
    };

    // 查询年级
    $scope.queryGrade = function(){
        erp_gradeService.querySelectDatas({},function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 查询校区
    $scope.queryBuOrgs = function(){
        erp_studentBuOrgsService.query({},function(resp){
            if(!resp.error){
                $scope.branchList = resp.data;
                $scope.querySelectedOrg();
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 查询登录校区
    $scope.querySelectedOrg = function(){
        PUBORGSelectedService.query({},function(resp){
            if(!resp.error){
                $scope.selectedOrg = resp.data;
                if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
                    $.each($scope.branchList,function(i,b){
                        if(b.id == $scope.selectedOrg.id){
                            $scope.searchParam.p_branch_id = b.id;
                        }
                    });
                }else{
                    $uibMsgbox.warn("请选择校区!");
                }
                // 查询列表数据
                $scope.handleQuery();
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    };

    //导入
    $scope.handleImport = function () {
        // 跳转到导入页面
        $state.go('ordersMgrCourseWFDComboInput');
    };

    $scope.init = function () {
        // 套餐类型
        $scope.comboTypeList = [{"id" : 1, "name" : "月卡"},{"id" : 2, "name" : "次卡"}];
        // 查询年级
        $scope.queryGrade();
        // 查询校区
        $scope.queryBuOrgs();
    };
    $scope.init();
}

angular.module('ework-ui')
    .controller('erp_wfdComboInputModalController', [
        '$rootScope',
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        '$filter',
        'uibDateParser',
        'erp_gradeService',
        'erp_studentBuOrgsService',
        'PUBORGSelectedService',
        'data',
        erp_wfdComboInputModalController
    ]);

function erp_wfdComboInputModalController($rootScope,
                                          $scope,
                                          $uibModalInstance,
                                          $uibMsgbox,
                                          $filter,
                                          uibDateParser,
                                          erp_gradeService,
                                          erp_studentBuOrgsService,
                                          PUBORGSelectedService,
                                          data) {
    // 初始化信息
    $scope.modalData = angular.copy(data);

    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.handleModalConfirm = function () {
        if(!$scope.modalData.combo_name) {
            $uibMsgbox.error("套餐名称必填！");
            return;
        }
        if(!$scope.modalData.grade_id) {
            $uibMsgbox.error("年级必填！");
            return;
        }
        if(!$scope.modalData.combo_type || $scope.modalData.combo_type < 1) {
            $uibMsgbox.error("套餐类型必填！");
            return;
        }
        if(!$scope.modalData.branch_id) {
            $uibMsgbox.error("校区必填！");
            return;
        }
        if(!$scope.modalData.price) {
            $uibMsgbox.error("价格必填！");
            return;
        }
        if(!$scope.modalData.course_count) {
            $uibMsgbox.error("课次必填！");
            return;
        }
        if(!$scope.modalData.status) {
            $uibMsgbox.error("状态必填！");
            return;
        }

        angular.copy($scope.modalData, data);
        data.validateStatus = 2;
        data.errorMsgObj = {};
        data.errorList = [];
        $uibModalInstance.close();
    };

    // 查询年级
    $scope.queryGrade = function(){
        erp_gradeService.querySelectDatas({},function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 查询校区
    $scope.queryBuOrgs = function(){
        erp_studentBuOrgsService.query({},function(resp){
            if(!resp.error){
                $scope.branchList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    };

    $scope.init = function () {
        // 套餐类型
        $scope.comboTypeList = [{"id" : 1, "name" : "月卡"},{"id" : 2, "name" : "次卡"}];
        // 查询年级
        $scope.queryGrade();
        // 查询校区
        $scope.queryBuOrgs();
    };
    $scope.init();

}

angular.module('ework-ui')
    .controller('erp_wfdComboInputController', [
        '$rootScope',
        '$scope',
        '$log',
        '$state',
        '$uibMsgbox',
        '$uibModal',
        'erp_wfdComboService',
        erp_wfdComboInputController
    ]);

function erp_wfdComboInputController($rootScope,
                                     $scope,
                                     $log,
                                     $state,
                                     $uibMsgbox,
                                     $uibModal,
                                     erp_wfdComboService) {
    $scope.importSuccessProgress = 0;
    $scope.importFailureProgress = 0;
    $scope.importSuccessItems = 0;
    $scope.importFailureItems = 0;
    $scope.currentImportItems = 1;
    // 当前步骤
    $scope.currentStep = 1;

    // 所有导入数据
    $scope.allDataArray = [];

    // 过滤后的数据
    $scope.filteredData = [];

    // 检验成功的数据
    $scope.validateSuccess = [];

    // 校验失败
    $scope.validateFailure = [];

    // 未校验数据
    $scope.uncheckedData = [];

    // 显示的数据
    $scope.currentPageData = [];

    // 校验状态
    $scope.validateStatus = '0';

    // 是否可以开始校验
    $scope.validateDisabled = true;

    // 需要上传的文件
    $scope.fileUpload = null;

    // 等待模态框
    $scope.waitingModal = null;

    // 分页配置
    $scope.paginationConf = {
        currentPage: 1,
        totalItems: 0,
        itemsPerPage: 10,
        showFirstAndLast: true,
        onChange: function () {
            $scope.getPageData();
        }
    };

    // 所有的步骤
    $scope.steps = [{
        title: '1. 上传文件'
    }, {
        title: '2. 数据校验'
    }, {
        title: '3. 数据导入'
    }];

    // 校验文件
    $scope.handleValidate = function () {
        $scope.waitingModal = $uibMsgbox.waiting('正在上传，请稍候...')
        uploadFiles();
    };

    // 修改
    $scope.handleModify = function (data) {
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-wfd-combo-input.modal.html',
            controller: 'erp_wfdComboInputModalController',
            scope: $scope,
            resolve: {
                data: function () {
                    return data;
                }
            }
        }).result.then(function (res) {
        }, function () {});
    };

    // 上传的文件改变事件
    $scope.onFileChange = function (files) {
        $scope.fileUpload = files[0];
        $scope.validateDisabled = !$scope.fileUpload;
        $scope.$apply();
    };

    // 关闭当前页
    $scope.closeCurrentPage = function (argument) {
        history.back();
    };

    // 导入数据
    $scope.importData = function () {
        //TODO 控制导入按钮状态
        if($scope.allDataArray.length != $scope.validateSuccess.length) {
            $uibMsgbox.warn("存在校验失败的数据，不能导入！");
            return;
        }
        $uibMsgbox.confirm('即将导入校验成功的数据，共'
            + $scope.allDataArray.length + '条，确认导入？',
            function (res) {
                if (res == 'yes') {
                    $('#progress-modal').modal('show');
                    $scope.importSuccessItems = 0;
                    $scope.importFailureItems = 0;
                    $scope.importSuccessProgress = 0;
                    $scope.importFailureProgress = 0;
                    inputData(0);
                }
            })
    };

    // 全部导出
    $scope.exportAll = function (step) {
        //步骤2 与 步骤3的全部导出应该可以相同
        outputExcel($scope.allDataArray);
    };

    // 错误导出
    $scope.exportError = function (step) {
        //步骤2
        if(step == 2) {
            outputExcel($scope.validateFailure);
        }
        //TODO 步骤2 与 步骤3的错误导出应该不一样
    };

    // 导出Excel
    function outputExcel(dataList) {
        var param = {
            dataList: dataList
        };
        erp_wfdComboService.outputExcel(param, function (resp) {
            if (!resp.error) {
                //下载
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
                // window.open('../erp/coursemanagerment/downloadExcel?fileName=' + resp.data);
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }

    function inputData(index) {
        index = index || 0;
        var array = $scope.allDataArray;
        if (index >= array.length) {
            $scope.currentStep = 3;
            $('#progress-modal').modal('hide');
            return;
        }
        $scope.currentImportItems = index + 1;
        erp_wfdComboService.inputData(array[index], function (resp) {
            if (!resp.error) {
                $scope.importSuccessItems++;
                $scope.importSuccessProgress = Number(($scope.importSuccessItems / array.length * 100)).toFixed(2);
            } else {
                $scope.importFailureItems++;
                $scope.importFailureProgress = Number(($scope.importFailureItems / array.length * 100)).toFixed(2)
            }
            inputData(index + 1);
        })
    }

    function uploadFiles() {
        $.ajaxFileUpload({
            url: '/erp/coursemanagerment/package/inputExcel',
            secureuri: false,
            fileElementId: 'fileUploadElementId',
            dataType: 'json',
            method: 'post',
            success: function (resp) {
                if ($scope.waitingModal) {
                    $scope.waitingModal.close();
                }
                if (!resp.error) {
                    $scope.currentStep = 2;
                    $scope.allDataArray.splice(0, $scope.allDataArray.length);
                    $scope.allDataArray = resp.data;
                    validateData();
                } else {
                    $uibMsgbox.warn(resp.message)
                }
            },
            error: function (html, status, e) {
                if ($scope.waitingModal && $scope.waitingModal.close) {
                    $scope.waitingModal.close();
                }
                $uibMsgbox.error('上传失败！' + status)
            }
        })
    }

    // 获取某一页的数据
    $scope.getPageData = function () {
        var currentPage = $scope.paginationConf.currentPage;
        var itemsPerPage = $scope.paginationConf.itemsPerPage;
        var end = itemsPerPage * currentPage;
        var start = end - itemsPerPage;
        var newArray = $scope.filteredData.slice(start, end);
        $scope.currentPageData.splice(0, $scope.currentPageData.length);
        for (var i = 0; i < newArray.length; i++) {
            $scope.currentPageData.push(newArray[i]);
        }
    };

    // 过滤校验数据
    $scope.filterCheckData = function () {
        if ($scope.validateStatus == 0) {
            $scope.filteredData = $scope.allDataArray;
        } else if ($scope.validateStatus == 1) {
            $scope.filteredData = $scope.uncheckedData;
        } else if ($scope.validateStatus == 2) {
            $scope.filteredData = $scope.validateSuccess;
        } else if ($scope.validateStatus == 3) {
            $scope.filteredData = $scope.validateFailure;
        }
        $scope.paginationConf.currentPage = 1;
        $scope.paginationConf.totalItems = $scope.filteredData.length;
        $scope.paginationConf.onChange();
    };
    $scope.goback=function() {
        window.history.go(-1)
    }
    // 数据校验
    function validateData() {
        var modalInstance = $uibMsgbox.waiting('正在校验数据，请稍候...');
        var param = {
            dataList: $scope.allDataArray
        };
        erp_wfdComboService.checkAll(param, function (resp) {
            modalInstance.close();
            if (!resp.error) {
                $scope.allDataArray = resp.data;
                $scope.validateSuccess.splice(0, $scope.validateSuccess.length);
                $scope.validateFailure.splice(0, $scope.validateFailure.length);

                for (var i = 0; i < $scope.allDataArray.length; i++) {
                    var item = $scope.allDataArray[i];
                    if (!item.errorList) {
                        item.validateStatus = 1;
                        $scope.uncheckedData.push(item)
                    } else if (item.errorList.length == 0) {
                        item.validateStatus = 2;
                        $scope.validateSuccess.push(item)
                    } else {
                        item.validateStatus = 3;
                        item.errorMsgObj = {};
                        for (var j = 0; j < item.errorList.length; j++) {
                            item.errorMsgObj[item.errorList[j].field_name] = item.errorList[j].err_msg;
                        }
                        $scope.validateFailure.push(item)
                    }
                }
                $scope.filterCheckData();
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    }
}

"use strict"
angular.module('ework-ui').controller('erp_ydyLadderModalController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    '$uibModalInstance',
    function ($rootScope,
              $scope,
              $uibMsgbox,
              $uibModalInstance,
              erp_ydyLadderModalController) {
        $scope.handleModalCancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        $scope.handleModalConfirm = function () {
            if(!$scope.ladderModelData.ladder_level_name) {
                $uibMsgbox.error("阶梯名称必填！");
                return;
            }
            if(!$scope.ladderModelData.level_condition) {
                $uibMsgbox.error("达成条件必填！");
                return;
            }
            if(!$scope.ladderModelData.level_price) {
                $uibMsgbox.error("达成单价必填！");
                return;
            }

            $uibModalInstance.close();
        };
    }
]);

angular.module('ework-ui').controller('erp_ydyLadderController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibModal',
    '$uibMsgbox',
    'erp_gradeService',
    'erp_courseService',
    'erp_courseLadderService',
    function ($rootScope,
              $scope,
              $log,
              $uibModal,
              $uibMsgbox,
              erp_gradeService,
              erp_courseService,
              erp_courseLadderService) {
        $scope.viewCtrl = {
            opType: 'add',
            show: 'list',
            rowOpType: 'add'
        };
        $scope.ladderList = []; // 阶梯管理列表

        $scope.dataList = []; // 阶梯列表

        $scope.deleteDataList = []; // 删除的阶梯列表

        $scope.courseLadderRelList = []; //适用课程

        $scope.deleteCourseLadderRelList = []; // 删除的适用课程

        $scope.img_src = ''; //图片预览

        $scope.searchParam = {
            p_ladder_name: ''
        };

        $scope.pageConf = {
            currentPage: 1,
            totalItems: 0,
            itemsPerPage: 10,
            onChange: function () {
                $scope.query();
            }
        };

        // 上传的文件改变事件
        $scope.onFileChange = function(files) {
            var file = files[0];
            if(!file.type.match(/jpg|jpeg|bmp|png/i)) {
                $uibMsgbox.error("图片格式无效！");
                return;
            }
            var fileReader = new FileReader();
            fileReader.onload = function () {
                $scope.ladderModelData.img_src = this.result;
                $scope.img_src = this.result;
                $scope.$apply();
            };
            fileReader.readAsDataURL(file);
        };

        $scope.ladderModelData = {}; //阶梯列表的模态数据

        // 与表单绑定的数据，用于添加和修改
        $scope.modalData = {};

        // 获取当前页面数据
        $scope.query = function () {
            var queryParam = $scope.searchParam;
            queryParam.pageSize = $scope.pageConf.itemsPerPage;
            queryParam.currentPage = $scope.pageConf.currentPage;
            erp_courseLadderService.query(queryParam, function (resp) {
                if (!resp.error) {
                    $scope.ladderList = resp.data;
                    $scope.pageConf.totalItems = resp.total || 0;

                    // 显示课程阶梯列表
                    $scope.showList();
                } else {
                    $uibMsgbox.error(resp.message)
                }
            })
        };

        $scope.handleQuery = function () {
            $scope.query();
        };

        // 保存课程阶梯
        $scope.handleSaveLadder = function () {
            var commitData = _.cloneDeep($scope.modalData);
            if(!$scope.dataList || $scope.dataList.length < 1) {
                $uibMsgbox.error('阶梯列表：不能为空');
                return;
            }
            if(!$scope.courseLadderRelList || $scope.courseLadderRelList.length < 1) {
                $uibMsgbox.error('适用课程：不能为空');
                return;
            }
            commitData.ladderList = $scope.dataList.concat($scope.deleteDataList);
            commitData.courseLadderRelList = $scope.courseLadderRelList.concat($scope.deleteCourseLadderRelList);
            if($scope.viewCtrl.opType == 'add') {
                erp_courseLadderService.add(commitData, function (resp) {
                    if (!resp.error) {
                        $uibMsgbox.success('添加成功！');
                        $scope.query();
                    } else {
                        $uibMsgbox.error(resp.message);
                    }
                });
            } else if($scope.viewCtrl.opType == 'edit') {
                erp_courseLadderService.update(commitData, function (resp) {
                    if (!resp.error) {
                        $uibMsgbox.success('修改成功！');
                        $scope.query();
                    } else {
                        $uibMsgbox.error(resp.message);
                    }
                });
            }
        };
        // 添加课程
        $scope.insertCourse = function (course) {
        	if (!$scope.modalData.grade_id) {
        		$uibMsgbox.alert("请先选择年级！");
        		return;
        	}
        	
        	if (course.grade_id != $scope.modalData.grade_id) {
        		$uibMsgbox.alert("课程所属年级必须和阶梯所选年级一致！");
        		return;
        	}
        	
            if (_.some($scope.courseLadderRelList, {course_id: course.id})) {
                $uibMsgbox.alert('课程已存在，不用重复添加！');
                return;
            }
            var courseLadderRel = {
                course_id : course.id,
                course_code : course.course_no,
                course_name : course.course_name
            };
            if (course.actual_people_count && course.actual_people_count > 0) {
                courseLadderRel.is_course_book = 1; //已报班
            } else {
                courseLadderRel.is_course_book = 0; //未报班
            }
            $scope.courseLadderRelList.push(courseLadderRel);
        };
        // 移除课程
        $scope.handleRemoveCourse = function (rowData, index) {
            if(rowData.id && rowData.is_course_book && rowData.is_course_book == 1) {
                $uibMsgbox.alert('课程已报名，不能取消绑定！');
                return;
            }
            $uibMsgbox.confirm('确定移除选中课程？', function (result) {
                if(result != 'yes') {
                    return;
                }
                //非新增行
                if(rowData.id) {
                    rowData.status = 2; //删除状态
                    $scope.deleteCourseLadderRelList.push(rowData);
                }
                $scope.courseLadderRelList.splice(index, 1);
            });
        };
        // 添加课程阶梯
        $scope.handleAddLadder = function () {
            $scope.showLadderDetail('add');
        };

        // 修改课程阶梯
        $scope.handleEditLadder = function (item) {
            $scope.showLadderDetail('edit', item);
        };

        // 处理【删除】
        $scope.handleRemoveLadder = function (id) {
            $uibMsgbox.confirm('确定删除选中阶梯？', function (result) {
                if(result != 'yes') {
                    return;
                }
                $scope.remove(id);
            });
        };

        // 显示课程阶梯详情
        $scope.showLadderDetail = function (opType, detail) {
            detail = detail || {
                    ladder_type : 1,
                    ladder_algorithm : 1
                };
            $scope.modalData = _.cloneDeep(detail);
            $scope.dataList = $scope.modalData.ladderList || []; // 阶梯列表
            $scope.courseLadderRelList = $scope.modalData.courseLadderRelList || []; //适用课程
            $scope.deleteDataList = [];
            $scope.deleteCourseLadderRelList = [];
            $scope.viewCtrl.opType = opType;
            $scope.viewCtrl.show = 'detail';
        };

        // 显示课程阶梯列表
        $scope.showList = function () {
            $scope.viewCtrl.show = 'list';
        };

        // 添加阶梯列表项
        $scope.handleRowAdd = function () {
            $scope.rowOpType = 'add';
            $scope.ladderModelData = {};
            $scope.img_src = '';
            $uibModal.open({
                size: 'lg',
                templateUrl: 'templates/block/modal/course-ydy-ladder.modal.html',
                controller: 'erp_ydyLadderModalController',
                scope: $scope
            }).result.then(function () {
                $scope.dataList.push($scope.ladderModelData);
            }, function () { });
        };

        // 修改阶梯列表项
        $scope.handleRowEdit = function (rowData, index) {
            $scope.rowOpType = 'edit';
            $scope.ladderModelData = _.cloneDeep(rowData);
            $scope.img_src = $scope.ladderModelData.img_src || $scope.ladderModelData.img_path;
            $uibModal.open({
                size: 'lg',
                templateUrl: 'templates/block/modal/course-ydy-ladder.modal.html',
                controller: 'erp_ydyLadderModalController',
                scope: $scope
            }).result.then(function () {
                //非新增行
                if($scope.ladderModelData.id) {
                    $scope.ladderModelData.status = 1; //修改状态
                }
                $scope.dataList[index] = $scope.ladderModelData;
            }, function () { });
        };

        // 删除阶梯列表项
        $scope.handleRowDelete = function (rowData, index) {
            $uibMsgbox.confirm('确定移除选中数据？', function (result) {
                if(result != 'yes') {
                    return;
                }
                //非新增行
                if(rowData.id) {
                    rowData.status = 2; //删除状态
                    $scope.deleteDataList.push(rowData);
                }
                $scope.dataList.splice(index, 1);
            });
        };

        // 查询年级
        $scope.queryGrade = function(){
            erp_gradeService.querySelectDatas({},function(resp){
                if(!resp.error){
                    $scope.gradeList = resp.data;
                }else{
                    $uibMsgbox.error(resp.message);
                }
            })
        };

        /**
         * 查询课程
         */
        $scope.queryCourse = function(){
            var param = {
                grade_id:$scope.modalData.grade_id ? $scope.modalData.grade_id : -1,
                business_type:2 //1对1
            };
            erp_courseService.query(param,function(resp){
                if(!resp.error){
                    $scope.selectingCourseList = resp.data;

                }else{
                    $uibMsgbox.alert(resp.message);
                }
            })
        };

        // 删除
        $scope.remove = function (ids) {
            erp_courseLadderService.remove({
                ids: ids
            }, function (resp) {
                if (!resp.error) {
                    $uibMsgbox.success('删除成功！');
                    $scope.query();
                } else {
                    $uibMsgbox.error(resp.message);
                }
            })
        };

        // 状态变化
        $scope.onStatusChange = function (data) {
            erp_courseLadderService.changeStatus({
                id: data.id,
                status: data.status
            }, function (resp) {
                if (!resp.error) {
                    $scope.query();
                } else {
                    $uibMsgbox.error(resp.message);
                }
            })
        };

        // 初始化
        $scope.initial = function () {
            // 查询年级
            $scope.queryGrade();
            // 阶梯类型
            $scope.ladderTypeList = [{id:1, name: '课程累计课时'}];
            // 阶梯算法
            $scope.ladderAlgorithmList = [{id:1, name: '通用算法'}];
            // 查询
            $scope.handleQuery();
        };

        $scope.initial();
    }
]);

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_courseYdyController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_courseService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    'erp_teacherService',
    erp_courseYdyController
]);

function erp_courseYdyController($rootScope,
                                 $scope,
                                 $log,
                                 $state,
                                 $uibModal,
                                 $uibMsgbox,
                                 erp_courseService,
                                 erp_gradeService,
                                 erp_studentBuOrgsService,
                                 PUBORGSelectedService,
                                 erp_teacherService) {

    /**
     * 查询年级
     */
    function queryGrade() {
        erp_gradeService.querySelectDatas({
            branch_id: $scope.searchParam.branch_id ? $scope.searchParam.branch_id : -1,
            season_id: $scope.searchParam.season_id ? $scope.searchParam.season_id : -1,
        }, function (resp) {
            if (!resp.error) {
                $scope.gradeList = resp.data;
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBranchOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                }
                //查询选中的组织，并为校区设置默认值
                querySelectedOrg();
            }
        })
    }

    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && ($scope.selectedOrg.type == "4" || $scope.selectedOrg.type == "3" )) {
                    if($scope.selectedOrg.type == "4") {
                        $.each($scope.branchList, function (i, b) {
                            if (b.id == $scope.selectedOrg.id) {
                                $scope.searchParam.branch_id = b.id;
                            }
                        });
                    }
                } else {
                    $uibMsgbox.warn("请选择团队或校区");
                }
                //界面初始化查询
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    $scope.init = function () {

        $scope.searchParam = { // 搜索条件
            branch_id:-1
        };
        $scope.queryParam = {};

        $scope.selectAllFlag = false;//批量选中标识

        $scope.selectAllFlagForModal = false;//弹出框批量选中标识

        $scope.statusList = [{"id": 1, "name": "启用"}, {"id": 2, "name": "停用"}];//状态列表

        $scope.isAllList = [{"id": 1, "name": "是"}, {"id": 0, "name": "否"}];//是否应用所有校区

        $scope.courseList = []; // 课程列表

        //销售类型
        $scope.productTypeList = [
            {
                product_type:1,
                product_type_name:'正价 '
            },
            {
                product_type:2,
                product_type_name:'促销 '
            },
            {
                product_type: 3,
                product_type_name:'赠送 '
            }
        ];

        /**
         * 分页配置
         * @param  {Number} currentPage     [当前页面，初始化时默认为1]
         * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
         * @param  {Number} itemsPerPage    [每页显示条数]
         * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
         * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
         * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
         */
        $scope.paginationConf = {
            currentPage: 1, //当前页
            totalItems: 0,
            itemsPerPage: 10,
            onChange: function () {
                $scope.query();
            }
        };
        queryGrade();
        queryBranchOrgs();
    }


    // 修改
    $scope.updateCourse = function (course) {
        var courseDetail = {
            id: course.id,
            course_no: course.course_no,
            course_name: course.course_name,
            grade_id: course.grade_id,
            unit_price: course.unit_price,
            start_date: course.start_date,
            end_date: course.end_date,
            hour_len: course.hour_len,
            description: course.description,
            business_type: 2,
            branchInfos: course.branchInfos,
            product_type: course.product_type,
            is_all:course.is_all
        };
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'ydy_modal.html',
            controller: 'erp_ydyModalController',
            scope: $scope,
            resolve: {
                params: function () {
                    return {
                        optype: "修改",
                        courseDetail: courseDetail
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("修改成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };

    $scope.handleImportClass = function () {
        // 跳转到一对一课程导入页面
        $state.go('ordersMgrCourseYDYInput', {
            path: '/orders/ordersMgr/ordersMgrCourseYDYInput',
            href: 'templates/erp/course/fileUpload_ydy.html'
        })
    }
    // 添加
    $scope.addCourse = function () {
        var courseDefault = {};
        courseDefault.branch_id = $scope.searchParam.branch_id;
        courseDefault.start_date = new Date();
        courseDefault.end_date = new Date();
        courseDefault.course_no = '服务端自动生成';
        courseDefault.business_type = 2;
        courseDefault.is_all = $scope.searchParam.is_all;
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'ydy_modal.html',
            controller: 'erp_ydyModalController',
            scope: $scope,
            resolve: {
                params: function () {
                    return {
                        optype: "添加",
                        courseDetail: courseDefault,
                        selectAllFlagForModal: $scope.selectAllFlagForModal
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("添加成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };

    // 查询方法
    $scope.query = function () {
        erp_courseService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            business_type: 2,
            branch_id: $scope.searchParam.branch_id,
            status: $scope.searchParam.status,
            course_name: $scope.searchParam.course_name,
            grade_id: $scope.searchParam.grade_id
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.courseList = resp.data;
                //拼接校区显示字段
                for (var i in $scope.courseList) {
                    var temp = "";
                    for (var j in $scope.courseList[i].branchInfos) {
                        temp += ("," + $scope.courseList[i].branchInfos[j].org_name);
                    }
                    $scope.courseList[i].branch_names = temp.substr(1);
                }
            } else {
                $uibMsgbox.error(resp.message);
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.courseList = [];
            }
            $scope.selectAllFlag = false;
        });
    };

    /*
     * 单记录上架下架
     * @param flag true-生效 false-无效
     */
    $scope.onStatusChange = function (course) {
        var ids = course.id.toString();
        var status = course.status.toString();
        course.status = course.status == 1 ? 2 : 1;
        if (confirm("是否确认上架/下架")) {
            erp_courseService.changeStatus({"ids": ids, "status": status}, function (resp) {
                if (!resp.error) {
                    $scope.query();
                    $uibMsgbox.alert("操作成功");
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    }
    /**
     * 批量上架，下架, 删除
     * @param opt 1表示上架，2表示下架 ，0表示删除
     */
    $scope.batchChangeStatus = function (status) {
        var ids = $scope.getSelectedIds();
        if (!ids) {
            $uibMsgbox.error("未选中记录");
            return;
        }
        var status = status.toString();
        if (status == 0) {
            if (confirm("是否确认删除")) {
                erp_courseService.changeStatus({"ids": ids, "status": status}, function (resp) {
                    if (!resp.error) {
                        $scope.query();
                        $uibMsgbox.alert("操作成功");
                    } else {
                        $uibMsgbox.error(resp.message);
                    }
                });
            }
        } else {
            if (confirm("是否确认上架/下架")) {
                erp_courseService.changeStatus({"ids": ids, "status": status}, function (resp) {
                    if (!resp.error) {
                        $scope.query();
                        $uibMsgbox.alert("操作成功");
                    } else {
                        $uibMsgbox.error(resp.message);
                    }
                });
            }
        }
    };

    //多选监控
    $scope.$watch('selectAllFlag', function (newValue, oldValue) {

        var i;
        if (newValue == true) {
            for (i in $scope.courseList) {
                $scope.courseList[i].selectItemFlag = true;
            }
        } else {
            for (i in $scope.courseList) {
                $scope.courseList[i].selectItemFlag = false;
            }
        }
    });
    //获取所有选中的id
    $scope.getSelectedIds = function () {
        var selectItemFlag = null;
        var i = null;
        var syncTeacherIds = "";
        for (i in $scope.courseList) {
            selectItemFlag = $scope.courseList[i].selectItemFlag;
            if (selectItemFlag) {
                //拼接需要同步到叮当的教师id
                syncTeacherIds += ("," + $scope.courseList[i].id);
            }
        }
        return syncTeacherIds.substring(1);
    }
    $scope.init();
}
angular.module('ework-ui')
    .controller('erp_ydyModalController', [
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        'erp_courseService',
        'params',
        erp_ydyModalController
    ])

function erp_ydyModalController($scope,
                                $uibModalInstance, $uibMsgbox, erp_courseService, params) {
    $scope.optype = params.optype;
    $scope.relationBranchList = [];
    angular.copy($scope.$parent.branchList, $scope.relationBranchList);
    $scope.gradeList = $scope.$parent.gradeList;

    if ($scope.optype == "添加") {
        //设置默认值
        params.courseDetail.grade_id = $scope.gradeList[0].id;
        if (params.courseDetail.branch_id) {
            $.each($scope.relationBranchList, function (i, n) {
                if (params.courseDetail.branch_id == n.id) {
                    n.selectFlag = true;
                }
            });
        }
    }
    $scope.courseDetail = params.courseDetail;
    if ($scope.optype == "修改") {
        //如果是修改操作，遍历已经关联的校区，将校区复选框选上
        if ($scope.courseDetail.branchInfos) {
            for (var i in $scope.courseDetail.branchInfos) {
                for (var j in $scope.relationBranchList) {
                    if ($scope.relationBranchList[j].id == $scope.courseDetail.branchInfos[i].id) {
                        $scope.relationBranchList[j].selectFlag = true;
                    }
                }
            }
        }
    }
    //获取所有选中的id
    $scope.getSelectedIds = function () {
        var selectFlag = null;
        var i = null;
        var relationIds = "";
        for (i in $scope.relationBranchList) {
            selectFlag = $scope.relationBranchList[i].selectFlag;
            if (selectFlag) {
                relationIds += ("," + $scope.relationBranchList[i].id);
            }
        }
        return relationIds.substring(1);
    }
    /**
     * 模态框取消
     */
    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel')
    }
    $scope.switchSelectAll = function (event) {
        for (var i in $scope.relationBranchList) {
            $scope.relationBranchList[i].selectFlag = event.target.checked;
        }
    }
    /**
     * 模态框确认
     */
    $scope.handleModalConfirm = function () {
        if(!checkStartEndTime( $scope.courseDetail.start_date, $scope.courseDetail.end_date)) {
            $uibMsgbox.warn("结课日期小于开课日期");
            return;
        }
        if($scope.courseDetail.unit_price<0){
            $uibMsgbox.error("课程单价不允许为负数");
            return;
        }
        $scope.courseDetail.relationIds = $scope.getSelectedIds();
        $scope.courseDetail.branchInfos = [];
        if ($scope.optype == "修改") {
            //更新数据
            erp_courseService.update($scope.courseDetail, function (resp) {
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        } else {
            //添加数据
            erp_courseService.add($scope.courseDetail, function (resp) {
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    }
}
/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_delayCourseController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    '$state',
    '$uibModal',
    'erp_courseService',
    'erp_subjectService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'erp_TeacherSearchService',
    'erp_timeSeasonService',
    'PUBORGSelectedService',
    'erp_delayCourseService',
    erp_delayCourseController
    ]);

function erp_delayCourseController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $state,
    $uibModal,
    erp_courseService,
    erp_subjectService,
    erp_gradeService,
    erp_studentBuOrgsService,
    erp_TeacherSearchService,
    erp_timeSeasonService,
    PUBORGSelectedService,
    erp_delayCourseService
  ) {
    $scope.checkAllFlag = false;

    // 搜索课程名称
    $scope.searchParam = {
        course_Name: '',
        branch_id:-1
    };
    $scope.queryParam = {
        };

    
    // 课程列表
    $scope.courseList = [];

    $scope.selectedCourseList = [];

    function getSelectedCourseList () {
        var courseList = [];
        _.forEach($scope.courseList ,function(course) {
            if (course.selectFlag) {
                courseList.push(course)
            }
        })
        return courseList;
    }
    
    //获取所有选中的id
    function getSelectedIds () {
        var ids = "";
        _.forEach($scope.courseList ,function(course) {
            if (course.selectFlag) {
            	ids+= "," + course.id;
            }
        })
        if (!ids) {
            $uibMsgbox.alert('请选择要操作的课程！');
        }
        return ids.substring(1);
    }

    // 全选事件
    $scope.onCheckAll = function () {
        _.forEach($scope.courseList ,function(course) {
            course.selectFlag = $scope.checkAllFlag;
        })
    }

    // 某一行Checkbox选择事件
    $scope.onCourseChecked = function (course) {
        $scope.checkAllFlag = _.every($scope.courseList, {selectFlag: true});
    }

    
    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
            grade_id:$scope.searchParam.grade_id?$scope.searchParam.selectedCourse.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                    $scope.modalBranchList = _.cloneDeep(resp.data);
                    //将全部option添加到branchList
                    $scope.branchList.unshift(
                        {
                            id : -1,
                            org_name:"-- 全部 --"
                        }
                    );
                    $scope.searchParam.branchId = -1;
                }
                //查询选中的组织，并为校区设置默认值
                querySelectedOrg();
            }
        })
    }

    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && ($scope.selectedOrg.type == "4" || $scope.selectedOrg.type == "3" )) {
                    if($scope.selectedOrg.type == "4") {
                        $.each($scope.branchList, function (i, b) {
                            if (b.id == $scope.selectedOrg.id) {
                                $scope.searchParam.branchId = b.id;
                            }
                        });
                    }
                } else {
                    $uibMsgbox.warn("请选择团队或校区");
                }
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 选择课程
     * @param grade
     */
    $scope.selectCourse = function(grade){
        $scope.queryParam.selectedCourse = grade;
        querySubject();
    }

    /**
     * 选择科目
     * @param subject
     */
    $scope.selectSubject = function(subject){
        $scope.queryParam.selectedSubject = subject;
    }

    // 查询方法
    $scope.query = function () {
        erp_delayCourseService.listDelayCourse({

            branchId:$scope.searchParam.branchId,
            seasonId:$scope.searchParam.seasonId,
            subjectId:$scope.searchParam.subjectId,
            gradeId:$scope.searchParam.gradeId,
            courseSearchInfo:$scope.searchParam.courseSearchInfo,
            teacherSearchInfo:$scope.searchParam.teacherSearchInfo,
            delayCourseDateString:$scope.searchParam.delayCourseDateString
        }, function (resp) {
            if (!resp.error) {
                $scope.courseList=resp.data;
                $scope.onCourseChecked();
                $scope.delayCourseDateString = $scope.searchParam.delayCourseDateString;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };


    $scope.querySelectDatas = function (id) {
    	erp_courseService.querySelectDatas({
    		id : id
    	},function(resp) {
            if(!resp.error) {
                $scope.lastCourseList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };

    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();
    // 当前步骤
    $scope.currentStep = 1;

    // 所有的步骤
    $scope.steps = [{
        title: '第一步：选择课程'
    }, {
        title: '第二步：延课清单'
    }, {
        title: '第三步：延课完成'
    }];

    $scope.back = function(){
        $scope.currentStep = $scope.currentStep-1;
    }

    //查询课次变动
    $scope.querycourseSchedullingChangeInfo = function (courseId,courseTime) {
        $scope.courseSchedullingChangeInfoList = {};
        erp_delayCourseService.changeSchedulingInfo({
            courseId:courseId,
            courseTime:courseTime
        }, function (resp) {
            if (!resp.error) {
                $scope.courseSchedullingChangeInfoList =resp.data;
                $('#delayCourseViewcourseSchedullingChangeInfo').modal('show');
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };
    //显示变动详情
    $scope.showCourseSchedullingChangeInfo = function(course) {
        $.each($scope.courseChangeInfoList,function(i,n){
            if(n.courseId == course.courseId && course.courseTime ==n.courseTime){
                $scope.courseSchedullingChangeInfoList =n.courseSchedullingChangeInfoList;
                $('#delayCourseViewcourseSchedullingChangeInfo').modal('show');
                return false;
            }
        });
    };
    //制单人
    if (!$rootScope.curEmployee) {
        $rootScope.curEmployee = {}
    }
    $scope.currentPeple = $rootScope.curEmployee.employeeName;
    $scope.$watch('curEmployee', function(newValue) {
        if (newValue && newValue.employeeId) {
          $scope.currentPeple = $rootScope.curEmployee.employeeName;
        }
    })
    $scope.currentDate = Format("yyyy-MM-dd",new Date());
    //跳转到延课清单
    $scope.goDelayCourseInfo = function() {

        $scope.selectedCourseList = getSelectedCourseList();
        if(!$scope.selectedCourseList ||!$scope.selectedCourseList.length) {
            $uibMsgbox.error("请选择延课记录");
            return;
        }
        $scope.selectedCourseChangeInfoList = {};
        var _watingModal = $uibMsgbox.waiting('正在处理，请稍候...');
        erp_delayCourseService.listCourseChangeInfo(
            $.map($scope.selectedCourseList, function (n, i) {
                return {
                    course_id: n.courseId,
                    course_times: n.courseTime
                }
            }) ,
           function (resp) {
                if (!resp.error) {
                    $scope.courseChangeInfoList =resp.data;
                    var courseChangeInfoTmp = null;
                    $.each($scope.selectedCourseList,function(i,n){
                        for (var t in $scope.courseChangeInfoList) {
                            courseChangeInfoTmp = $scope.courseChangeInfoList[t];
                           if(courseChangeInfoTmp.courseId == n.courseId) {
                               n.courseDateBeforeDelay = courseChangeInfoTmp.courseSchedullingChangeInfoList[courseChangeInfoTmp.courseTime-1].courseDateBeforeDelay;
                               n.courseDateAfterDelay = courseChangeInfoTmp.courseSchedullingChangeInfoList[courseChangeInfoTmp.courseTime-1].courseDateAfterDelay;
                               break;
                           }
                        }
                    });
                    $scope.currentStep = 2;
                } else {
                    $uibMsgbox.error(resp.message);
                }
               _watingModal.close();
            }
        );

    }

    //点击延课按钮
    $scope.showReasonInputDialog = function(){
        $('#delayCourseInputReason').modal('show');
    }

    $scope.delayReason = "";
    $scope.delayRecordId = null;//延课单ID
    $scope.delayCourseBatch = function(){
        if(!$scope.delayReason) {
            $uibMsgbox.alert("延课原因必填");
            return;
        }
        $('#delayCourseInputReason').modal('hide');
        $uibMsgbox.confirm('一旦延课后，将不能撤消，是否继续？', function (res) {
            if (res == 'yes') {
                var _watingModal = $uibMsgbox.waiting('正在处理，请稍候...');
                erp_delayCourseService.batchDelayCourse(
                    {
                        delayCourseDate:$scope.delayCourseDateString,
                        reason:$scope.delayReason,
                        delayCourseDetailList : $.map($scope.selectedCourseList, function (n, i) {
                            return {
                                courseId: n.courseId,
                                courseTime: n.courseTime
                            }
                        })
                    },
                    function (resp) {
                        if (!resp.error) {
                            $scope.currentStep = 3;
                            $scope.delayRecordId = resp.data;
                        } else {
                            $uibMsgbox.error(resp.message);
                        }
                        _watingModal.close();
                    }
                );
            }
        })
    }

    $scope.queryDelayReocedCourseDetail = function (id) {
        window.location.href="?recordId="+$scope.delayRecordId+"#/orders/delayrecord/detail";
    };

    $scope.backForDelayCourse = function(){
        $scope.courseList={};
        $scope.currentStep = 1;
    }
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_delayRecordController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    '$state',
    '$uibModal',
    'erp_employeeService',
    'erp_delayCourseService',
    erp_delayRecordController
    ]);

function erp_delayRecordController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $state,
    $uibModal,
    erp_employeeService,
    erp_delayCourseService
  ) {

    $scope.searchParam = {};

    $scope.delayRecordList = [];
    $scope.employee = {};


    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };


    $scope.queryDelayReocedCourseDetail = function (id) {
    	window.location.href="?recordId="+id+"#/orders/delayrecord/detail";
    };


    // 查询方法
    $scope.query = function () {
    	erp_delayCourseService.listDelayRecord({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
			createUser:$scope.employee.employee_id,
            createDate:$scope.searchParam.createDate,
			delayCourseDate:$scope.searchParam.delayCourseDate
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.delayRecordList=resp.data;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };


    // 选中关联员工输入框，清空输入框内容
    $scope.onEmployeeNameFocus = function() {

    };

    // 鼠标离开关联员工控件处理事件
    $scope.onEmployeeNameBlur = function() {
        if(!$scope.employee.employee_id) {
            $scope.employee.employee_name = '';
        }
    };


    // 关联员工输入框，名称变化则重新查询员工信息
    $scope.onEmployeeNameChange = function() {
        $scope.isDown = 'loading';
        $scope.searchResult = [];
        $scope.employee.employee_id = null;
        erp_employeeService.query({
                row_num: 10,
                currentPage: 1,
                pageSize: 10,
                employee_name: $scope.employee.employee_name
            },
            function(resp) {
                $scope.isDown = '';
                if (!resp.error) {
                    $scope.searchResult = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    }

    // 从转入学员控件的查询结果中选择一条数据触发该事件
    $scope.selectEmployee = function(employee) {
        debugger;
        $scope.employee.employee_id = employee.id;
        $scope.employee.teacher_name
            = $scope.employee.nickname
            = $scope.employee.employee_name
            = employee.employee_name;

        $scope.searchResult = [];
    };
}

   angular.module('ework-ui').controller('erp_delayRecordDetailController', [
        '$rootScope',
        '$scope',
        '$log',
        '$uibMsgbox', // 消息提示框服务，其他服务按需引入
        '$state',
        '$uibModal',
        'erp_delayCourseService',
        erp_delayRecordDetailController
    ]);

    function erp_delayRecordDetailController(
        $rootScope,
        $scope,
        $log,
        $uibMsgbox,
        $state,
        $uibModal,
        erp_delayCourseService
    ) {

        /**
         * 分页配置
         * @param  {Number} currentPage     [当前页面，初始化时默认为1]
         * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
         * @param  {Number} itemsPerPage    [每页显示条数]
         * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
         * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
         * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
         */
        $scope.paginationConf = {
            currentPage: 1, //当前页
            totalItems: 0,
            itemsPerPage: 10,
            onChange: function(){
                $scope.listDelayRecordCourseDetail();
            }
        };

        $scope.delayRecordCourseDetailList = {};
    $scope.listDelayRecordCourseDetail = function() {
        erp_delayCourseService.listDelayRecordCourseDetail({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            delayCourseRecordId : $("#rootIndex_recordId").val()
        },function(resp){
            if(!resp.error) {
                $scope.delayRecordCourseDetailList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }
    $scope.listDelayRecordCourseDetail();

    $scope.listDelayCourseSchedulingDetail = function(){

    }

    //查询课次变动
    $scope.listDelayCourseSchedulingChangeInfo = function (delayCourseId) {
        $scope.courseSchedullingChangeInfoList = {};
        erp_delayCourseService.listDelayCourseSchedulingChangeInfo({
            delayCourseId:delayCourseId
        }, function (resp) {
            if (!resp.error) {
                $scope.courseSchedullingChangeInfoList =resp.data;
                $('#delayRecordCourseSchedullingChangeInfo').modal('show');
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };
}
/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_mtDelayCourseController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    '$state',
    '$uibModal',
    'erp_courseService',
    'erp_subjectService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'erp_TeacherSearchService',
    'erp_timeSeasonService',
    'PUBORGSelectedService',
    'erp_delayCourseService',
    erp_mtDelayCourseController
    ]);

function erp_mtDelayCourseController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $state,
    $uibModal,
    erp_courseService,
    erp_subjectService,
    erp_gradeService,
    erp_studentBuOrgsService,
    erp_TeacherSearchService,
    erp_timeSeasonService,
    PUBORGSelectedService,
    erp_delayCourseService
  ) {

    // 课程类型
    $scope.courseTypeList = [{"id" : 1, "name" : "线上+线下课程"},{"id" : 2, "name" : "线下双师课程"},{"id" : 3, "name" : "线上补课课程"},{"id" : 4, "name" : "暑期双师课程"}];

    // 运营类型
    $scope.operationTypeList = [{"id" : "0", "name" : "直营"},{"id" : "1", "name" : "直营+加盟"}];

    $scope.checkAllFlag = false;

    // 搜索课程名称
    $scope.searchParam = {
        course_Name: '',
        branch_id:-1
    };
    $scope.queryParam = {
        };

    
    // 课程列表
    $scope.courseList = [];

    $scope.selectedCourseList = [];

    function getSelectedCourseList () {
        var courseList = [];
        _.forEach($scope.courseList ,function(course) {
            if (course.selectFlag) {
                courseList.push(course)
            }
        })
        return courseList;
    }
    
    //获取所有选中的id
    function getSelectedIds () {
        var ids = "";
        _.forEach($scope.courseList ,function(course) {
            if (course.selectFlag) {
            	ids+= "," + course.id;
            }
        })
        if (!ids) {
            $uibMsgbox.alert('请选择要操作的课程！');
        }
        return ids.substring(1);
    }

    // 全选事件
    $scope.onCheckAll = function () {
        _.forEach($scope.courseList ,function(course) {
            course.selectFlag = $scope.checkAllFlag;
        })
    }

    // 某一行Checkbox选择事件
    $scope.onCourseChecked = function (course) {
        $scope.checkAllFlag = _.every($scope.courseList, {selectFlag: true});
    }

    
    /**
     * 查询科目
     */
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
            grade_id:$scope.searchParam.grade_id?$scope.searchParam.selectedCourse.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.searchParam.branch_id?$scope.searchParam.branch_id:-1,
            season_id:$scope.searchParam.season_id?$scope.searchParam.season_id:-1,
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                    $scope.modalBranchList = _.cloneDeep(resp.data);
                    //将全部option添加到branchList
                    $scope.branchList.unshift(
                        {
                            id : -1,
                            org_name:"-- 全部 --"
                        }
                    );
                    $scope.searchParam.branchId = -1;
                }
                //查询选中的组织，并为校区设置默认值
                querySelectedOrg();
            }
        })
    }

    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && ($scope.selectedOrg.type == "4" || $scope.selectedOrg.type == "3" )) {
                    if($scope.selectedOrg.type == "4") {
                        $.each($scope.branchList, function (i, b) {
                            if (b.id == $scope.selectedOrg.id) {
                                $scope.searchParam.branchId = b.id;
                            }
                        });
                    }
                } else {
                    $uibMsgbox.warn("请选择团队或校区");
                }
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }

    /**
     * 选择课程
     * @param grade
     */
    $scope.selectCourse = function(grade){
        $scope.queryParam.selectedCourse = grade;
        querySubject();
    }

    /**
     * 选择科目
     * @param subject
     */
    $scope.selectSubject = function(subject){
        $scope.queryParam.selectedSubject = subject;
    }

    // 查询方法
    $scope.query = function () {
        erp_delayCourseService.listMtDelayCourse({

            branchId:$scope.searchParam.branchId,
            seasonId:$scope.searchParam.seasonId,
            subjectId:$scope.searchParam.subjectId,
            gradeId:$scope.searchParam.gradeId,
            courseSearchInfo:$scope.searchParam.courseSearchInfo,
            teacherSearchInfo:$scope.searchParam.teacherSearchInfo,
            delayCourseDateString:$scope.searchParam.delayCourseDateString,
            type:$scope.searchParam.type
        }, function (resp) {
            if (!resp.error) {
                $scope.courseList=resp.data;
                $scope.onCourseChecked();
                $scope.delayCourseDateString = $scope.searchParam.delayCourseDateString;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };


    $scope.querySelectDatas = function (id) {
    	erp_courseService.querySelectDatas({
    		id : id
    	},function(resp) {
            if(!resp.error) {
                $scope.lastCourseList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };

    querySubject();
    queryGrade();
    queryBuOrgs();
    queryTimeSeason();
    // 当前步骤
    $scope.currentStep = 1;

    // 所有的步骤
    $scope.steps = [{
        title: '第一步：选择课程'
    }, {
        title: '第二步：延课清单'
    }, {
        title: '第三步：延课完成'
    }];

    $scope.back = function(){
        $scope.currentStep = $scope.currentStep-1;
    }

    //查询课次变动
    $scope.querycourseSchedullingChangeInfo = function (courseId,courseTime) {
        $scope.courseSchedullingChangeInfoList = {};
        erp_delayCourseService.changeSchedulingInfo({
            courseId:courseId,
            courseTime:courseTime
        }, function (resp) {
            if (!resp.error) {
                $scope.courseSchedullingChangeInfoList =resp.data;
                $('#delayCourseViewcourseSchedullingChangeInfo').modal('show');
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };
    //显示变动详情
    $scope.showCourseSchedullingChangeInfo = function(course) {
        $.each($scope.courseChangeInfoList,function(i,n){
            if(n.courseId == course.courseId && course.courseTime ==n.courseTime){
                $scope.courseSchedullingChangeInfoList =n.courseSchedullingChangeInfoList;
                $('#delayCourseViewcourseSchedullingChangeInfo').modal('show');
                return false;
            }
        });
    };
    //制单人
    if (!$rootScope.curEmployee) {
        $rootScope.curEmployee = {}
    }
    $scope.currentPeple = $rootScope.curEmployee.employeeName;
    $scope.$watch('curEmployee', function(newValue) {
        if (newValue && newValue.employeeId) {
          $scope.currentPeple = $rootScope.curEmployee.employeeName;
        }
    })
    $scope.currentDate = Format("yyyy-MM-dd",new Date());
    //跳转到延课清单
    $scope.goDelayCourseInfo = function() {

        $scope.selectedCourseList = getSelectedCourseList();
        if(!$scope.selectedCourseList ||!$scope.selectedCourseList.length) {
            $uibMsgbox.error("请选择延课记录");
            return;
        }
        $scope.selectedCourseChangeInfoList = {};
        var _watingModal = $uibMsgbox.waiting('正在处理，请稍候...');
        erp_delayCourseService.listCourseChangeInfo(
            $.map($scope.selectedCourseList, function (n, i) {
                return {
                    course_id: n.courseId,
                    course_times: n.courseTime
                }
            }) ,
           function (resp) {
                if (!resp.error) {
                    $scope.courseChangeInfoList =resp.data;
                    var courseChangeInfoTmp = null;
                    $.each($scope.selectedCourseList,function(i,n){
                        for (var t in $scope.courseChangeInfoList) {
                            courseChangeInfoTmp = $scope.courseChangeInfoList[t];
                           if(courseChangeInfoTmp.courseId == n.courseId) {
                               n.courseDateBeforeDelay = courseChangeInfoTmp.courseSchedullingChangeInfoList[courseChangeInfoTmp.courseTime-1].courseDateBeforeDelay;
                               n.courseDateAfterDelay = courseChangeInfoTmp.courseSchedullingChangeInfoList[courseChangeInfoTmp.courseTime-1].courseDateAfterDelay;
                               break;
                           }
                        }
                    });
                    $scope.currentStep = 2;
                } else {
                    $uibMsgbox.error(resp.message);
                }
               _watingModal.close();
            }
        );

    }

    //点击延课按钮
    $scope.showReasonInputDialog = function(){
        $('#delayCourseInputReason').modal('show');
    }

    $scope.delayReason = "";
    $scope.delayRecordId = null;//延课单ID

    //批量延课
    $scope.delayCourseBatch = function(){
        if(!$scope.delayReason) {
            $uibMsgbox.alert("延课原因必填");
            return;
        }
        $('#delayCourseInputReason').modal('hide');
        $uibMsgbox.confirm('一旦延课后，将不能撤消，是否继续？', function (res) {
            if (res == 'yes') {
                var _watingModal = $uibMsgbox.waiting('正在处理，请稍候...');
                erp_delayCourseService.batchDelayMtCourse(
                    {
                        delayCourseDate:$scope.delayCourseDateString,
                        reason:$scope.delayReason,
                        delayCourseDetailList : $.map($scope.selectedCourseList, function (n, i) {
                            return {
                                courseId: n.courseId,
                                courseTime: n.courseTime,
                                mtCourseId:n.mtCourseId
                            }
                        })
                    },
                    function (resp) {
                        if (!resp.error) {
                            $scope.currentStep = 3;
                            $scope.delayRecordId = resp.data;
                        } else {
                            $uibMsgbox.error(resp.message);
                        }
                        _watingModal.close();
                    }
                );
            }
        })
    }

    $scope.queryDelayReocedCourseDetail = function (id) {
        window.location.href="?recordId="+$scope.delayRecordId+"#/orders/delayrecord/detail";
    };

    $scope.backForDelayCourse = function(){
        $scope.courseList={};
        $scope.currentStep = 1;
    }
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_gradeController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    'erp_gradeService',
    erp_gradeController
    ]);

function erp_gradeController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    erp_gradeService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索年级名称
    $scope.searchParam = {
        grade_Name: ''
    };
    // 年级列表
    $scope.gradeList = [];

    $scope.lastGradeList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.gradeDetail = {
        id: '',
        grade_name: '',
        encoding: '',
        last_id: '',
        last_encoding: '',
        last_name: '',
        sort: '',
        description: ''
    };
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };
    
    // 处理【添加年级】按钮点击事件
    $scope.handleAddGrade = function () {
        $scope.optype = 'add';
        $scope.resetForm();
         $scope.gradeDetail={};
        $scope.querySelectDatas('');
        $('#erpSystemDictGradePanel').modal('show');
    };

    // 处理【删除年级】按钮点击事件
    $scope.handleDeleteGrade = function (id) {
    	 $uibMsgbox.confirm('确定删除选中年级？', function (result) {
             if(result != 'yes') {
                 return;
             }
             $scope.del(id);
         });
    };
    
    // 处理【修改年级】按钮点击事件
    $scope.handlePutGrade = function (grade) {
        $scope.optype = 'put';
        $scope.gradeDetail = grade;
        $scope.querySelectDatas('');
        $("#erpSystemDictGradePanel").modal('show');
    };

    // 处理【查询年级】按钮点击事件
    $scope.handleQueryGrade = function () {
        $scope.query();
    };

    // 处理年级表单【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemDictGradePanel').modal('hide');
    };

    // 处理年级表单【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
    	if ($scope.optype == 'add') {
    		$scope.add();
    	} else {
    		$scope.put();
    	}
        $('#erpSystemDictGradePanel').modal('hide');
    };

    // 添加
    $scope.add = function () {
    	erp_gradeService.addGrade($scope.gradeDetail, function (resp) {
    		if (!resp.error) {
    			 $uibMsgbox.success(resp.message);
    			 $scope.query();
            } else {
            	$uibMsgbox.error(resp.message);
            }           
        });
    };

    // 修改
    $scope.put = function () {
    	erp_gradeService.updateGrade($scope.gradeDetail, function (resp) {
    		if (!resp.error) {
   			 $uibMsgbox.success(resp.message);
   			 $scope.query();
           } else {
        	   $uibMsgbox.error(resp.message);
           }      
        });
    };

    // 删除
    $scope.del= function (id) {
    	erp_gradeService.delGrade({
    		grade_ids : id
    	}, function (resp) {
    		if (!resp.error) {
      			 $uibMsgbox.success(resp.message);
      			 $scope.query();
              } else {
           	   $uibMsgbox.error(resp.message);
              }      
        });
    };

    // 查询方法
    $scope.query = function () {
    	erp_gradeService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            p_grade_name: $scope.searchParam.p_gradeName
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.gradeList=resp.data;
            } else {
            	$uibMsgbox.error(resp.message);
            }
            return resp.gradeList
        });
    };
    
    $scope.querySelectDatas = function (id) {
    	erp_gradeService.querySelectDatas({
    		id : id
    	},function(resp) {
            if(!resp.error) {
                $scope.lastGradeList = resp.data;
            }
        });
    };
    
    
    /*
     * 修改状态
     * @param flag true-生效 false-无效
     */
    $scope.changeStatus = function (id, flag) {
    	erp_gradeService.changeStatus({"id" : id, "status" : flag}, function (resp) {
    		if(!resp.error) {
//    			alert("状态修改成功");
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }
    
    $scope.onStatusChange = function (grade) {
    	$scope.changeStatus(grade.id, grade.status);
    }
    
    
    // 重置表单
    $scope.resetForm = function () {
        $("#erpSystemDictGradePanel form")[0].reset();
    };

    $scope.query();
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_subjectController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox',
    'erp_subjectService',
    erp_subjectController
    ]);

function erp_subjectController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    erp_subjectService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索的科目名称
    $scope.searchParam = {
        subjectName: ''
    };
    // 科目列表
    $scope.subjectList = [];

    // 与表单绑定的数据，用于添加和修改
    $scope.subjectDetail = {
        id: 0,
        name: '',
        encoding: '',
        description: ''
    };

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        // itemsPerPage: 10,
        // pagesLength: 9,
        // perPageOptions: [10, 20, 30, 40, 50],
        onChange: function(){
            $scope.query()
        }
    };

    $scope.paginationBars = [];
    
    // 处理【添加科目】按钮点击事件
    $scope.handleAddSubject = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        $('#erpSystemDictSubjectPanel').modal('show');
    };

    // 处理【删除科目】按钮点击事件
    $scope.handleDeleteSubject = function (id) {
        $uibMsgbox.confirm('确定删除选中科目？', function (result) {
            if(result != 'yes') {
                return;
            }
            $scope.delete(id);
        });
    };
    
    // 处理【修改科目】按钮点击事件
    $scope.handlePutSubject = function (subject) {
        $scope.optype = 'put';
        $scope.subjectDetail = {
            id: subject.id,
            name: subject.name,
            encoding: subject.encoding,
            description: subject.description
        };
        $("#erpSystemDictSubjectPanel").modal('show');
    };

    // 处理【查询科目】按钮点击事件
    $scope.handleQuerySubject = function () {
        $scope.query();
    };

    // 处理科目表单【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemDictSubjectPanel').modal('hide');
    };

    // 处理科目表单【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
        if ($scope.optype == 'add') {
            // 添加的内容从 $scope.subjectDetail中获取
            $scope.add();
        } else if ($scope.optype == 'put') {
            $scope.put();
        }
        $('#erpSystemDictSubjectPanel').modal('hide');
    };

    // 添加
    $scope.add = function () {
        erp_subjectService.add({
            name: $scope.subjectDetail.name,
            encoding: $scope.subjectDetail.encoding,
            description: $scope.subjectDetail.description
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('添加成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 修改
    $scope.put = function () {
        erp_subjectService.update({
            id: $scope.subjectDetail.id,
            name: $scope.subjectDetail.name,
            encoding: $scope.subjectDetail.encoding,
            description: $scope.subjectDetail.description
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('修改成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 删除
    $scope.delete = function (subjectId) {
        erp_subjectService.delete({
            subjectId: subjectId
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('删除成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 查询
    $scope.query = function () {
        erp_subjectService.query({
            pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            subjectName: $scope.searchParam.subjectName
        }, function (resp) {
            if (!resp.error) {
                $scope.subjectList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    };

    // 重置表单
    $scope.resetForm = function () {
        //$("#erpSystemDictSubjectPanel form")[0].reset()
        $scope.subjectDetail = {};
    };

    $scope.query();
}

/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_timeSeasonController', [
        '$scope',
        '$log',
        '$uibMsgbox',
        'erp_timeSeasonService',
        erp_timeSeasonController]);

function erp_timeSeasonController(
    $scope,
    $log,
    $uibMsgbox,
    erp_timeSeasonService
    ) {
	// 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    
    // 搜索字段
    $scope.searchParam = {
    	course_season_name: ''
    };
    
    // 课程季列表
	$scope.timeSeasonList = [];

	//上一课程季列表
	$scope.lastTimeSeasonList = [];

    // 业务类型列表
	$scope.businessTypeList = [{"key" : 1, "value" : "班级课"},
	                   		   {"key" : 2, "value" : "一对一"},
	                   		   {"key" : 3, "value" :"晚辅导"}];
    // 产品线列表                               
	$scope.productLineList = [];

    // 季节列表
	$scope.seasonList = [{"key" : 1, "value" : "春季"},
	                     {"key" : 2, "value" : "夏季"},
	                     {"key" : 3, "value" : "秋季"},
	                     {"key" : 4, "value" : "冬季"}];

    // 与表单绑定的数据，用于添加和修改
    $scope.timeSeason = {
        business_type: 0,
        business_type_name: "",
        city_id: 0,
        city_name: "",
        course_season_name: "",
        create_time: null,
        create_user: 0,
        create_user_name: "",
        description: "",
        end_date: "",
        id: 0,
        last_course_season_name: "",
        last_season_id: 0,
        product_line: 0,
        product_line_name: "",
        season: 0,
        season_name: "",
        start_date: "",
        status: 0,
        update_time: null,
        update_user: 0,
        update_user_name: ""
    }
    
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，默认]
     * @param  {Function} perPageOptions [description]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function() {
            $scope.handleQueryTimeSeason();
        }
    };

    $scope.paginationBars = [];

    // 处理【添加课程季】按钮点击事件
    $scope.handleAddTimeSeason = function () {
        $scope.optype = 'add';
        $scope.resetForm();
        $scope.timeSeason.season = null;
        $scope.timeSeason.last_season_id = null;
        $scope.timeSeason.product_line = null;
        $scope.timeSeason.business_type = null;
        $scope.querySelectDatas();
        $('#erpSystemDictTimeSeasonPanel').modal('show');
    }
    
    // 处理【修改课程季】按钮点击事件
    $scope.handlePutTimeSeason = function (rowData) {
        $scope.optype = 'put';
        $scope.timeSeason = rowData;
        $scope.querySelectDatas();
        $("#erpSystemDictTimeSeasonPanel").modal('show');
    }
    
    // 处理【删除课程季】按钮点击事件
    $scope.handleDeleteTimeSeason = function (id) {
        if (window.confirm('确定删除选中课程季？')) {
            $scope.remove(id);
        }
    }

    // 处理【查询课程季】按钮点击事件
    $scope.handleQueryTimeSeason = function () {
        $scope.query();
    }

    // 处理课程季表单【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        $('#erpSystemDictTimeSeasonPanel').modal('hide');
    }

    // 处理课程季表单【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
        if ($scope.optype == 'add') {
    		$scope.add();
    	} else {
    		$scope.put();
    	}
    }

    // 查询课程季
    $scope.query = function () {
    	erp_timeSeasonService.query({
    		pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            p_course_season_name: $scope.searchParam.course_season_name,
        },
        function(resp){
            if(!resp.error) {
           	 	$scope.timeSeasonList = resp.data;
           	 	$scope.paginationConf.totalItems = resp.total || 0;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    }

    // 添加课程季
    $scope.add = function () {
        var _modalInstance = $uibMsgbox.waiting('添加中，请稍后');
    	erp_timeSeasonService.post($scope.timeSeason, function (resp) {
            _modalInstance.close();
    		if(!resp.error) {
    			$uibMsgbox.success("添加成功");
    			$scope.query();
    			$('#erpSystemDictTimeSeasonPanel').modal('hide');
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }

    // 修改课程季
    $scope.put = function () {
    	erp_timeSeasonService.put($scope.timeSeason, function (resp) {
    		if(!resp.error) {
    			$uibMsgbox.success("修改成功");
    			$scope.query();
    			$('#erpSystemDictTimeSeasonPanel').modal('hide');
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }

    // 删除课程季
    $scope.remove = function (id) {
    	erp_timeSeasonService.remove({"id" : id},function (resp) {
    		if(!resp.error) {
    			$uibMsgbox.success("删除成功");
    			$scope.query();
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }

    // 重置课程季表单
    $scope.resetForm = function () {
        $("#erpSystemDictTimeSeasonPanel form")[0].reset();
    }

    /**
     * 查询下拉框数据
     */
    $scope.querySelectDatas = function () {
    	erp_timeSeasonService.querySelectDatas({
    	},function(resp) {
            if(!resp.error) {
                $scope.lastTimeSeasonList = resp.timeSeasonList;
                $scope.productLineList = resp.productLineList;
            }
        });
    };

    // 状态变化
    $scope.onStatusChange = function (data) {
        erp_timeSeasonService.changeStatus({
            id: data.id,
            status: data.status
        }, function (resp) {
            if (!resp.error) {
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };
    
    $scope.query();
}
/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_eaiLogController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    'erp_eaiLogService',
    erp_eaiLogController
    ]);

function erp_eaiLogController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    erp_eaiLogService
  ) {
	
	 //日志类型列表
    $scope.logTypeList =  [{"key" : 1, "value" : "订单消息提醒"}];
    //状态列表
    $scope.statusList =  [{"key" : 0, "value" : "同步失败"},{"key" : 1, "value" : "同步成功"}];
    //系统列表
    $scope.sysList =  [{"key" : "ERP", "value" : "ERP系统"},{"key" : "OPENAPI", "value" : "OPENAPI接口服务"}];
    // 搜索日志名称
    $scope.searchParam = {
        log_type: '',
        soruce_sys:'',
        in_sys:'',
        status:''
    };
    // 日志列表
    $scope.eaiLogList = [];
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };
    
    // 全选事件
    $scope.onCheckAll = function () {
        _.forEach($scope.eaiLogList ,function(eaiLog) {
        	eaiLog.selectFlag = $scope.checkAllFlag;
        })
    }

    // 某一行Checkbox选择事件
    $scope.onLogChecked = function (eaiLog) {
        $scope.checkAllFlag = _.every($scope.eaiLogList, {selectFlag: true});
    }
   
    function getSelectedCourseList () {
        var eaiLogList = [];
        _.forEach($scope.eaiLogList ,function(eaiLog) {
            if (eaiLog.selectFlag) {
            	eaiLogList.push(eaiLog)
            }
        })
        return eaiLogList;
    }
    
    //获取所有选中的id
    function getSelectedIds () {
        var ids = "";
        _.forEach($scope.eaiLogList ,function(eaiLog) {
            if (eaiLog.selectFlag) {
            	ids+= "," + eaiLog.id;
            }
        })
        return ids.substring(1);
    }
    
    // 处理【查询日志】按钮点击事件
    $scope.handleQueryLog= function () {
        $scope.query();
    };
    
    $scope.handleSendData = function () {
    	var ids = getSelectedIds();
    	erp_eaiLogService.repeatSendData({"ids" : ids}, function (resp) {
    		if(!resp.error) {
    			$uibMsgbox.alert("操作成功!");
    		} else {
    			$uibMsgbox.error(resp.message);
    		}
        });
    }

    // 查询方法
    $scope.query = function () {
    	erp_eaiLogService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            p_log_type: $scope.searchParam.log_type,
            p_source_sys:$scope.searchParam.source_sys,
            p_in_sys:$scope.searchParam.in_sys,
            p_status:$scope.searchParam.status
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.eaiLogList=resp.data;
            } else {
            	$uibMsgbox.error(resp.message);
            }
            return resp.eaiLogList;
        });
    };
    
    $scope.query();
}

/**
 * @author liufq@klxuexi.org 2017/04/19
 */
angular.module('ework-ui')
    .controller('erp_epayWapController', [
        '$rootScope',
        '$scope',
        '$uibMsgbox',
        'erp_epayWapService',
        erp_epayWapController
    ]);

function erp_epayWapController(
		$rootScope,
		$scope,
		$uibMsgbox,
		erp_epayWapService) {
	
	//学员信息
    $scope.payFlow = {};
    
    $scope.allDataArray = [];
    
    //团队
    $scope.teamList = [];
    
    // 搜索字段
    $scope.searchParam = {
        beginDate: '',
        endDate: '',
        beginDate: getCurrentDate(),
        endDate: getCurrentDate()
    };
    $scope.isLoading = '';
    
    /**
	 * 分页配置
	 * 
	 * @param {Number}
	 *            currentPage [当前页面，初始化时默认为1]
	 * @param {Number}
	 *            totalItems [数据总条数，每次查询时赋值]
	 * @param {Number}
	 *            itemsPerPage [每页显示条数]
	 * @param {Number}
	 *            pagesLength [可选，分页栏长度,默认为9]
	 * @param {Array}
	 *            perPageOptions [可选，默认]
	 * @param {Function}
	 *            perPageOptions [description]
	 */
	$scope.paginationConf = {
		currentPage : 1, // 当前页
		totalItems : 0,
		onChange : function() {
			queryPayFlow();
		}
	}
	
	// 处理【搜索】按钮点击事件
    $scope.handleQueryInvoice = function () {
		queryPayFlow();
    }
	
	//查询支付团队
	function queryPayAcountTeam() {
		erp_epayWapService.queryTeam({}, function(resp) {
			if (!resp.error) {
				$scope.teamList = resp.data;
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}
	
	// 分页查询
	function queryPayFlow(){
        $scope.isLoading = 'isLoading';
    	erp_epayWapService.query({
        	pageSize : $scope.paginationConf.itemsPerPage,
			currentPage : $scope.paginationConf.currentPage,
            buId:$scope.searchParam.buId,
            keyWord:$scope.searchParam.keyWord,
            beginDate:$scope.searchParam.beginDate,
            endDate:$scope.searchParam.endDate
        },function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.payFlowList = resp.data;
                $scope.totalAmount = resp.totalAmount;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $scope.isLoading = '';
				$uibMsgbox.error(resp.message);
			}
        });
        
    }
	
	//查询list
	function queryPayFlowList(){
		
		erp_epayWapService.list({
            buId:$scope.searchParam.buId,
            keyWord:$scope.searchParam.keyWord,
            beginDate:$scope.searchParam.beginDate,
            endDate:$scope.searchParam.endDate
        },function(resp){
            if(!resp.error){
                $scope.allDataArray = resp.data;
              //导出excel
                outputExcel($scope.allDataArray);
            } else {
				$uibMsgbox.error(resp.message);
			}
        });
	}
	
	//导出excel
	function outputExcel(dataList) {
        var param = {
            dataList: dataList
        };
        erp_epayWapService.output(param, function (resp) {
            if (!resp.error) {
                //下载
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }
	
	// 全部导出
    $scope.exportAll = function () {
    	//先根据当前条件查询list
    	queryPayFlowList();
    };
    
    //默认查询团队
    queryPayAcountTeam();
	
}

"use strict";
angular
    .module('ework-ui')
    .controller('erp_FinanceOrderController', [
        '$rootScope',                                                             	
		'$scope',
		'erp_FinanceOrderService',
        '$state',
        '$log',
        '$cookieStore',
		function(
				 $rootScope,
				 $scope,
				 erp_FinanceOrderService,
                 $state,
                 $log,
                 $cookieStore
            ) {
        	 $scope.orderList = [];
        	 $scope.pageParam = new Object();
        	 $scope.searchOrder = function(){
                 $scope.orderList = [];
                 $scope.isDown = 'loading';
                 erp_FinanceOrderService.query(
                     {
                         pageSize: 10,
                         order_no: $scope.order_no,
                         business_type: $scope.business_type,
                         order_type: $scope.order_type,
                         currentPage:1
                     },
                     function(resp){
                         $scope.isDown = '';
                         if(!resp.error){
                        	 $scope.orderList = resp.data;
                        	 $scope.pageParam.totalPage = resp.totalPage;
                        	 $scope.pageParam.pageSize = resp.pageSize;
                        	 $scope.pageParam.currentPage = resp.currentPage;
                        	 if ($scope.pageParam.currentPage > 1 && $scope.pageParam.currentPage < $scope.pageParam.totalPage) {
                	     	       $scope.paginationBars = [$scope.pageParam.currentPage - 1,$scope.pageParam.currentPage, $scope.pageParam.currentPage + 1];
                          	 } else if ($scope.pageParam.currentPage == 1 && $scope.pageParam.totalPage > 1) {
                	     	       $scope.paginationBars = [ $scope.pageParam.currentPage, $scope.pageParam.currentPage + 1];
                          	 } else if ($scope.pageParam.currentPage == $scope.pageParam.totalPage && $scope.pageParam.totalPage > 1) {
                	     	       $scope.paginationBars = [ $scope.pageParam.currentPage - 1,$scope.pageParam.currentPage];
                          	 }
                         }else{
                             alert(resp.message);
                         }
                     });
 			};
 			 $scope.queryOrder = function(pageNum){
                 $scope.orderList = [];
                 $scope.isDown = 'loading';
                 erp_FinanceOrderService.query(
                     {
                         row_num: 10,
                         order_no: $scope.order_no,
                         business_type: $scope.business_type,
                         order_type: $scope.order_type,
                         currentPage:pageNum
                     },
                     function(resp){
                         $scope.isDown = '';
                         if(!resp.error){
                        	 $scope.orderList = resp.data;
                        	 $scope.pageParam.totalPage = resp.totalPage;
                        	 $scope.pageParam.pageSize = resp.pageSize;
                        	 $scope.pageParam.currentPage = resp.currentPage;
                        	 if ($scope.pageParam.currentPage > 1 && $scope.pageParam.currentPage < $scope.pageParam.totalPage) {
              	     	       $scope.paginationBars = [$scope.pageParam.currentPage - 1,$scope.pageParam.currentPage, $scope.pageParam.currentPage + 1];
                        	 } else if ($scope.pageParam.currentPage == 1 && $scope.pageParam.totalPage > 1) {
              	     	       $scope.paginationBars = [ $scope.pageParam.currentPage, $scope.pageParam.currentPage + 1];
                        	 } else if ($scope.pageParam.currentPage == $scope.pageParam.totalPage && $scope.pageParam.totalPage > 1) {
              	     	       $scope.paginationBars = [ $scope.pageParam.currentPage - 1,$scope.pageParam.currentPage];
                        	 }
                         }else{
                             alert(resp.message);
                         }
                     });
 			};
 			$scope.searchOrder();
        }
]);

angular.module('ework-ui').controller('erp_financeFrozenController', [
  '$rootScope',
  '$scope',
  '$uibMsgbox',
  '$uibModal',
  'erp_frozenService',
  erp_financeFrozenController
])

function erp_financeFrozenController(
  $rootScope,
  $scope,
  $uibMsgbox,
  $uibModal,
  erp_frozenService
) {
  $scope.searchParams = {
    queryOrderString: '',
    frozenEncoding: ''
  }
  $scope.pageConf = {
    totalItems: 0,
    itemsPerPage: 10,
    currentPage: 1,
    onChange: function () {
      $scope.getList();
    }
  }
  $scope.frozenList = []

  $scope.getList = function () {
    var params = _.extend({
      currentPage: $scope.pageConf.currentPage,
      pageSize: $scope.pageConf.itemsPerPage
    }, $scope.searchParams)

    erp_frozenService.query(params).$promise
      .then(function (resp) {
        if (!resp.error) {
          $scope.frozenList = resp.data
          $scope.pageConf.totalItems = resp.total
        } else {
          $uibMsgbox.error(resp.message)
        }
      }, function (resp) {
        $uibMsgbox.error('请示数据失败，错误码：' + resp.status)
      })
  }

  $scope.viewDetail = function (change) {
    erp_frozenService.queryDetail({
      change_id: change.id
    }).$promise.then(function (resp) {
      if (!resp.error) {
        showDetail(resp.data)
      } else {
        $uibMsgbox.error(resp.message)
      }
    }, function (resp) {
      $uibMsgbox.error('请求数据失败，错误码：' + resp.status)
    })
  }

  $scope.deleteChange = function (change) {
    $uibMsgbox.confirm('确定作废该订单？', function (res) {
      if (res == 'yes') {
        erp_frozenService.delete({
          change_id: change.id
        }).$promise.then(function (resp) {
          if (!resp.error) {
            $uibMsgbox.success('操作成功！')
            $scope.getList();
          } else {
            $uibMsgbox.error(resp.message)
          }
        }, function (resp) {
          $uibMsgbox.error('操作失败，错误码：' + resp.status)
        })
      }
    })
  }

  function showDetail(change) {
    $uibModal.open({
      size: 'lg',
      templateUrl: 'frozenDetailModal.html',
      resolve: {
        detail: function () {
          return change
        }
      },
      controller: ['$scope', 'detail', function ($scope, detail) {
        $scope.frozenDetail = detail
      }]
    })
  }

  $scope.getList();
}
/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_invoiceController', [
        '$scope',
        '$log',
        '$uibMsgbox',
        'erp_InvoiceManagerService',
        'erp_invoiceCompanyService',
        erp_invoiceController]);

function erp_invoiceController(
    $scope,
    $log,
    $uibMsgbox,
    erp_InvoiceManagerService,
    erp_invoiceCompanyService
    ) {
	// 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    
    // 搜索字段
    $scope.searchParam = {
        status: 0, // 发票状态
        start_date: getCurrentDate(),
        end_date: getCurrentDate()
    };
    // 发票列表
	$scope.invoiceList = [];
	
	// 开票公司列表
	$scope.invoiceCmpList = [];

    // 业务类型列表
	$scope.headingList = [{"key" : "1", "value" : "个人"},
	                   	  {"key" : "2", "value" : "公司"}];
	
	$scope.invoiceStatus = 0;

    // 与表单绑定的数据，用于添加和修改
    $scope.invoice = {
    }
    
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，默认]
     * @param  {Function} perPageOptions [description]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function() {
        	if ($scope.searchParam.bu_id) {
        		$scope.query();
        	}
        }
    }

    $scope.paginationBars = [];
    
    // 处理【修改发票】按钮点击事件
    $scope.handleInvoice = function (invoice) {
        $scope.optype = 'put';
        $scope.invoiceStatus = invoice.status;
        erp_invoiceCompanyService.list({}, function(resp) {
        	if (!resp.error) {
        		$scope.invoiceCmpList = resp.data;
        	}
        });
        if (invoice.status == 4) { // 申请中
        	invoice.actualMoney = invoice.requiredMoney;
        }
        $scope.invoice = invoice;
        $("#erpFinanceInvoicePanel").modal('show');
    }
    
    // 发票状态改变，查询相应状态的数据
    $scope.handleChangeStatus = function(status) {
    	$scope.searchParam.status = status;
    	$scope.handleQueryInvoice();
    }

    // 处理【查询发票】按钮点击事件
    $scope.handleQueryInvoice = function () {
        $scope.query();
    }
    
    $scope.handlePutInvoice = function(status) {
    	$scope.put(status);
    }
    
    $scope.beforeQuery = function() {
    	if (!$scope.searchParam.bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
    	return true;
    }

    // 查询发票
    $scope.query = function () {
    	if ($scope.beforeQuery()) {
    		erp_InvoiceManagerService.query({
        		pageSize: $scope.paginationConf.itemsPerPage,
                currentPage: $scope.paginationConf.currentPage,
                p_bu_id: $scope.searchParam.bu_id,
                p_branch_id: $scope.searchParam.branch_id,
                p_start_date: $scope.searchParam.start_date,
                p_end_date: $scope.searchParam.end_date,
                p_status: $scope.searchParam.status,
                p_invoice_code: $scope.searchParam.invoice_code
            },
            function(resp){
                if(!resp.error) {
               	 	$scope.invoiceList = resp.data;
               	 	$scope.paginationConf.totalItems = resp.total || 0;
                } else {
                	$uibMsgbox.error(resp.message);
                }
            });
    	}
    }
    
    $scope.checkBeforePut = function(status) {
    	if (status == 1) {
    		if (!$scope.invoice.actualMoney) {
    			$uibMsgbox.error("请输入实开金额！");
    			return false;
    		}
    		
    		if (!$scope.invoice.invoiceCode) {
    			$uibMsgbox.error("请输入发票号码！");
    			return false;
    		}
    		
    		if (!$scope.invoice.invoiceCompamy) {
    			$uibMsgbox.error("请选择发票单位！");
    			return false;
    		}
    	}
    	return true;
    }

    // 修改发票
    $scope.put = function (status) {
    	var oriStatus = $scope.invoice.status;
    	if (status) {
    		$scope.invoice.status = status;
    	}
    	
    	if (!$scope.checkBeforePut(status)) {
    		$scope.invoice.status = oriStatus;
    		return;
    	}
    	
    	erp_InvoiceManagerService.put($scope.invoice, function (resp) {
    		if(!resp.error) {
    			var msg = (status == 5) ? "拒绝成功" : ((status == 3) ? "未回收作废成功" : ((status == 2) ? "已回收作废成功" : "开票成功"));
    			$uibMsgbox.success(msg);
    			$scope.query();
    			$('#erpFinanceInvoicePanel').modal('hide');
    		} else {
    			$scope.invoice.status = oriStatus;
    			$uibMsgbox.error(resp.message);
    		}
        });
    }
    
    // 导出数据
    $scope.exportInv = function() {
    	if ($scope.beforeQuery()) {
    		erp_InvoiceManagerService.exportInv({
                p_bu_id: $scope.searchParam.bu_id,
                p_branch_id: $scope.searchParam.branch_id,
                p_start_date: $scope.searchParam.start_date,
                p_end_date: $scope.searchParam.end_date,
                p_status: $scope.searchParam.status,
                p_invoice_code: $scope.searchParam.invoice_code
            }, function(resp) {
            	if (!resp.error) {
        			window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
        		} else {
        			$uibMsgbox.error(resp.message);
        		}
            });
    	}
    }
}
angular.module('ework-ui').controller('erp_courseRoomController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox',
    '$uibModal',
    'erp_courseService',
    'erp_studentBuOrgsService',
    'erp_timeSeasonService',
    'PUBORGSelectedService',
    'erp_roomService',
    erp_courseRoomController
]);

function erp_courseRoomController($rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $uibModal,
    erp_courseService,
    erp_studentBuOrgsService,
    erp_timeSeasonService,
    PUBORGSelectedService,
    erp_roomService) {
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function () {
            $scope.querySelectingCourse();
        }
    };

    $scope.queryParam = {
        selectedBranch: '',
        selectedTimeSeason: '',
        courseSearchInfo: ''
    };

    // 列表信息
    $scope.dataList = [];

    // 显示课次
    $scope.showCourseTimes = function (course) {
        if (course.isShowCourseTime) {
            course.isShowCourseTime = false;
        } else {
            course.isShowCourseTime = true;
            $scope.queryCourseTimes(course);
        }
    };

    // 查询课次
    $scope.queryCourseTimes = function(course) {
        var param = {};
        param.p_course_id = course.id;
        //course.isQueryCourseTimes = 'isQueryCourseTimes';
        erp_roomService.queryRoomRel(param, function (resp) {
            //course.isQueryCourseTimes = '';
            if (!resp.error) {
                course.courseTimeList = resp.data;
                if (course.courseTimeList && course.courseTimeList.length > 0) {
                    $.each(course.courseTimeList, function (i, model) {
                        var course_date = "" + model.course_date;
                        if (course_date && course_date.length == 8) {
                            model.course_date_str = course_date.substring(0, 4) + "-" + course_date.substring(4, 6) + "-" + course_date.substring(6, 8);
                        }
                        // 反向更新模型的id
                        if($scope.modalData && $scope.modalData.course_id == model.course_id && $scope.modalData.seq == model.seq) {
                            $scope.modalData.id = model.id;
                        }
                    });
                }
            }
        });
    };

    $scope.modalData = {};
    $scope.oldRoomId = undefined; //旧的教室
    $scope.currentCourse = undefined; //当前的课程

    // 设置和解绑弹框
    $scope.toSettings = function (courseTime, course, status) {
        $scope.currentCourse = course;
        $scope.currentCourse.bindStauts = status;
        $scope.oldRoomId = courseTime.room_id;
        angular.copy(courseTime, $scope.modalData);
        // 查询教室
        queryRoom(courseTime.branch_id);

        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'course_room_modal.html',
            controller: 'erp_courseRoomModalController',
            scope: $scope
        });
        modalInstance.result.then(function (result) {
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };

    // 批量绑定和解绑弹框
    $scope.showBatchBinding = function (course,status) {
        $scope.batchList = course;
        $scope.batchList.bindStatus = status; 
        $scope.batchList.applyToOther = false;
        angular.forEach($scope.batchList.roomClassSet, function (date) {
            date.Selected = false;
        }); 
        queryRoom(course.branch_id); // 查询教室
        // $scope.queryCourseTimes(course);
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'batch_binding_modal.html',
            controller: 'erp_courseRoomModalController',
            scope: $scope
        });
        modalInstance.result.then(function (result) {
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };  

    /**
     * 查询课程
     */
    $scope.querySelectingCourse = function () {
        var param = {
            branch_id: $scope.queryParam.selectedBranch ? $scope.queryParam.selectedBranch.id : -1,
            season_id: $scope.queryParam.selectedTimeSeason ? $scope.queryParam.selectedTimeSeason.id : -1,
            business_type: 1, //班级课
            search_info: $scope.queryParam.courseSearchInfo,
            status: 1 //上架课程
        };
        param.currentPage = $scope.paginationConf.currentPage;
        param.pageSize = $scope.paginationConf.itemsPerPage;
        param.student_num = 'true';

        $scope.toSelectingCourseList = [];

        $scope.isQuerySelectingCourse = 'isQuerySelectingCourse';
        erp_courseService.query(param, function (resp) {
            $scope.isQuerySelectingCourse = '';
            if (!resp.error) {
                $scope.dataList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    /**
     * 查询校区
     */
    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                $scope.branchList = resp.data;
                querySelectedOrg();
            }
        })
    }

    /**
     * 查询课程季
     */
    function queryTimeSeason() {
        erp_timeSeasonService.list({}, function (resp) {
            if (!resp.error) {
                $scope.timeSeasonList = resp.data;
            }
        });
    }

    $scope.roomList = [];

    /**
     * 查询教室
     */
    function queryRoom(branch_id) {
        erp_roomService.queryRoom({
            p_branch_id: branch_id
        }, function (res) {
            if (!res.error) {
                $scope.roomList = res.data;
            } else {
                $uibMsgbox.error(res.message);
            }
        });
    }

    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && $scope.selectedOrg.type == "4") {
                    $.each($scope.branchList, function (i, b) {
                        if (b.id == $scope.selectedOrg.id) {
                            $scope.queryParam.selectedBranch = b;
                        }
                    });
                    $scope.branchList = [$scope.queryParam.selectedBranch];
                } else {
                    $scope.queryParam.selectedBranch = $scope.branchList[0];
                }
                $scope.querySelectingCourse();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    } 

    $('title').text("课次教室绑定 | 厝边素高");
    queryBuOrgs();
    queryTimeSeason();
}

angular.module('ework-ui')
    .controller('erp_courseRoomModalController', [
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        'erp_roomService',
        erp_courseRoomModalController
    ]);

function erp_courseRoomModalController($scope, $uibModalInstance, $uibMsgbox, erp_roomService) {

    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel')
    };

    $scope.handleModalConfirm = function (status) {
        if (status == true) {
            $scope.settingRoom();
        } else {
            $scope.untieRoom();
        }
    }

    //设置教室
    $scope.settingRoom = function () {
        // 原来未选定教室， 现在也未选定教室 或 教室未变化(且未选中应用到其它课次)
        if (!$scope.oldRoomId && !$scope.modalData.room_id ||
            ($scope.oldRoomId == $scope.modalData.room_id )) {
            $uibModalInstance.dismiss('cancel');
            return;
        }

        delete $scope.modalData.course_date_str;
        var _uibModalInstance = $uibMsgbox.waiting('正在绑定教室，请稍候...');
        erp_roomService.saveRoomRel($scope.modalData, function (res) {
            _uibModalInstance.close();
            if (!res.error) {
                $scope.queryCourseTimes($scope.currentCourse);
                $uibModalInstance.close("success");
            } else {
                if ($scope.modalData.applyToOther) {
                    $scope.queryCourseTimes($scope.currentCourse);

                }
                $uibMsgbox.error(res.message.replace(/\n/g, '<br>'));
            }
        });
    }

    //解绑教室
    $scope.untieRoom = function () {
        var _uibModalInstance = $uibMsgbox.waiting('正在解绑教室，请稍候...');
        var params={
            id:$scope.modalData.course_id,
            seq:$scope.modalData.seq,
        }
        erp_roomService.untieRoom(params, function (res) {
            _uibModalInstance.close();
            if (!res.error) {
                $scope.queryCourseTimes($scope.currentCourse);    
                $uibModalInstance.close("success");
            } else {
                if ($scope.modalData.applyToOther) {
                    $scope.queryCourseTimes($scope.currentCourse);
                }
                $uibMsgbox.error(res.message.replace(/\n/g, '<br>'));
            }
        });
    }

    //选择所有未绑定的课次
    $scope.chooseAllCheck = function () {
        if ($scope.batchList.applyToOther == true) {
            angular.forEach($scope.batchList.roomClassSet, function (date) {
                date.Selected = true;
            });
        }else{
            var statusTag = true;
            angular.forEach($scope.batchList.roomClassSet, function (date) {
                date.Selected = false;
                if(date.roomId!=null){
                    statusTag = false;
                }
                if($scope.batchList.bindStatus==true && statusTag == true){
                    date.roomId = null;
                }
            });
            if($scope.batchList.bindStatus==true && statusTag == true){
                $scope.batchList.room_id = null;
            }
        }
    }
    //选择所有未绑定的课次的教室名称
    $scope.chooseAllRoom = function () {
        angular.forEach($scope.batchList.roomClassSet, function (date) {
            date.roomId = $scope.batchList.room_id;
        });
    }
    //选择未绑定星期课次
    $scope.chooseCheck = function (arr) {
        $scope.allTag = true;
        if (arr.Selected == false) {
            $scope.allTag = null;
            var statusTag = true;            
            angular.forEach($scope.batchList.roomClassSet, function (date) {
                if (date.Selected == true) {
                    $scope.allTag = true;
                }
                if(date.roomId!=null){
                    statusTag = false;
                }
            });
            if($scope.batchList.bindStatus==true && statusTag == true){
                arr.roomId = null;
            }
        }
        if($scope.batchList.bindStatus==true && statusTag == true){
            $scope.batchList.room_id = null;
        }
    }
    // 批量绑定    
    $scope.BatchModalConfirm = function (status) {
        if (status == true) {
            if($scope.batchList.applyToOther==true){
                if($scope.batchList.room_id==null){
                    $uibMsgbox.confirm('请选择教室');  
                    return false;                  
                }
            }else{
                var checkTag = true;                
                angular.forEach($scope.batchList.roomClassSet, function (date) {
                    if (date.Selected == true && date.roomId ==null) {
                        checkTag = false;
                    }
                });
                if(checkTag==false){
                    $uibMsgbox.confirm('请选择教室');
                    return false
                }
            }
            $scope.settingAllRoom();
        } else {
            $scope.untieAllRoom();
        }
    }
    $scope.settingAllRoom = function(){
        var params = [];
        angular.forEach($scope.batchList.roomClassSet, function (date) {
            if (date.Selected == true) {
                params.push(date);
            }
        });
        var _uibModalInstance = $uibMsgbox.waiting('正在绑定教室，请稍候...');        
        erp_roomService.saveAllRoom(params, function (res) {
            _uibModalInstance.close();
            if (!res.error) {
                $scope.queryCourseTimes($scope.batchList);      
                $uibModalInstance.close("success");
            } else {
                if ($scope.batchList.applyToOther) {
                    $scope.queryCourseTimes($scope.batchList);
                }
                $uibMsgbox.error(res.message.replace(/\n/g, '<br>'));
            }
        })
    }
    $scope.untieAllRoom = function(){
        var params = [];    
        var statusTag = true;       
        angular.forEach($scope.batchList.roomClassSet, function (date) {
            if (date.Selected == true) {
                date.roomId = null;
                params.push(date)
            }
            if(date.roomId!=null){
                statusTag = false;
            }
        });
        if(statusTag == true){
            $scope.batchList.room_id = null;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在解绑教室，请稍候...'); 
        erp_roomService.untieAllRoom(params, function (res) {
            _uibModalInstance.close();
            if (!res.error) {
                $scope.queryCourseTimes($scope.batchList);
                $uibModalInstance.close("success");
            } else {
                if ($scope.batchList.applyToOther) {
                    $scope.queryCourseTimes($scope.batchList);
                }
                $uibMsgbox.error(res.message.replace(/\n/g, '<br>'));
            }
        })
    }
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_roomController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_roomService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    erp_roomController
]);

function erp_roomController($rootScope,
                            $scope,
                            $log,
                            $state,
                            $uibModal,
                            $uibMsgbox,
                            erp_roomService,
                            erp_studentBuOrgsService,
                            PUBORGSelectedService) {


    /**
     * 查询校区
     */
    function queryBranchOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                }
                //查询选中的组织，并为校区设置默认值
                querySelectedOrg();
            }
        })
    }

    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                if ($scope.selectedOrg && $scope.selectedOrg.id && $scope.selectedOrg.type == "4") {
                    $.each($scope.branchList, function (i, b) {
                        if (b.id == $scope.selectedOrg.id) {
                            $scope.searchParam.p_branch_id = b.id;
                            $scope.selectedBranch = b.id;
                        }
                    });
                }
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }
    $scope.init = function () {

        $scope.searchParam = { // 搜索条件
            p_branch_id: null,
            p_queryKey: null
        };
        $scope.roomList = []; // 课程列表
        $scope.branchList = [];//校区列表

        /**
         * 分页配置
         * @param  {Number} currentPage     [当前页面，初始化时默认为1]
         * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
         * @param  {Number} itemsPerPage    [每页显示条数]
         * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
         * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
         * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
         */
        $scope.paginationConf = {
            currentPage: 1, //当前页
            totalItems: 0,
            itemsPerPage: 10,
            onChange: function () {
                $scope.query();
            }
        };
        queryBranchOrgs();
    };
    // 查询方法
    $scope.query = function () {
        
        erp_roomService.get({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            p_branch_id: $scope.searchParam.p_branch_id,
            p_bu_id: $scope.searchParam.p_bu_id,
            p_queryKey: $scope.searchParam.p_queryKey
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.roomList = resp.data;
            } else {
                alert(resp.message);
            }
        });
    };

    // 删除
    $scope.delRoom = function (room) {
        $uibMsgbox.confirm('确定删除？', function (result) {
            if(result != 'yes') {
                return;
            }
            erp_roomService.del({
                id: room.id
            }, function (resp) {
                if (!resp.error) {
                    $scope.query();
                    $uibMsgbox.alert("删除成功");
                } else {
                    alert(resp.message);
                }
            });
        });
    };

    // 添加
    $scope.addRoom = function () {
        var roomDefault = {};
        if($scope.selectedBranch) {
            roomDefault.branch_id = $scope.selectedBranch;
        } else{
            roomDefault.branch_id = $scope.searchParam.p_branch_id
        }
        roomDefault.bu_id = $scope.searchParam.p_bu_id;
        
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'room_modal.html',
            controller: 'erp_roomModalController',
            resolve: {
                params: function () {
                    return {
                        optype: "添加",
                        roomDetail: roomDefault,
                        branchList : $scope.branchList
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("操作成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };
    // 修改
    $scope.putRoom = function (room) {
        var roomDetail = {};
        angular.copy(room,roomDetail);
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'room_modal.html',
            controller: 'erp_roomModalController',
            resolve: {
                params: function () {
                    return {
                        optype: "修改",
                        roomDetail: roomDetail,
                        branchList : $scope.branchList
                    }
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.query();
            $uibMsgbox.alert("操作成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };
    $scope.init();
}
angular.module('ework-ui')
    .controller('erp_roomModalController', [
        '$scope',
        '$uibModalInstance',
        '$uibMsgbox',
        'erp_roomService',
        'params',
        erp_roomModalController
    ])

function erp_roomModalController($scope,
                                 $uibModalInstance, $uibMsgbox, erp_roomService, params) {
    $scope.optype = params.optype;
    $scope.roomDetail = params.roomDetail;
    $scope.branchList = params.branchList;
    if($scope.optype == "添加" &&  $scope.branchList &&  $scope.branchList.length) {
        if(!$scope.roomDetail.branch_id) {
            $scope.roomDetail.branch_id = $scope.branchList[0].id;
        }
    }
    /**
     * 模态框取消
     */
    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel')
    }
    /**
     * 模态框确认
     */
    $scope.handleModalConfirm = function () {
        if ($scope.optype == "修改") {
            //更新数据
            erp_roomService.put($scope.roomDetail, function (resp) {
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        } else {
            //添加数据
            erp_roomService.post($scope.roomDetail, function (resp) {
                if (!resp.error) {
                    $uibModalInstance.close("success")
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    }
}
/**
 * @author yans@klxuexi.org 2017/11/17
 */
"use strict";
angular.module('ework-ui').controller('erp_roomArrangeController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_roomService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    erp_roomArrangeController
]);

function erp_roomArrangeController($rootScope,
    $scope,
    $log,
    $state,
    $uibModal,
    $uibMsgbox,
    erp_roomService,
    erp_studentBuOrgsService,
    PUBORGSelectedService) {
    
    // 自定义教室类型
    $scope.conditionList=[
        {code: "空闲",name: "空闲"},
        {code: "延课",name: "延课"},
        {code: "占用",name: "占用"},
        {code: "教室",name: "校区教室"}
    ]
    $scope.clearSearch = function(){
        $scope.searchParam.startTime ='';
        $scope.searchParam.endTime ='';
        $scope.searchParam.branchId ='';
        $scope.searchParam.roomName ='';
        $scope.searchParam.courseName ='';
        $scope.searchParam.teacherName ='';
        $scope.searchParams.startDate = moment().startOf('today').format('YYYY-MM-DD');
        $scope.searchParams.endDate = moment().endOf('today').add(6,'day').format('YYYY-MM-DD');        
    }

    // 初始化起止时间
    $scope.searchParams = {
        startDate: moment().startOf('today').format('YYYY-MM-DD'),
        endDate: moment().endOf('today').add(6,'day').format('YYYY-MM-DD'),
        range: 'today',
        p_btn_tag: 'hidden'
    };
    // 初始化搜索条件
    $scope.searchParam = {
        condition:null,
        startTime:null,
        endTime:null,
        branchId:null,
        roomName:null,
        courseName:null,
        teacherName:null
    }
    // 跳转页面
    $scope.viewDetail = function (room) {
        window.location.href = '?roomId=' + room.id + '&startDate='+ room.courseDate + '&endDate=' + room.courseDate + '#/orders/classesRoomMgr/classesRoomArrangerDetail'
    }
    
    /**
     * 查询校区
     */
    function queryBranchOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                }
                //查询选中的组织，并为校区设置默认值
                // querySelectedOrg();
            }
        })
    }
    

    // 查询方法
    $scope.arrangeList = [];
    $scope.totalList = [];
    $scope.query = function () {
        var params = _.cloneDeep($scope.searchParam);
        params.startDate = $scope.searchParams.startDate;
        params.endDate = $scope.searchParams.endDate; 
        erp_roomService.listroomArrange(params, function (resp) {
            // console.log(resp)
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.data.length; //设置总条数
                $scope.totalList = resp.data;
                $scope.arrangeList = resp.data.slice(0,$scope.paginationConf.itemsPerPage);
            } else {
                // console.log(resp.message)
                $uibMsgbox.error(resp.message)
            }
        });
    };

    $scope.handleExportExcel = function() {
        var params = _.cloneDeep($scope.searchParam);
        params.startDate = $scope.searchParams.startDate;
        params.endDate = $scope.searchParams.endDate;

        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');

        erp_roomService.outputExcel(params, function (resp){
            _uibModalInstance.close();
            if (!resp.error) {
                //下载excel
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
         });
}


    $scope.init = function () {
        $scope.searchParam = { // 搜索条件
            branchId: null,
            condition: '空闲',
        };
        // $scope.conditionList = []; // 课程列表
        $scope.branchList = [];//校区列表

        /**
         * 分页配置
         * @param  {Number} currentPage     [当前页面，初始化时默认为1]
         * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
         * @param  {Number} itemsPerPage    [每页显示条数]
         * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
         * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
         * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
         */
        $scope.paginationConf = {
            currentPage: 1, //当前页
            totalItems: 0,
            itemsPerPage: 20,
            onChange: function () {
                var currentPage = $scope.paginationConf.currentPage;
                var itemsPerPage = $scope.paginationConf.itemsPerPage;
                $scope.arrangeList = $scope.totalList.slice(itemsPerPage*(currentPage-1),itemsPerPage*currentPage);
            }
        };
        queryBranchOrgs();
        $scope.query();
    };
    // 服务用   erp_roomService.listroomArrange
    $scope.init();
}
/**
 * @author yans@klxuexi.org 2017/11/17
 */
"use strict";
angular.module('ework-ui').controller('erp_roomArrangeDetailsController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_roomService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    erp_roomArrangeDetailsController
]);

function erp_roomArrangeDetailsController($rootScope,
    $scope,
    $log,
    $state,
    $uibModal,
    $uibMsgbox,
    erp_roomService,
    erp_studentBuOrgsService,
    PUBORGSelectedService) {
    // 返回
    $scope.goBack = function () {
        // window.location.href = '#/orders/classesRoomMgr/classesRoomArranger'
        $state.go('classesRoomArranger')
    }
    // 初始化起止时间
    $scope.searchParams = {
      startDate: moment().startOf('Week').format('YYYY-MM-DD'),
      endDate: moment().endOf('Week').format('YYYY-MM-DD'),
      p_min_date: moment().startOf('month').format('YYYY-MM-DD'),
      p_max_date: moment().endOf('month').add(1,'month').format('YYYY-MM-DD'),
      range: 'lastWeek',
      p_btn_tag: 'hidden'
     };

    $scope.queryRoomScheduling = function queryRoomScheduling(){
        erp_roomService.listroomScheduling({
            roomId:$scope.roomId,
            startDate:$scope.searchParams.startDate,
            endDate:$scope.searchParams.endDate
        },function(resp){
            // console.log(resp)
            if(!resp.error){
                $scope.arrangeList = resp.data;
            }
        });
    }

    // 变更教室
    $scope.currentRoomArrangeRecord = {};
    $scope.showRoomDialog = function(roomArr){
        $scope.currentRoomArrangeRecord = roomArr;
        $scope.selectedRoom = {};
        var params = {
            condition:"空闲",
            startTime:roomArr.startTime,
            endTime:roomArr.endTime,
            branchId:roomArr.branchId,
            startDate:Format('yyyy-MM-dd', new Date(roomArr.courseDate)),
            endDate:Format('yyyy-MM-dd', new Date(roomArr.courseDate)),
        }
        var _uibModalInstance = $uibMsgbox.waiting('处理中，请稍候...');
        erp_roomService.listroomArrange(params, function (resp) {
            if (!resp.error) {
                $scope.emptyRoomList = resp.data;
                $("#roomArrangeChangeRoomDialog").modal("show");
            } else {
                $uibMsgbox.error(resp.message)
            }
            _uibModalInstance.close();
        });
    }

    $scope.changeRoom = function(){
        $uibMsgbox.confirm('确定变更', function (res) {
            if (res == 'yes') {
                if(!$scope.selectedRoom) {
                    $uibMsgbox.alert("请选中教室");
                }
                var params = {
                    course_id:$scope.currentRoomArrangeRecord.courseId,
                    seq:$scope.currentRoomArrangeRecord.courseTime,
                    course_date:Format("yyyyMMdd",new Date(parseInt($scope.currentRoomArrangeRecord.courseDate))),
                    start_time:$scope.currentRoomArrangeRecord.startTime,
                    end_time:$scope.currentRoomArrangeRecord.endTime,
                    room_id:$scope.selectedRoom,
                    branch_id:$scope.currentRoomArrangeRecord.branchId,
                    id:$scope.currentRoomArrangeRecord.courseTimeRoomRef
                }
                var _watingModal = $uibMsgbox.waiting('保存中，请稍候...');
                erp_roomService.saveRoomRel(params, function (resp) {
                    // console.log(resp)
                    _watingModal.close();
                    if (!resp.error) {
                        $uibMsgbox.alert("教室变更成功");
                        $scope.queryRoomScheduling();
                    } else {
                        $uibMsgbox.error(resp.message)
                    }
                    $("#roomArrangeChangeRoomDialog").modal("hide");
                });
            }
        });
    }

    function init() {
        $scope.roomId = $("#rootIndex_roomId").val();
        $scope.searchParams.startDate = Format('yyyy-MM-dd', new Date(parseInt($("#rootIndex_startDate").val())));
        $scope.searchParams.endDate = Format('yyyy-MM-dd', new Date(parseInt($("#rootIndex_endDate").val())));
        $scope.queryRoomScheduling();
    }
    init();

}
/**
 * Created by Liyong.zhu on 2017/1/15.
 */

"use strict";
angular
    .module('ework-ui')
    .controller('erp_UserOrdersController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_orderManagerUserOrdersService',
        erp_UserOrdersController]);

function erp_UserOrdersController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_orderManagerUserOrdersService) {

    $scope.isLoading = '';
    $scope.app_info = '';

    $scope.stateList = [
        {
            "name":"全部",
            "value":"-1"
        },{
            "name":"暂存",
            "value":"暂存"
        },{
            "name":"审核中",
            "value":"审核中"
        },{
            "name":"已通过",
            "value":"已通过"
        },{
            "name":"异常订单",
            "value":"异常订单"
        },{
            "name":"欠费",
            "value":"欠费"
        },{
            "name":"审核未通过",
            "value":"审核未通过"
        }
    ];
    $scope.selectedState = $scope.stateList[5];
    $scope.orderPage = {
        currentPage:1,
        pageSize:5,
        totalCount:0
    };
    $scope.isLoading='';
    function queryOrderList(){
        var param = {};
        $scope.isLoading='isLoading';
        param.pageSize = $scope.orderPage.pageSize;
        param.app_info = $scope.app_info;
        param.auditStatus = $scope.selectedState.value;
        param.startDate = $("#cdt_start_date_03").val();
        param.endDate = $("#cdt_end_date_03").val();
        erp_orderManagerUserOrdersService.query(param,function(resp){
            $scope.isLoading='';
            if(!resp.error){
                $scope.orderPage = resp.data;
            }
        });
    }

    queryOrderList();

    $scope.pageQuery =function(currentPage){
        $scope.orderPage.currentPage = currentPage;
        if($scope.orderPage.currentPage<1){
            $scope.orderPage.currentPage = 1;
        }
        if($scope.orderPage.currentPage>$scope.orderPage.totalPage){
            $scope.orderPage.currentPage=$scope.orderPage.totalPage;
        }
        queryOrderList();
    };

    $scope.queryMore = function(){
        $scope.orderPage.pageSize = $scope.orderPage.pageSize + 5;
        $scope.pageQuery(1);
    };

    $scope.queryTask = function(){
        $scope.orderPage.resultList = [];
        $scope.orderPage.pageSize = 5;
        queryOrderList();
    }

    $scope.toCall = function(order){
        if(order.STUID){
            return true;
        }else{
            alert("异常订单，该订单未查到对应的学员，请联系管理员！");
            return false;
        }
    }

}
angular.module('ework-ui').controller('erp_ordersQueueController', [
	'$rootScope',
	'$scope',
	'$log',
    '$uibModal',
    '$uibMsgbox',
    'erp_courseService',
    'erp_sortNumService',
	erp_ordersQueueController
])

function erp_ordersQueueController(
	$rootScope,
	$scope,
	$log,
    $uibModal,
    $uibMsgbox,
    erp_courseService,
	erp_sortNumService
) {
	// 界面显示配置
	$scope.view = {
		showAdvanceSearch: false
	}
    $scope.pageConf = {
        totalItems: 0,
        currentPage: 1,
        itemsPerPage: 10,
        onChange: function () {
            $scope.queryOrderQueue();
        }
    }
    $scope.course = {};
    $scope.selectedTimeSeason = {};
    $scope.selectedGrade = {};
    $scope.selectedSubject = {};
    $scope.searchParam = {
        buId: 0,
        branchId: 0,
        courseId:''
    }
	// 课程列表
	$scope.courseList = []
	$scope.queryOrderQueue = function () {
		erp_sortNumService.countCourseSortNum({
            pageSize: $scope.pageConf.itemsPerPage,
            currentPage: $scope.pageConf.currentPage,
            branchId: $scope.searchParam.branchId || null,
            gradeId: $scope.selectedGrade.id || null,
            subjectId: $scope.selectedSubject.id || null,
            seasonId: $scope.selectedTimeSeason.id || null,
            courseId:$scope.searchParam.courseId || null
        }, function (resp) {
            if (!resp.error) {
                $scope.courseList = resp.data;
                $scope.pageConf.totalItems = resp.total;
            } else {
                $uibMsgbox.alert(resp.message)
            }
        })
    };
    
    $scope.queryOrderQueueByCourseId = function (course) {
    	erp_sortNumService.countSortNumDetail({
            courseId: course.id
        }, function (resp) {
            if (!resp.error) {
            	course.detailList = resp.data;
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    };
    
    $scope.queryOrderQueueDetail = function (course, detail) {
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-queue-detail.modal.html',
            controller: 'modal_courseQueueDetailController',
            resolve: {
                course: function () {
                    return course;
                },
                courseSeqDetail: function() {
                    return detail;
                }
            }
        }).result.then(function() {
            $scope.queryOrderQueueByCourseId(course);
        }, function() {
            $scope.queryOrderQueueByCourseId(course);
        })
    };
    $scope.queryCheckPeopleList = function (course, detail, orderType) {
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-check-detail.modal.html',
            resolve: {
                course: function () {
                    return course;
                },
                courseSeqDetail: function() {
                    return detail;
                },
                type: function () {
                  return orderType
                }
            },
            controller: ['$scope', 
              'erp_sortNumService',
              'course',
              'courseSeqDetail',
              'type',
              function (
                $scope,
                erp_sortNumService,
                course,
                courseSeqDetail,
                type
              ) {
                $scope.detailList = [];
                $scope.type = type;
                erp_sortNumService.queryCheckPeople({
                  courseId: course.id,
                  seq: courseSeqDetail.seq,
                  type: type
                }, function (resp) {
                    console.log('srs'+resp.detailList)
                  if (!resp.error) {
                    $scope.detailList = resp.data
                    console.log(resp.detailList)
                  }
                })
              }]
        }).result.then(function(){
         console.log('ss'+course)
          $scope.queryOrderQueueByCourseId(course);
        }, function() {
            console.log('sses'+course)
          $scope.queryOrderQueueByCourseId(course);
        })
    }
    $scope.showDetail = function (course) {
        course.showDetail = true;
        $scope.queryOrderQueueByCourseId(course)
    }

    $scope.hideDetail = function (course) {
        course.showDetail = false;
    }
    $scope.queryOrderQueue();
}
angular.module('ework-ui')
  .controller('erp_ordersActivityBannerController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'PUBORGSelectedService',
    'erp_activityBannerService',
    erp_ordersActivityBannerController
  ])

function erp_ordersActivityBannerController(
  $rootScope,
  $scope,
  $state,
  $log,
  $uibMsgbox,
  PUBORGSelectedService,
  erp_activityBannerService
) {
  $scope.optype = 'list';
  $scope.bannerList = []
  $scope.bannerImgs = []
  $scope.banner = createBanner();
  $scope.searchParams = {
    buId: '',
    branchId: ''
  }
  $scope.pageConf = {
    totalItems: 0,
    currentPage: 1,
    itemsPerPage: 10,
    onChange: function () {
      $scope.getList()
    }
  }
  $scope.getList = function () {
    erp_activityBannerService.query({
      buId: $scope.searchParams.buId,
      branchId: $scope.searchParams.branchId,
      page: $scope.pageConf.currentPage,
      pageSize: $scope.pageConf.itemsPerPage
    }).$promise.then(function (resp) {
      if (!resp.error) {
        $scope.bannerList = resp.data
        $scope.pageConf.totalItems = resp.total
      } else {
        $uibMsgbox.error(resp.message)
      }
    }, function (resp) {
      $uibMsgbox.error('请求失败，请联系管理员，错误码：' + resp.status)
    })
  }
  $scope.changeStatus = function (banner, status) {
    var opWords = ['删除', '启用', '停用']
    $uibMsgbox.confirm('确定要' + opWords[status] + '此活动图片？', function (res) {
      if (res == 'yes') {
        erp_activityBannerService.changeStatus({
          ids: banner.id.toString(),
          status: status
        }).$promise.then(function (resp) {
          if (!resp.error) {
            $scope.getList()
          } else {
            $uibMsgbox.error(resp.message)
            $scope.getList()
          }
        }, function (resp) {
          $uibMsgbox.error('请求数据失败，错误码：' + resp.status)
        })
      }
    })
  }
  function createBanner(instance) {
    $scope.bannerImgs = []
    instance = instance || {}
    if (instance.imgUrl) {
      $scope.bannerImgs.push(instance.imgUrl)
    }
    return {
      id: instance.id || null,
      title: instance.title || '',
      imgUrl: instance.imgUrl || '',
      oldImgUrl: instance.oldImgUrl || '',
      linkUrl: instance.linkUrl || '',
      startDate: instance.startDate || '',
      endDate: instance.endDate || '',
      cityId: instance.cityId || null,
      buId: instance.buId || null,
      branchId: instance.branchId || null,
      sort: (instance.sort || 1).toString()
    }
  }

  $scope.addBanner = function () {
    $scope.banner = createBanner();
    $scope.optype = 'add'
  }

  $scope.editBanner = function (banner) {
    $scope.banner = createBanner(banner)
    $scope.banner.oldImgUrl = $scope.banner.imgUrl
    $scope.optype = 'edit'
  }

  $scope.saveBanner = function () {
    if ($scope.valid()) {
      $scope.banner.imgUrl = $scope.bannerImgs[0]
      var waitingModal = $uibMsgbox.waiting('保存中，请稍候...')
      if ($scope.optype == 'add') {
        erp_activityBannerService.post($scope.banner)
          .$promise.then(function (resp) {
            waitingModal.close()
            if (!resp.error) {
              $uibMsgbox.success('添加成功！')
              $scope.getList()
              $scope.optype = 'list'
            } else {
              $uibMsgbox.error(resp.message)
            }
          }, function (resp) {
            waitingModal.close()
            console.log('数据请求失败，错误码：' + resp.status)
          })
      }else{
         erp_activityBannerService.put($scope.banner)
          .$promise.then(function (resp) {
            waitingModal.close()
            if (!resp.error) {
              $uibMsgbox.success('修改成功！')
              $scope.getList()
              $scope.optype = 'list'
            } else {
              $uibMsgbox.error(resp.message)
            }
          }, function (resp) {
            waitingModal.close()
            console.log('数据请求失败，错误码：' + resp.status)
          })
      }
    }
  }

  $scope.deleteBanner = function(item) {
      $uibMsgbox.confirm('确认删除所选的图片？', function (res) {
        if (res == 'yes') {
          erp_activityBannerService.changeStatus({"ids":item.id,"status":0}, function (resp) {
          })
          $scope.getList()
        } else {}
      })
  }

  $scope.cancelEdit = function () {
    $scope.optype = 'list'
  }

  $scope.valid = function () {
    var note = $uibMsgbox.warn
    var b = $scope.banner
    if (!b.title) {
      note('请输入活动标题')
      return false
    }
    if (!b.linkUrl) {
      note('请输入跳转链接')
      return false
    }
    if (!$scope.bannerImgs.length) {
      note('请选择活动图片')
      return false
    }
    if (!b.startDate) {
      note('请选择开始时间')
      return false
    }
    if (!b.endDate) {
      note('请选择结束时间')
      return false
    }
    if (!b.buId) {
      note('请选择团队')
      return false
    }
    if (!b.sort) {
      note('请选择序号')
      return false
    }
    return true
  }
  PUBORGSelectedService.query({}, function(resp) {
    if (!resp.error) {
      $scope.searchParams.buId = resp.data.buId;
      $scope.getList()
    } else  {
      console.log(resp.message)
    }
  })
}

/**
 * Created by hengshan.ou on 2017/1/16.
 */

"use strict";
angular
    .module('ework-ui')
    .controller('erp_OrdersIndexActivityInfoController', [
    '$rootScope',                                                             	
    '$scope',
    'erp_activityInfoService',
    'erp_studentBuOrgsService',
    'erp_privilegeRuleService',
    'erp_activityGenerateCouponDepotService',
    '$state',
    '$log',
    '$uibMsgbox',
    '$cookieStore',
     function(
    		    $rootScope,                                                             	
    		    $scope,
    		    erp_activityInfoService,
    		    erp_studentBuOrgsService,
    		    erp_privilegeRuleService,
    		    erp_activityGenerateCouponDepotService,
        	    $state,
        	    $log,
        	    $uibMsgbox,
        	    $cookieStore) {
    			$scope.business_type = 1; 
        		$scope.activityInfoList = [];
        	    $scope.activityInfo = {}; 
        	    $scope.activityInfoDepot = {}; 
        		$scope.privilegeRuleList = [];
        	 	$scope.pageParam = new Object();
        	 	
        	    /**
        	     * 分页配置
        	     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
        	     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
        	     * @param  {Number} itemsPerPage    [每页显示条数]
        	     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
        	     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
        	     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
        	     */
        	    $scope.paginationConf = {
        	        currentPage: 1, //当前页
        	        totalItems: 0,
        	        // itemsPerPage: 10,
        	        // pagesLength: 9,
        	        // perPageOptions: [10, 20, 30, 40, 50],
        	        onChange: function(){
        	            $scope.query()
        	        }
        	    };  
        	 	
        	 	$scope.status =
                    [{key : 1, value : "有效"},
                     {key : 0, value : "失效"}
                ];
        	 	
        	 	$scope.is_pub =
                    [{key : 1, value : "是"},
                     {key : 0, value : "否"}
                ];
        	 	
        	    $scope.selectBusinessType = function(business_type){
        	        $scope.business_type = business_type;
        	        return true;
        	    }

        	    // 处理【添加优惠活动】按钮点击事件
        	    $scope.handleAddActivityInfo = function () {
        	    	$scope.activityInfo.branch_ids = "";
        	        $scope.optype = 'add';
        	        $scope.resetForm();
        	        $scope.queryPrivilegeRule();
        	        $scope.queryBuOrgs();
        	        $('#erpActivityInfoPanel').modal('show');
        	    }
        	  
        	    // 处理【修改优惠活动】按钮点击事件
        	    $scope.handlePutActivityInfo = function (rowData) {
        	        $scope.optype = 'put';
        	        $scope.queryPrivilegeRule();
        	        $scope.queryBuOrgs();
        	        
        	        $scope.activityInfo = rowData;
        	        
        	        $("#erpActivityInfoPanel").modal('show');
        	    }
 
        	    // 处理【券仓库】按钮点击事件
        	    $scope.handleActivityDepot = function (rowData) {
        	        $scope.activityInfoDepot = rowData;
        	        $("#erpCouponDepotPanel").modal('show');
        	    }
        	        
        	    // 处理【删除优惠活动】按钮点击事件
        	    $scope.handleDeleteActivityInfo = function (id) {
        			$uibMsgbox.confirm('确定删除选中优惠活动？', function(res) {
        				if (res == 'yes') {
        					$scope.remove(id);
        				}
        			});
        	    }

        	    // 处理【查询优惠活动】按钮点击事件
        	    $scope.handleQueryActivityInfo = function () {
        	        $scope.query();
        	    }

        	    // 处理优惠活动表单【取消】按钮点击事件
        	    $scope.handleModalCancel = function () {
        	        $('#erpActivityInfoPanel').modal('hide');
        	    }

        	    // 处理优惠活动券仓库表单【取消】按钮点击事件
        	    $scope.handleModalDepotCancel = function () {
        	        $('#erpCouponDepotPanel').modal('hide');
        	    }
        	    
        	    // 处理优惠活动券仓库【确认】按钮点击事件
        	    $scope.handleModalGenerate = function () {
        	    	var param = {};
        	        param.activity_id = $scope.activityInfoDepot.activity_id;
        	        param.activity_name = $scope.activityInfoDepot.activity_name;
        	        param.rule_id = $scope.activityInfoDepot.rule_id;
        	        param.rule_name = $scope.activityInfoDepot.rule_name;
        	        param.branch_ids = $scope.activityInfoDepot.branch_ids;
        	        param.branch_names = $scope.activityInfoDepot.branch_names;
        	        param.couponCount = $scope.activityInfoDepot.couponCount;
                    param.coupon_prefix = $scope.activityInfoDepot.coupon_prefix;

        	        erp_activityGenerateCouponDepotService.post(param,function(resp){

        	            if(!resp.error){
        	            	$uibMsgbox.success('生成券成功！');
        	            }else{
        	                $scope.openPanel = '';
        	                $uibMsgbox.error(resp.message);
        	            }
        	        },function(resp){
        	            $scope.openPanel = '';
        	            $uibMsgbox.error("保存失败！");
        	        });
        	        
        	        $('#erpCouponDepotPanel').modal('hide');
        	    }
        	    
        	    // 处理优惠活动表单【确认】按钮点击事件
        	    $scope.handleModalConfirm = function () {
        	        if ($scope.optype == 'add') {
        	    		$scope.add();
        	    	} else {
        	    		$scope.put();
        	    	}
        	        
        	        $('#erpActivityInfoPanel').modal('hide');
        	    }
        	 	
        	    // 重置优惠活动表单
        	    $scope.resetForm = function () {
        	        $("#erpActivityInfoPanel form")[0].reset();
        	    }       	    
        	    
        	    /**
        	     * 分页查询优惠活动
        	     */
        	    $scope.query = function(){
        	    	erp_activityInfoService.query(
        	            {
        	                pageSize: $scope.paginationConf.itemsPerPage,
        	                currentPage: $scope.paginationConf.currentPage,
        	                searchInfo: $scope.queryParam
        	            },
        	            function(resp){
        	                if (!resp.error) {
        	                    $scope.activityInfoList = resp.data;
        	                    $scope.paginationConf.totalItems = resp.total || 0;
        	                } else {
        	                	$uibMsgbox.error(resp.message)
        	                }
        	            });
        	    }
        	    
        	    // 添加
        	    $scope.add = function () {
        	    	var param = {};
        	    	$scope.genActivityInfo(param);
        	    	
        	    	erp_activityInfoService.post(param, function (resp) {
        	            if (!resp.error) {
        	            	$uibMsgbox.success('添加成功！');
        	                $scope.query();
        	            } else {
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    };
        	    
        	    // 修改
        	    $scope.put = function () {
        	    	var param = {};
        	    	$scope.genActivityInfo(param);
        	    	
        	    	erp_activityInfoService.put(param, function (resp) {
        	            if (!resp.error) {
        	            	$uibMsgbox.success('修改成功！');
        	                $scope.query();
        	            } else {
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    };	    

        	    // 删除优惠规则
        	    $scope.remove = function (id) {
        	    	erp_activityInfoService.remove({"id" : id},function (resp) {
        	    		if(!resp.error) {
        	    			$uibMsgbox.success("删除成功！");
        	    			$scope.query();
        	    		} else {
        	    			$uibMsgbox.error(resp.message);
        	    		}
        	        });
        	    }
        	    
        	    /**
        	     * 查询校区
        	     */
        	    $scope.queryBuOrgs = function (){
        	        erp_studentBuOrgsService.query({},function(resp){
        	            if(!resp.error){
        	                $scope.branchList = resp.data;
        	                $scope.selectedBranch = $scope.branchList[0];
        	                
                	        angular.forEach($scope.branchList, function (branch) {
                	        	if($scope.activityInfo.branch_ids.indexOf(branch.id) > -1){
                	        		branch.Selected = true;
                	        	}
                	        });
        	            }
        	        })
        	    }
        	    
        	    /**
        	     * 查询优惠规则
        	     */
        	    $scope.queryPrivilegeRule = function(){
        	        $scope.privilegeRuleList = [];
        	        erp_privilegeRuleService.query({
        	            productLine:$scope.business_type
        	        },function(resp){
        	            if(!resp.error){
        	                $scope.privilegeRuleList = resp.data;
        	                $scope.privilegeRuleList.unshift({
        	                    id:-1,
        	                    rule_name:""
        	                });
        	            }else{
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    }
       	    
        	    $scope.genActivityInfo = function(param){
        	    	$scope.strBranch = "";
        	    	$scope.strBranchName = "";
        	        angular.forEach($scope.branchList, function (branch) {
        	        	if(branch.Selected){
        	        		$scope.strBranch += branch.id +",";
        	        		$scope.strBranchName += branch.org_name +",";
        	        	}
        	        });
        	        
        	        if($scope.strBranch.length > 0){
        	        	$scope.strBranch = $scope.strBranch.substr(0,$scope.strBranch.length - 1);
        	        	$scope.strBranchName = $scope.strBranchName.substr(0,$scope.strBranchName.length - 1);
        	        }
    
        	        param.id = $scope.activityInfo.id;
        	        param.activity_name = $scope.activityInfo.activity_name;
        	        param.activity_date = $scope.activityInfo.activity_date;
        	        param.people_count = $scope.activityInfo.people_count;
        	        param.rule_id = $scope.activityInfo.rule_id;
        	        param.is_pub = $scope.activityInfo.is_pub;
        	        param.coupon_prefix = $scope.activityInfo.coupon_prefix;
        	        param.branch_ids = $scope.strBranch;
        	        param.branch_names = $scope.strBranchName;
        	    }
        	    
        	    /**
        	     * 选择所有的校区
        	     */
        	    $scope.checkedAllBuOrgs = function(){
        	        if($scope.activityInfo.checkelBranchs){
        	        	$scope.activityInfo.checkelBranchs = true;
        	        }else{
        	        	$scope.activityInfo.checkelBranchs = false;
        	        }
        	        
        	        angular.forEach($scope.branchList, function (branch) {
        	        	branch.Selected = $scope.activityInfo.checkelBranchs;
        	        });
        	    }
        	    
        	    $scope.query();
        }
]);


/**
 * Created by hengshan.ou on 2017/1/16.
 */

"use strict";
angular.module('ework-ui').controller('erp_OrdersIndexActivityOnlineController', [
  '$rootScope',
  '$scope',
  '$state',
  '$log',
  '$uibMsgbox',
  'erp_activityService',
  function(
    $rootScope,
    $scope,
    $state,
    $log,
    $uibMsgbox,
    erp_activityService
  ) {
    // 操作类型，list: 列表，add: 添加，edit: 编辑
    $scope.optype = 'list'
    // 优惠券列表（普通活动）
    $scope.selectedCouponList = []
    // 背景图片列表（暂存）
    $scope.bgImgUrlList = []
    // 旧的图片列表（用于在编辑时，向后端传需要删除的图片列表）
    $scope.oldImgUrlList = []
    // 分享图片列表（暂存，目前分享只支持单张图片）
    $scope.shareImgList = []
    // 活动详情
    $scope.activityDetail = {}
    // 活动列表
    $scope.activityList = []
    // 活动列表查询条件
    $scope.searchParams = {
      name: '',
      type: '',
      buId: '',
      branchId: ''
    }
    // 活动列表分页配置
    $scope.pageConf = {
      totalItems: 0,
      currentPage: 1,
      itemsPerPage: 10,
      onChange: function () {
        $scope.getList();
      }
    }

    function initActivityDetail (detail) {
      detail = detail || {}
      $scope.activityDetail.id = detail.id || 0
      $scope.activityDetail.type = (detail.type || '1').toString()
      $scope.activityDetail.cityId = detail.cityId || ''
      $scope.activityDetail.buId = detail.buId || ''
      $scope.activityDetail.activityBranchRefs = detail.activityBranchRefs || []
      $scope.activityDetail.name = detail.name
      $scope.activityDetail.activityCouponRefs = detail.activityCouponRefs || []
      $scope.activityDetail.bgColor = detail.bgColor || '#f1f0f3'
      $scope.activityDetail.startDate = detail.startDate || ''
      $scope.activityDetail.endDate = detail.endDate || ''
      $scope.activityDetail.activityBgIMGRefs = detail.activityBgIMGRefs || []
      $scope.activityDetail.delActivityBgIMGRefs = []
      $scope.activityDetail.shareTitle = detail.shareTitle 
      $scope.activityDetail.shareDesc = detail.shareDesc 
      $scope.activityDetail.shareLink = detail.shareLink || ''
      $scope.activityDetail.shareImg = detail.shareImg 
      $scope.activityDetail.nuserCouponId=detail.nuserCouponId 
      $scope.activityDetail.ouserCouponId=detail.ouserCouponId 
    }

    /**
     * 获取活动列表
     * @return {[type]} [description]
     */
    $scope.getList = function () {
      var params = {}
      angular.extend(params, {
        currentPage: $scope.pageConf.currentPage,
        pageSize: $scope.pageConf.itemsPerPage
      }, $scope.searchParams)

      erp_activityService.query(params).$promise.then(function (resp) {
          $scope.pageConf.totalItems = resp.total
          $scope.activityList = resp.data
        }, function (resp) {
          console.log(resp)
          $uibMsgbox.error(resp.message || '获取活动列表失败！')
        })
    }

    // 初始化Scope的数据
    function initDetailPageData(item) {
      $scope.bgImgUrlList = []
      $scope.oldImgUrlList = []
      $scope.shareImgList = []
      $scope.selectedCouponList = []
      initActivityDetail(item);
    }

    /**
     * 添加活动
     */
    $scope.addActivity = function() {
      initDetailPageData()
      $scope.optype = 'add'
    }

    /**
     * 编辑活动
     * @param  {[type]} item [description]
     * @return {[type]}      [description]
     */
    $scope.editActivity = function (item) {
      initDetailPageData(item)
      $scope.bgImgUrlList = _.flatMap($scope.activityDetail.activityBgIMGRefs, function (item) {
        return item.imgUrl
      })
      $scope.selectedCouponList = _.flatMap($scope.activityDetail.activityCouponRefs, function (item) {
        return {
          id: item.couponId,
          name: item.couponName,
          type_name: item.couponTypeName
        }
      })
      $scope.oldImgUrlList = _.cloneDeep($scope.bgImgUrlList)
      $scope.activityDetail.shareImg && $scope.shareImgList.push($scope.activityDetail.shareImg)
      $scope.optype = 'edit'
    }

    /**
     * 保存活动（新增和编辑两种类型）
     * @return {[type]} [description]
     */
    $scope.saveActivity = function () {
      $scope.activityDetail.activityBgIMGRefs = [];
      $scope.activityDetail.activityBgIMGRefs = _.map($scope.bgImgUrlList, function (item) {
        return {imgUrl: item}
      })
      $scope.activityDetail.activityCouponRefs = _.map($scope.selectedCouponList, function (item) {
        return {couponId: item.id}
      })
      _.forEach($scope.shareImgList, function (url) {
        $scope.activityDetail.shareImg = url;
      })
      if ($scope.activityDetail.startDate > $scope.activityDetail.endDate ) {
        $uibMsgbox.error("开始时间不能大于结束时间！");
        return;
      }
      var waitingModal = $uibMsgbox.waiting('保存中，请稍候...')
      if($scope.optype == 'add'){
        erp_activityService.post($scope.activityDetail, function (resp) {
          waitingModal.close()
          if (!resp.error) {
            $scope.optype = 'list';
            $scope.getList();
          } else {
            $uibMsgbox.error(resp.message)
          }
          return resp;
        });
      }else{
        var delImgUrlList = _.difference($scope.oldImgUrlList, $scope.bgImgUrlList)
        $scope.activityDetail.delActivityBgIMGRefs = _.map(delImgUrlList, function (item) {
          return {imgUrl: item}
        })
        erp_activityService.put($scope.activityDetail, function (resp) {
          waitingModal.close()
          if (!resp.error) {
            $scope.optype = 'list';
            $scope.getList();
          } else {
            $uibMsgbox.error(resp.message)
          }
          return resp;
        });
     }
    }

    /**
     * 取消活动编辑
     * @return {[type]} [description]
     */
    $scope.cancelActivity = function () {
      $scope.optype = 'list'
    }

    /**
     * 删除活动
     * @param  {[type]} item [description]
     * @return {[type]}      [description]
     */
    $scope.changeStatus = function(item, status) {
      var opWords = ['删除', '启用', '停用']
      $uibMsgbox.confirm('确认' + opWords[status] + '所选的活动？', function (res) {
        if (res == 'yes') {
          erp_activityService.changeStatus({
            ids:item.id,
            status: status
          }, function (resp) {
            if (!resp.error) {
              $scope.getList()
            } else {
              $uibMsgbox.error(resp.message)
            }
          })
        }
      })
    }


    /**
     * 活动详情
     */
    $scope.insertCoupon = function (coupon) {
      if (!_.some($scope.selectedCouponList, {id: coupon.id})) {
        $scope.selectedCouponList.push(coupon)
      }
    }

    /**
     * 移除优惠券
     */
    $scope.removeCoupon = function (coupon) {
      _.remove($scope.selectedCouponList, {id: coupon.id})
    }

    /**
     * 页面加载后的初始化操作
     */
    $scope.getList()

    $scope.copyToClipboard = function (text) {
      superClipBoard.copy(text, {
        success: function () {
          alert('复制成功！')
        },
        error: function () {
          alert('复制失败！')
        }
      })
    }
  }
]);

/**
 * Created by hengshan.ou on 2017/1/16.
 */

"use strict";
angular
    .module('ework-ui')
    .controller('erp_OrdersIndexCouponInfoController', [
    '$rootScope',                                                             	
    '$scope',
    'erp_privilegeRuleService',
    'erp_studentBuOrgsService',
    'erp_couponInfoServicePage', 
    'erp_couponInfoService',
    '$state',
    '$log',
    '$uibMsgbox',
    '$cookieStore',
     function(
    		    $rootScope,                                                             	
    		    $scope,
    		    erp_privilegeRuleService,
    		    erp_studentBuOrgsService,
    		    erp_couponInfoServicePage,
    		    erp_couponInfoService,
        	    $state,
        	    $log,
        	    $uibMsgbox,
        	    $cookieStore) {
    			$scope.business_type = 1; 
        		$scope.couponInfoList = [];
        	    $scope.couponInfo = {}; 
        	 	$scope.pageParam = new Object();
        	 	$scope.branchList = {};
       
        	    /**
        	     * 分页配置
        	     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
        	     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
        	     * @param  {Number} itemsPerPage    [每页显示条数]
        	     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
        	     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
        	     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
        	     */
        	    $scope.paginationConf = {
        	        currentPage: 1, //当前页
        	        totalItems: 0,
        	        // itemsPerPage: 10,
        	        // pagesLength: 9,
        	        // perPageOptions: [10, 20, 30, 40, 50],
        	        onChange: function(){
        	            $scope.query()
        	        }
        	    };
        	 	
        	 	$scope.status =
                    [{key : 1, value : "有效"},
                     {key : 0, value : "失效"}
                ];
  
        	    $scope.selectBusinessType = function(business_type){
        	        $scope.business_type = business_type;
        	        return true;
        	    }

        	    // 处理【添加优惠券】按钮点击事件
        	    $scope.handleAddCouponInfo = function () {
        	    	$scope.couponInfo.branch_ids = "";
        	        $scope.optype = 'add';
        	        $scope.resetForm();
        	        $scope.queryPrivilegeRule();
        	        $scope.queryBuOrgs();
        	        $('#erpCouponInfoPanel').modal('show');
        	    }
        	    
        	    // 处理【修改优惠券】按钮点击事件
        	    $scope.handlePutCouponInfo = function (rowData) {
        	        $scope.optype = 'put';
        	        $scope.queryPrivilegeRule();
        	        $scope.queryBuOrgs();
        	        
        	        $scope.couponInfo = rowData;
        	        
        	        $("#erpCouponInfoPanel").modal('show');
        	    }
        	    
        	    // 处理【删除优惠券】按钮点击事件
        	    $scope.handleDeleteCouponInfo = function (id) {
        			$uibMsgbox.confirm('确定删除选中优惠券？', function(res) {
        				if (res == 'yes') {
        					$scope.remove(id);
        				}
        			});
        	    }

        	    // 处理【查询优惠券】按钮点击事件
        	    $scope.handleQueryCouponInfo = function () {
        	        $scope.query();
        	    }

        	    // 处理优惠券表单【取消】按钮点击事件
        	    $scope.handleModalCancel = function () {
        	        $('#erpCouponInfoPanel').modal('hide');
        	    }

        	    // 处理优惠券表单【确认】按钮点击事件
        	    $scope.handleModalConfirm = function () {
        	        if ($scope.optype == 'add') {
        	    		$scope.add();
        	    	} else {
        	    		$scope.put();
        	    	}
        	        
        	        $('#erpCouponInfoPanel').modal('hide');
        	    }
        	 	
        	    // 重置优惠券表单
        	    $scope.resetForm = function () {
        	        $("#erpCouponInfoPanel form")[0].reset();
        	    }
        	    
        	    /**
        	     * 分页查询优惠规则
        	     */
        	    $scope.query = function(){
        	    	erp_couponInfoServicePage.query(
        	            {
        	                pageSize: $scope.paginationConf.itemsPerPage,
        	                currentPage: $scope.paginationConf.currentPage,
        	                productLine: $scope.business_type,
        	                searchInfo: $scope.queryParam
        	            },
        	            function(resp){
        	                if (!resp.error) {
        	                    $scope.couponInfoList = resp.data;
        	                    $scope.paginationConf.totalItems = resp.total || 0;
        	                } else {
        	                	$uibMsgbox.error(resp.message)
        	                }
        	            });
        	    }
        	    
        	    // 添加
        	    $scope.add = function () {
        	    	var param = {};
        	    	$scope.genCouponInfo(param);
        	    	
        	    	erp_couponInfoService.post(param, function (resp) {
        	            if (!resp.error) {
        	            	$uibMsgbox.success('添加成功！');
        	                $scope.query();
        	            } else {
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    };
        	    
        	    // 修改
        	    $scope.put = function () {
        	    	var param = {};
        	    	$scope.genCouponInfo(param);
        	    	
        	    	erp_couponInfoService.put(param, function (resp) {
        	            if (!resp.error) {
        	            	$uibMsgbox.success('修改成功！');
        	                $scope.query();
        	            } else {
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    };	    

        	    // 删除优惠规则
        	    $scope.remove = function (id) {
        	    	erp_couponInfoService.remove({"id" : id},function (resp) {
        	    		if(!resp.error) {
        	    			$uibMsgbox.success("删除成功！");
        	    			$scope.query();
        	    		} else {
        	    			$uibMsgbox.error(resp.message);
        	    		}
        	        });
        	    }
        	    
        	    $scope.genCouponInfo = function(param){
        	    	$scope.strBranchIds = "";
        	    	$scope.strBranchNames = "";
        	        angular.forEach($scope.branchList, function (branch) {
        	        	if(branch.Selected){
        	        		$scope.strBranchIds += branch.id +",";
        	        		$scope.strBranchNames += branch.org_name +",";
        	        	}
        	        });
        	        
        	        if($scope.strBranchIds.length > 0){
        	        	$scope.strBranchIds = $scope.strBranchIds.substr(0,$scope.strBranchIds.length - 1);
        	        	$scope.strBranchNames = $scope.strBranchNames.substr(0,$scope.strBranchNames.length - 1);
        	        }
        	    	
        	        param.id = $scope.couponInfo.id;
        	        param.name = $scope.couponInfo.name;
        	        param.rule_id = $scope.couponInfo.rule_id;
        	        param.valid_date = $scope.couponInfo.valid_date;
        	        param.status = $scope.couponInfo.status;
        	        param.product_line = $scope.couponInfo.product_line;
        	        param.branch_ids = $scope.strBranchIds;
        	        param.branch_names = $scope.strBranchNames;
        	    }
        	    
        	    /**
        	     * 查询校区
        	     */
        	    $scope.queryBuOrgs = function(){
        	        erp_studentBuOrgsService.query({},function(resp){
        	            if(!resp.error){
        	                $scope.branchList = resp.data;
        	                $scope.selectedBranch = $scope.branchList[0];
        	                
                	        angular.forEach($scope.branchList, function (branch) {
                	        	if($scope.couponInfo.branch_ids.indexOf(branch.id) > -1){
                	        		branch.Selected = true;
                	        	}
                	        });
        	            }
        	        })
        	    }
        	    
        	    /**
        	     * 查询优惠规则
        	     */
        	    $scope.queryPrivilegeRule = function(){
        	        $scope.privilegeRuleList = [];
        	        erp_privilegeRuleService.query({
        	            productLine:$scope.business_type
        	        },function(resp){
        	            if(!resp.error){
        	                $scope.privilegeRuleList = resp.data;
        	                $scope.privilegeRuleList.unshift({
        	                    id:-1,
        	                    rule_name:""
        	                });
        	            }else{
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    }
        	    
        	    /**
        	     * 选择所有的校区
        	     */
        	    $scope.checkedAllBuOrgs = function(){
        	        if($scope.couponInfo.checkelBranchs){
        	        	$scope.couponInfo.checkelBranchs = true;
        	        }else{
        	        	$scope.couponInfo.checkelBranchs = false;
        	        }
        	        
        	        angular.forEach($scope.branchList, function (branch) {
        	        	branch.Selected = $scope.couponInfo.checkelBranchs;
        	        });
        	    }
        	    
        	    $scope.query();
        }
]);


/**
 * Created by hengshan.ou on 2017/1/16.
 */

"use strict";
angular.module('ework-ui').controller('erp_OrdersIndexCouponOnlineController', [
  '$rootScope',
  '$scope',
  '$state',
  '$log',
  '$uibMsgbox',
  '$uibModal',
  'erp_ebCouponService',
  function(
    $rootScope,
    $scope,
    $state,
    $log,
    $uibMsgbox,
    $uibModal,
    erp_ebCouponService
  ) {
    $scope.optype = 'list'
    $scope.coupon = createCoupon();
    $scope.couponList = []
    $scope.searchParam = {
      name: ''
    }
    $scope.pageConf = {
      totalItems: 0,
      currentPage: 1,
      itemsPerPage: 10,
      onChange: function () {
        $scope.getList();
      }
    }
    
    $scope.fieldInfos = [{
  	  fieldName : "生成数量",
  	  field : "totals",
  	  notAllowNegative : false,
  	  negativeVal : -1,
  	  isInteger : true
    }, {
  	  fieldName : "立减金额",
  	  field : "rate",
  	  notAllowNegative : true,
  	  isInteger : true,
  	  couponType : "cut"
    }, {
  	  fieldName : "优惠券启用价格",
  	  field : "amount_lower",
  	  notAllowNegative : true
    }, {
  	  fieldName : "优惠券抵扣上限",
  	  field : "discount",
  	  notAllowNegative : true,
  	  couponType : "discount"
    }, {
  	  fieldName : "课程数量",
  	  field : "course_num",
  	  notAllowNegative : true,
  	  isInteger : true
    }, {
  	  fieldName : "有效期",
  	  field : "validity",
  	  notAllowNegative : true,
  	  isInteger : true
    }];

    function createCoupon(coupon) {
      return {
        id: '', // 优惠券ID
        encoding: '', // 优惠券编码
        name: '', // 优惠券名称
        type: 'cut', // 优惠券类型 discount 打折 or cut 立减
        rate: 0, // 折扣或立减金额
        totals: 50, // 生成数量
        validity: 15, // 有效期限
        amount_lower: 0.0, // 订单下限
        discount: 0.0, // 优惠上限
        course_num: 1, // 课程数量
        fit: 'all', // 适用对象， all-所有人，old-老用户，new-新用户，uId- 用户ID
        is_share: 0, // 是否优惠共用 0-不共用，1-共用 默认不共用（已废弃）
        status: 3, // 状态：0-删除， 1-使用， 2-停用， 3-未使用
        describe: '', // 优惠说明
        all_course: 'N', // 应用于所有课程
        // uId: '',
        couponCourseList: [] // 课程列表 [{course_id: ''}]
      }
    }

    /**
     * 获取优惠券列表
     * @return {[type]} [description]
     */
    $scope.getList = function () {
      var params = {}
      angular.extend(params, {
        currentPage: $scope.pageConf.currentPage,
        pageSize: $scope.pageConf.itemsPerPage
      }, $scope.searchParam)
      erp_ebCouponService.query(params)
        .$promise.then(function (resp) {
          if (!resp.error) {
            $scope.couponList = resp.data;
            $scope.pageConf.totalItems = resp.total
          } else {
            $uibMsgbox.error(resp.message)
          }
        }, function (resp) {
          console.log(resp)
        })
    }

    $scope.handleAddCouponOnline = function () {
      $scope.coupon = createCoupon();
      $scope.optype = 'add'
    }

    $scope.handleAddCouponCourse = function () {
      $uibModal.open({
        size: 'xlg',
        templateUrl: 'templates/block/modal/course-multiple-select.modal.html',
        controller: 'modal_courseMultiSelectController',
        resolve: {
          selectedCourseList: function () {
            return $scope.coupon.couponCourseList
          }
        }
      }).result.then(function (courseList) {
        _.forEach(courseList, function (course) {
          if (!_.some($scope.coupon.couponCourseList, {course_id: course.id})) {
            $scope.coupon.couponCourseList.push({
              course_id: course.id,
              course: course
            })
          }
        })
      })
    }

    $scope.removeCouponCourse = function (course) {
      _.remove($scope.coupon.couponCourseList, {course_id: course.course_id})
    }
    
    $scope.checkFieldInfo = function(fieldInfo, coupon) {
    	if (fieldInfo.couponType && coupon.type != fieldInfo.couponType) {
    		return true;
    	}
    	
    	var fieldVal = coupon[fieldInfo.field];
    	if (!fieldVal) {
    		$uibMsgbox.error("请输入" + fieldInfo.fieldName + "！");
      	  	return false;
    	}
    	
    	if (fieldInfo.notAllowNegative && fieldVal < 0) {
    		$uibMsgbox.error(fieldInfo.fieldName + "不能输入负数！");
      	  	return false;
    	} else if (!fieldInfo.notAllowNegative && fieldVal < 0 && fieldInfo.negativeVal
    			&& fieldInfo.negativeVal != fieldVal) {
    		$uibMsgbox.error(fieldInfo.fieldName + "负数只能输入" + fieldInfo.negativeVal + "！");
      	  	return false;
    	}
    	
    	if (fieldInfo.isInteger && !Validator.intege.test(fieldVal)) {
    		$uibMsgbox.error(fieldInfo.fieldName + "必须为整数！");
      	  	return false;
    	}
    	return true;
    }

    /**
     * 保存优惠券
     * @return {[type]} [description]
     */
    $scope.saveCoupon = function () {
      var coupon = genCouponRequestParam();
      if (!coupon.name) {
    	  $uibMsgbox.error("请输入优惠券名称！");
    	  return false;
      }
      
      for (var i = 0; i < $scope.fieldInfos.length; i++) {
    	 if (!$scope.checkFieldInfo($scope.fieldInfos[i], coupon)) {
    		 return false;
    	 }
      }
      
      if (coupon.type == 'discount' && coupon.rate != 0 && !coupon.rate) {
    	  $uibMsgbox.error("请输入折扣！");
    	  return false;
      } else if (coupon.type == 'discount' && (coupon.rate < 0 || coupon.rate > 1)) {
    	  $uibMsgbox.error("折扣值必须在[0, 1]区间！");
    	  return false;
      }
      
      if (coupon.type == 'cut' && (coupon.amount_lower - coupon.rate) < 0) {
    	  $uibMsgbox.error("立减金额不能超过优惠券启用价格！");
    	  return false;
      } 

      if (coupon.all_course == 'N' && (!coupon.couponCourseList || coupon.couponCourseList.length == 0))  {
    	  $uibMsgbox.error("请至少添加一个课程！");
    	  return false;
      }
      
      if (coupon.all_course == 'N' && coupon.course_num && coupon.course_num > coupon.couponCourseList.length) {
    	  $uibMsgbox.error("添加的课程数不能小于课程数量设置值！");
    	  return false;
      }

      if (coupon.all_course == 'Y' && coupon.course_num != 1) {
          $uibMsgbox.error("应用于所有课程，课程数量必须设为1！");
          return false;
      }
      
      if (!coupon.describe) {
    	  $uibMsgbox.error("请输入优惠说明！");
    	  return false;
      } else {
    	  var descArr = coupon.describe.split("\n");
    	  if (descArr.length > 2) {
    		  $uibMsgbox.error("优惠说明最多只能输入两行！");
    		  return false;
    	  }
    	  
    	  for (var i = 0; i < descArr.length; i++) {
    		  if (descArr[i].length > 16) {
    			  $uibMsgbox.error("优惠说明每行最多只能输入16个字符！");
        		  return false;
    		  }
    	  }
      }
      
      if ($scope.optype == 'add') {
        erp_ebCouponService.add(coupon).$promise.then(function (resp) {
          if (!resp.error) {
            $uibMsgbox.success('添加成功！', function (res) {
              $scope.coupon = createCoupon();
              $scope.optype = 'list';
              $scope.getList();
            })
          } else {
            $uibMsgbox.error(resp.message)
          }
        }, function (resp) {
          console.log(resp)
        })
      } else if ($scope.optype == 'edit') {
        erp_ebCouponService.update(coupon).$promise.then(function (resp) {
          if (!resp.error) {
            $uibMsgbox.success('修改成功！', function (res) {
              $scope.coupon = createCoupon();
              $scope.optype = 'list';
              $scope.getList();
            })
          } else {
            $uibMsgbox.error(resp.message)
          }
        }, function (resp) {
          console.log(resp)
        })
      }
    }

    function genCouponRequestParam() {
      var couponCopy = _.cloneDeep($scope.coupon)
      var couponCourseList = []
      _.forEach(couponCopy.couponCourseList, function (item) {
        couponCourseList.push({
          course_id: item.course.id
        })
      })

      return {
        id: couponCopy.id,
        encoding: couponCopy.encoding || '',
        name: couponCopy.name,
        type: couponCopy.type,
        rate: couponCopy.rate,
        totals: couponCopy.totals,
        validity: couponCopy.validity,
        amount_lower: couponCopy.amount_lower,
        discount: couponCopy.discount,
        course_num: couponCopy.course_num,
        fit: couponCopy.fit,
        is_share: couponCopy.is_share,
        status: couponCopy.status,
        describe: couponCopy.describe,
        all_course: couponCopy.all_course,
        couponCourseList: couponCourseList
      }
    }

    $scope.editCoupon = function (coupon) {
      $scope.coupon = _.cloneDeep(coupon);
      $scope.allCourseCoupon = ($scope.coupon.all_course == 'Y');
      $scope.optype = 'edit'
    }

    $scope.cancelCoupon = function () {
      $scope.optype = 'list'
    }

    $scope.putStatus = function (coupon, status) {
      var opNames = ['删除', '启用', '停用']
      $uibMsgbox.confirm('确定' + opNames[status] + '该优惠券？',function (res) {
        if (res == 'yes') {
          erp_ebCouponService.changeStatus({
            id: coupon.id,
            status: status
          }).$promise.then(function (resp) {
            if (!resp.error) {
              $uibMsgbox.success(resp.message || '操作成功')
              $scope.getList();
            } else {
              $uibMsgbox.error(resp.message)
            }
          }, function (resp) {
            console.log(resp)
            $uibMsgbox.error('请求，错误码：' + resp.status + '，请联系管理员！')
          })
        }
      })
    }

    $scope.onCheckAllCourse = function() {
        if ($scope.allCourseCoupon) {
            $scope.coupon.all_course = 'Y';
            $scope.coupon.course_num = 1;
            $scope.coupon.couponCourseList = [];
        } else {
            $scope.coupon.all_course = 'N';
        }
    }
    $scope.getList()
  }
]);

/**
 * Created by hengshan.ou on 2017/1/16.
 */

"use strict";
angular
    .module('ework-ui')
    .controller('erp_OrdersIndexCouponRuleRelController', [
    '$rootScope',                                                             	
    '$scope',
    'erp_studentsService',
    'erp_couponInfoServices',
    'erp_couponRuleRelService',
    '$state',
    '$log',
    '$cookieStore',
     function(
    		    $rootScope,                                                             	
    		    $scope,
    		    erp_studentsService,
    		    erp_couponInfoServices,
    		    erp_couponRuleRelService,
        	    $state,
        	    $log,
        	    $cookieStore) {
    			$scope.business_type = 1; 
        		$scope.studentInfoList = [];
        	    $scope.studentInfo = {}; 
        	 	$scope.pageParam = new Object();
        	 	$scope.couponInfoList = {};
        	 	$scope.currStudentInfo = {};
        	 	$scope.currPrivilegeId = "";
        	 	
        	    $scope.selectBusinessType = function(business_type){
        	        $scope.business_type = business_type;
        	        return true;
        	    }
        	    
        	    /**
        	     * 分页查询学生信息
        	     */
        	    $scope.queryStudentInfo = function(pageNum){
        	        $scope.isQueryStudentInfo = true;
        	        $scope.studentInfoList = [];
        	        erp_studentsService.query(
        	            {
        	            	row_num: 20,
        	                currentPage:pageNum,
        	                studentId: $scope.studentInfoQueryInfo
        	            },
        	            function(resp){
        	                $scope.isQueryStudentInfo = false;
        	                if(!resp.error){
        	                	$scope.studentInfoList = resp.data;
        		               	$scope.pageParam.totalPage = resp.totalPage;
        		            	$scope.pageParam.pageSize = resp.pageSize;
        		            	$scope.pageParam.currentPage = resp.currentPage;
        		            	if ($scope.pageParam.currentPage > 1 && $scope.pageParam.currentPage < $scope.pageParam.totalPage) {
        		    	     	      $scope.paginationBars = [$scope.pageParam.currentPage - 1,$scope.pageParam.currentPage, $scope.pageParam.currentPage + 1];
        		              	} else if ($scope.pageParam.currentPage == 1 && $scope.pageParam.totalPage > 1) {
        		    	     	      $scope.paginationBars = [ $scope.pageParam.currentPage, $scope.pageParam.currentPage + 1];
        		              	} else if ($scope.pageParam.currentPage == $scope.pageParam.totalPage && $scope.pageParam.totalPage > 1) {
        		    	     	      $scope.paginationBars = [ $scope.pageParam.currentPage - 1,$scope.pageParam.currentPage];
        		              	} else if ($scope.pageParam.currentPage == $scope.pageParam.totalPage && $scope.pageParam.totalPage == 1) {
        		              		  $scope.paginationBars = [ $scope.pageParam.currentPage];
        		              	}
        	                }else{
        	                    alert(resp.message);
        	                }
        	            });
        	    }
        	    
        	    /**
        	     * 展开和关闭课程
        	     */
        	    $scope.toAddCouponRuleRel = function(){
        	    	$scope.selectedStudentInfoList = [];
        	    	queryCouponInfo();
        	    	
        	        angular.forEach($scope.studentInfoList, function (studentInfo) {
        	        	if(studentInfo.Selected){
        	        		var param ={};
        	        		param.id = studentInfo.id;
        	        		param.encoding = studentInfo.encoding;
        	        		param.student_name = studentInfo.student_name;

        	        		$scope.selectedStudentInfoList.push(param);
        	        	}
        	        });
        	        
        	        angular.forEach($scope.selectedStudentInfoList, function (selectedStudent) {
        	        	selectedStudent.Selected = true;
        	        });
        	        
        	        $scope.openPanel = 'toManageCouponRuleRel';
        	    }
        	    
        	    /**
        	     * 关闭窗口
        	     */
        	    $scope.closePanel = function(){
        	        $scope.openPanel = '';
        	    }
        	    
        	    /**
        	     * 保存优惠券
        	     */
        	    $scope.saveCouponRuleRel = function(){
        	        var param = {};
        	        $scope.openPanel = 'saveCouponRuleRel';
        	        genCouponRuleRel(param);
        	        erp_couponRuleRelService.post(param,function(resp){

        	            if(!resp.error){
        	                $scope.openPanel = 'saveCouponRuleRelOK';
        	                $scope.temporaryOrder = resp.data;
        	                $cookieStore.remove("temporaryOrderId");
        	            }else{
        	                $scope.openPanel = '';
        	                alert(resp.message);
        	            }
        	        },function(resp){
        	            $scope.openPanel = '';
        	            alert("保存失败！");
        	        }) 
        	    }
        	    
        	    function genCouponRuleRel(param){
        	    	$scope.strStudentIds = "";
        	        angular.forEach($scope.selectedStudentInfoList, function (selectedStudent) {
        	        	if(selectedStudent.Selected){
        	        		$scope.strStudentIds += selectedStudent.id +",";
        	        	}
        	        });
        	        
        	        if($scope.strStudentIds.length > 0){
        	        	$scope.strStudentIds = $scope.strStudentIds.substr(0,$scope.strStudentIds.length - 1);
        	        }
        	    	
        	        param.encoding = '100005104';
        	        param.study_ids = $scope.strStudentIds;
        	    }
        	    
        	    /**
        	     * 查询优惠券
        	     */
        	    function queryCouponInfo(){
        	    	erp_couponInfoServices.query({},function(resp){
        	            if(!resp.error){
        	                $scope.couponInfoList = resp.data;
        	            }
        	        })
        	    }
        	    
        	    /**
        	     * 选择所有的学生
        	     */
        	    $scope.checkedAllStudents = function(){
        	        if($scope.studentInfo.checkelStudents){
        	        	$scope.studentInfo.checkelStudents = true;
        	        }else{
        	        	$scope.studentInfo.checkelStudents = false;
        	        }
        	        
        	        angular.forEach($scope.studentInfoList, function (student) {
        	        	student.Selected = $scope.studentInfo.checkelStudents;
        	        });
        	    }
        	    
        	    $scope.queryStudentInfo(1);
        }
]);


/**
 * Created by Liyong.zhu on 2016/10/27.
 *
 * Modify by baiqb@klxuexi.org
 * 2017-10-19：
 *    - 添加在线支付功能
 */
"use strict";
angular
  .module('ework-ui')
  .controller('erp_OrdersIndexOrdersController', [
    '$rootScope',
    '$scope',
    '$cookieStore',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    'erp_wfdComboService',
    'erp_studentsService',
    'erp_timeSeasonService',
    'erp_subjectService',
    'erp_gradeService',
    'erp_studentBuOrgsService',
    'erp_courseService',
    'erp_courseTimesService',
    'erp_privilegeRuleService',
    'erp_couponInfoService',
    'erp_studentIndexAccountService',
    'erp_companyAccountService',
    'erp_deviceService',
    'erp_orderManagerService',
    'PUBORGSelectedService',
    'erp_courseLadderService',
    'erp_sortNumService',
    'erp_courseListeningService',
    erp_OrdersIndexOrdersController
  ]);

function erp_OrdersIndexOrdersController(
  $rootScope,
  $scope,
  $cookieStore,
  $log,
  $state,
  $uibModal,
  $uibMsgbox,
  erp_wfdComboService,
  erp_studentsService,
  erp_timeSeasonService,
  erp_subjectService,
  erp_gradeService,
  erp_studentBuOrgsService,
  erp_courseService,
  erp_courseTimesService,
  erp_privilegeRuleService,
  erp_couponInfoService,
  erp_studentIndexAccountService,
  erp_companyAccountService,
  erp_deviceService,
  erp_orderManagerService,
  PUBORGSelectedService,
  erp_courseLadderService,
  erp_sortNumService,
  erp_courseListeningService
) {
  //学员信息
  $scope.student = {};
  // 当前组织机构
  $scope.selectedOrg = {};
  queryBuOrgs();
  //学员账户信息
  $scope.studentIndexAccount = {};
  //学员咨询学管
  $scope.studentIndexCounselors = {};
  //学员报班记录查询类型
  $scope.queryHistoryType = 0;
  //暂存的订单
  $scope.temporaryOrder = null;
  // 业务类型
  $scope.business_type = 1;
  // 科目列表
  $scope.subjectList = [];
  // 已选择的科目
  $scope.selectedSubject = null;
  $scope.gradeList = [];
  $scope.selectedGrade = null;
  $scope.selectedTimeSeason = null;
  $scope.timeSeasonList = [];
  $scope.selectedBranch = null;
  $scope.selectedCourseLadder = null;
  $scope.selectedCourseList = [];
  $scope.selectedDXBCourseList = [];
  $scope.selectedWFDCourseList = [];
  $scope.selectedYDYCourseList = [];
  $scope.studentIndexAccount = {};
  $scope.searchInfo = '';
  $scope.studentQueryInfo = {};
  $scope.selectedCourseList = [];
  // 试听课程列表
  $scope.courseListeningList = [];
  //产品线 1-培英精品班 2-个性化 11-佳音
  $scope.productLine = 1;
  
  $scope.conf = {
    showAllBranch: false,
    showAllTimeSeason: false,
    showAllGrade: false,
    showAllSubject: false
  }
  $('title').text('报班 | 厝边素高');
  //整体优惠规则类型定义
  $scope.Preferential = {
    tabType: 'PreferentialRules',
    immediate_reduce: null,
    immediate_remark: null
  }
  $scope.studentList = [];
  $scope.Preferential.tabType = 'PreferentialRules';
  //获取传入的订单id
  $scope.studentId = $("#rootIndex_studentId").val() || $state.params.studentId;

  $scope.payment = {
    cash: 0,
    card: 0,
    card_detail: [],
    transfer: 0,
    transfer_detail: [],
    onlinePrice: 0, // 在线支付
    onlinePayEnable: true,
    storeAccount: 0, // 储值账户    
    frozenAccount: 0, // 冻结账户
    paymentAccount: 0
  };
  
  //暂存的订单
  var orderId = $("#rootIndex_temporaryOrderId").val();
  if (orderId) {
    $scope.openPanel = 'isLoadingTemporaryOrder';
    erp_orderManagerService.query({
      order_id: orderId,
      orderType: 'temporaryOrder'
    }, function(resp) {
      $scope.openPanel = '';
      if (!resp.error) {
        $scope.temporaryOrder = resp.data;
        initialTemporaryOrder();
        if ($scope.temporaryOrder.billNo && $scope.temporaryOrder.onlinepay_date) {
          $scope.payment.onlinePayEnable = false
          $scope.payment.onlinePayBtnLabel = '查询订单支付信息...'
          erp_orderManagerService.getPayOnlineResult({
            billDate: $scope.temporaryOrder.onlinepay_date,
            billNo: $scope.temporaryOrder.billNo
          }).$promise.then(function (resp) {
            $scope.payment.onlinePayBtnLabel = '缴费'
            var res = JSON.parse(resp.data)
            if (res.billStatus == 'PAID' && res.totalAmount) {
              // 银联在线支付金钱单位是分，所以需要除以100
              $scope.payment.onlinePrice = res.totalAmount / 100
              $scope.payment.onlinePayEnable = false
            } else {
              $scope.payment.onlinePrice = 0
              $scope.payment.onlinePayEnable = true
            }
          }, function (resp) {
            $uibMsgbox.error('查询报班单在线支付信息失败！请联系管理员！')
            console.log(resp)
            $scope.payment.onlinePayBtnLabel = '缴费'
          })
        }
        if ($scope.temporaryOrder.check_status == 3 && $scope.temporaryOrder.valid_status && !$scope.temporaryOrder.pay_status) {
          $scope.nextStep(3, 4);
        }
        if ($scope.temporaryOrder.check_status == 1 && $scope.temporaryOrder.valid_status && !$scope.temporaryOrder.pay_status) {
          $.each($scope.temporaryOrder.details, function(i, detail) {
            if ($scope.temporaryOrder.business_type == 1) {
              $scope.selectedDXBCourseList.push(detail.tCourseInfo);
              $scope.selectedCourseList = $scope.selectedDXBCourseList;
            }
            if ($scope.temporaryOrder.business_type == 2) {
              $scope.selectedYDYCourseList.push(detail.tCourseInfo);
              $scope.selectedCourseList = $scope.selectedYDYCourseList;
            }
            if ($scope.temporaryOrder.business_type == 3) {
              $scope.selectedWFDCourseList.push(detail.tCourseInfo);
              $scope.selectedCourseList = $scope.selectedWFDCourseList;
            }
          });
          $scope.selectedDXBCourseList.push();
          $scope.nextStep(1, 2);
        }
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  /**
   * 从暂存订单进行初始化
   */
  function initialTemporaryOrder() {
    //学员
    if ($scope.temporaryOrder.studentInfo) {
      $scope.studentList = [];
      $scope.studentList.push($scope.temporaryOrder.studentInfo);
      $scope.curStudent = $scope.temporaryOrder.studentInfo;
      $scope.student = $scope.temporaryOrder.studentInfo;
      $scope.temporaryOrder.studentInfo.checked = true;
    }


    //选课
    $scope.selectedCourseList = [];
    $.each($scope.temporaryOrder.details, function(i, detail) {

      if (detail.tCourseInfo) {
        $scope.selectedCourseList.push(detail.tCourseInfo);
        detail.tCourseInfo.selectedCourseTimesCount = detail.course_total_count;
        if (detail.orderCourseTimes && detail.tCourseInfo.courseSchedulingList) {

          $.each(detail.tCourseInfo.courseSchedulingList, function(j, courseScheduling) {
            var checked = false;
            $.each(detail.orderCourseTimes, function(h, courseTime) {
              if (courseScheduling.course_times == courseTime.course_times) {
                checked = true;
              }
            });
            courseScheduling.checked = true;
          })
        }
      }


    });
    //如果是立减
    if ($scope.temporaryOrder.immediate_reduce) {
      $scope.Preferential.tabType = 'PreferentialReduction';
      $scope.Preferential.immediate_reduce = $scope.temporaryOrder.immediate_reduce;
      $scope.Preferential.immediate_remark = $scope.temporaryOrder.extend_column;
    }
    //优惠券
    if ($scope.temporaryOrder.coupon_rels) {
      $.each($scope.temporaryOrder.coupon_rels, function(i, coupon) {
        var param = {};
        param.encoding = coupon.coupon_encoding;
        erp_couponInfoService.query(param, function(resp) {
          if (!resp.error) {
            if (resp.data) {
              var exist = false;
              if ($scope.foundedCouponInfos) {
                $.each($scope.foundedCouponInfos, function(j, couponInfo) {
                  if (couponInfo.id == resp.data.id) {
                    exist = true;
                  }
                });
              }

              if (!exist) {
                $scope.foundedCouponInfos.push(resp.data);
                resp.data.checked = true;
              } else {
                $uibMsgbox.alert("已添加！");
              }

            }
          } else {
            $uibMsgbox.alert(resp.message);
          }
        })
      });
    }

    $scope.selectedOrder = {};
    $.extend($scope.selectedOrder, $scope.temporaryOrder);
  }

  /**
   * 查询学员
   */
  $scope.queryStudents = function() {
    var param = {
      pageSize: 10,
      row_num: 10,
      need_contact: '1',
      searchInfo: $scope.studentQueryInfo.searchInfo,
      searchType: $scope.exactSearch ? 1 : 0
    };
    if($scope.studentId){
      param.studentId = $scope.studentId;
    }
    $scope.isQueryStudent = true;
    $scope.studentList = [];
    erp_studentsService.query(param,
      function(resp) {
        $scope.isQueryStudent = false;
        if(!resp.error){
          $scope.studentList = [];
          if(resp.data && resp.data.length > 0 && $scope.studentId) {
            $scope.student = resp.data[0];
            $scope.productLine = $scope.student.product_line;
            $scope.student.checked = true;
            $scope.curStudent = $scope.student;
            $scope.studentList.push($scope.student);
          }else{
            $scope.studentList = resp.data;
          }
          if (resp.data && resp.data.length == 0) {
            $uibMsgbox.confirm('查询不到对应的学员，是否立即创建学员？', function(res) {
              if (res == 'yes') {
                window.open('#/students/newStudent')
              }
            })
          }
        }else{
          $uibMsgbox.alert(resp.message);
        }
      });
  };

  /**
   * 选择学员
   * @param student
   */
  $scope.checkedStudent = function(student) {
    if (student.checked) {
      student.checked = false;
      $scope.studentId = null;
      $scope.student = undefined;
      $scope.productLine = 1;
    } else {
      student.checked = true;
      $scope.student = student;
      $scope.productLine = student.product_line;

      if ($scope.curStudent && $scope.curStudent.id != student.id) {
        $scope.curStudent.checked = false;
        $scope.selectedCourseList = [];
        $scope.selectedDXBCourseList = [];
        $scope.selectedWFDCourseList = [];
        $scope.selectedYDYCourseList = [];
      }
      $scope.curStudent = $scope.student;
      $scope.studentId = $scope.curStudent.id;
    }
  }


  /**
   * 下一步、上一步
   * @param before
   * @param next
   */
  $scope.nextStep = function(before, next) {
    if (next == 3) {
      if ($scope.business_type == 1) {
        $scope.selectedCourseList = $scope.selectedDXBCourseList;
      }
      if ($scope.business_type == 2) {
        $scope.selectedCourseList = $scope.selectedYDYCourseList;
      }
      if ($scope.business_type == 3) {
        $scope.selectedCourseList = $scope.selectedWFDCourseList;
      }
      console.log($scope.selectedCourseList)
      if (!checkSelectedCourse()) {
        return;
      }
    }
    if (next == 4 && before == 3) {
        $scope.isFushu = false;
        $.each($scope.selectedCourseList, function(i, course) {
           if(course.discount_sum_price < 0){
               $scope.isFushu = true;
           }
        });

        if($scope.isFushu){
            $uibMsgbox.alert("课程单价不允许为负数，请重新确认!");
            return;
        }

      if ($scope.temporaryOrder && ($scope.temporaryOrder.check_status == 1 || !$scope.temporaryOrder.check_status)) {
        //检查是否需要走审批，如果需要，则先走审批
        $scope.saveOrder();
        return;
      } else if ($scope.temporaryOrder && $scope.temporaryOrder.check_status == 2) {
        //审核中，走提示已经提交审核，流程结束
        $uibMsgbox.alert("订单审核中！");
        return;
      } else if ($scope.temporaryOrder && $scope.temporaryOrder.check_status == 3) {

      } else {
        //检查是否需要走审批，如果需要，则先走审批
        $scope.saveOrder();
        return;
      }

    }
    $scope.step = next;
    /**
     * Fixed Bug  648 勾选 学员，会过滤，把勾选去掉后，不会恢复了（操作返回上一步）
     * @baiqb 2017/5/24 16:02:39
     * 
     */
    // if ($scope.step == 1) {
    //   $scope.studentList = [];
    //   $scope.studentList.push($scope.curStudent);
    // }
    // END Fixed Bug
     
    /**
     * Modify baiqb@klxue.org
     * 如果产品线是个性化的，选择课程时默认打开个性化标签
     *  productLine: 2为个性化，11为佳音，仅在选择个性化时，课程选择默认打开1对1标签
     */
    if (before == 1 && $scope.step == 2) {
      if ($scope.selectedOrg.productLine == 2) {
        $scope.business_type = 2
      } else {
        $scope.business_type = 1
      }
      
      /**
       * Add By baiqb@klxuexi.org
       * 添加试听课程列表
       */
      queryListeningCourseList();
    }
    if ($scope.step == 3) {
      if ($scope.business_type == 1) {
        $scope.selectedCourseList = $scope.selectedDXBCourseList;
      }
      if ($scope.business_type == 2) {
        $scope.selectedCourseList = $scope.selectedYDYCourseList;
      }
      if ($scope.business_type == 3) {
        $scope.selectedCourseList = $scope.selectedWFDCourseList;
      }
      queryPrivilegeRule();
      CalculationOrders();
      if ($scope.temporaryOrder) {
        $scope.selectedOrder.remark = $scope.temporaryOrder.remark;
      }
    }
    if ($scope.step == 4) {
      queryCompanyAccount();
      queryDeviceInfo();
      queryStudentAccount();
    }
  }

  /**
   * 查询试听课程列表
   * student_id: 学员id
   * business_type: 业务类型，1：班级课，2：一对一，3：晚辅导，目前只选择1
   * @return {[type]} [description]
   * 
   * @author: baiqb@klxuexi.org
   * @date: 2017/5/26 21:47:18
   */
  function queryListeningCourseList() {
    $scope.courseListeningList = []
    erp_courseListeningService.query({
      student_id: $scope.studentId,
      business_type: 1,
      isPage: 0 //不分页
    }, function (resp) {
      if (!resp.error) {
        $scope.courseListeningList = resp.data;
        _.forEach( function() {
          item.isSelected = false; //默认课程未选择
        });
      }
    })
  }

  function checkSelectedCourse() {
    if ((!$scope.selectedDXBCourseList || !$scope.selectedDXBCourseList.length) && (!$scope.selectedWFDCourseList || !$scope.selectedWFDCourseList.length) && (!$scope.selectedYDYCourseList || !$scope.selectedYDYCourseList.length)) {
      return false;
    }
    var selectedCourseTimes = true;

    $.each($scope.selectedCourseList, function(i, course) {
      if (!course.selectedCourseTimesCount) {
        selectedCourseTimes = false;
        var msg='';
        if($scope.business_type==1){
          msg="请选择课程课次！如果课程课次已满，且已排号，请到【排号业务】中查看排号详情";
        }
        if($scope.business_type==2){
          msg="请填写报班课时";
        }
        if($scope.business_type==3){
          msg="请填写报班课次";
        }
        $uibMsgbox.alert(msg);
      }
    });
    return selectedCourseTimes;
  }

  /**
   * 查询学员账户
   */
  function queryStudentAccount() {
    var param = {};
    param.studentId = $scope.student.id;
    erp_studentIndexAccountService.query(param, function(resp) {
      if (!resp.error) {
        $scope.studentIndexAccount = resp.data;
      }
    });
  }

  //默认走第一步
  $scope.step = 1;

  $scope.selectBusinessType = function(business_type) {
    // 页签未变动，不处理
    if($scope.business_type == business_type) {
      return;
    }
    if($scope.business_type == 1 && $scope.selectedDXBCourseList.length > 0 ||
       $scope.business_type == 2 && $scope.selectedYDYCourseList.length > 0 ||
       $scope.business_type == 3 && $scope.selectedWFDCourseList.length > 0) {
          $uibMsgbox.warn("已选定报班课程，不可切换页签！");
      return;
    }
    $scope.business_type = business_type;
    if (business_type == 3) {
      //            queryComboWfd();
    }
    return true;
  };

  /**
   * 展开和关闭课程
   */
  $scope.toSelectedCourse = function() {
    $scope.openPanel = 'toSelectedCourseState'
    $scope.querySelectingCourse();
  }


  /**
   * 查询课程季
   */
  function queryTimeSeason() {
    erp_timeSeasonService.list({}, function(resp) {
      if (!resp.error) {
        $scope.timeSeasonList = resp.data;
      }
    })
  }

  /**
   * 查询科目
   */
  function querySubject() {
    erp_subjectService.querySelectDatas({
      branch_id: $scope.selectedBranch ? $scope.selectedBranch.id : -1,
      season_id: $scope.selectedTimeSeason ? $scope.selectedTimeSeason.id : -1,
      grade_id: $scope.selectedGrade ? $scope.selectedGrade.id : -1
    }, function(resp) {
      if (!resp.error) {
        $scope.subjectList = resp.data;
      }
    })
  }

  /**
   * 查询年级
   */
  function queryGrade() {
    erp_gradeService.querySelectDatas({
      branch_id: $scope.selectedBranch ? $scope.selectedBranch.id : -1,
      season_id: $scope.selectedTimeSeason ? $scope.selectedTimeSeason.id : -1
    }, function(resp) {
      if (!resp.error) {
        $scope.gradeList = resp.data;
        if ($scope.student && $scope.student.grade_id) {
          $.each($scope.gradeList, function(i, grade) {
            if (grade.id == $scope.student.grade_id) {
              $scope.selectedGrade = grade;
            }
          })
        }
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  /**
   * 查询校区
   */
  function queryBuOrgs() {
    erp_studentBuOrgsService.queryAll({}, function(resp) {
      if (!resp.error) {
        $scope.branchList = resp.data;
        querySelectedOrg();
      }
    })
  }

  function querySelectedOrg(){
      PUBORGSelectedService.query({},function(resp){
          if(!resp.error){
              $scope.selectedOrg = resp.data;
              if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
                  $.each($scope.branchList,function(i,b){
                      if(b.id == $scope.selectedOrg.id){
                    	  $scope.selectedBranch = b;
                      }
                  });
                  queryTimeSeason();
                  querySubject();
                  queryGrade();
              }else{
              	$uibMsgbox.warn("请选择校区!");
              }
          }else{
          	$uibMsgbox.error(resp.message);
          }
      })
  }
  /**
   * 选择校区
   * @param branch
   */
  $scope.selectBranch = function(branch) {
    $scope.selectedBranch = branch;
    querySubject();
    queryGrade();
    $scope.querySelectingCourse();
  }

  /**
   * 选择课程季
   * @param season
   */
  $scope.selectSeason = function(season) {
    $scope.selectedTimeSeason = season;
    querySubject();
    queryGrade();
    $scope.querySelectingCourse();
  }

  /**
   * 选择年级
   * @param grade
   */
  $scope.selectGrade = function(grade) {
    $scope.selectedGrade = grade;
    querySubject();
    $scope.querySelectingCourse();
  }

  /**
   * 选择科目
   * @param subject
   */
  $scope.selectSubject = function(subject) {
    $scope.selectedSubject = subject;
    $scope.querySelectingCourse();
  }

  $scope.paginationConf = {
    currentPage: 1, //当前页
    totalItems: 0,
    itemsPerPage: 10,
    onChange: function () {
      $scope.querySelectingCourse();
    }
  };

  /**
   * 查询课程
   */
  $scope.querySelectingCourse = function() {
    if ($scope.business_type == 1) {
      $scope.selectedCourseList = $scope.selectedDXBCourseList;
    }
    if ($scope.business_type == 2) {
      $scope.selectedCourseList = $scope.selectedYDYCourseList;
    }
    if ($scope.business_type == 3) {
      $scope.selectedCourseList = $scope.selectedWFDCourseList;
    }
    
    var param = {
      pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
      currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
      branch_id: $scope.selectedBranch.id,
      season_id: $scope.selectedTimeSeason ? $scope.selectedTimeSeason.id : -1,
      grade_id: $scope.selectedGrade ? $scope.selectedGrade.id : -1,
      subject_id: $scope.selectedSubject ? $scope.selectedSubject.id : -1,
      business_type: $scope.business_type,
      status : 1, //只查询上架课程
      search_info: $("#courseSearchInfo").val()
    };
    $scope.isQuerySelectingCourse = 'isQuerySelectingCourse';
   
    erp_courseService.query(param, function(resp) {
      $scope.toSelectingCourseList = [];
      $scope.isQuerySelectingCourse = '';
      if (!resp.error) {
        var selectedCount = 0;
        var toSelectingCourseList = resp.data;
        $.each(toSelectingCourseList, function(i, course) {
          var selected = false;
          $.each($scope.selectedCourseList, function(j, selectedCourse) {
            if (selectedCourse.id == course.id) {
              selected = true;
              selectedCount ++;
            }
          });
          if (!selected) {
            $scope.toSelectingCourseList.push(course);
          }
        });
        $scope.paginationConf.totalItems = resp.total; //设置总条数
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  function queryComboWfd() {
    var branch_id = $scope.selectedBranch.id;
    erp_wfdComboService.query({
      pageSize: 999,
      p_grade: $scope.selectedGrade ? $scope.selectedGrade.id : $scope.selectedGrade,
      p_branch_id: branch_id
    }, function(response) {
      if (!response.error) {
        $scope.comboWfds = response.data;
        $scope.comboWfdsRec = [];
        $.each($scope.comboWfds, function(k, wfd) {
          $scope.comboWfdsRec.push(wfd);
        });
      }
    });
  }

  function queryLadder(course) {
	  
	  erp_courseLadderService.list({p_course_id :course.id
	    }, function(response) {
	      if (!response.error) {
	        $scope.ladders = response.data;
	      }
	    });
  }

  /**
   * 选择课程
   * @param course
   */
  $scope.selectedCourse = function(course) {
    //        $scope.selectedCourseList.push(course);
    course.selectedCourseTimesCount = 0;
    $scope.openPanel = '';
    if ($scope.business_type == 1) {
      $scope.selectedDXBCourseList.push(course);
      hideListeningCourseTimes(course);
      $scope.openCourseTimesPanel(course);
    }
    if ($scope.business_type == 2) {
      course.branch_name=$scope.selectedBranch.org_name;
      course.branch_id=$scope.selectedBranch.id;
      $scope.selectedYDYCourseList.push(course);
      queryLadder(course);
    }
    if ($scope.business_type == 3) {
      $scope.selectedWFDCourseList.push(course);
      queryComboWfd();
    }

  }
  function hideListeningCourseTimes (course) {
    setListeningCourseTimesSelected(course, true)
  }
  function showListeningCourseTimes (course) {
    setListeningCourseTimesSelected(course, false)
  }
  function setListeningCourseTimesSelected (course, action) {
    _.forEach($scope.courseListeningList, function(item) {
      if (item.COURSE_ID == course.id) {
        item.courseSelected = action;
      }
    })
  }

  /**
   * 移除课程
   * @param course
   */
  $scope.removeCourse = function(course) {
    if ($scope.business_type == 1) {
      removeDXBCourse(course);
    }
    if ($scope.business_type == 2) {
    	removeYDYCourse(course);
      }
    if ($scope.business_type == 3) {
      removeWFDCourse(course);
    }
    $scope.toSelectedCourse();
  }

  function removeDXBCourse(course) {
    var selectedDXBCourseList = [];
    $.each($scope.selectedDXBCourseList, function(i, model) {
      if (model.id != course.id) {
        selectedDXBCourseList.push(model);
      }
    });
    $scope.selectedDXBCourseList = selectedDXBCourseList;
    showListeningCourseTimes(course)
  }
  
  function removeYDYCourse(course) {
	    var selectedYDYCourseList = [];
	    $.each($scope.selectedYDYCourseList, function(i, model) {
	      if (model.id != course.id) {
	        selectedYDYCourseList.push(model);
	      }
	    });
	    $scope.selectedYDYCourseList = selectedYDYCourseList;
	  }

  function removeWFDCourse(course) {
    var selectedWFDCourseList = [];
    $.each($scope.selectedWFDCourseList, function(i, model) {
      if (model.id != course.id) {
        selectedWFDCourseList.push(model);
      }
    });
    $scope.selectedWFDCourseList = selectedWFDCourseList;
  }

  /**
   * 修改课时课次信息
   * @param course
   */
  $scope.toChangeCourseTimes = function(course) {
    $scope.currentCourse = course;
  }

  $scope.curCourse = null;

  /**
   * 试听报名
   * @param  {[type]} courseId [description]
   * @return {[type]}          [description]
   */
  $scope.handleListeningSignUp = function(courseId) {
    erp_courseService.query({
      course_id: courseId
    }, function (resp) {
      if (!resp.error && resp.data && resp.data.length > 0) {
        $scope.selectedCourse(resp.data[0])
      } else {
        $uibMsgbox.error(resp.message);
      }
    })
  }
  
  /**
   * 打开课次面板
   * @param course
   */
  $scope.openCourseTimesPanel = function(course) {
    $scope.curCourse = course || $scope.curCourse;
    $scope.openPanel = 'showCourseTimes';
    queryCourseTimes();

    /**
     * 查询课次明细
     * @return {[type]} [description]
     */
    function queryCourseTimes() {
      var param = {};
      param.courseId = course.id;
      param.studentId = $scope.student.id;
      $scope.isLoadingCourseTimesPanel = 'isLoadingCourseTimesPanel';
      erp_courseTimesService.query(param, function(resp) {
        $scope.isLoadingCourseTimesPanel = '';
        if (!resp.error) {
          course.courseSchedulingList = resp.data;

          if (course.checkedAllTimes == undefined) {
            var checkedAllTimes = true;
            _.forEach(course.courseSchedulingList, function(node) {
              
              if (!node.is_ordered) {
                node.checked = true;
              } else {
                checkedAllTimes = false;
              }
            })
            course.checkedAllTimes = checkedAllTimes;
          } else {
            course.courseTimeList = course.courseTimeList || [];
            _.forEach(course.courseSchedulingList, function(item) {
              if (_.some(course.courseTimeList, {id: item.id})) {
                item.checked = true;
              }
            })
          }
          course.canSelCourseList = []
          _.forEach(course.courseSchedulingList, function(node) {
              // 查询每个课次是否在试听列表中有存在，如果存在，则设置为已试听
              // 且禁用反选
              if (_.some($scope.courseListeningList, {
                COURSE_ID: node.course_id,
                COURSE_TIMES: node.course_times.toString()
              })) {
                node.is_listening = true;
              }
          	  if ((!node.is_ordered && !node.people_count )
                    ||(!node.is_ordered && node.people_count 
                        &&node.people_count > node.people_checkCount)) {
              course.canSelCourseList.push(node)
            }
          })
          countCourseTimesChecked(course);
        }
      })
    }
  }

  /**
   * 选择课次
   * @param courseTime
   */
  $scope.checkedCourseTimes = function(courseTime) {
    if (courseTime.checked) {
      courseTime.checked = false;
    } else {
      courseTime.checked = true;
    }
    countCourseTimesChecked($scope.curCourse);
  }

  /**
   * 选择所有的课次
   */
  $scope.checkedAllCourseTimes = function() {
    if ($scope.curCourse.checkedAllTimes) {
      if ($scope.curCourse.canSelCourseList) {
        $.each($scope.curCourse.canSelCourseList, function(i, node) {
          if(!node.is_listening) {
            node.checked = false;
          }
        });
      }
    } else {
      if ($scope.curCourse.canSelCourseList) {
        $.each($scope.curCourse.canSelCourseList, function(i, node) {
          if ((!node.is_ordered && !node.people_count )||
            (!node.is_ordered && node.people_count &&node.people_count > node.people_checkCount)) {
            node.checked = true;
          }
        });
      }
    }

    countCourseTimesChecked($scope.curCourse);
  }

  /**
   * 计算当前所有计算的课次
   * @param course
   */
  function countCourseTimesChecked(course) {
    if (course.canSelCourseList) {
      var count = 0;
      course.courseTimeList = []
      $.each(course.canSelCourseList, function(i, node) {
        if (node.checked) {
          count++;
          course.courseTimeList.push(node)
        }
      });
      course.selectedCourseTimesCount = count;
      course.SUM_PRICE = course.ACTUAL_PRICE * course.selectedCourseTimesCount;

      if (course.selectedCourseTimesCount == course.canSelCourseList.length) {
        course.checkedAllTimes = true;
      } else {
        course.checkedAllTimes = false;
      }
    }
  }

  /**
   * 关闭窗口
   */
  $scope.closePanel = function() {
    $scope.openPanel = '';
  }


  /**
   * 查询优惠规则
   */
  function queryPrivilegeRule() {
    $scope.privilegeRuleList = [];
    erp_privilegeRuleService.query({
        productLine: $scope.business_type,
        isOrder: 'true'
    }, function(resp) {
      if (!resp.error) {
        $scope.privilegeRuleList = resp.data;
        $scope.privilegeRuleList.unshift({
          id: -1,
          rule_name: ""
        });
        _.forEach($scope.selectedCourseList, function(course) {
          if (course.selectedRule) {
            course.selectedRule = _.find($scope.privilegeRuleList, {id: course.selectedRule.id})
          }
        })
        //暂存初始化优惠规则
        if ($scope.temporaryOrder) {
          //科目级
          $.each($scope.temporaryOrder.details, function(i, course) {
            if (course.rule_id) {
              $.each($scope.privilegeRuleList, function(j, rule) {
                if (rule.id == course.rule_id) {
                  if (course.tCourseInfo) {
                    course.tCourseInfo.selectedRule = rule;
                  } else {
                    $log("error found,course info not found,course_id is " + course.course_id);
                  }

                }
              })
            }
          });

          //订单级
          if ($scope.temporaryOrder.rule_id) {
            $.each($scope.privilegeRuleList, function(j, rule) {
              if (rule.id == $scope.temporaryOrder.rule_id) {
                $scope.theWholeRule = rule;
              }
            })
          }

          CalculationOrders();
        }
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  $scope.coupon = { '1': '折扣', '2': '金额', '3': '每课时优惠' };
  $scope.use_scope_types = { '1': '通用', '2': '老学员', '3': '新学员', '4': '推荐人', '5': '被推荐人' };
  $scope.theWholeRule = null;
  $scope.foundedCouponInfos = [];
  $scope.CouponInfo = {};

  /**
   * 选择整体优惠规则
   * @param rule
   */
  $scope.selectedWholeRule = function(rule) {
    if ($scope.theWholeRule && $scope.theWholeRule.id == rule.id) {
      $scope.theWholeRule = undefined;
    } else {
      $scope.theWholeRule = rule;
    }
    CalculationOrders();
  }

  /**
   * 获取优惠券
   */
  $scope.queryCouponInfo = function() {
    var param = {};
    param.encoding = $scope.CouponInfo.inputCouponInfoEncoding;
    erp_couponInfoService.query(param, function(resp) {
      if (!resp.error) {
        if (resp.data) {
          var exist = false;
          if ($scope.foundedCouponInfos) {
            $.each($scope.foundedCouponInfos, function(i, couponInfo) {
              if (couponInfo.id == resp.data.id) {
                exist = true;
              }
            });
          }

          if (!exist) {
            $scope.foundedCouponInfos.push(resp.data);
          } else {
            $uibMsgbox.alert("已添加！");
          }
        } else {
        	$uibMsgbox.alert("没有该优惠券信息！");
        }
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  /**
   * 选中优惠券
   * @param couponInfo
   */
  $scope.checkCouponInfo = function(couponInfo) {
    if (couponInfo.checked) {
      couponInfo.checked = false;
    } else {
      couponInfo.checked = true;
    }
    CalculationOrders();
  }

  //选择单科目优惠规则
  $scope.changeCourseSelectedRule = function() {
    CalculationOrders();
  }



  $scope.selectTab = function(tabName) {
    $scope.Preferential.tabType = tabName;
    CalculationOrders();
    return true;
  }


  /**
   * Add by baiqb@klxuexi.org
   * 如果是暂存订单，增加在线支付判断
   */
  var ids = 1;

  /**
   * 立减
   */
  $scope.changeImmediateReduce = function() {
    if ($scope.Preferential.tabType == 'PreferentialReduction' && $scope.Preferential.immediate_reduce && !genNumByString($scope.Preferential.immediate_reduce)) {
      $scope.Preferential.immediate_reduce = null;
      return;
    }
    CalculationOrders();
  }

  /**
   * 添加现金
   */
  $scope.addCash = function() {
    $scope.payment.cash = genNumByString($scope.payment.paymentCash);
    $scope.payment.cash = !$scope.payment.cash ? 0 : $scope.payment.cash;
    $scope.openPanel = '';
  }

  /**
   * 储值账户缴费
   */
  $scope.addStoreAccount = function() {
    var paymentAccount = genNumByString($scope.payment.paymentStoreAccount);
    paymentAccount = !paymentAccount ? 0 : paymentAccount;
    if (paymentAccount > $scope.studentIndexAccount.STORE_ACCOUNT) {
      $uibMsgbox.alert("账户余额不足！");
      return;
    }
    $scope.payment.storeAccount = genNumByString(paymentAccount);
    $scope.payment.storeAccount = !$scope.payment.storeAccount ? 0 : $scope.payment.storeAccount;
    $scope.openPanel = '';
  }

  /**
   * 冻结账户缴费
   */
  $scope.addFrozenAccount = function() {
    var paymentAccount = genNumByString($scope.payment.paymentFrozenAccount);
    paymentAccount = !paymentAccount ? 0 : paymentAccount;
    if (paymentAccount > $scope.studentIndexAccount.FROZEN_ACCOUNT) {
      $uibMsgbox.alert("账户余额不足！");
      return;
    }
    $scope.payment.frozenAccount = genNumByString(paymentAccount);
    $scope.payment.frozenAccount = !$scope.payment.frozenAccount ? 0 : $scope.payment.frozenAccount;
    $scope.openPanel = '';
  }

  /* 刷卡操作 */
  $scope.toCardPrice = function() {
      $scope.inputCradInfo = {};
      $scope.inputCradInfo.account = $scope.accountListPos[0].id;
      $scope.inputCradInfo.account_cmp = $scope.accountListPos[0].account_name;
      $scope.inputCradPrice = true;

      /** 添加刷卡记录 */
      $scope.addInputCradInfo = function() {
        var str = Format('yyyy-MM-dd hh:mm:ss', new Date());
        var staffappprem = genFloatByString($scope.inputCradInfo.staffappprem);
        if (!staffappprem) {
          $scope.inputCradInfo.staffappprem = 0;
          // 保存失败了
          $uibMsgbox.alert('请输入刷卡金额！');
          return;
        }
        $scope.inputCradInfo.staffappprem = staffappprem;

        if ($scope.inputCradInfo.staffappprem <= 0) {
          // 保存失败了
          $uibMsgbox.alert('请输入正确的刷卡金额！');
          return;
        }
        if (!$scope.inputCradInfo.client_card_no) {
          // 保存失败了
          $uibMsgbox.alert('请输入刷卡卡号！');
          return;
        }
        // 获取pos机信息
        genPosID($scope.inputCradInfo, $scope.accountListPos);
        var detailInfo = {
          client_card_no: $scope.inputCradInfo.client_card_no,
          staffappprem: parseFloat($scope.inputCradInfo.staffappprem),
          payment_way: 2,
          createTime: str,
          simple_cmp_name: $scope.inputCradInfo.account_cmp,
          pos_id: $scope.inputCradInfo.pos_id,
          company_card_id: $scope.inputCradInfo.company_card_id,
          account_name: $scope.inputCradInfo.simple_name,
          extend_column: $scope.inputCradInfo.extend_column
        };
        detailInfo.id = ++ids;
        if (submitCardPrice(detailInfo) == -1) {
          return;
        }
       detailInfo.simple_cmp_name = $scope.inputCradInfo.account_cmp;

        // 增加一条详情
        $scope.payment.card_detail[$scope.payment.card_detail.length] = detailInfo;
        // 点击确定，新增行清空金额和卡号信息 add by lincm 20170824
        $scope.inputCradInfo.client_card_no = null;
        $scope.inputCradInfo.staffappprem = null;

        // 获取单项总计
        $scope.payment.card = sumItemsPrice($scope.payment.card_detail);
      };
      /**
       * 移除刷卡记录
       */
      $scope.removeCardPrice = function(id) {
        removeCardPrice(id);
      };

    }
    /* 提交刷卡信息 */
  function submitCardPrice(cardDetail) {
    var param = {
      studentId: $scope.studentId,
      pay_mode: cardDetail.payment_way,
      money: cardDetail.staffappprem,
      stu_card: cardDetail.client_card_no,
      company_card_id: cardDetail.company_card_id,
      remark: cardDetail.extend_column,
      id: cardDetail.id
    };
    if (param.remark != null && param.remark.length > 100) {
      $uibMsgbox.alert("描述信息过长！");
      return -1;
    }
    if (!param.stu_card || param.stu_card.length > 29) {
      $uibMsgbox.alert("请输入正确的卡号！");
      return -1;
    }
    if (genNumByString(param.money) <= 0) {
      $uibMsgbox.alert("请输入正确的金额！");
      return -1;
    }
    return 1;
  }

  function sumAllCardMoney() {
    $.each($scope.payment.card_detail, function(i, card) {
      $scope.payment.card = $scope.payment.card + genNumByString(card.money);
    });
  }

  function removeCardPrice(id) {
    if ($scope.payment.card_detail) {
      var card_detail = [];
      $.each($scope.payment.card_detail, function(i, model) {
        if (model.id != id) {
          card_detail.push(model);
        }
      });
      $scope.payment.card_detail = card_detail;
      $scope.payment.card = sumItemsPrice($scope.payment.card_detail);

    }
  }

  /* 转账操作 */
  $scope.toTransferPrice = function() {
    $scope.transferPriceData = {};
    // 初始化公司账户信息
    $scope.transferPriceData.account = $scope.accountTransferList[0].ID;
    $scope.transferPriceData.account_cmp = $scope.accountTransferList[0].ACCOUNT_NAME;
    $scope.inputTransferPrice = true;


    // 添加操作
    $scope.addInputTransferPrice = function() {
      var staffappprem = genFloatByString($scope.transferPriceData.staffappprem);
      if (!staffappprem) {
        $scope.transferPriceData.staffappprem = 0;
        // 保存失败了
        $uibMsgbox.alert('请输入转账金额！');
        return;
      }
      $scope.transferPriceData.staffappprem = staffappprem;

      if ($scope.transferPriceData.staffappprem <= 0) {
        // 保存失败了
        $uibMsgbox.alert('请输入正确的转账金额！');
        return;
      }
      if (!$scope.transferPriceData.client_card_no) {
        // 保存失败了
        $uibMsgbox.alert('请输入转账卡号！');
        return;
      }

      var str = Format('yyyy-MM-dd hh:mm:ss', new Date());
      genPosID($scope.inputCradInfo, $scope.accountListPos);
      var detailObject = {
        client_card_no: $scope.transferPriceData.client_card_no,
        staffappprem: parseFloat($scope.transferPriceData.staffappprem),
        payment_way: 3,
        createTime: str,
        simple_cmp_name: $scope.transferPriceData.account.ACCOUNT_NAME,
        company_card_id: $scope.transferPriceData.account.ID,
        account_name: $scope.transferPriceData.simple_name,
        extend_column: $scope.transferPriceData.extend_column
      };
      detailObject.id = ++ids;
      if (submitCardPrice(detailObject) == -1) {
        return;
      }

      // 增加一条详情
      // detailObject.simple_cmp_name = $scope.transferPriceData.account_cmp;
      $scope.payment.transfer_detail[$scope.payment.transfer_detail.length] = detailObject;
      // 点击确定，新增行清空金额和卡号信息 add by lincm 20170824
      $scope.transferPriceData.client_card_no = null;
      $scope.transferPriceData.staffappprem = null;
      // 获取单项总计
      $scope.payment.transfer = sumItemsPrice($scope.payment.transfer_detail);

    }

    /* 移除转账信息 */
    $scope.removeTransferPrice = function(id) {
      removeTransferPrice(id);
    }

  }

  function removeTransferPrice(id) {
    if (id) {
      if ($scope.payment.transfer_detail) {
        var details = [];
        $.each($scope.payment.transfer_detail, function(i, model) {
          if (model.id != id) {
            details.push(model);
          }
        });
        $scope.payment.transfer_detail = details;
        $scope.payment.transfer = sumItemsPrice($scope.payment.transfer_detail);
      }
    }
  }

  function sumAllCardMoney() {
    $.each($scope.payment.transfer_detail, function(i, transfer) {
      $scope.payment.transfer = $scope.payment.transfer + genNumByString(transfer.money);
    });
  }


  /* 设定新的item序号，并统计该单项的综合 */
  function sumItemsPrice(card_detail) {
    var sum = 0;
    $.each(card_detail, function(i, model) {
      sum += model.staffappprem;
    });
    return sum;
  }

  /* 获取pos机的信息 */
  function genPosID(inputCradInfo, account) {
    if (inputCradInfo && account) {
      $.each(account, function(i, it) {
        if (it.id == inputCradInfo.account) {
          inputCradInfo.simple_name = it.simple_name;
          inputCradInfo.pos_id = it.id;
          inputCradInfo.company_card_id = it.company_card_id;
          return it;
        }
      });
    }
  }

  function queryCompanyAccount() {
    // 查询公司账户信息
	  erp_companyAccountService.query({p_status:1}, function(resp) {
		  if (!resp.error && resp.data && resp.data.length > 0) {
			  $scope.accountTransferList = resp.data;
		  } else {
		      $scope.accountTransferList = [];
		      $uibMsgbox.alert(resp.message)
		  } 
	  });
  }
  
  function queryDeviceInfo() {
	  erp_deviceService.queryBu({p_status:1}, function(resp) {
		  $scope.accountListPos = [];
	      if (!resp.error && resp.data && resp.data.length > 0) {
	        $.each(resp.data, function(i, model) {
	        	if (model.account_name) {
	        		$scope.accountListPos.push(model);
	        	}
	        });
	      } else {
	        $uibMsgbox.alert(resp.message)
	      }
	    });
  }

  $scope.selectedOrder = {};

  /**
   * 计算向下取整
   * @constructor
   */
  function CalculationOrders() {
    if (!$scope.student) {
      return;
    }
    if (!$scope.selectedCourseList || !$scope.selectedCourseList.length) {
      $uibMsgbox.alert("没有选择课程！");
      return;
    }

    if ($scope.Preferential.tabType == 'PreferentialReduction' && $scope.Preferential.immediate_reduce && !genNumByString($scope.Preferential.immediate_reduce)) {
      $uibMsgbox.alert("立减金额不正确!");
      $scope.Preferential.immediate_reduce = null;
      return;
    }

    $scope.selectedOrder.student_id = $scope.student.id;
    $scope.selectedOrder.business_type = $scope.business_type;
    $scope.selectedOrder.sum_price = 0;
    $scope.selectedOrder.actual_price = 0;
    $scope.selectedOrder.immediate_reduce = 0;

    //所有课时
    var all_count = 0;
    //计算科目级优惠
    $.each($scope.selectedCourseList, function(i, course) {
      course.former_unit_price = course.unit_price;
      course.discount_unit_price = course.unit_price;
      course.pre_forward = 0;
      course.former_sum_price = course.unit_price * course.selectedCourseTimesCount;
      course.discount_sum_price = course.unit_price * course.selectedCourseTimesCount;
      if (course.selectedRule && course.selectedRule.id > 0) {
        //优惠折扣
        if (course.selectedRule.coupon_type == 1) {
          var coupon_content = parseFloat(course.selectedRule.coupon_content);
          course.discount_sum_price = Math.floor(course.discount_sum_price * coupon_content);
          course.discount_unit_price = Math.floor(course.discount_sum_price / course.selectedCourseTimesCount);
          course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.discount_unit_price;
        }
        //优惠金额
        else if (course.selectedRule.coupon_type == 2) {
          var coupon_content = parseInt(course.selectedRule.coupon_content);
          course.discount_sum_price = Math.floor(course.discount_sum_price - coupon_content);
          course.discount_unit_price = Math.floor(course.discount_sum_price / course.selectedCourseTimesCount);
          course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.discount_unit_price;
        }
        //每课时优惠
        else if (course.selectedRule.coupon_type == 3) {
          var coupon_content = parseInt(course.selectedRule.coupon_content);
          course.discount_sum_price = Math.floor(course.discount_sum_price - course.selectedCourseTimesCount * coupon_content);
          course.discount_unit_price = Math.floor(course.discount_sum_price / course.selectedCourseTimesCount);
          course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.discount_unit_price;
        }
      }

      $scope.selectedOrder.sum_price = $scope.selectedOrder.sum_price + course.former_sum_price;
      $scope.selectedOrder.actual_price = $scope.selectedOrder.actual_price + course.discount_sum_price;
      all_count = all_count + course.selectedCourseTimesCount;
    });

    //选择了整体的折扣优惠
    if ($scope.Preferential.tabType == 'PreferentialRules' && $scope.theWholeRule) {
      var coupon_content = parseFloat($scope.theWholeRule.coupon_content);
      var coupon_content_left = coupon_content;
      //优惠折扣
      if ($scope.theWholeRule.coupon_type == 1) {
        var actual_price = Math.floor(Math.round($scope.selectedOrder.actual_price * coupon_content* Math.pow(10, 5)) / Math.pow(10, 5));
        coupon_content = $scope.selectedOrder.actual_price - actual_price;
        coupon_content_left = coupon_content;
        $scope.selectedOrder.actual_price = actual_price;
      }
      //优惠金额
      else if ($scope.theWholeRule.coupon_type == 2) {
        $scope.selectedOrder.actual_price = Math.floor($scope.selectedOrder.actual_price - coupon_content);
      }
      //每课时优惠
      else if ($scope.theWholeRule.coupon_type == 3) {
        coupon_content = Math.floor(all_count * coupon_content);
        coupon_content_left = coupon_content;
        $scope.selectedOrder.actual_price= Math.floor($scope.selectedOrder.actual_price - coupon_content);
      }
      //计算科目级分摊
      $.each($scope.selectedCourseList, function(i, course) {
        if (i == $scope.selectedCourseList.length - 1) {
          course.discount_sum_price = course.discount_sum_price - coupon_content_left;
        } else {
          var dalta = 0;
          if($scope.selectedOrder.sum_price != 0) {
            dalta = Math.floor((course.former_sum_price / $scope.selectedOrder.sum_price) * coupon_content);
          }
          coupon_content_left = coupon_content_left - dalta;
          course.discount_sum_price = course.discount_sum_price - dalta;
        }
        course.discount_unit_price = Math.floor(course.discount_sum_price / course.selectedCourseTimesCount);
        course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.discount_unit_price;
      });
    } else if ($scope.Preferential.tabType == 'PreferentialReduction' && $scope.Preferential.immediate_reduce) {
      var immediate_reduce = genNumByString($scope.Preferential.immediate_reduce);
      var coupon_content = immediate_reduce;
      var coupon_content_left = coupon_content;
      $scope.selectedOrder.immediate_reduce = immediate_reduce;
      $scope.selectedOrder.actual_price = $scope.selectedOrder.actual_price - immediate_reduce;
      //计算科目级分摊
      $.each($scope.selectedCourseList, function(i, course) {
        if (i == $scope.selectedCourseList.length - 1) {
          course.discount_sum_price = course.discount_sum_price - coupon_content_left;
        } else {
          var dalta = Math.floor((course.former_sum_price / $scope.selectedOrder.sum_price) * coupon_content);
          coupon_content_left = coupon_content_left - dalta;
          course.discount_sum_price = course.discount_sum_price - dalta;
        }
        course.discount_unit_price = Math.floor(course.discount_sum_price / course.selectedCourseTimesCount);
        course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.discount_unit_price;
      });
    }

    //选择多张优惠券
    if ($scope.foundedCouponInfos) {
      $.each($scope.foundedCouponInfos, function(i, CouponInfo) {
        if (CouponInfo.checked && CouponInfo.privilegeRule) {
          var coupon_content = parseFloat(CouponInfo.privilegeRule.coupon_content);
          var coupon_content_left = coupon_content;
          //优惠折扣
          if (CouponInfo.privilegeRule.coupon_type == 1) {
            var actual_price = Math.floor($scope.selectedOrder.actual_price * coupon_content);
            coupon_content = $scope.selectedOrder.actual_price - Math.floor($scope.selectedOrder.actual_price * coupon_content);
            coupon_content_left = coupon_content;
            $scope.selectedOrder.actual_price = actual_price;
          }
          //优惠金额
          else if (CouponInfo.privilegeRule.coupon_type == 2) {
            $scope.selectedOrder.actual_price = Math.floor($scope.selectedOrder.actual_price - coupon_content);
          }
          //每课时优惠
          else if (CouponInfo.privilegeRule.coupon_type == 3) {
            coupon_content = Math.floor(all_count * coupon_content);
            coupon_content_left = coupon_content;
          }
          //计算科目级分摊
          $.each($scope.selectedCourseList, function(i, course) {
            if (i == $scope.selectedCourseList.length - 1) {
              course.discount_sum_price = course.discount_sum_price - coupon_content_left;
            } else {
              var dalta = Math.floor((course.former_sum_price / $scope.selectedOrder.sum_price) * coupon_content);
              coupon_content_left = coupon_content_left - dalta;
              course.discount_sum_price = course.discount_sum_price - dalta;
            }
            course.discount_unit_price = Math.floor(course.discount_sum_price / course.selectedCourseTimesCount);
            course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.discount_unit_price;
          });
        }
      })
    }


  }

  /**
   * 打开现金的面板
   * @param type
   */
  $scope.openRechargePanel = function(type) {
    $scope.openPanel = type;
    if (type == 'storeAccount' || type == 'frozenAccount') {
      $scope.payment.paymentAccount = $scope.selectedOrder.actual_price - $scope.payment.cash - $scope.payment.card - $scope.payment.transfer - $scope.payment.storeAccount - $scope.payment.frozenAccount;
    } else if (type == 'transfer') {
      $scope.toTransferPrice();
    } else if (type == 'card') {
      $scope.toCardPrice();
    }
  }

  $scope.openPayOnline = function() {
    var sumpay = $scope.selectedOrder.actual_price - $scope.payment.cash -
    $scope.payment.card -
    $scope.payment.transfer -
    $scope.payment.storeAccount -
    $scope.payment.frozenAccount;
    if(sumpay > 0){
      $uibModal.open({
        templateUrl: 'payOnlineAccountInput.html',
        backdrop: 'static',
        resolve: {
          amount: function () {
            return sumpay
          },
          order: function () {
            return $scope.temporaryOrder
          }
        },
        controller: ['$scope', '$uibMsgbox', 'amount', 'order', function(
          $scope, $uibMsgbox, amount, order
        ){
          $scope.amount = amount;
          $scope.qrcodeEle = null;
          // $scope.pageView = 'genQrCode';
          $scope.pageView = 'getQrCodeFromServer';
          $scope.queryPayStatusTimer = null;
          $scope.queryPayStatusFlag = false;
          var qrCodeId = null;
          function getBillDesc(orderDetais){
            var courseNameList = []
            _.forEach(orderDetais, function(item) {
              courseNameList.push(item.course_name)
            })
            return courseNameList.join(',')
          }
          $scope.$on('modal.closing', function (target, reason, close) {
            if (!close && $scope.pageView != 'getQrCodeFromServer') {
              target.preventDefault()
              $uibMsgbox.confirm('关闭前请确认客户【还未进行扫码支付】，如果已支付，请点击【支付完成】，确认关闭？', function (res) {
                if (res == 'yes') {
                  $scope.queryPayStatusFlag = false;
                  $scope.$close('dismiss')
                }
              })
            }
          })
          $scope.onReGenQrcode = function () {
            $uibMsgbox.confirm('重新生成二维码，原有二维码将会失效，请先确认客户【还未进行扫码支付】，如果已支付，请点击【支付完成】，确认重新生成？', function (res) {
              if (res == 'yes') {
                $scope.onGenQrcode()
              }
            })
          }
          $scope.onGenQrcode = function () {
            qrCodeId = null
            if ($scope.qrcodeEle && typeof $scope.qrcodeEle.clear == 'function') {
              $scope.qrcodeEle.clear()
            }
            $scope.pageView = 'getQrCodeFromServer';
            erp_orderManagerService.getPayOnlineQrCode({
              orderId: order.id,
              billNo: order.encoding,
              billDesc: getBillDesc(order.details),
              // 银联在线支付金钱单位为分，需要乘以100
              totalAmount: amount * 100
            }).$promise.then(function(resp) {
              if(resp.error) {
                return $uibMsgbox.error(resp.message)
              }
              $scope.pageView = 'genQrCode';
              $scope.pageView = 'showQrCode'
              var result = JSON.parse(resp.data)
              var billQRCode = result.billQRCode
              qrCodeId = result.qrCodeId
              if (!qrCodeId) {
                return $uibMsgbox.alert('获取支付二维码信息失败，请尝试重新生成二维码或联系管理员!<br>失败原因：' + result.errMsg)
              }
              if (!$scope.qrcodeEle) {
                $scope.qrcodeEle = new QRCode(document.getElementById('order-pay-online-qrcode'),  {
                  text: billQRCode,
                  width: 256,
                  height: 256,
                  colorDark : "#000000",
                  colorLight : "#ffffff",
                  correctLevel : QRCode.CorrectLevel.H
                });
              } else {
                $scope.qrcodeEle.clear()
                $scope.qrcodeEle.makeCode(billQRCode)
              }
              startQueryPayStatus()
            })
          }
          $scope.onGenQrcode();
          function queryPayStaus(billNo, billDate) {
            erp_orderManagerService.getPayOnlineResult({
              billNo: billNo,
              billDate: billDate
            }).$promise.then(function(resp) {
              if (resp.error) {
                return false
              }
              var res = JSON.parse(resp.data)
              if (res.billStatus != 'PAID') {
                if ($scope.queryPayStatusFlag) {
                  setTimeout(function() {
                    queryPayStaus(billNo, billDate)
                  }, 1500)
                }
              } else {
                $uibMsgbox.success('支付成功!', function() {
                  $scope.$close()
                })
              }
            })
          }
          function startQueryPayStatus() {
            $scope.queryPayStatusFlag = true
            erp_orderManagerService.getPayOnlineQrCodeInfo({
              qrCodeId: qrCodeId
            }).$promise.then(function(resp) {
              var qrcodeInfo = JSON.parse(resp.data)
              queryPayStaus(qrcodeInfo.billNo, qrcodeInfo.billDate)
            })
          }
          function stopQueryPayStatus() {
            $scope.queryPayStatusFlag = false
          }
          $scope.onPayDone = function () {
            if (!qrCodeId) {
              return $uibMsgbox.alert('获取支付二维码信息失败，请尝试重新生成二维码!')
            }
            erp_orderManagerService.getPayOnlineQrCodeInfo({
              qrCodeId: qrCodeId
            }).$promise.then(function(resp) {
              var qrcodeInfo = JSON.parse(resp.data)
              return erp_orderManagerService.getPayOnlineResult({
                billNo: qrcodeInfo.billNo,
                billDate: qrcodeInfo.billDate
              }).$promise
              // $scope.$close()
            }, function (resp) {
              $uibMsgbox.error('请求失败！' + resp.message)
            }).then(function(resp) {
              var res = JSON.parse(resp.data)
              if (res.billStatus != 'PAID') {
                $uibMsgbox.warn('客户未支付未完成，请等待客户支付完成！');
              } else {
                $scope.$close();
              }
            }, function (resp) {
              console.log('getPayOnlineResult Error')
              console.log(resp)
            })
          }
        }]
      }).result.then(function (reason) {
        if (reason == 'dismiss') {
          return
        }
        $scope.payment.onlinePrice = $scope.selectedOrder.actual_price - $scope.payment.cash -
          $scope.payment.card -
          $scope.payment.transfer -
          $scope.payment.storeAccount -
          $scope.payment.frozenAccount;
        $scope.payOrder()
      })
    }
    else{
      $uibMsgbox.alert("支付金额需大于零!");
    }
  }
  /**
   * 关闭现金的面板
   */
  $scope.closeRechargePanel = function() {
    $scope.openPanel = '';
  }

  /**
   * 订单暂存:saveTemporary;订单付款:saveOrder
   */
  $scope.saveTemporary = function() {
    var param = {};
    // $scope.openPanel = 'saveTemporary';
    param.saveType = 'saveTemporary';
    genOrder(param);
    var _waitingModal = $uibMsgbox.waint('订单暂存中，请稍候...')
    erp_orderManagerService.post(param, function(resp) {
      _waitingModal.close();
      // $scope.openPanel = '';
      if (!resp.error) {
        $uibMsgbox.alert("暂存成功！");
        $scope.temporaryOrder = resp.data;
      } else {
        $uibMsgbox.alert(resp.message);
      }
    }, function(resp) {
      $scope.openPanel = '';
      $uibMsgbox.alert("暂存失败！");
    })
  }

  function genOrder(param) {
    if ($scope.temporaryOrder) {
      param.id = $scope.temporaryOrder.id;
    }

    param.student_id = $scope.selectedOrder.student_id;
    param.business_type = $scope.selectedOrder.business_type;
    param.sum_price = $scope.selectedOrder.sum_price;
    param.actual_price = $scope.selectedOrder.actual_price;
    param.remark = $scope.selectedOrder.remark;
    param.resource_rec_id = $state.params.resource_rec_id;
    param.details = [];
    //报班单详情
    $.each($scope.selectedCourseList, function(i, course) {
      var detailCourse = {};
      detailCourse.student_id = param.student_id;
      detailCourse.course_id = course.id;
      detailCourse.branch_id=course.branch_id;
      detailCourse.course_name =course.course_name;
      detailCourse.business_type = course.business_type;
      detailCourse.former_sum_price = course.former_sum_price;
      detailCourse.former_unit_price = course.former_unit_price;
      detailCourse.discount_sum_price = course.discount_sum_price;
      detailCourse.discount_unit_price = course.discount_unit_price;
      detailCourse.pre_forward = course.pre_forward;
      detailCourse.start_date = course.start_date;
      detailCourse.end_date = course.end_date;
      detailCourse.start_time = course.start_time;
      detailCourse.end_time = course.end_time;
      detailCourse.teacher_id = course.teacher_id;
      detailCourse.course_total_count = course.selectedCourseTimesCount;
      detailCourse.course_surplus_count = course.selectedCourseTimesCount;
      detailCourse.surplus_cost = course.selectedCourseTimesCount * detailCourse.discount_unit_price;

      //订单级的优惠规则
      if (course.selectedRule && course.selectedRule.id > 0) {
        detailCourse.rule_id = course.selectedRule.id;
      }
      detailCourse.orderCourseTimes = [];

      //课程报班课次信息
      if (course.courseSchedulingList) {
        $.each(course.courseSchedulingList, function(i, courseTime) {
          if (courseTime.checked) {
            var courseTimeChecked = {};
            courseTimeChecked.student_id = detailCourse.student_id;
            courseTimeChecked.course_times = courseTime.course_times;
            detailCourse.orderCourseTimes.push(courseTimeChecked);
          }
        });
      }
      param.details.push(detailCourse);
    });

    //报班单优惠
    if ($scope.Preferential.tabType == 'PreferentialRules' && $scope.theWholeRule) {
      param.rule_id = $scope.theWholeRule.id;
    } else if ($scope.Preferential.tabType == 'PreferentialReduction' && $scope.Preferential.immediate_reduce) {
      param.immediate_reduce = $scope.selectedOrder.immediate_reduce;
      param.extend_column = $scope.Preferential.immediate_remark;
    }

    param.coupon_rels = [];
    //优惠券信息
    if ($scope.foundedCouponInfos) {
      $.each($scope.foundedCouponInfos, function(i, couponInfo) {
        if (couponInfo.checked) {
          var couponRel = {};
          couponRel.coupon_id = couponInfo.id;
          couponRel.coupon_encoding = couponInfo.encoding;
          couponRel.coupon_name = couponInfo.name;
          param.coupon_rels.push(couponRel);
        }
      });
    }

    //付款信息
    if (param.saveType != 'saveTemporary' && param.actual_price == (
        $scope.payment.cash 
        + $scope.payment.card
        + $scope.payment.transfer
        + $scope.payment.storeAccount
        + $scope.payment.frozenAccount
        + $scope.payment.onlinePrice)) {

      param.payment = {};
      param.payment.studentId = param.student_id;
      param.payment.sumPrice = param.actual_price;
      param.payment.actualPrice = $scope.payment.cash + $scope.payment.card + $scope.payment.transfer + $scope.payment.storeAccount + $scope.payment.frozenAccount + $scope.payment.onlinePrice;
      param.payment.cashPrice = $scope.payment.cash;
      param.payment.cardPrice = $scope.payment.card;
      param.payment.transferPrice = $scope.payment.transfer;
      param.payment.accountPrice = $scope.payment.storeAccount;
      param.payment.frozenAccountPrice = $scope.payment.frozenAccount;
      param.payment.onlinePrice = $scope.payment.onlinePrice;

      param.payment.details = [];

      if (param.payment.cashPrice > 0) {
        var paramPP = {};
        paramPP.payment_way = 1;
        paramPP.staffappprem = param.payment.cashPrice;
        param.payment.details.push(paramPP);
      }

      if (param.payment.onlinePrice > 0) {
        var paramPP = {
          payment_way: 11,
          staffappprem: param.payment.onlinePrice
        }
        param.payment.details.push(paramPP)
      }

      if (param.payment.cardPrice > 0 && $scope.payment.card_detail) {
        $.each($scope.payment.card_detail, function(i, card) {
          if (card.simple_cmp_name) {
            delete card.simple_cmp_name
          }
          param.payment.details.push(card);
        });
      }
      if (param.payment.transferPrice > 0 && $scope.payment.transfer_detail) {
        $.each($scope.payment.transfer_detail, function(i, transfer) {
          if (transfer.simple_cmp_name) {
            delete transfer.simple_cmp_name
          }
          param.payment.details.push(transfer);
        });
      }

      if (param.payment.accountPrice > 0) {
        var paramPP = {};
        paramPP.payment_way = 4;
        paramPP.staffappprem = param.payment.accountPrice;
        param.payment.details.push(paramPP);
      }

      if (param.payment.frozenAccountPrice > 0) {
        var paramPP = {};
        paramPP.payment_way = 9; // 冻结账户付款
        paramPP.staffappprem = param.payment.frozenAccountPrice;
        param.payment.details.push(paramPP);
      }
    }
  }

  /**
   * 保存订单
   */
  $scope.saveOrder = function() {
    var param = {};
    // $scope.openPanel = 'saveOrder';
    param.saveType = 'saveOrder';
    genOrder(param);
    var _modalInstance = $uibMsgbox.waiting('订单保存中，请稍候...');
    erp_orderManagerService.post(param, function(resp) {
      _modalInstance.close();
      if (!resp.error) {

        $scope.temporaryOrder = resp.data;
        if ($scope.temporaryOrder.check_status == 2) {
          //审核中，走提示已经提交审核，流程结束
          $uibMsgbox.confirm({
            content:'订单提交成功，请等待审核通过后继续缴费！',
            title: '提示',
            okText: '查看详情',
            cancelText: '关闭',
            showCancelBtn: false,
            callback: function(res) {
              if (res == 'yes') {
                // window.location.href = '?studentId=' + $scope.temporaryOrder.student_id + '#/studentMgr/studentMgrIndex';
                window.location.href = '?studentId=' + $scope.temporaryOrder.student_id + '&orderId=' + $scope.temporaryOrder.id + '&orderType=temporaryOrder#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
              } else {
                $state.reload();
              }
            }
          })
          // $scope.openPanel = 'saveOrderOK';
        } else if ($scope.temporaryOrder.check_status == 3) {
          $scope.openPanel = '';
          //审核通过，下一步去缴费
          $scope.nextStep(3, 4);
        }
      } else {
        $scope.openPanel = '';
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  $scope.payOrder = function() {
    var param = {};
    // $scope.openPanel = 'payOrder';
    param.saveType = 'payOrder';
    genOrder(param);
    var _modalInstance = $uibMsgbox.waiting('订单支付中，请稍候...');
    erp_orderManagerService.pay(param, function(resp) {
      _modalInstance.close();
      if (!resp.error) {
        $scope.temporaryOrder = resp.data;
        $uibMsgbox.confirm({
          content: '订单支付成功！', 
          okText: '查看详情',
          cancelText: '继续报班',
          callback: function (res) {
          if (res == 'yes') {
              window.open(
                // '?studentId=' + $scope.temporaryOrder.student_id +'#/studentMgr/studentMgrIndex'
                  '?studentId=' + $scope.temporaryOrder.student_id + '&orderId=' + $scope.temporaryOrder.id + '#/studentMgr/studentMgrCourse/studentMgrOrderDetail'
              );
              $scope.temporaryOrder=null;
              $state.reload();
            } else {
              window.location.href="?_t=" + Math.random() + "#/orders/ordersMgr/ordersMgrOrders";
              // $state.reload();
            }
          }
        })
        // $scope.openPanel = 'payOrderOK';
      } else {
        $scope.openPanel = '';
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  function genEndTime(start_date, monthNub) {
    var times = start_date.split("-");
    var year = times[0];
    var month = times[1];
    var day = times[2] - 1;
    var date = new Date();
    date.setFullYear(year, month - 1, day);
    date.setDate(date.getDate() + monthNub);

    return Format('yyyy-MM-dd', date);
  }

  $scope.changeTimes = function(course) {
    try {
      if (course.selectedCourseTimesCount == "" || course.selectedCourseTimesCount == null) {
        return;
      }
      course.selectedCourseTimesCount = parseInt(course.selectedCourseTimesCount);
    } catch (e) {
      course.selectedCourseTimesCount = 0;
      course.unit_price = 0;
    }
    if (course.selectedCourseTimesCount < 0) {
      course.selectedCourseTimesCount = 0;
    }
    //计算截止日期

    if (course.selectedCourseLadder) {
      //TODO按照年度累计课时算
      if (course.selectedCourseLadder.REACH_TYPE == 1) {
        if (course.selectedCourseLadder.TOTALCOUNT > course.selectedCourseLadder.REACH_COUNT) {
          //course.course_total_count = 0;
        } else {
          course.selectedCourseTimesCount = course.selectedCourseLadder.REACH_COUNT - course.selectedCourseLadder.TOTALCOUNT;
        }
      }
    }
    if (course.selectedComboWfd) {
      //套餐类型:1：月卡
      if (course.selectedComboWfd.combo_type == 1) {
        $scope.combo = 1;
        $scope.selectedComboWfd = course.selectedComboWfd;
        var month_count = course.selectedComboWfd.course_count;
        course.unit_price = Math.floor(course.selectedComboWfd.price / month_count);
        course.discount_sum_price = course.selectedComboWfd.price;
        course.selectedCourseTimesCount = month_count;
        //预结转
        course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.unit_price;
        //              var date = new Date();
        if (course.start_date) {
          course.end_date = genEndTime(course.start_date, month_count)
        }
        course.remark = '晚辅导报班，套餐信息：总价' + course.selectedComboWfd.price + '元' + (course.end_date ? '，截止时间：' + course.end_date : '');

        return;
      }
      //            //套餐类型:2：限时限次数
      //            else if(course.selectedComboWfd.COMBO_TYPE == 2){
      //                var MONTH_COUNT = course.selectedComboWfd.MONTH_COUNT;
      //                var COURSE_COUNT = course.selectedComboWfd.COURSE_COUNT;
      //                course.course_total_count = COURSE_COUNT;
      //                course.discount_unit_price = Math.floor(course.selectedComboWfd.PRICE / COURSE_COUNT);
      //                course.discount_sum_price = course.selectedComboWfd.PRICE;
      //                //预结转
      //                course.pre_forward = course.discount_sum_price - course.course_total_count * course.discount_unit_price;
      //                //截止日期
      //                if(course.start_date){
      //                    course.end_date = genEndTime(course.start_date,MONTH_COUNT);
      //                }
      //                course.remark='晚辅导报班，套餐信息：'+MONTH_COUNT+'个月(1个月30天)内，上完'+course.selectedComboWfd.COURSE_COUNT+'次课，总价'+course.selectedComboWfd.PRICE+'元'+(course.end_date?'，截止时间：'+course.end_date:'');
      //                
      //                return;
      //            }
      //套餐类型:2 次卡
      else if (course.selectedComboWfd.combo_type == 2) {
        $scope.combo = 2;
        $scope.selectedComboWfd = course.selectedComboWfd;
        var month_count = course.selectedComboWfd.course_count;
        course.remark = '晚辅导报班，套餐信息：上完' + month_count + '次课，总价' + course.selectedComboWfd.price + '元';
        course.selectedCourseTimesCount = month_count;
        course.unit_price = Math.floor(course.selectedComboWfd.price / month_count);
        course.discount_sum_price = course.selectedComboWfd.price;
        //预结转
        course.pre_forward = course.discount_sum_price - course.selectedCourseTimesCount * course.unit_price;
        return;
      }
    }

    course.discount_sum_price = course.unit_price * course.selectedCourseTimesCount;
    if($scope.selectedCourseLadder){
      $scope.calUnitPrice($scope.selectedCourseLadder);
    }
  };

  $scope.calUnitPrice= function(ladder) {
    var course=$scope.selectedYDYCourseList[0];
        erp_courseLadderService.adjustLadder({ 
          course_times: course.selectedCourseTimesCount ,
          student_id: $scope.studentId,
          ids:ladder.id,
          course_id:course.id
        }, function(resp) {
            if (!resp.error) {
              course.unit_price=resp.ladderPrice;
              course.discount_sum_price = course.unit_price * course.selectedCourseTimesCount;
            } else {
              $uibMsgbox.error(resp.message);
            }
       });
  }

  
  $scope.selectLadder = function(ladder,id) {
	    $scope.comboId = id;
      $scope.selectedCourseLadder = ladder;
	    var length = $scope.selectedYDYCourseList.length;
	    if (length == 0 || length >= 2) {
	    	$uibMsgbox.warn('个性化阶梯只支持选择一门课程！');
	      return;
	    } else {
	    	$scope.calUnitPrice(ladder);
      }
	};
  
  $scope.selectComboWfd = function(comboWfd) {
    if ($scope.comboId == comboWfd.id) {
      // 点击的是当前套餐时，则取消套餐选择
      $scope.comboId = undefined;
      // TODO 套餐取消，重新计算课程价格
      return;
    }
    $scope.comboId = comboWfd.id;
    var match = true;
    var length = $scope.selectedWFDCourseList.length;
    if (length == 0 || length >= 2) {
    	$uibMsgbox.warn('晚自习套餐只支持一门课程！');
    	return;
    } else {
      erp_wfdComboService.checkWfdCourse({ student_id: $scope.studentId }, function(resp) {
        if (!resp.error) {
          if (resp.code == 200 && match) {
            match = true;
          } else {
            match = false;
          }
          if (match) {
            erp_courseService.queryCourseByStudentId({
              studentId: $scope.studentId,
              business_type: $scope.business_type,
              course_id: $scope.selectedWFDCourseList[0].id
            }, function(resp) {
              var Course = null;
              if (!resp.error) {
                Course = resp.data;
              }
              if (Course && Course.length == 1) {
                var course = Course[0];
                course.selectedComboWfd = comboWfd;
                course.start_date = Format("yyyy-MM-dd", new Date());
                $scope.changeTimes(course);
                $scope.selectedWFDCourseList.splice(0, 1, course);

                var combo_index = -1;
                $.each($scope.comboWfds, function(k, combo) {
                  if (combo.id == comboWfd.id) {
                    combo_index = k;
                  }
                });
              }
            });
          } else {
            $uibMsgbox.warn("没有相应的套餐课程或者学生报完了课程未上完一半课时！");
          }
        } else {
          $uibMsgbox.error(resp.message);
        }
      });

    }
  };
  
  $scope.selectAccountPOS = function(posInfo) {
	  $.each($scope.accountListPos, function(idx, pos) {
		  if (pos.id == $scope.inputCradInfo.account) {
			  $scope.inputCradInfo.account_cmp = pos.account_name;
			  return;
		  }
	  });
  }  
  
  $scope.sortNum = function(courseScheduling) {
    delete courseScheduling.is_listening
    var _waitingModal = $uibMsgbox.waiting('排号中，请稍候...');
	  erp_sortNumService.sortNum(courseScheduling, function(resp) {
        _waitingModal.close();
          if (!resp.error) {
        	  $uibMsgbox.success('排号成功！');
            $scope.openCourseTimesPanel($scope.curCourse);
          }else{
        	  $uibMsgbox.error(resp.message);
          }
        });
  }
  
  $scope.queryTotalSortNumInfo= function(courseTimes) {
	  erp_sortNumService.query(courseTimes, function(resp) {
          if (!resp.error) {
      //  	  console.info(resp.data);
          }else{
        	  $uibMsgbox.error(resp.message);
          }
        });
  }
  
  $scope.cancelSortNum = function(courseTimes) {
    var _waitingModal = $uibMsgbox.waiting('取消排号中，请稍候...');
    var params = {
      courseId: courseTimes.course_id,
      studentId: courseTimes.student_id,
      seq: courseTimes.course_times
    }
	  erp_sortNumService.cancelSortNum(params, function(resp) {
        _waitingModal.close();
          if (!resp.error) {
        	  $uibMsgbox.success('取消排号成功！');
            $scope.openCourseTimesPanel($scope.curCourse);
          }else{
        	  $uibMsgbox.error(resp.message);
          }
        });
  }


    $scope.queryOrderQueueDetail = function (course, detail) {
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/course-queue-detail.modal.html',
            controller: 'modal_courseQueueDetailController',
            resolve: {
                course: function () {
                    return course;
                },
                courseSeqDetail: function() {
                    return {
                      seq: detail.course_times
                    };
                }
            }
        }).result.then(function(){
          $scope.openCourseTimesPanel($scope.curCourse);
        }, function() {
        	$scope.openCourseTimesPanel($scope.curCourse);
        })
        
    };

    $scope.queryCheckPeopleList = function (course, detail, orderType) {
      $uibModal.open({
          size: 'lg',
          templateUrl: 'templates/block/modal/course-check-detail.modal.html',
          resolve: {
              course: function () {
                  return course;
              },
              courseSeqDetail: function() {
                  return {
                    seq: detail.course_times
                  };
              },
              type: function () {
                return orderType
              }
          },
          controller: ['$scope', 
            'erp_sortNumService',
            'course',
            'courseSeqDetail',
            'type',
            function (
              $scope,
              erp_sortNumService,
              course,
              courseSeqDetail,
              type
            ) {
              $scope.detailList = [];
              $scope.type = type;
              erp_sortNumService.queryCheckPeople({
                courseId: course.id,
                seq: courseSeqDetail.seq,
                type: type
              }, function (resp) {
                if (!resp.error) {
                  $scope.detailList = resp.data
                }
              })
            }]
      }).result.then(function(){
        $scope.openCourseTimesPanel($scope.curCourse);
      }, function() {
        $scope.openCourseTimesPanel($scope.curCourse);
      })
    }
  $scope.queryStudents();
}

/**
 * Created by hengshan.ou on 2017/1/11.
 */

"use strict";
angular
    .module('ework-ui')
    .controller('erp_OrdersIndexPrivilegeCriteriaController', [
    '$rootScope',                                                             	
    '$scope',
    'erp_privilegeCriteriaServicePage',
    'erp_privilegeCriteriaService',
    'erp_privilegeRuleService',
    'erp_gradeService',
    '$state',
    '$log',
    '$uibMsgbox',
    '$cookieStore',
     function(
    		    $rootScope,                                                             	
    		    $scope,
        	    erp_privilegeCriteriaServicePage,
        	    erp_privilegeCriteriaService,
        	    erp_privilegeRuleService,
        	    erp_gradeService,
        	    $state,
        	    $log,
        	    $uibMsgbox,
        	    $cookieStore) {
		        // 表单操作类型，添加： add，修改：put
		        $scope.optype = 'add'; //
    	
    			$scope.business_type = 1; 
        		$scope.privilegeCriteriaList = [];
        		$scope.privilegeRuleList = [];
        	 	$scope.pageParam = new Object();
        	    // 与表单绑定的数据，用于添加和修改
        	    $scope.privilegeCriteria = {};
        	 	
        	 	$scope.status =
                    [{key : 1, value : "有效"},
                     {key : 0, value : "失效"}
                ];
        	 	
        	    /**
        	     * 分页配置
        	     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
        	     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
        	     * @param  {Number} itemsPerPage    [每页显示条数]
        	     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
        	     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
        	     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
        	     */
        	    $scope.paginationConf = {
        	        currentPage: 1, //当前页
        	        totalItems: 0,
        	        // itemsPerPage: 10,
        	        // pagesLength: 9,
        	        // perPageOptions: [10, 20, 30, 40, 50],
        	        onChange: function(){
        	            $scope.query()
        	        }
        	    };
        	 	
        	 	$scope.selectBusinessType = function(business_type){
        	        $scope.business_type = business_type;
        	        return true;
        	    }

        	    // 处理【添加优惠前置】按钮点击事件
        	    $scope.handleAddPrivilegeCriteria = function () {
        	    	$scope.privilegeCriteria.branch_ids = "";
        	        $scope.optype = 'add';
        	        $scope.resetForm();
        	        $scope.queryPrivilegeRule();
        	        $scope.queryGrade();
        	        $('#erpPrivilegeCriteriaPanel').modal('show');
        	    }
        	    
        	    // 处理【修改优惠前置】按钮点击事件
        	    $scope.handlePutPrivilegeCriteria = function (rowData) {
        	        $scope.optype = 'put';
        	        $scope.queryPrivilegeRule();
        	        $scope.queryGrade();
        	        
        	        $scope.privilegeCriteria = rowData;
        	        
        	        $("#erpPrivilegeCriteriaPanel").modal('show');
        	    }
        	    
        	    // 处理【删除优惠前置】按钮点击事件
        	    $scope.handleDeletePrivilegeCriteria = function (id) {
        			$uibMsgbox.confirm('确定删除选中优惠前置？', function(res) {
        				if (res == 'yes') {
        					$scope.remove(id);
        				}
        			});
        	    }

        	    // 处理【查询优惠前置】按钮点击事件
        	    $scope.handleQueryPrivilegeCriteria = function () {
        	        $scope.query();
        	    }

        	    // 处理优惠前置表单【取消】按钮点击事件
        	    $scope.handleModalCancel = function () {
        	        $('#erpPrivilegeCriteriaPanel').modal('hide');
        	    }

        	    // 处理优惠前置表单【确认】按钮点击事件
        	    $scope.handleModalConfirm = function () {
        	        if ($scope.optype == 'add') {
        	    		$scope.add();
        	    	} else {
        	    		$scope.put();
        	    	}
        	        
        	        $('#erpPrivilegeCriteriaPanel').modal('hide');
        	    }
        	 	
        	    // 重置优惠前置表单
        	    $scope.resetForm = function () {
        	        $("#erpPrivilegeCriteriaPanel form")[0].reset();
        	    }
        	    
        	    /**
        	     * 分页查询优惠前置
        	     */
        	    $scope.query = function(){
        	    	erp_privilegeCriteriaServicePage.query(
        	            {
        	                pageSize: $scope.paginationConf.itemsPerPage,
        	                currentPage: $scope.paginationConf.currentPage,
        	                productLine: $scope.business_type,
        	                searchInfo: $scope.queryParam
        	            },
        	            function(resp){
        	                if (!resp.error) {
        	                    $scope.privilegeCriteriaList = resp.data;
        	                    $scope.paginationConf.totalItems = resp.total || 0;
        	                } else {
        	                    $uibMsgbox.error(resp.message);
        	                }
        	            });
        	    }
        	 	
        	    // 添加
        	    $scope.add = function () {
        	    	var param = {};
        	    	$scope.genPrivilegeCriteria(param);
        	    	
        	    	erp_privilegeCriteriaService.post(param, function (resp) {
        	            if (!resp.error) {
        	                $uibMsgbox.success('添加成功！');
        	                $scope.query();
        	            } else {
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    };
        	    
        	    // 修改
        	    $scope.put = function () {
        	    	var param = {};
        	    	$scope.genPrivilegeCriteria(param);
        	    	
        	    	erp_privilegeCriteriaService.put(param, function (resp) {
        	            if (!resp.error) {
        	                $uibMsgbox.success('修改成功！');
        	                $scope.query();
        	            } else {
        	                $uibMsgbox.error(resp.message);
        	            }
        	        })
        	    };	    

        	    // 删除优惠规则
        	    $scope.remove = function (id) {
        	    	erp_privilegeCriteriaService.remove({"id" : id},function (resp) {
        	    		if(!resp.error) {
        	                $uibMsgbox.success('删除成功！');
        	    			$scope.query();
        	    		} else {
        	    			$uibMsgbox.error(resp.message);
        	    		}
        	        });
        	    }
        	    
        	    $scope.genPrivilegeCriteria = function(param){
        	    	param.id = $scope.privilegeCriteria.id;
        	        param.name = $scope.privilegeCriteria.name;
        	        param.rule_id = $scope.privilegeCriteria.rule_id;
        	        param.sum_price = $scope.privilegeCriteria.sum_price;
        	        param.sum_hour = $scope.privilegeCriteria.sum_hour;
        	        param.sum_integral = $scope.privilegeCriteria.sum_integral;
        	        param.grade_id = $scope.privilegeCriteria.grade_id;
        	        param.status = $scope.privilegeCriteria.status;
        	        param.description = $scope.privilegeCriteria.description;
        	    }
        	    
        	    /**
        	     * 查询优惠规则
        	     */
        	    $scope.queryPrivilegeRule = function(){
        	        $scope.privilegeRuleList = [];
        	        erp_privilegeRuleService.query({
        	            productLine:$scope.business_type
        	        },function(resp){
        	            if(!resp.error){
        	                $scope.privilegeRuleList = resp.data;
        	            }else{
        	            	$uibMsgbox.error(resp.message);
        	            }
        	        })
        	    }
        	    
        	    /**
        	     * 查询年级
        	     */
        	    $scope.queryGrade = function(){
        	        erp_gradeService.querySelectDatas({
        	            branch_id:$scope.selectedBranch?$scope.selectedBranch.id:-1,
        	            season_id:$scope.selectedTimeSeason?$scope.selectedTimeSeason.id:-1
        	        },function(resp){
        	            if(!resp.error){
        	                $scope.gradeList = resp.data;
        	                if($scope.student && $scope.student.grade_id){
        	                    $.each($scope.gradeList,function(i,grade){
        	                        if(grade.id == $scope.student.grade_id){
        	                            $scope.selectedGrade = grade;
        	                        }
        	                    })
        	                }
        	            }
        	        })
        	    }
        	    
        	    $scope.query();        	    
        }
]);


/**
 * Created by hengshan.ou on 2017/1/11.
 */

"use strict";
angular
    .module('ework-ui')
    .controller('erp_privilegeRuleController', [
    '$rootScope',                                                             	
    '$scope',
    'erp_privilegeRuleServicePage', 
    'erp_privilegeRuleService',
    'erp_studentBuOrgsService',
	'erp_organizationService',
    '$state',
    '$log',
    '$uibMsgbox',
    '$cookieStore',
     function(
	    $rootScope,                                                             	
	    $scope,
	    erp_privilegeRuleServicePage,
	    erp_privilegeRuleService,
	    erp_studentBuOrgsService,
		erp_organizationService,
	    $state,
	    $log,
	    $uibMsgbox,
	    $cookieStore) {
        // 表单操作类型，添加： add，修改：put
        $scope.optype = 'add'; //

    	$scope.business_type = 1;     	
		$scope.privilegeRuleList = [];
	 	$scope.branchList = {};
		 
	    // 与表单绑定的数据，用于添加和修改
	    $scope.privilegeRule = {

	    	coupon_type:1,
	    	use_scope:1
	    };

	    /**
	     * 分页配置
	     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
	     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
	     * @param  {Number} itemsPerPage    [每页显示条数]
	     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
	     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
	     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
	     */
	    $scope.paginationConf = {
	        currentPage: 1, //当前页
	        totalItems: 0,
	        // itemsPerPage: 10,
	        // pagesLength: 9,
	        // perPageOptions: [10, 20, 30, 40, 50],
	        onChange: function(){
	            $scope.query()
	        }
	    };
	 	
	 	$scope.useScopes =
            [{key : 1, value : "通用"},
             {key : 2, value : "老学员"},
             {key : 3, value : "新学员"},
             {key : 4, value : "推荐人"},
             {key : 5, value : "被推荐人"}
        ];

	 	$scope.couponTypes =
            [{key : 1, value : "折扣优惠"},
             {key : 2, value : "优惠金额"},
             {key : 3, value : "每课时优惠"}
        ];

	 	$scope.productLines =[];
	 	
	 	$scope.status =
            [{key : 1, value : "有效"},
             {key : 2, value : "失效"}
                ];

     	$scope.selectBusinessType = function(business_type){
        	$scope.business_type = business_type;
        	return true;
        }

	    // 处理【添加优惠规则】按钮点击事件
	    $scope.handleAddPrivilegeRule = function () {
			$scope.privilegeRule = [];
	        $scope.optype = 'add';
	        $scope.resetForm();
	        $scope.queryBuOrgs();
	        $('#erpPrivilegeRulePanel').modal('show');
	    }
	    
	    // 处理【修改优惠规则】按钮点击事件
	    $scope.handlePutPrivilegeRule = function (rowData) {
	        $scope.optype = 'put';
	        $scope.queryBuOrgs();
	        
	        $scope.privilegeRule = rowData;
	        
	        $("#erpPrivilegeRulePanel").modal('show');
	    }
	    
	    // 处理【删除优惠规则】按钮点击事件
	    $scope.handleDeletePrivilegeRule = function (id) {
			$uibMsgbox.confirm('确定删除选中优惠规则？', function(res) {
				if (res == 'yes') {
					$scope.remove(id);
				}
			});
	    }

	    // 处理【查询优惠规则】按钮点击事件
	    $scope.handleQueryPrivilegeRule = function () {
	        $scope.query();
	    }

	    // 处理优惠规则表单【取消】按钮点击事件
	    $scope.handleModalCancel = function () {
	        $('#erpPrivilegeRulePanel').modal('hide');
	    }
		//验证
		$scope.valid = function(){
			if(!$scope.privilegeRule.rule_name){
				$uibMsgbox.confirm('请输入规则名称！');
				return false;
			}
			if(!$scope.privilegeRule.coupon_type){
				$uibMsgbox.confirm('请输入优惠类型！');
				return false;
			}
			if(!$scope.privilegeRule.coupon_content){
				$uibMsgbox.confirm('请输入优惠！');
				return false;
			}
			if(!$scope.privilegeRule.start_date){
				$uibMsgbox.confirm('请输入开始日期！');
				return false;
			}
			if(!$scope.privilegeRule.end_date){
				$uibMsgbox.confirm('请输入结束日期！');
				return false;
			}
			if(!$scope.privilegeRule.use_scope){
				$uibMsgbox.confirm('请输入适用范围！');
				return false;
			}
			if(!$scope.privilegeRule.product_line){
				$uibMsgbox.confirm('请输入产品线！');
				return false;
			}
			if(!$scope.privilegeRule.status){
				$uibMsgbox.confirm('请输入状态！');
				return false;
			}
			var arr =[];
			angular.forEach($scope.branchList, function (branch) {
	        	arr.push(branch.Selected)
	        });
			if($.inArray(true, arr)== -1){
				$uibMsgbox.confirm('请输入校区！');
				 return false;
			}
			return true;
		}
	    // 处理优惠规则表单【确认】按钮点击事件
	    $scope.handleModalConfirm = function () {
			if (!$scope.valid()) {
				return false;
			}
			if ($scope.optype == 'add') {
	    		$scope.add();
	    	} else {
	    		$scope.put();
	    	}
	        $('#erpPrivilegeRulePanel').modal('hide');
	    }
	 	
	    // 重置优惠规则表单
	    $scope.resetForm = function () {
	        $("#erpPrivilegeRulePanel form")[0].reset();
	        $scope.privilegeRule.coupon_type=1;
	        $scope.privilegeRule.use_scope=1;
	        $scope.privilegeRule.product_line=1;
	        $scope.privilegeRule.status=1;
	    }
	    
	    /**
	     * 分页查询优惠规则
	     */
	    $scope.query = function(){
	        erp_privilegeRuleServicePage.query(
	            {
	                pageSize: $scope.paginationConf.itemsPerPage,
	                currentPage: $scope.paginationConf.currentPage,
	                productLine: $scope.business_type,
	                searchInfo: $scope.queryParam
	            },
	            function(resp){
	                if (!resp.error) {
	                    $scope.privilegeRuleList = resp.data;
	                    $scope.paginationConf.totalItems = resp.total || 0;
	                } else {
	                	$uibMsgbox.error(resp.message)
	                }
	            });
	    }
		 

	    // 添加
	    $scope.add = function () {
	    	var param = {
	    	};
	    	$scope.genPrivilegeRule(param);
    	 	erp_privilegeRuleService.post(param, function (resp) {
	            if (!resp.error) {
	            	$uibMsgbox.success('添加成功！');
	                $scope.query();
	            } else {
	            	$uibMsgbox.error(resp.message);
	            }
	        })
	    };
	    
	    // 修改
	    $scope.put = function () {	
	    	var param = {};
	    	$scope.genPrivilegeRule(param);
	    	
    	 	erp_privilegeRuleService.put(param, function (resp) {
	            if (!resp.error) {
	            	$uibMsgbox.success('修改成功！');
	                $scope.query();
	            } else {
	            	$uibMsgbox.error(resp.message);
	            }
	        })
	    };	    

	    // 删除优惠规则
	    $scope.remove = function (id) {
	    	erp_privilegeRuleService.remove({"id" : id},function (resp) {
	    		if(!resp.error) {
	    			$uibMsgbox.success("删除成功！");
	    			$scope.query();
	    		} else {
	    			$uibMsgbox.error(resp.message);
	    		}
	        });
	    }
		
		//获取优惠规则
	    $scope.genPrivilegeRule = function(param){
	    	$scope.strBranch = "";
	        angular.forEach($scope.branchList, function (branch) {
	        	if(branch.Selected){
	        		$scope.strBranch += branch.id +",";
	        	}
	        });
	        
	        if($scope.strBranch.length > 0){
	        	$scope.strBranch = $scope.strBranch.substr(0,$scope.strBranch.length - 1);
	        }
	    	
	        param.id = $scope.privilegeRule.id;
	        param.rule_name = $scope.privilegeRule.rule_name;
	        param.coupon_type = $scope.privilegeRule.coupon_type;
	        param.coupon_content = $scope.privilegeRule.coupon_content;
	        param.start_date = $scope.privilegeRule.start_date;
	        param.end_date = $scope.privilegeRule.end_date;
	        param.use_scope = $scope.privilegeRule.use_scope;
	        param.product_line = $scope.privilegeRule.product_line;
	        param.status = $scope.privilegeRule.status;
	        param.branch_ids = $scope.strBranch;
	    }
	    
	    /**
	     * 查询校区
	     */
	    $scope.queryBuOrgs = function(){
	        erp_studentBuOrgsService.query({},function(resp){
	            if(!resp.error){
					$scope.branchList = resp.data;
	                // $scope.selectedBranch = $scope.branchList[0];
					if($scope.optype == "put"){
						angular.forEach($scope.branchList, function (branch) {
							if($scope.privilegeRule.branch_ids.indexOf(branch.id) > -1){
								branch.Selected = true;
							}
						});
					}
	            }
	        })
	    }
	    
	    /**
	     * 选择所有的校区
	     */
	    $scope.checkedAllBuOrgs = function(){
	        angular.forEach($scope.branchList, function (branch) {
	        	branch.Selected = $scope.privilegeRule.checkelBranchs;
	        });
	    }
	    $scope.initPage = function() {
			erp_organizationService.queryProductLine({},function(resp) {
				if(!resp.error) {
					$scope.productLines = resp.data;
				} else {
					$uibMsgbox.error(resp.message);
				}
			})
			$scope.query();
		}
		 $scope.initPage();
    }
]);


/**
 * Created by Liyong.zhu on 2017/2/12.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_orderChangeFrozenController', [
        '$scope',
        '$log',
        '$uibMsgbox', // 消息提示框服务，其他服务按需引入
        'erp_studentsService',
        'erp_studentOrderCourseService',
        'erp_orderManagerService',
        'erp_courseService',
        'erp_studentBuOrgsService',
        'erp_gradeService',
        'erp_subjectService',
        'erp_timeSeasonService',
        'erp_courseTimesService',
        'erp_orderChangeService',
        erp_orderChangeFrozenController]);

function erp_orderChangeFrozenController(
    $scope,
    $log,
    $uibMsgbox,
    erp_studentsService,
    erp_studentOrderCourseService,
    erp_orderManagerService,
    erp_courseService,
    erp_studentBuOrgsService,
    erp_gradeService,
    erp_subjectService,
    erp_timeSeasonService,
    erp_courseTimesService,
    erp_orderChangeService) {

    //学员信息
    $scope.student = undefined;
    $scope.studentList = [];
    $scope.businessType = 1;
    $scope.productLine = 1; // 产品线 1-培英精品班 2-个性化 11-佳音
    
    $scope.course = {
    		wfdTimes:0
    }
    $scope.formulaTypeList = [
        {   id:1, name:'标准冻结', description:'折后总价 - 原单价 * （ 总课时 - 冻结课时 ） = 冻结金额'},
        {   id:2, name:'VIP冻结',  description:'当前单价 * 冻结课时 + 预结转 = 冻结金额'}
    ];

    $scope.selectedFormulaInfo = {
        selectedFormula: $scope.formulaTypeList[0]
    };
    
    $scope.premiumType = undefined;//校准退费;

    /**
     * 下一步、上一步
     * @param before
     * @param next
     */
    $scope.nextStep = function(before,next) {
        if (next == 2) {
        	$scope.refundTab='bjk';
            if ($scope.productLine == 2) {
                $scope.businessType = 2;
                $scope.refundTab = 'ydy';
            }
        	if ($scope.bizType) {
                $scope.businessType = $scope.bizType;
        		$scope.refundTab = ($scope.bizType == 3) ? 'wfd' : (($scope.bizType == 2) ? 'ydy' : 'bjk');
        	}
        	$scope.selectRefundCourseTab($scope.refundTab);
        }
        if (next == 3) {
            if($scope.premiumType == undefined){
            	$scope.premiumTypeSelect = false; 
            }else if($scope.premiumType == 1){
            	$scope.selectedFormulaInfo.selectedFormula = $scope.formulaTypeList[0];
                $scope.selectedFormulaInfo.selectedFormula.description = '当前单价 * 冻结课时 = 冻结金额';
            	$scope.premiumTypeSelect = true;
            }else if($scope.premiumType == 2){
            	$scope.selectedFormulaInfo.selectedFormula = $scope.formulaTypeList[1];
            	$scope.premiumTypeSelect = true;
            }
        	if ($scope.productLine == 2) {
                $scope.premiumTypeSelect = true
                $scope.selectedFormulaInfo.selectedFormula = $scope.formulaTypeList[1];
            }
            createConfirmInfo();
        }
        $scope.step = next;
    }

    $scope.changeFormula = function(){
        createConfirmInfo();
    }

    function createConfirmInfo(){
        if($scope.selectedFormulaInfo.selectedFormula){
            if($scope.selectedFormulaInfo.selectedFormula.id == 1){
                // 当前单价：0元订单，当前单价取折扣后的单价，否则取原单价
                var currentUnitPrice = ($scope.selectedRefundCourse.discount_sum_price > 0) ? $scope.selectedRefundCourse.former_unit_price : $scope.selectedRefundCourse.discount_unit_price;
                // 不是第一次，则算法不一样
                if($scope.premiumTypeSelect == true) {
                    $scope.selectedFormulaInfo.result =
                        (currentUnitPrice * $scope.refundCourseTimesList.length);

                    $scope.selectedFormulaInfo.formulaDetailInfo = ""
                        + currentUnitPrice
                        + " * "
                        + $scope.refundCourseTimesList.length
                        + " = "
                        + (currentUnitPrice * $scope.refundCourseTimesList.length);
                } else {
                	if($scope.selectedRefundCourse.root_course_id == undefined){
                        $scope.selectedFormulaInfo.result =
                            $scope.selectedRefundCourse.discount_sum_price - currentUnitPrice * ($scope.selectedRefundCourse.course_total_count - $scope.refundCourseTimesList.length);

                        $scope.selectedFormulaInfo.formulaDetailInfo = ""
                            + $scope.selectedRefundCourse.discount_sum_price
                            + " - "
                            + currentUnitPrice
                            + " * ( "
                            + $scope.selectedRefundCourse.course_total_count
                            + " - "
                            + $scope.refundCourseTimesList.length
                            + " ) "
                            + "="+ $scope.selectedFormulaInfo.result;
                	}else{
                        $scope.selectedFormulaInfo.result =
                            $scope.selectedRefundCourse.root_discount_sum_price - currentUnitPrice * ($scope.selectedRefundCourse.root_course_total_count - $scope.refundCourseTimesList.length);

                        $scope.selectedFormulaInfo.formulaDetailInfo = ""
                            + $scope.selectedRefundCourse.root_discount_sum_price
                            + " - "
                            + currentUnitPrice
                            + " * ( "
                            + $scope.selectedRefundCourse.root_course_total_count
                            + " - "
                            + $scope.refundCourseTimesList.length
                            + " )"
                            +"= "+ $scope.selectedFormulaInfo.result;
                	}
                		

                }
            } else if($scope.selectedFormulaInfo.selectedFormula.id == 2){
                $scope.selectedFormulaInfo.result =
                    ($scope.selectedRefundCourse.discount_unit_price * $scope.refundCourseTimesList.length)+ Math.floor(($scope.selectedRefundCourse.manage_fee/$scope.selectedRefundCourse.course_surplus_count) * $scope.refundCourseTimesList.length);

                $scope.selectedFormulaInfo.formulaDetailInfo = ""
                    + $scope.selectedRefundCourse.discount_unit_price
                    + " * "
                    + $scope.refundCourseTimesList.length
                    + " + "
                    + Math.floor(($scope.selectedRefundCourse.manage_fee/$scope.selectedRefundCourse.course_surplus_count) * $scope.refundCourseTimesList.length)
                    + " = "
                    + $scope.selectedFormulaInfo.result;
            }
        }
    }

    $scope.checkBuckleUp = function(){
        if($scope.selectedFormulaInfo.checkBuckleUp){
            $scope.selectedFormulaInfo.checkBuckleUp = false;
        }else{
            $scope.selectedFormulaInfo.checkBuckleUp = true;
        }
    }

    /**
     * 选择学员
     * @param student
     */
    $scope.checkedStudent = function(student){
        if(student.checked){
            student.checked = false;
            $scope.student = undefined;
            $scope.productLine = 1;
        }else{
            student.checked = true;
            $scope.student = student;
            $scope.productLine = student.product_line;

            if($scope.curStudent && $scope.curStudent.id != student.id){
                $scope.curStudent.checked = false;
            }
            $scope.curStudent = $scope.student;
        }
    }
    function initial(){
        $('title').text('冻结 | 厝边素高');
        $scope.studentId = $("#rootIndex_studentId").val();
        $scope.step = 1;

        $scope.queryStudents = queryStudents;
        $scope.studentId = $("#rootIndex_studentId").val();
        queryStudents();

        $scope.orderDetailId = $("#rootIndex_orderDetailId").val();
        $scope.bizType = $("#rootIndex_bizType").val();
    }

    $scope.studentQueryInfo = {};

    function queryStudents(){
        var param = {};
        if($scope.studentId){
            param.studentId = $scope.studentId;
        }
        param.pageSize = 10;
        param.searchInfo = $scope.studentQueryInfo.searchInfo;
        $scope.isQueryStudent = 'isQueryStudent';
        $scope.student = undefined;
        $scope.curStudent = $scope.student;
        $scope.studentList = [];
        erp_studentsService.query(
            param,
            function(resp){
                $scope.isQueryStudent = '';
                if(!resp.error){
                    $scope.studentList = [];
                    if(resp.data && resp.data.length > 0) {
                        $scope.student = resp.data[0];
                        $scope.productLine = $scope.student.product_line;
                        if ($scope.studentId) {
                            $scope.student.checked = true;
                            $scope.curStudent = $scope.student;
                            $scope.studentList.push($scope.student);
                        } else {
                            $scope.student = null;
                            $scope.studentList = resp.data;
                        }
                    }else{
                        $scope.studentList = resp.data;
                    }
                }else{
                    $uibMsgbox.alert(resp.message);
                }
            });
    }

    $scope.queryCourse =  function (){

        var param = {
            studentId : $scope.curStudent.id,
            businessType:$scope.businessType
        };

        erp_studentOrderCourseService.queryOrderCourse(param,function(resp){

            $scope.isQueryBjk = '';

            if(!resp.error){

                $scope.orderBJK = resp.data;
                if($scope.orderDetailId){
                    $.each($scope.orderBJK,function(i,r){
                        if(r.id == $scope.orderDetailId){
                            $scope.checkRefundCourse($scope.orderBJK,r);
                        }
                    })
                }
            }else{

                alert(resp.message);

            }
        });

    }
    
    $scope.queryWfdCourse =  function (){

        var param = {
            studentId : $scope.curStudent.id,
            businessType:$scope.businessType
        };

        erp_studentOrderCourseService.queryOrderCourse(param,function(resp){

            $scope.isQueryWfd = '';

            if(!resp.error){

                $scope.orderWFD = resp.data;
                if($scope.orderDetailId){
                    $.each($scope.orderWFD,function(i,r){
                        if(r.id == $scope.orderDetailId){
                            $scope.checkRefundCourse($scope.orderWFD,r);

                        }
                    })
                }
            }else{

                alert(resp.message);

            }
        });

    }
    
    $scope.queryYdyCourse =  function (){

        var param = {
            studentId : $scope.curStudent.id,
            businessType:$scope.businessType
        };

        erp_studentOrderCourseService.queryOrderCourse(param,function(resp){

            $scope.isQueryYdy = '';

            if(!resp.error){

                $scope.orderYDY = resp.data;
                if($scope.orderDetailId){
                    $.each($scope.orderYDY,function(i,r){
                        if(r.id == $scope.orderDetailId){
                            $scope.checkRefundCourse($scope.orderYDY,r);
                            
                        }
                    })
                }
            }else{

                alert(resp.message);

            }
        });

    }

    $scope.selectRefundCourseTab = function(key){
    	if($scope.selectedRefundCourse) {
            $uibMsgbox.warn("已选定冻结课程，不可切换页签！");
            return;
        }
        $scope.refundTab = key;
        if(key=='bjk'){
            $scope.businessType = 1;
            $scope.queryCourse();
        }else if(key=='ydy'){
            $scope.businessType = 2;
            if(!$scope.orderyDYD){
                $scope.queryYdyCourse();
            }
        }else if(key=='wfd'){
            $scope.businessType = 3;
            if(!$scope.orderWFD){
                $scope.queryWfdCourse();
            }
        }
    }
    $scope.selectedRefundCourse = undefined;

    $scope.checkRefundCourse = function(courseList,course){
        $.each(courseList,function(i,cs){
            if(cs.ID != course.ID){
                cs.checked = undefined;
                $scope.selectedRefundCourse = undefined;
            }
        });

        if(course.checked){
            course.checked = false;
            $scope.selectedRefundCourse = undefined;
        }else{
            $scope.premiumType = course.premium_type;
        
            if (course.invoice_status && course.invoice_status == 1) {
                $uibMsgbox.confirm("当前订单已经开出发票，是否继续冻结？", function (result) {
                    if (result != 'yes') {
                        return;
                    }
                    course.checked = true;
                    $scope.selectedRefundCourse = course;
                    queryOrderChangeTimesInfo();
                });
            } else {
                course.checked = true;
                $scope.selectedRefundCourse = course;
                queryOrderChangeTimesInfo();
            }
        }

    }

    function queryOrderChangeTimesInfo(){
        var param = {};
        param.orderDetailId = $scope.selectedRefundCourse.id;
        $scope.isLoadingCourseTimesPanel = 'isLoadingCourseTimesPanel';
        $scope.selectedRefundCourse.orderChangeCourseTimes = undefined;
        erp_orderManagerService.orderCourseSurplusCount(param,function(resp){
            $scope.isLoadingCourseTimesPanel = '';
            if(!resp.error){
                $scope.selectedRefundCourse.orderCourseSurplusCount = resp.data;
            }else{
                alert(resp.message);
            }
        });
    }
    $scope.refundCourseTimesList = [];
    $scope.checkRefundCourseTimes =  function(attendance){
        if(attendance.checked){
            attendance.checked = false;
        }else{
            attendance.checked = true;
        }
        $scope.refundCourseTimesList = [];
        $.each($scope.selectedRefundCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.checked){
                $scope.refundCourseTimesList.push(tfoCourse);
            }
        });
    }

    $scope.checkAllRefundCourseTimes = function(){
        $scope.refundCourseTimesList = [];
        $.each($scope.selectedRefundCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.ATTEND_TYPE==10||!tfoCourse.ATTEND_TYPE){
                tfoCourse.checked = true;
                $scope.refundCourseTimesList.push(tfoCourse);
            }
        });
    }
    
    $scope.checkTimes= function(times, type){
        $scope.course.wfdTimes = times;
      $scope.surplusTimes = (type == 'wfd') ? $scope.selectedRefundCourse.course_surplus_count : $scope.selectedRefundCourse.course_schedule_count;
    	if(Number(times)>$scope.surplusTimes){
    		$uibMsgbox.warn("输入的冻结课时必须为正整数且不能大于剩余课时！");
    		return;
    	}
    }
    
    $scope.checkWfdTimes = function(times, type){
        $scope.refundCourseTimesList = [];
    	$scope.checkTimes(times, type);
    	for(var i = 0;i < times; i++) {  $scope.refundCourseTimesList.push(i);  } 
    }

    $scope.uncheckAllRefundCourseTimes = function(){
        $.each($scope.selectedRefundCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.ATTEND_TYPE==10||!tfoCourse.ATTEND_TYPE){
                tfoCourse.checked = false;
            }
        });
        $scope.refundCourseTimesList = [];
    }


    $scope.remark = "";
    /**
     * 提交冻结
     */
    $scope.submitRefund = function(){
        if($scope.businessType == 1){
        	submitBJKFrozen();
        }else if($scope.businessType == 2){
        	submitWFDFrozen();
        }else if($scope.businessType == 3){
        	submitWFDFrozen();
        }
    }
    function submitBJKFrozen(){
    	var param = {};
        param.studentId = $scope.student.id;
        param.businessType=$scope.businessType;
        param.orderDetailId = $scope.selectedRefundCourse.id;
        param.courseCnt = $scope.refundCourseTimesList.length;
        var courseTimes = [];
        $.each( $scope.refundCourseTimesList,function(i,ct){
            courseTimes.push(ct.TIMES);
        });
        param.courseTimes = courseTimes.join(",");
        if($scope.selectedFormulaInfo.checkBuckleUp){
            param.premiumDeductionAmount = $scope.selectedFormulaInfo.buckleUp;
            param.premium_result_val = $scope.selectedFormulaInfo.result-param.premiumDeductionAmount;
            param.premium_result=""+param.premium_result_val+"";
        }else{
        	param.premiumDeductionAmount=0
            param.premium_result_val = $scope.selectedFormulaInfo.result;
            param.premium_result=""+param.premium_result_val+"";
        }

        param.premiumType           = $scope.selectedFormulaInfo.selectedFormula.id+"";
        param.orderId                = $scope.selectedRefundCourse.order_id;
        param.premium_formula       = $scope.selectedFormulaInfo.selectedFormula.description;
        param.premium_detail        = $scope.selectedFormulaInfo.formulaDetailInfo;
        param.remark                = $scope.selectedFormulaInfo.remark;

        // $scope.isSubmitRefund = 'isSubmitRefund';
        // erp_orderChangeService.changeFrozen(param,function(resp){
        //     if(!resp.error){
        //         $scope.isSubmitRefund = 'isSubmitRefundOk';
        //     }else{
        //         alert(resp.message);
        //         $scope.isSubmitRefund = 'isSubmitRefundFailed';
        //     }
        // });
        var waitingModal = $uibMsgbox.waiting('正在处理，请稍候');
        erp_orderChangeService.changeFrozen(param,function(resp){
            waitingModal.close();
            if(!resp.error) {
                $uibMsgbox.confirm({
                    content:'冻结成功，可以查看详情，或者继续冻结',
                    cancelText: '继续冻结',
                    okText: '查看详情',
                    callback: function (res) {
                        if (res == 'yes') {
                            //window.location.href = '?studentId=' + param.studentId + '#/studentMgr/studentMgrIndex';
                            window.location.href = '?studentId=' + param.studentId + '&orderId=' + $scope.selectedRefundCourse.order_id + '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
                        } else {
                            //$state.reload();
                            window.location.href="?_t=" + Math.random() + "#/orders/classesFrozen";
                        }
                    }
                });
                //$scope.isSubmitRefund = 'isSubmitRefundOk';
            } else {
                $uibMsgbox.error(resp.message);
                //$scope.isSubmitRefund = 'isSubmitRefundFailed';
            }
        });
    }
    function submitWFDFrozen(){
    	 var param = {};
    	 param.businessType=$scope.businessType;
         param.studentId = $scope.student.id;
         param.orderDetailId = $scope.selectedRefundCourse.id;
         param.courseCnt = $scope.refundCourseTimesList.length;
         var courseTimes = [];
         $.each( $scope.refundCourseTimesList,function(i,ct){
             courseTimes.push(i);
         });
         param.courseTimes = courseTimes.join(",");
         if($scope.selectedFormulaInfo.checkBuckleUp){
             param.premiumDeductionAmount = $scope.selectedFormulaInfo.buckleUp;
             param.premium_result_val = $scope.selectedFormulaInfo.result-param.premiumDeductionAmount;
             param.premium_result=""+param.premium_result_val+"";
         }else{
        	 param.premiumDeductionAmount=0;
             param.premium_result_val = $scope.selectedFormulaInfo.result;
             param.premium_result=""+param.premium_result_val+"";
         }

         param.premiumType           = $scope.selectedFormulaInfo.selectedFormula.id+"";
         param.orderId                = $scope.selectedRefundCourse.order_id;
         param.premium_formula       = $scope.selectedFormulaInfo.selectedFormula.description;
         param.premium_detail        = $scope.selectedFormulaInfo.formulaDetailInfo;
         param.remark                = $scope.selectedFormulaInfo.remark;

         //$scope.isSubmitRefund = 'isSubmitRefund';
        var waitingModal = $uibMsgbox.waiting('正在处理，请稍候');
         erp_orderChangeService.changeFrozen(param,function(resp){
             waitingModal.close();
             if(!resp.error) {
                 $uibMsgbox.confirm({
                     content:'冻结成功，可以查看详情，或者继续冻结',
                     cancelText: '继续冻结',
                     okText: '查看详情',
                     callback: function (res) {
                         if (res == 'yes') {
                             //window.location.href = '?studentId=' + param.studentId + '#/studentMgr/studentMgrIndex';
                             window.location.href = '?studentId=' + param.studentId + '&orderId=' + $scope.selectedRefundCourse.order_id + '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
                         } else {
                             //$state.reload();
                             window.location.href="?_t=" + Math.random() + "#/orders/classesFrozen";
                         }
                     }
                 });
                 //$scope.isSubmitRefund = 'isSubmitRefundOk';
             } else {
                 $uibMsgbox.error(resp.message);
                 //$scope.isSubmitRefund = 'isSubmitRefundFailed';
             }
         });
    }
    
    
    $scope.submitRefundColse = function(){
        $scope.isSubmitRefund = '';
    }



    initial();
}
/**
 * Created by Liyong.zhu on 2017/2/12.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_orderChangeRefundController', [
        '$scope',
        '$log',
        '$uibMsgbox',
        'erp_studentsService',
        'erp_studentOrderCourseService',
        'erp_orderManagerService',
        'erp_courseService',
        'erp_studentBuOrgsService',
        'erp_gradeService',
        'erp_subjectService',
        'erp_timeSeasonService',
        'erp_courseTimesService',
        'erp_orderChangeService',
        erp_orderChangeRefundController]);

function erp_orderChangeRefundController(
    $scope,
    $log,
    $uibMsgbox,
    erp_studentsService,
    erp_studentOrderCourseService,
    erp_orderManagerService,
    erp_courseService,
    erp_studentBuOrgsService,
    erp_gradeService,
    erp_subjectService,
    erp_timeSeasonService,
    erp_courseTimesService,
    erp_orderChangeService) {

    //学员信息
    $scope.student = undefined;
    $scope.studentList = [];
    $scope.businessType = 1;
    $scope.refundTab='bjk';
    $scope.productLine = 1; // 产品线 1-培英精品班 2-个性化 11-佳音
    
    $scope.orderBJK = undefined;
    $scope.orderYDY = undefined;
    $scope.orderWFD = undefined;
    $scope.lastQueryCourseStudentId = undefined; //上次已查询课程的学生Id
    $scope.formulaTypeList = [
        {   id:1, name:'标准退费', description:'折后总价 - 原单价 * （ 总课时 - 退费课时 ）= 退费金额 ( 说明：退费金额为负值不允许编辑补扣金额,可直接提交)'},
        {   id:2, name:'VIP退费',  description:'当前单价 * 退费课时 + 预结转  = 退费金额'}
    ];

    $scope.selectedFormulaInfo = {
        selectedFormula: $scope.formulaTypeList[0]
    };
    
    $scope.premiumType = undefined;//校准退费;
    
    $scope.ladder = {};

    /**
     * 下一步、上一步
     * @param before
     * @param next
     */
    $scope.nextStep = function(before,next) {
        if (next == 2 && before == 1) {
            if ($scope.productLine == 2) {
                $scope.businessType = 2;
                $scope.refundTab = 'ydy';
            }
        	if ($scope.bizType) {
        		$scope.businessType = $scope.bizType;
        		$scope.refundTab = ($scope.bizType == 3) ? 'wfd' : (($scope.bizType == 2) ? 'ydy' : 'bjk');
            }
            $scope.queryCourse();
        }
        if (next == 3) {
            if ($scope.businessType == 2) { // 一对一
                if (!$scope.selectedRefundCourse.refundCourseTimes) {
                    $uibMsgbox.error("请输入退费课时");
                    return;
                }

                $scope.premiumType = 2; // 一对一退费暂时全部使用vip退费 add by lincm 20170828
            }

            if($scope.premiumType == undefined){
            	$scope.premiumTypeSelect = false; 
            }else if($scope.premiumType == 1){
            	$scope.selectedFormulaInfo.selectedFormula = $scope.formulaTypeList[0];
                $scope.selectedFormulaInfo.selectedFormula.description = '当前单价 * 退费课时 = 退费金额';
            	$scope.premiumTypeSelect = true;
            }else if($scope.premiumType == 2){
            	$scope.selectedFormulaInfo.selectedFormula = $scope.formulaTypeList[1];
            	$scope.premiumTypeSelect = true;
            }

            createConfirmInfo();
        }
        $scope.step = next;
    };

    $scope.changeFormula = function(){
        createConfirmInfo();
    };

    function createConfirmInfo(){
        if($scope.selectedFormulaInfo.selectedFormula){
        	if ($scope.businessType == 2) {
        		erp_orderChangeService.refundLadder({
        			p_student_id : $scope.selectedRefundCourse.student_id,
        			p_course_id : $scope.selectedRefundCourse.course_id,
        			p_refund_course_times : $scope.selectedRefundCourse.refundCourseTimes,
        			p_order_create_date : $scope.selectedRefundCourse.order_create_date
        		}, function(resp) {
        			if (!resp.error && resp.data) {
        				$scope.selectedRefundCourse.former_unit_price = resp.data.level_price;
        				$scope.ladder = resp.data;
        			}
        			genConfirmInfo();
        		});
        	} else {
        		$scope.selectedRefundCourse.refundCourseTimes = $scope.refundCourseTimesList.length;
        		genConfirmInfo();
        	}
        }
    }
    
    function genConfirmInfo() {
    	if($scope.selectedFormulaInfo.selectedFormula.id == 1) {
          // 当前单价：0元订单，当前单价取折扣后的单价，否则取原单价
    	    var currentUnitPrice = ($scope.selectedRefundCourse.discount_sum_price > 0) ? $scope.selectedRefundCourse.former_unit_price : $scope.selectedRefundCourse.discount_unit_price;
			      // 不是第一次，则算法不一样
            if($scope.premiumTypeSelect == true) {
                $scope.selectedFormulaInfo.result = currentUnitPrice * $scope.selectedRefundCourse.refundCourseTimes;

                $scope.selectedFormulaInfo.formulaDetailInfo = ""
                    + currentUnitPrice
                    + " * "
                    + $scope.selectedRefundCourse.refundCourseTimes
                    + " = "
                    + $scope.selectedFormulaInfo.result;
            } else {
            	if($scope.selectedRefundCourse.root_course_id == undefined){
                    $scope.selectedFormulaInfo.result = $scope.selectedRefundCourse.discount_sum_price
                    - currentUnitPrice
                    * ($scope.selectedRefundCourse.course_total_count - $scope.selectedRefundCourse.refundCourseTimes);

	                $scope.selectedFormulaInfo.formulaDetailInfo = ""
	                    + $scope.selectedRefundCourse.discount_sum_price
	                    + " - "
	                    + currentUnitPrice
	                    + " * ( "
	                    + $scope.selectedRefundCourse.course_total_count
	                    + " - "
	                    + $scope.selectedRefundCourse.refundCourseTimes
	                    + " ) = "
	                    + $scope.selectedFormulaInfo.result;
            	}else{
            		$scope.selectedFormulaInfo.result = $scope.selectedRefundCourse.root_discount_sum_price
                    - currentUnitPrice
                    * ($scope.selectedRefundCourse.root_course_total_count - $scope.selectedRefundCourse.refundCourseTimes);

	                $scope.selectedFormulaInfo.formulaDetailInfo = ""
	                    + $scope.selectedRefundCourse.root_discount_sum_price
	                    + " - "
	                    + currentUnitPrice
	                    + " * ( "
	                    + $scope.selectedRefundCourse.root_course_total_count
	                    + " - "
	                    + $scope.selectedRefundCourse.refundCourseTimes
	                    + " ) = "
	                    + $scope.selectedFormulaInfo.result;
            	}
            	
            }
    	} else if($scope.selectedFormulaInfo.selectedFormula.id == 2) {
    		$scope.selectedFormulaInfo.result = $scope.selectedRefundCourse.discount_unit_price 
				* $scope.selectedRefundCourse.refundCourseTimes + Math.floor(($scope.selectedRefundCourse.manage_fee/$scope.selectedRefundCourse.course_surplus_count) * $scope.refundCourseTimesList.length);
			
			$scope.selectedFormulaInfo.formulaDetailInfo = ""
	            + $scope.selectedRefundCourse.discount_unit_price
	            + " * "
	            + $scope.selectedRefundCourse.refundCourseTimes
                + " + "
                + Math.floor(($scope.selectedRefundCourse.manage_fee/$scope.selectedRefundCourse.course_surplus_count) * $scope.refundCourseTimesList.length)
	            + " = "
	            + $scope.selectedFormulaInfo.result;
    	}
    }

    $scope.checkBuckleUp = function(){
        if($scope.selectedFormulaInfo.checkBuckleUp){
            $scope.selectedFormulaInfo.checkBuckleUp = false;
        }else{
            $scope.selectedFormulaInfo.checkBuckleUp = true;
        }
        if($scope.selectedFormulaInfo.result<0){
            $scope.selectedFormulaInfo.checkBuckleUp = false;
        }
    };


    /**
     * 选择学员
     * @param student
     */
    $scope.checkedStudent = function(student){
        if(student.checked){
            student.checked = false;
            $scope.orderBJK = undefined;
            $scope.orderWFD = undefined;
            $scope.orderYDY = undefined;
            $scope.student = undefined;
            $scope.selectedRefundCourse = {};
            $scope.refundCourseTimesList = [];
            $scope.productLine = 1;
        }else{
            student.checked = true;
            $scope.student = student;
            $scope.productLine = student.product_line;

            if($scope.curStudent && $scope.curStudent.id != student.id){
                $scope.curStudent.checked = false;
            }
        }
        $scope.curStudent = $scope.student;
    };

    $scope.studentQueryInfo = {};

    function queryStudents() {
        var param = {};
        if($scope.studentId) {
            param.studentId = $scope.studentId;
        }
        param.pageSize = 10;
        param.searchInfo = $scope.studentQueryInfo.searchInfo;
        $scope.isQueryStudent = 'isQueryStudent';
        $scope.student = undefined;
        $scope.curStudent = $scope.student;
        $scope.studentList = [];
        erp_studentsService.query(
            param,
            function(resp) {
                $scope.isQueryStudent = '';
                if(!resp.error){
                    $scope.studentList = [];
                    if(resp.data && resp.data.length > 0) {
                        $scope.student = resp.data[0];
                        $scope.productLine = $scope.student.product_line;
                        if ($scope.studentId) {
                            $scope.student.checked = true;
                            $scope.curStudent = $scope.student;
                            $scope.studentList.push($scope.student);
                        } else {
                            $scope.student = null;
                            $scope.studentList = resp.data;
                        }
                    }else{
                        $scope.studentList = resp.data;
                    }
                }else{
                    $uibMsgbox.alert(resp.message);
                }
            });
    }

    $scope.queryCourse =  function() {
        if(($scope.businessType == 1 && $scope.orderBJK && $scope.orderBJK.length > 0)
        		|| ($scope.businessType == 3 && $scope.orderWFD && $scope.orderWFD.length > 0)
        		|| ($scope.businessType == 2 && $scope.orderYDY && $scope.orderYDY.length > 0)) {
            return;
        }

        var param = {
            studentId : $scope.curStudent.id,
            businessType:$scope.businessType
        };
        if ($scope.businessType == 1) {
            $scope.isQueryBjk = 'isQueryBjk';
        } else if ($scope.businessType == 2) {
        	$scope.isQueryYdy = 'isQueryYdy';
        } else if ($scope.businessType == 3) {
            $scope.isQueryWfd = 'isQueryWfd';
        }

        erp_studentOrderCourseService.queryOrderCourse(param, function(resp){
            $scope.isQueryBjk = '';
            $scope.isQueryYdy = '';
            $scope.isQueryWfd = '';
            if(!resp.error){
                if ($scope.businessType == 1) {
                    $scope.orderBJK = resp.data;
                    if($scope.orderDetailId){
                        $.each($scope.orderBJK,function(i,r){
                            if(r.id == $scope.orderDetailId){
                                $scope.checkRefundCourse($scope.orderBJK,r);
                            }
                        });
                    }
                } else if ($scope.businessType == 2) {
                	$scope.orderYDY = resp.data;
                	if($scope.orderDetailId){
                        $.each($scope.orderYDY,function(i,r){
                            if(r.id == $scope.orderDetailId){
                                $scope.checkRefundCourse($scope.orderYDY,r);
                            }
                        });
                    }
                } else if ($scope.businessType == 3) {
                    $scope.orderWFD = resp.data;
                    if($scope.orderDetailId){
                        $.each($scope.orderWFD,function(i,r){
                            if(r.id == $scope.orderDetailId){
                                $scope.checkRefundCourse($scope.orderWFD,r);
                            }
                        });
                    }
                }
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.selectRefundCourseTab = function(key){
        if($scope.selectedRefundCourse && !$.isEmptyObject($scope.selectedRefundCourse)) {
            $uibMsgbox.warn("已选定退费课程，不可切换页签！");
            return;
        }
        $scope.refundTab = key;
        if(key=='bjk'){
            $scope.businessType = 1;
        } else if(key=='ydy'){
            $scope.businessType = 2;
        } else if(key=='wfd'){
            $scope.businessType = 3;
        }
        $scope.queryCourse();
    };

    $scope.selectedRefundCourse = {};

    $scope.checkRefundCourse = function(courseList,course){
        $scope.refundCourseTimesList = [];
        if(course.checked){
            course.checked = false;
            $scope.selectedRefundCourse = {};
            delete course.premiumNum;
        } else {
            $scope.premiumType = course.premium_type;
        	
            if (course.invoice_status && course.invoice_status == 1) {
                $uibMsgbox.confirm("当前订单已经开出发票，是否继续退费？", function (result) {
                    if(result != 'yes') {
                        return;
                    }
                    course.checked = true;
                    course.refundCourseTimes = '';
                    course.premiumNum = '';
                    $scope.selectedRefundCourse = course;
                    // 班级课，才查询
                    if($scope.businessType == 1) {
                        queryOrderChangeTimesInfo();
                    }
                });
            } else {
                course.checked = true;
                course.refundCourseTimes = '';
                course.premiumNum = '';
                $scope.selectedRefundCourse = course;
                // 班级课，才查询
                if($scope.businessType == 1) {
                    queryOrderChangeTimesInfo();
                }
            }
        }
    };

    function queryOrderChangeTimesInfo(){
        var param = {};
        param.orderDetailId = $scope.selectedRefundCourse.id;
        $scope.isLoadingCourseTimesPanel = 'isLoadingCourseTimesPanel';
        $scope.selectedRefundCourse.orderChangeCourseTimes = undefined;
        erp_orderManagerService.orderCourseSurplusCount(param,function(resp){
            $scope.isLoadingCourseTimesPanel = '';
            if(!resp.error) {
                $scope.selectedRefundCourse.orderCourseSurplusCount = resp.data;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    }
    $scope.refundCourseTimesList = [];
    $scope.checkRefundCourseTimes =  function(attendance){
        if(attendance.checked){
            attendance.checked = false;
        } else {
            attendance.checked = true;
        }

        $scope.refundCourseTimesList = [];
        $.each($scope.selectedRefundCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.checked){
                $scope.refundCourseTimesList.push(tfoCourse);
            }
        });
    };

    /**
     * 晚辅导退费，输入退费次数
     * @param course
     */
    $scope.inputPremiumNum = function(refundTimes, type){
        // 控制“下一步”的可点击
        if (!$scope.selectedRefundCourse) {
            $uibMsgbox.error('请选择要退费的课程！');
            return false;
        }

        var surplusCount = (type == 'wfd') ? $scope.selectedRefundCourse.course_surplus_count : $scope.selectedRefundCourse.course_schedule_count;
          if (!surplusCount) {
            $uibMsgbox.error('请选择要退费的课程！');
            return false;
          }

        try{
            refundTimes = parseInt(refundTimes);
        }catch(e){
            refundTimes = -1;
        }

        $scope.refundCourseTimesList = [];
        if(refundTimes && refundTimes > 0 && refundTimes <= surplusCount){
            for(var i = 0;i < refundTimes; i++) {
                $scope.refundCourseTimesList.push(i+1);
            }
        } else if (refundTimes <= 0 || refundTimes > surplusCount) {
            $uibMsgbox.error("输入的退费课时必须为正整数且不能大于剩余可排课时！");
        }
    };

    $scope.checkAllRefundCourseTimes = function(){
        $scope.refundCourseTimesList = [];
        $.each($scope.selectedRefundCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.ATTEND_TYPE==10||!tfoCourse.ATTEND_TYPE){
                tfoCourse.checked = true;
                $scope.refundCourseTimesList.push(tfoCourse);
            }
        });
    };

    $scope.uncheckAllRefundCourseTimes = function(){
        $.each($scope.selectedRefundCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.ATTEND_TYPE==10||!tfoCourse.ATTEND_TYPE){
                tfoCourse.checked = false;
            }
        });
        $scope.refundCourseTimesList = [];
    };

    $scope.remark = "";

    /**
     * 提交退费
     */
    $scope.submitRefund = function(){
        var param = {};

        if($scope.businessType == 1){
            param.courseCnt = $scope.refundCourseTimesList.length;
            var courseTimes = [];
            $.each( $scope.refundCourseTimesList,function(i,ct){
                courseTimes.push(ct.TIMES);
            });
            param.courseTimes = courseTimes.join(",");
        } else if($scope.businessType == 2){
        	param.courseCnt = $scope.selectedRefundCourse.refundCourseTimes;
        	param.courseTimes = $scope.selectedRefundCourse.refundCourseTimes;
        } else if($scope.businessType == 3){ //晚辅导
            param.courseCnt = $scope.selectedRefundCourse.premiumNum;
            var courseTimes = [];
            $.each( $scope.refundCourseTimesList,function(i,ct){
                courseTimes.push(ct.TIMES);
            });
            param.courseTimes = courseTimes.join(",");
        }

        param.studentId = $scope.student.id;
        param.orderDetailId = $scope.selectedRefundCourse.id;

        if($scope.selectedFormulaInfo.checkBuckleUp){
            param.premiumDeductionAmount = $scope.selectedFormulaInfo.buckleUp;
            param.premium_result_val = $scope.selectedFormulaInfo.result-param.premiumDeductionAmount;
            param.premium_result=""+param.premium_result_val+"";
        }else{
            param.premiumDeductionAmount = 0;
            param.premium_result_val = $scope.selectedFormulaInfo.result;
            param.premium_result=""+param.premium_result_val+"";
        }

        param.premiumType           = $scope.selectedFormulaInfo.selectedFormula.id+"";
        param.orderId                = $scope.selectedRefundCourse.order_id;
        param.premium_formula       = $scope.selectedFormulaInfo.selectedFormula.description;
        param.premium_detail        = $scope.selectedFormulaInfo.formulaDetailInfo;
        param.remark                = $scope.selectedFormulaInfo.remark;
        if(!param.remark) {
            $uibMsgbox.error("备注信息必填！");
            return;
        }

        //$scope.isSubmitRefund = 'isSubmitRefund';
        var waitingModal = $uibMsgbox.waiting('正在处理，请稍候');
        erp_orderChangeService.changeRefund(param,function(resp){
            waitingModal.close();
            if(!resp.error) {
                $uibMsgbox.confirm({
                    content:'退费审批中，可以查看详情，或者继续退费',
                    cancelText: '继续退费',
                    okText: '查看详情',
                    callback: function (res) {
                        if (res == 'yes') {
                            //window.location.href = '?studentId=' + param.studentId + '#/studentMgr/studentMgrIndex';
                            window.location.href = '?studentId=' + param.studentId + '&orderId=' + $scope.selectedRefundCourse.order_id + '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
                        } else {
                            //$state.reload();
                            window.location.href="?_t=" + Math.random() + "#/orders/classesRefund";
                        }
                    }
                });
                //$scope.isSubmitRefund = 'isSubmitRefundOk';
            } else {
            	$uibMsgbox.error(resp.message);
                //$scope.isSubmitRefund = 'isSubmitRefundFailed';
            }
        });
    };

    $scope.submitRefundColse = function(){
        $scope.isSubmitRefund = '';
    };

    function initial(){
        $('title').text('退费 | 厝边素高');
        $scope.studentId = $("#rootIndex_studentId").val();
        $scope.step = 1;

        $scope.queryStudents = queryStudents;
        $scope.studentId = $("#rootIndex_studentId").val();
        queryStudents();

        $scope.orderDetailId = $("#rootIndex_orderDetailId").val();
        $scope.bizType = $("#rootIndex_bizType").val();
    }

    initial();
}
/**
 * Created by Liyong.zhu on 2017/2/12.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_orderChangeTransferController', [
        '$scope',
        '$log',
        '$q',
        '$state',
        '$uibMsgbox',
        'erp_studentsService',
        'erp_studentOrderCourseService',
        'erp_orderManagerService',
        'erp_courseService',
        'erp_studentBuOrgsService',
        'erp_gradeService',
        'erp_subjectService',
        'erp_timeSeasonService',
        'erp_courseTimesService',
        'erp_orderChangeService',
        erp_orderChangeTransferController]);

function erp_orderChangeTransferController(
    $scope,
    $log,
    $q,
    $state,
    $uibMsgbox,
    erp_studentsService,
    erp_studentOrderCourseService,
    erp_orderManagerService,
    erp_courseService,
    erp_studentBuOrgsService,
    erp_gradeService,
    erp_subjectService,
    erp_timeSeasonService,
    erp_courseTimesService,
    erp_orderChangeService) {

    //学员信息
    $scope.student = undefined;
    $scope.studentList = [];
    $scope.businessType = 1;
    $scope.transferOutTab='bjk';
    $scope.productLine = 1; // 产品线 1-培英精品班 2-个性化 11-佳音
    
    $scope.orderBJK = undefined;
    $scope.orderYDY = undefined;
    //转入信息
    $scope.transferIn = {};
    $scope.transferIn.branch_id = undefined;
    $scope.transferIn.selectedBranch = {id : -1};
    $scope.transferIn.selectedTimeSeason = {id : -1};
    $scope.transferIn.selectedGrade = {id : -1};
    $scope.transferIn.selectedSubject = {id : -1};
    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };
    
    $scope.reloadPage = function() {
		location.reload();
	};

    /**
     * 下一步、上一步
     * @param before
     * @param next
     */
    $scope.nextStep = function(before,next) {
        if (next == 2 && before == 1) { //转出
            if ($scope.productLine == 2) {
                $scope.businessType = 2;
                $scope.transferOutTab = 'ydy';
            }
            $scope.queryCourse();
        }
        if (next == 3 && before == 2) { //转入
            if($scope.businessType == 1) {
                queryBuOrgs().then(function () {
                    return queryTimeSeason();
                }).then(function () {
                    return queryGrade();
                }).then(function () {
                    return querySubject();
                }).then(function () {
                    $scope.querySelectingCourse();
                });
            } else if($scope.businessType == 2) {
                $scope.queryTransInBranchList();
                $scope.transferIn.branch_id = $scope.selectedTransferOutCourse.branch_id;
            }
        }
        $scope.step = next;
    };


    /**
     * 选择学员
     * @param student
     */
    $scope.checkedStudent = function(student) {
        if(student.checked){
            student.checked = false;
            $scope.student = undefined;
            $scope.orderBJK = undefined;
            $scope.orderYDY = undefined;
            $scope.selectedTransferOutCourse = undefined;
            $scope.transferOutCourseTimesList = [];
            $scope.productLine = 1;
        }else{
            student.checked = true;
            $scope.student = student;
            $scope.productLine = student.product_line;

            if($scope.curStudent && $scope.curStudent.id != student.id){
                $scope.curStudent.checked = false;
            }
        }
        $scope.curStudent = $scope.student;
    };

    $scope.studentQueryInfo = {};

    function queryStudents() {
        var param = {};
        if($scope.studentId){
            param.studentId = $scope.studentId;
        }
        param.pageSize = 10;
        param.searchInfo = $scope.studentQueryInfo.searchInfo;
        $scope.isQueryStudent = 'isQueryStudent';
        $scope.student = undefined;
        $scope.curStudent = $scope.student;
        $scope.studentList = [];
        erp_studentsService.query(
            param,
            function(resp){
                $scope.isQueryStudent = '';
                if(!resp.error){
                    $scope.studentList = [];
                    if(resp.data && resp.data.length > 0) {
                        $scope.student = resp.data[0];
                        $scope.productLine = $scope.student.product_line;
                        if ($scope.studentId) {
                            $scope.student.checked = true;
                            $scope.curStudent = $scope.student;
                            $scope.studentList.push($scope.student);
                        } else {
                            $scope.student = null;
                            $scope.studentList = resp.data;
                        }
                    }else{
                        $scope.studentList = resp.data;
                    }
                }else{
                    $uibMsgbox.alert(resp.message);
                }
            });
    }

    $scope.queryCourse =  function (){
        if($scope.businessType == 1 && $scope.orderBJK || $scope.businessType == 2 && $scope.orderYDY) {
            return;
        }

        var param = {
            studentId : $scope.curStudent.id,
            businessType:$scope.businessType
        };

        if ($scope.businessType == 1) {
            $scope.isQueryBjk = 'isQueryBjk';
        } else if ($scope.businessType == 2) {
            $scope.isQueryYdy = 'isQueryYdy';
        }

        erp_studentOrderCourseService.queryOrderCourse(param,function(resp){

            $scope.isQueryBjk = '';
            $scope.isQueryYdy = '';

            if(!resp.error){
                if ($scope.businessType == 1) {
                    $scope.orderBJK = resp.data;
                    if($scope.orderDetailId){
                        $.each($scope.orderBJK,function(i,r){
                            if(r.id == $scope.orderDetailId){
                                $scope.checkTransferOutCourse($scope.orderBJK,r);

                            }
                        })
                    }
                } else if ($scope.businessType == 2) {
                    $scope.orderYDY = resp.data;
                    if($scope.orderDetailId){
                        $.each($scope.orderYDY,function(i,r){
                            if(r.id == $scope.orderDetailId){
                                $scope.checkTransferOutCourse($scope.orderYDY,r);
                            }
                        });
                    }
                }
            }else{
                $uibMsgbox.alert(resp.message);

            }
        });

    };

    $scope.selectTransferOutCourseTab = function(key){
        if($scope.selectedTransferOutCourse) {
            $uibMsgbox.warn("已选定转班课程，不可切换页签！");
            return;
        }
        $scope.transferOutTab = key;
        if(key=='bjk'){
            $scope.businessType = 1;
        }else if(key=='ydy'){
            $scope.businessType = 2;
        }
        $scope.queryCourse();
    };
    $scope.selectedTransferOutCourse = undefined;

    $scope.checkTransferOutCourse = function(courseList,course){
        $.each(courseList,function(i,cs){
            if(cs.ID != course.ID){
                cs.checked = undefined;
                $scope.selectedTransferOutCourse = undefined;
            }
        });
        $scope.transferOutCourseTimesList = [];
        if(course.checked){
            course.checked = false;
            $scope.selectedTransferOutCourse = undefined;
            delete course.transferOutCount;
        }else{
            course.checked = true;
            $scope.selectedTransferOutCourse = course;
            // 班级课，才查询
            if($scope.businessType == 1) {
                queryOrderChangeTimesInfo();
            }
        }

    };

    function queryOrderChangeTimesInfo(){
        var param = {};
        param.orderDetailId = $scope.selectedTransferOutCourse.id;
        $scope.isLoadingCourseTimesPanel = 'isLoadingCourseTimesPanel';
        $scope.selectedTransferOutCourse.orderChangeCourseTimes = undefined;
        erp_orderManagerService.orderCourseSurplusCount(param,function(resp){
            $scope.isLoadingCourseTimesPanel = '';
            if(!resp.error){
                $scope.selectedTransferOutCourse.orderCourseSurplusCount = resp.data;
            }else{
                $uibMsgbox.alert(resp.message);
            }
        });
    }
    $scope.transferOutCourseTimesList = [];
    $scope.checkTransferOutCourseTimes =  function(attendance){
        if(attendance.checked){
            attendance.checked = false;
        }else{
            attendance.checked = true;
        }
        $scope.transferOutCourseTimesList = [];
        $.each($scope.selectedTransferOutCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.checked){
                $scope.transferOutCourseTimesList.push(tfoCourse);
            }
        });
    };

    $scope.checkAllTransferOutCourseTimes = function(){
        $scope.transferOutCourseTimesList = [];
        $.each($scope.selectedTransferOutCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.ATTEND_TYPE==10||!tfoCourse.ATTEND_TYPE){
                tfoCourse.checked = true;
                $scope.transferOutCourseTimesList.push(tfoCourse);
            }
        });
    };

    $scope.unCheckAllTransferOutCourseTimes = function(){
        $.each($scope.selectedTransferOutCourse.orderCourseSurplusCount,function(i,tfoCourse){
            if(tfoCourse.ATTEND_TYPE==10||!tfoCourse.ATTEND_TYPE){
                tfoCourse.checked = false;
            }
        });
        $scope.transferOutCourseTimesList = [];
    };

    /**
     * 1对1 ，转班课时录入
     * @param course
     */
    $scope.inputTransferOutCourseCount = function(course){
        try{
            course.transferOutCount = parseInt(course.transferOutCount);
        }catch(e){
            course.transferOutCount = -1;
        }
        // 控制“下一步”的可点击
        $scope.transferOutCourseTimesList = [];
        if(course.transferOutCount && course.transferOutCount > 0 && course.transferOutCount <= course.course_schedule_count){
            for(var i = 0;i < course.transferOutCount; i++) {
                $scope.transferOutCourseTimesList.push(i+1);
            }
        } else if (course.transferOutCount == 0 || (course.transferOutCount && course.transferOutCount > course.course_schedule_count)) {
            $uibMsgbox.warn("输入的转班课时必须为正整数且不能大于剩余可排课时！");
        }
    };

    /**
     * 查询课程
     */
    $scope.querySelectingCourse = function(){
        var param = {
            currentPage: $scope.paginationConf.currentPage,
            pageSize: $scope.paginationConf.itemsPerPage,
            branch_id:$scope.transferIn.selectedBranch.id,
            season_id:$scope.transferIn.selectedTimeSeason?$scope.transferIn.selectedTimeSeason.id:-1,
            grade_id:$scope.transferIn.selectedGrade?$scope.transferIn.selectedGrade.id:-1,
            subject_id:$scope.transferIn.selectedSubject?$scope.transferIn.selectedSubject.id:-1,
            business_type:$scope.businessType,
            search_info:$("#courseSearchInfo").val(),
            unit_price: $scope.selectedTransferOutCourse.former_unit_price,
            status:1
        };
        $scope.isQuerySelectingCourse = 'isQuerySelectingCourse';
        $scope.toSelectingCourseList = [];
        erp_courseService.query(param,function(resp){
            $scope.isQuerySelectingCourse = '';
            if(!resp.error){
                $scope.toSelectingCourseList = resp.data;
                $scope.paginationConf.totalItems = resp.total;
                $scope.selectedTransferInCourse = undefined;
            }else{
                $uibMsgbox.alert(resp.message);
            }
        })
    };

    $scope.checkTransferInCourse = function(toSelectingCourseList,course){
        if(course.checked){
            course.checked = false;
            $scope.selectedTransferInCourse = undefined;
            $scope.transferInCourseTimesList = [];
        }else{
            course.checked = true;
            if($scope.selectedTransferInCourse&&$scope.selectedTransferInCourse.id!=course.id){
                $scope.selectedTransferInCourse.checked = false;
            }
            $scope.selectedTransferInCourse = course;
            $scope.transferInCourseTimesList = [];
            $scope.queryTransferInCourseTimes();
        }
    };
    $scope.transferInCourseTimesList = [];
    /**
     * 打开课次面板
     * @param course
     */
    $scope.queryTransferInCourseTimes = function(){
        var param = {};
        param.courseId = $scope.selectedTransferInCourse.id;
        param.studentId = $scope.student.id;
        $scope.isLoadingCourseTimesPanel = 'isLoadingCourseTimesPanel';
        erp_courseTimesService.query(param,function(resp){
            $scope.isLoadingCourseTimesPanel = '';
            if(!resp.error){
                $scope.selectedTransferInCourse.courseSchedulingList = resp.data;
                doSelectedCourseOfTransferIn($scope.transferOutCourseTimesList || []);
            }
        })
    };

    $scope.checkedTransferInCourseTimes = function(courseTime){
        if(courseTime.checked){
            courseTime.checked = false;
        }else{
            if($scope.transferInCourseTimesList.length == $scope.transferOutCourseTimesList.length){
                $uibMsgbox.alert("已经转入全部"+$scope.transferInCourseTimesList.length+"课时！");
                courseTime.checked = false;
                return false;
            }
            courseTime.checked = true;
        }

        $scope.transferInCourseTimesList  = [];
        $.each($scope.selectedTransferInCourse.courseSchedulingList,function(i,node){
            if(node.checked){
                $scope.transferInCourseTimesList.push(node);
            }
        });
    };

    /**
     * 查询课程季
     */
    function queryTimeSeason(){
        var deferred = $q.defer();
        erp_timeSeasonService.list({
            product_line:$scope.transferIn.selectedBranch?$scope.transferIn.selectedBranch.product_line:-1
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
                $scope.transferIn.selectedTimeSeason = undefined;
                if($scope.selectedTransferOutCourse && $scope.selectedTransferOutCourse.season_id){
                    $.each($scope.timeSeasonList,function(i, season){
                        if(season.id == $scope.selectedTransferOutCourse.season_id){
                            $scope.transferIn.selectedTimeSeason = season;
                        }
                    })
                }
                deferred.resolve();

            }
        });
        return deferred.promise;
    }

    /**
     * 查询科目
     */
    function querySubject(){
        var deferred = $q.defer();
        erp_subjectService.querySelectDatas({
            branch_id:$scope.transferIn.selectedBranch?$scope.transferIn.selectedBranch.id:-1,
            season_id:$scope.transferIn.selectedTimeSeason?$scope.transferIn.selectedTimeSeason.id:-1,
            grade_id:$scope.transferIn.selectedGrade?$scope.transferIn.selectedGrade.id:-1
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
                $scope.transferIn.selectedSubject = undefined;
                if($scope.selectedTransferOutCourse && $scope.selectedTransferOutCourse.subject_id){
                    $.each($scope.subjectList,function(i, subject){
                        if(subject.id == $scope.selectedTransferOutCourse.subject_id){
                            $scope.transferIn.selectedSubject = subject;
                        }
                    });
                }
                deferred.resolve();
            }
        });
        return deferred.promise;
    }

    /**
     * 查询年级
     */
    function queryGrade(){
        var deferred = $q.defer();
        erp_gradeService.querySelectDatas({
            branch_id:$scope.transferIn.selectedBranch?$scope.transferIn.selectedBranch.id:-1,
            season_id:$scope.transferIn.selectedTimeSeason?$scope.transferIn.selectedTimeSeason.id:-1
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
                $scope.transferIn.selectedGrade = undefined;
                if($scope.student && $scope.student.grade_id){
                    $.each($scope.gradeList,function(i,grade){
                        if(grade.id == $scope.student.grade_id){
                            $scope.transferIn.selectedGrade = grade;
                        }
                    })
                }
                deferred.resolve();
            }
        });
        return deferred.promise;
    }

    /**
     * 查询校区
     */
    function queryBuOrgs(){
        var deferred = $q.defer();
        erp_studentBuOrgsService.queryAll({},function(resp){
            if(!resp.error){
                $scope.branchList = resp.data;
                if($scope.branchList){
                    $.each($scope.branchList,function(i,branch){
                        if(branch.id == $scope.selectedTransferOutCourse.branch_id){
                            $scope.transferIn.selectedBranch = branch;
                        }
                    });
                }
                deferred.resolve();
            }
        });
        return deferred.promise;
    }

    /**
     * 查询1对1可转入校区
     */
    $scope.queryTransInBranchList = function(){
        var param = {
            course_id:$scope.selectedTransferOutCourse.course_id,
            business_type:2  //1对1课程
        };
        erp_courseService.query(param,function(resp){
            if(!resp.error){
                $scope.transInfBranchList = [];
                if(resp.data && resp.data.length > 0 && resp.data[0].branchInfos) {
                    $scope.transInBranchList =  resp.data[0].branchInfos;
                }
            }
        })
    };

    /**
     * 选择转入校区
     * @param branch
     */
    $scope.selectTransInBranch = function(){
        var branch = _.find($scope.transInBranchList, {id: $scope.transferIn.branch_id})
        $scope.transferIn.branch_name = branch.org_name
    };

    /**
     * 选择校区
     * @param branch
     */
    $scope.selectBranch = function(branch){
        $scope.transferIn.selectedBranch = branch;
        queryGrade().then(function () {
            return querySubject();
        }).then(function () {
            $scope.querySelectingCourse();
        });
    };

    /**
     * 选择课程季
     * @param season
     */
    $scope.selectSeason = function(season){
        $scope.transferIn.selectedTimeSeason = season;
        queryGrade().then(function () {
            return querySubject();
        }).then(function () {
            $scope.querySelectingCourse();
        });
    };

    /**
     * 选择年级
     * @param grade
     */
    $scope.selectGrade = function(grade){
        $scope.transferIn.selectedGrade = grade;
        querySubject().then(function () {
            $scope.querySelectingCourse();
        });
    };

    /**
     * 选择科目
     * @param subject
     */
    $scope.selectSubject = function(subject){
        $scope.transferIn.selectedSubject = subject;
        $scope.querySelectingCourse();
    };
    $scope.remark = "";
    /**
     * 提交转班
     */
    $scope.submitTransfer = function(){
        if($scope.businessType == 1){
            var param = {};
            param.businessType = 1;
            param.studentId = $scope.student.id;
            param.orderDetailId = $scope.selectedTransferOutCourse.id;
            param.transferOutCount = $scope.transferOutCourseTimesList.length;
            var courseTimes = [];
            $.each( $scope.transferOutCourseTimesList,function(i,ct){
                courseTimes.push(ct.TIMES);
            });
            param.transferOutCourseTimes = courseTimes.join(",");
            param.transferOutCourseTimesList=$scope.transferOutCourseTimesList;

            param.transferInCourseId = $scope.selectedTransferInCourse.id;
            param.transferInBranchId = $scope.selectedTransferInCourse.branch_id;
            param.transferInCount = $scope.transferInCourseTimesList.length;
            courseTimes = [];
            $.each( $scope.transferInCourseTimesList,function(i,ct){
                courseTimes.push(ct.course_times);
            });
            param.transferInCourseTimes = courseTimes.join(",");
            param.transferInCourseTimesList=$scope.transferInCourseTimesList;
            param.remark = $scope.selectedTransferOutCourse.remark;
            var waitingModal = $uibMsgbox.waiting('正在处理，请稍候');
            // $scope.isSubmitTransfer = 'isSubmitTransfer';
            erp_orderChangeService.changeTransfer(param,function(resp){
                waitingModal.close();
                if(!resp.error){
                    $uibMsgbox.confirm({
                        content:'转班成功，可以查看详情，或者继续转班',
                        cancelText: '继续转班',
                        okText: '查看详情',
                        callback: function (res) {
                            if (res == 'yes') {
                                //window.location.href = '?studentId=' + param.studentId + '#/studentMgr/studentMgrIndex';
                                window.location.href = '?studentId=' + param.studentId + '&orderId=' + $scope.selectedTransferOutCourse.order_id + '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
                            } else {
                                //$state.reload();
                                window.location.href="?_t=" + Math.random() + "#/orders/orderChangeTransfer";
                            }
                        }
                    });
                }else{
                    uibMsgbox.alert(resp.message);
                }
            });
        }else if($scope.businessType == 2){
            var param = {};
            param.businessType = 2;
            param.studentId = $scope.student.id;
            param.orderDetailId = $scope.selectedTransferOutCourse.id;
            param.transferOutCount = $scope.selectedTransferOutCourse.transferOutCount;
            var courseTimes = [];
            $.each( $scope.transferOutCourseTimesList,function(i,ct){
                courseTimes.push(ct);
            });
            param.transferOutCourseTimes = courseTimes.join(",");

            param.transferInCourseId = $scope.selectedTransferOutCourse.course_id;
            param.transferInBranchId = $scope.transferIn.branch_id;
            param.transferInCount = param.transferOutCount;
            param.transferInCourseTimes = param.transferOutCourseTimes
            param.remark = $scope.selectedTransferOutCourse.remark;

            var waitingModal = $uibMsgbox.waiting('正在处理，请稍候');
            // $scope.isSubmitTransfer = 'isSubmitTransfer';
            erp_orderChangeService.changeTransfer(param,function(resp){
                waitingModal.close();
                if(!resp.error){
                    $uibMsgbox.confirm({
                        content:'转班成功，可以查看详情，或者继续转班',
                        cancelText: '继续转班',
                        okText: '查看详情',
                        callback: function (res) {
                            if (res == 'yes') {
                                //window.location.href = '?studentId=' + param.studentId + '#/studentMgr/studentMgrIndex';
                                window.location.href = '?studentId=' + param.studentId + '&orderId=' + $scope.selectedTransferOutCourse.order_id + '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
                            } else {
                                //$state.reload();
                                window.location.href="?_t=" + Math.random() + "#/orders/orderChangeTransfer";
                            }
                        }
                    })
                }else{
                   $uibMsgbox.alert(resp.message);
                }
            });
}
};

    function initial(){
        $('title').text('转班 | 厝边素高');
        $scope.studentId = $("#rootIndex_studentId").val();
        $scope.step = 1;

        $scope.queryStudents = queryStudents;
        $scope.studentId = $("#rootIndex_studentId").val();
        queryStudents();

        $scope.orderDetailId = $("#rootIndex_orderDetailId").val();

    }

    initial();

    /**
     * 根据转出课时的数目在转入课程课时默认匹配上的相应的且规则就是升序
     *
     **/
    function doSelectedCourseOfTransferIn(items) {
        if (!$scope.selectedTransferInCourse.courseSchedulingList) return;
        if (!items.length || !angular.isArray($scope.selectedTransferInCourse.courseSchedulingList)) return;
        if ($scope.transferInCourseTimesList.length) return;

        // if ($scope.selectedTransferInCourse.courseSchedulingList.length >= items.length) {
        //     angular.forEach($scope.selectedTransferInCourse.courseSchedulingList, function(course, i, array) {
        //         // 需要判断是否已报名
        //         if ($scope.transferInCourseTimesList.length < items.length && !course.is_ordered) {
        //             course.checked = true;
        //             $scope.transferInCourseTimesList.push(course);
        //         }
        //     })
        // }

        // 转入课程统计
        var tempTransferInCourseTimesList = [];
        var findTransferInCourseTime = false; //是否找到转入课次

        angular.forEach(items, function(transferOutItem) {
            findTransferInCourseTime = false;
            // 优先查找相同的课次
            angular.forEach($scope.selectedTransferInCourse.courseSchedulingList, function(transferInItem) {
                // 未找到 且 当前课次未被选中 且  学生未报班
                if(findTransferInCourseTime == false && !transferInItem.checked && (!transferInItem.is_ordered ) ) {
                    // 同个课次
                    if(transferInItem.course_times == transferOutItem.TIMES ) {
                        transferInItem.checked = true;
                        tempTransferInCourseTimesList.push(transferInItem);
                        findTransferInCourseTime = true;
                    }
                }
            });
            // 没有符合条件的相同课次，则从第一个课次开始匹配
            if(findTransferInCourseTime == false) {
                angular.forEach($scope.selectedTransferInCourse.courseSchedulingList, function(transferInItem) {
                    // 未找到 且 当前课次未被选中 且  学生未报班
                    if(findTransferInCourseTime == false && !transferInItem.checked && (!transferInItem.is_ordered ) ) {
                        transferInItem.checked = true;
                        tempTransferInCourseTimesList.push(transferInItem);
                        findTransferInCourseTime = true;
                    }
                });
            }
        });

        $scope.transferInCourseTimesList = tempTransferInCourseTimesList;

        if($scope.transferInCourseTimesList.length < items.length) {
            $uibMsgbox.alert("选中课程，没有足够的可选课次！");
        }
    }


}
"use strict"
angular.module('ework-ui').controller('erp_orderFrozenMgrCarryForwardModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    erp_orderFrozenMgrCarryForwardModalController
]);

function erp_orderFrozenMgrCarryForwardModalController($rootScope,
                                                       $scope,
                                                       $uibModalInstance,
                                                       $uibMsgbox) {
    $scope.conf = {
        remark: '锁定订单到期，财务手工结转。'
    };

    $scope.handleModalCancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

    $scope.handleModalConfirm = function () {
        if(!$scope.conf.remark) {
            $uibMsgbox.alert("备注不能为空！");
            return;
        }
        $uibModalInstance.close({
            remark: $scope.conf.remark
        });
    };
}

/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular.module('ework-ui').controller('erp_orderFrozenMgrController', [
  '$scope',
  '$log',
  '$uibModal',
  '$uibMsgbox',
  'erp_orderFrozenMgrService',
  erp_orderFrozenMgrController
]);

function erp_orderFrozenMgrController(
  $scope,
  $log,
  $uibModal,
  $uibMsgbox,
  erp_orderFrozenMgrService
) {
  // 搜索字段
  $scope.searchParam = {
    status: -1, // 状态
    start_date: getCurrentDate(),
    end_date: getCurrentDate()
  };
  // 列表
  $scope.dataList = undefined;

  // 团队、校区查询条件改变
  $scope.onBranchChange = function() {
    //$scope.dataList = [];
    $scope.onDateChange();
  };

  // 起止日期改变
  $scope.onDateChange = function() {
    if (!$scope.searchParam.bu_id || $scope.searchParam.bu_id == -1) {
      return;
    }
    if (!$scope.searchParam.start_date) {
      return;
    }
    if (!$scope.searchParam.end_date) {
      return;
    }
    if (!checkStartEndTime($scope.searchParam.start_date, $scope.searchParam.end_date)) {
      return;
    }

    $scope.query();
  };

  //批量选中标识
  $scope.selectAllFlag = false;

  //多选监控
  $scope.$watch('selectAllFlag', function(newValue) {
    _.each($scope.dataList, function(item) {
      item.selectItemFlag = newValue == true ? true : false;
    });
  });
  //获取所有选中的id
  $scope.getSelectedOrderIds = function() {
    var orderIds = [];
    _.each($scope.dataList, function(item) {
      if (item.selectItemFlag == true && item.status == 1) {
        orderIds.push(item.orderId);
      }
    });
    return orderIds;
  };

  $scope.beforeQuery = function() {
    if (!$scope.searchParam.bu_id || $scope.searchParam.bu_id == -1) {
      $uibMsgbox.error("请选择团队");
      return false;
    }
    if (!$scope.searchParam.start_date) {
      $uibMsgbox.error("请选择开始日期");
      return false;
    }
    if (!$scope.searchParam.end_date) {
      $uibMsgbox.error("请选择截止日期");
      return false;
    }
    if (!checkStartEndTime($scope.searchParam.start_date, $scope.searchParam.end_date)) {
      $uibMsgbox.alert('截止日期必须大于或等于开始日期');
      return false;
    }
    return true;
  };

  // 查询
  $scope.query = function() {
    if ($scope.beforeQuery()) {
      erp_orderFrozenMgrService.query({
        p_bu_id: $scope.searchParam.bu_id,
        p_branch_id: $scope.searchParam.branch_id,
        p_start_date: $scope.searchParam.start_date,
        p_end_date: $scope.searchParam.end_date,
        p_status: $scope.searchParam.status
      }, function(resp) {
        if (!resp.error) {
          $scope.dataList = resp.data;
        } else {
          $uibMsgbox.error(resp.message);
        }
      });
    }
  };

  $scope.order_ids = null;

  // 选择行 结转
  $scope.selectedRowCarryForward = function() {
    var orderIds = $scope.getSelectedOrderIds();
    if (orderIds.length < 1) {
      $uibMsgbox.alert('请先选定要结转的数据行！');
      return;
    }
    $scope.carryForward(orderIds);
  };

  // 单行 结转
  $scope.oneRowCarryForward = function(data) {
    $scope.carryForward([data.orderId]);
  };

  // 结转
  $scope.carryForward = function(order_ids) {
    $uibModal.open({
      size: 'lg',
      templateUrl: 'templates/block/modal/order_frozen_mgr-carryForward.modal.html',
      controller: 'erp_orderFrozenMgrCarryForwardModalController',
      scope: $scope
    }).result.then(function(resp) {
      var param = {
        order_ids: order_ids,
        remark: resp.remark
      };
      erp_orderFrozenMgrService.carryForward(param, function(resp) {
        if (!resp.error) {
          $uibMsgbox.success('结转成功！');
          $scope.query();
        } else {
          $uibMsgbox.error(resp.message);
        }
      });
    }, function() {});
  };

  // 导出数据
  $scope.exportExcel = function() {
    if ($scope.beforeQuery()) {
      erp_orderFrozenMgrService.exportExcel({
        p_bu_id: $scope.searchParam.bu_id,
        p_branch_id: $scope.searchParam.branch_id,
        p_start_date: $scope.searchParam.start_date,
        p_end_date: $scope.searchParam.end_date,
        p_status: $scope.searchParam.status
      }, function(resp) {
        if (!resp.error) {
          window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
        } else {
          $uibMsgbox.error(resp.message);
        }
      });
    }
  };

  $scope.init = function() {
    // 状态
    $scope.statusList = [
      { "id": -1, "name": "全部" },
      { "id": 1, "name": "锁定中" },
      { "id": 2, "name": "已结转" }
    ];
    if (!$scope.dataList) {
      $scope.onBranchChange();
    }
  };

  $scope.init();
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_orderUnpayController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'erp_orderManagerService',
    'erp_studentBuOrgsService',
    'PUBORGSelectedService',
    erp_orderUnpayController
]);

function erp_orderUnpayController($rootScope,
                                  $scope,
                                  $log,
                                  $state,
                                  $uibModal,
                                  $uibMsgbox,
                                  erp_orderManagerService,
                                  erp_studentBuOrgsService,
                                  PUBORGSelectedService) {


    /**
     * 获取组织结构中选中的组织
     */
    function querySelectedOrg() {
        PUBORGSelectedService.query({}, function (resp) {
            if (!resp.error) {
                $scope.selectedOrg = resp.data;
                
                if ($scope.selectedOrg) {
                    $scope.searchParam.p_bu_id = $scope.selectedOrg.buId;
                }
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    $scope.init = function () {
        // 状态
        $scope.statusList = [
            { "id": -1, "name": "全部" },
            { "id": 2, "name": "审核中" },
            { "id": 3, "name": "已通过" }
        ];
        $scope.searchParam = { // 搜索条件
            p_bu_id: null,
            p_branch_id: null,
            p_start_date: null,
            p_end_date: null,
            p_check_status:null
        };
        $scope.unpayList = []; // 欠费订单列表

        /**
         * 分页配置
         * @param  {Number} currentPage     [当前页面，初始化时默认为1]
         * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
         * @param  {Number} itemsPerPage    [每页显示条数]
         * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
         * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
         * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
         */
        $scope.paginationConf = {
            currentPage: 1, //当前页
            totalItems: 0,
            itemsPerPage: 10,
            onChange: function () {
                $scope.query();
            }
        };
        querySelectedOrg();
    };
    // 导出数据
    $scope.exportExcel = function () {
        erp_orderManagerService.exportUnpayExcel({
            p_branch_id: $scope.searchParam.p_branch_id,
            p_bu_id: $scope.searchParam.p_bu_id,
            p_start_date: $scope.searchParam.p_start_date,
            p_end_date: $scope.searchParam.p_end_date,
            p_check_status:$scope.searchParam.status
        }, function (resp) {
            if (!resp.error) {
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };
    $scope.toSubmitOrder = function(unpay){
        $cookieStore.put("temporaryOrderId",unpay.id);
        return true;
    }
    // 查询方法
    $scope.query = function () {

        erp_orderManagerService.unpay({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage,// 要获取的第几页的数据
            p_branch_id: $scope.searchParam.p_branch_id,
            p_bu_id: $scope.searchParam.p_bu_id,
            p_start_date: $scope.searchParam.p_start_date,
            p_end_date: $scope.searchParam.p_end_date,
            p_check_status:$scope.searchParam.status
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.unpayList = resp.data;
            } else {
                alert(resp.message);
            }
        });
    };
    $scope.toPay = function () {
        $state.go('attendanceGroup', {
            path: '/teachers/attendanceGroup',
            href: 'templates/erp/tearchers/attendanceGroup.html'
        })
    };

    $scope.init();
}
/**
 * 退费单据
 */
"use strict";
angular.module('ework-ui').controller('erp_refundController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox',
    '$uibModal',
    'erp_refundService',
    erp_refundController
    ]);

function erp_refundController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $uibModal,
    erp_refundService
  ) {
    // 表单操作类型
    $scope.optype = 'detail'; //
    // 搜索的科目名称
    $scope.searchParam = {
        order_no: '',
        encoding: ''
    };
    // 明细列表
    $scope.refundList = [];

    //作废信息
    $scope.refundDeleteInfo = {
        change_id : '',
        remark: ''
    };

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        // itemsPerPage: 10,
        // pagesLength: 9,
        // perPageOptions: [10, 20, 30, 40, 50],
        onChange: function(){
            $scope.query()
        }
    };

    $scope.paginationBars = [];

    //详情
    $scope.refundDetail = {
        change_id: '',
        courseList: []
    };

    //详情 的分页查询信息
    $scope.refundDetailPaginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function(){
            $scope.detailQuery();
        }
    };

    //详情查询
    $scope.detailQuery = function () {
        erp_refundService.queryDetail({
            pageSize: $scope.refundDetailPaginationConf.itemsPerPage,
            currentPage: $scope.refundDetailPaginationConf.currentPage,
            change_id: $scope.refundDetail.change_id
        }, function (resp) {
            if (!resp.error) {
                $scope.refundDetail.courseList = resp.data;
                $scope.refundDetailPaginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message)
            }
        });
    };

    // 处理【详情】按钮点击事件
    $scope.handleDetailRefund = function (refund) {
        $scope.optype = 'detail';
        $scope.refundDetail = {
            change_id: refund.id,
            courseList: []
        };
        $scope.detailQuery();
        $('#erpDetailRefundPanel').modal('show');
    };

    // 处理【作废】按钮点击事件
    $scope.handleDeleteRefund = function (id) {
        $scope.optype = 'delete';
        $scope.refundDeleteInfo = {
            change_id : id,
            remark: ''
        };
        $('#erpDeleteRefundPanel').modal('show');
    };

    // 取款弹出框
    $scope.openDrawModal = function (refund) {
        var modalInstance = $uibModal.open({
            templateUrl: 'templates/erp/student/withdrawal.html',
            controller: 'erp_withDrawalController',
            resolve: {
                //目标参数获取 $scope.$resolve.changeNo
                changeNo : function () {
                    return refund.encoding;
                }
            }
        });

        modalInstance.result.then(function (result) {
        	console.log('Modal closed .....')
        	console.log(result)
            $scope.query();
        }, function () {
        	console.log('Modal dismiss ......')
            $log.info('DrawModal dismissed at: ' + new Date());
        })
    };

    // 处理【去取款】按钮点击事件
    $scope.handleDrawingRefund = function (refund) {
        $scope.optype = 'drawing';
        $scope.openDrawModal(refund);
    };
    
    // 处理【标记已取款】按钮点击事件
    $scope.handleDrawRefund = function (id) {
        $scope.optype = 'draw';
        $scope.refundDeleteInfo.change_id = id;
        $uibMsgbox.confirm('您确定要标记为【已取款】吗？', function (result) {
            if(result != 'yes') {
                return;
            }
            $scope.put(id);
        });
    };

    // 处理【打印】按钮点击事件
    $scope.handlePrintRefund = function (refund) {
        $scope.optype = 'print';
        $scope.printPage(refund);
    };

    // 处理【查询】按钮点击事件
    $scope.handleQueryRefund = function () {
        $scope.query();
    };

    // 处理【取消】按钮点击事件
    $scope.handleModalCancel = function () {
        if ($scope.optype == 'detail') {
            $('#erpDetailRefundPanel').modal('hide');
        } else if ($scope.optype == 'delete') {
            $('#erpDeleteRefundPanel').modal('hide');
        }
    };

    // 处理【确认】按钮点击事件
    $scope.handleModalConfirm = function () {
        if ($scope.optype == 'delete') {
            $scope.delete();
        }
    };

    // 修改
    $scope.put = function () {
        erp_refundService.update($scope.refundDeleteInfo.change_id, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success('标记【已取款】成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 作废
    $scope.delete = function () {
        erp_refundService.delete({
            changeId: $scope.refundDeleteInfo.change_id,
            remark: $scope.refundDeleteInfo.remark
        }, function (resp) {
            $('#erpDeleteRefundPanel').modal('hide');
            if (!resp.error) {
                $uibMsgbox.success('作废成功！');
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    };

    // 查询
    $scope.query = function () {
        erp_refundService.query({
            pageSize: $scope.paginationConf.itemsPerPage,
            currentPage: $scope.paginationConf.currentPage,
            queryOrderString: $scope.searchParam.order_no,
            refundEncoding: $scope.searchParam.encoding,
            studentInfo: $scope.searchParam.student_info
        }, function (resp) {
            if (!resp.error) {
                $scope.refundList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    };

    $scope.printPage = function(refund){
        var strHtml = '<style type="text/css">';
        strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; }';
        strHtml += 'tr.Line td{ border-top:1px;}';
        strHtml += 'tr td{ height:15px; line-height:15px;}';
        strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
        strHtml += '</style>';
        strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
        strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
        strHtml += '<tr><td>';

        strHtml += '<table border="0" width="660px" align="center">';
        strHtml += '<tr align="left" style="font-weight:900;">';
        strHtml += '<td colspan="5">业务校区:' + refund.branch_name + '	                 日期:' + Format("yyyy-MM-dd", new Date(refund.create_time)) + '</td>';
        strHtml += '</tr>';
        strHtml += '<tr height="15px" style="font-weight:900;">';
        strHtml += '<td align="center">学员姓名</td>';
        strHtml += '<td width="63%" align="left">业务类型</td>';
        strHtml += '</tr>';
        strHtml += '<tr>';
        strHtml += '<td align="center"  >'+ refund.student_name + '(' + refund.student_encoding + ')' +'</td>';
        strHtml += '<td width="63%"  align="left">退费</td>';
        strHtml += '</tr>';
        strHtml += '</table>';

        strHtml += '<table border="0" width="660px" align="center">';
        strHtml += '<tr align="left" height="15px" style="font-weight:900;">';
        strHtml += '<td>单据编号</td>';
        strHtml += '<td>退费总金额</td>';
        strHtml += '</tr>';
        strHtml += '<tr>';
        strHtml += '<td>'+ refund.encoding +'</td>';
        strHtml += '<td>￥'+ refund.fee_amount +'</td>';
        strHtml += '</tr>';
        strHtml += '</table>';
        strHtml += '</body>';

        KlxxPrint(strHtml);
    }

    $scope.query();
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";

// angular.module('ework-ui').controller('erp_torderModalController', [
//     '$rootScope',
//     '$scope',
//     '$log',
//     '$uibModalInstance'
//     'orderCourseList',
//     erp_torderModalController]);

// function erp_torderModalController(
//     $rootScope,
//     $scope,
//     $log,
//     $uibModalInstance,
//     orderCourseList
//     ) {
//     $scope.orderCourseList = orderCourseList;

//     $scope.ok = function() {
//         $uibModalInstance.close();
//     }
// }


angular.module('ework-ui').controller('erp_orderModalController', [
	'$rootScope',
	'$scope',
	'$log',
	 '$uibMsgbox', // 消息提示框服务，其他服务按需引入
	'$uibModalInstance',
	'orderCourseList',
	erp_orderModalController
]);

angular.module('ework-ui').controller('erp_orderCacenlModalController', [
   '$rootScope',
   '$scope',
   '$log',
   '$uibMsgbox',
   '$uibModalInstance',
   'erp_FinanceOrderService',
   'orderId',
   erp_orderCacenlModalController
 ]);

function erp_orderModalController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $uibModalInstance,
    orderCourseList
    ) {
    $scope.orderCourseList = orderCourseList;
    $scope.ok = function () {
        $uibModalInstance.close();
    }
}

function erp_orderCacenlModalController(
	    $rootScope,
	    $scope,
	    $log,
	    $uibMsgbox,
	    $uibModalInstance,
	    erp_FinanceOrderService,
	    orderId
	    ) {
	    $scope.orderId = orderId;
	    $scope.remark='';
	    $scope.ok = function () {
	    	 $scope.del();
	    	$uibModalInstance.close();
	    }

	    // 删除
	    $scope.del= function () {
	    	erp_FinanceOrderService.remove({
	    		remark:$scope.remark ,
	    		orderId : $scope.orderId 
	    	}, function (resp) {
	    		if (!resp.error) {
	               // $scope.query();
	            }else{
	            	$uibMsgbox.error(resp.message);
	            }
	        });
	    };
	   
	}


angular.module('ework-ui').controller('erp_orderController', [
    '$rootScope',
    '$scope',
    '$log',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    '$uibModal',
    'erp_FinanceOrderService',
    'erp_orderManagerService',
    'PUBORGService',
    erp_orderController
    ]);

function erp_orderController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $uibModal,
    erp_FinanceOrderService,
    erp_orderManagerService,
    PUBORGService
  ) {
    // 表单操作类型，添加： add，修改：put
    $scope.optype = 'add'; //
    // 搜索年级名称
    $scope.searchParam = {
    		bu_id: '',
    		order_no: '',
    		branch_id: '',
    		business_type: 1,
    		student_name: ''
    };
    // 团队列表
    $scope.buList = [];
    // 所有校区列表
    $scope.allBranchList = [];
    // 过滤后的校区列表
    $scope.branchList = [];
    // 订单单据详情列表
    $scope.orderCourseList = [];
    $scope.orderId= '';
    //业务模式列表
    $scope.businessTypeList = [{"key" : 1, "value" : "班级课"},
	                   		   {"key" : 2, "value" : "一对一"},
	                   		   {"key" : 3, "value" :"晚辅导"}];
    //订单类型列表
    $scope.orderTypeList = [{
        key: 1, value: '新单'
    }, {
        key: 2, value: '赠单'
    }, {
        key: 3, value: '转班单'
    }, {
        key: 4, value: '续单'
    }]

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function(){
            $scope.query();
        }
    };

    // 处理【作废订单】按钮点击事件
    $scope.handleCancelOrder = function (id) {
        var r = window.confirm('确定作废选中订单？');
        if (r == true) {
	        $scope.orderId = id;
	        $scope.openCancelModal('lg');
//	        $scope.openModal('lg');
        }
    };

    // 处理【查询订单】按钮点击事件
    $scope.handleQueryOrder = function () {
        $scope.query();
    };

    // 打开取消的模态对话框
    $scope.openCancelModal = function (size) {
        var modalInstance = $uibModal.open({
            templateUrl: 'CancelTorderModal.html',
            controller: 'erp_orderCacenlModalController',
            size: size,
            resolve: {
                orderId: function () {
                    return $scope.orderId;
                }
            }
        })

        modalInstance.result.then(function (result) {
        	 $scope.query();
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        })
    };
    
    // 打开模态对话框
    $scope.openModal = function (size) {
        var modalInstance = $uibModal.open({
            templateUrl: 'erpTorderModal.html',
            controller: 'erp_orderModalController',
            size: size,
            resolve: {
                orderCourseList: function () {
                    return $scope.orderCourseList;
                }
            }
        })
        modalInstance.result.then(function (result) {
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        })
    };

    // 提交
    $scope.add = function () {
    	erp_FinanceOrderService.addOrder($scope.orderDetail, function (resp) {
            $scope.query();
        });
    };

    // 单据详情
    $scope.queryOrderDetail = function (orderId) {
    	erp_FinanceOrderService.queryOrderCouseDetail({
            orderId : orderId
        }, function (resp) {
            if (!resp.error) {
                $scope.orderCourseList = resp.data;
                $scope.openModal('lg');
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };
   

    // 查询方法
    $scope.query = function () {
    	erp_FinanceOrderService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            bu_id: $scope.searchParam.bu_id,
            business_type: $scope.searchParam.business_type,
            order_no: $scope.searchParam.order_no,
            student_name: $scope.searchParam.student_name,
            branch_id: $scope.searchParam.branch_id,
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.orderList=resp.data;
                $scope.searchParam.bu_id=resp.bu_id;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    $scope.querySelectDatas = function (id) {
    	erp_FinanceOrderService.querySelectDatas({
    		id : id
    	},function(resp) {
            if(!resp.error) {
                $scope.lastOrderList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    $scope.printPage = '';
    $scope.printOrder = function(order){
        $scope.printPage = 'beginPrint';
        erp_orderManagerService.query({
            order_id:order.id,
            orderType:'temporaryOrder'
        },function(resp){
            $scope.openPanel = '';
            if(!resp.error){
                $scope.temporaryOrder = resp.data;
                if($scope.temporaryOrder.business_type == 2) {//1对1
                    CreatePrintPageGxhYdyBb($scope.temporaryOrder);
                } else if($scope.temporaryOrder.business_type == 1) {//班级课
                    if ($scope.temporaryOrder.city_id == 3) {
                        CreatePrintPageXiamen($scope.temporaryOrder);
                    } else {
                        CreatePrintPage($scope.temporaryOrder);
                    }
                } else {
                    CreatePrintPage(resp.data);
                }
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    }
    
    // 业务类型
    $scope.businessType = function (type) {
        return getTypeName($scope.businessTypeList, type);       
    }

    // 订单类型
    $scope.orderType = function (type) {
        return getTypeName($scope.orderTypeList, type);
    }

    // 获取某类型key对应的Value
    function getTypeName(typeArray, type) {
        var text = '未知';
        for (var i = 0; i < typeArray.length; i++) {
            if (type == typeArray[i].key) {
                text = typeArray[i].value
            }
        }
        return text;
    }

    // 打印页面
    //function CreatePrintPage(data) {
    //    //01报班
    //    var strHtml = '<style type="text/css">';
    //    strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; }';
    //    strHtml += 'tr.Line td{ border-top:1px;}';
    //    strHtml += 'tr td{ height:15px; line-height:15px;}';
    //    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    //    strHtml += '</style>';
    //    strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
    //    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    //    strHtml += '<tr><td>';
    //
    //    strHtml += '<table border="0" width="660px" align="center">';
    //    strHtml += '<tr align="left" style="font-weight:900;">';
    //    strHtml += '<td colspan="5">业务校区:' + data.branch_name + '	经办人:' + data.employee_name + '</td>';
    //    strHtml += '</tr>';
    //    strHtml += '<tr align="center" style="font-weight:900;">';
    //    strHtml += '<td width="150">学员编号</td>';
    //    strHtml += '<td width="66">学员姓名</td>';
    //    strHtml += '<td width="185">单据编号</td>';
    //    strHtml += '<td width="68">业务类型</td>';
    //    strHtml += '<td width="76">业务日期</td>';
    //    strHtml += '</tr>';
    //    strHtml += '<tr align="center">';
    //    strHtml += '<td>'+data.encoding+'</td>';
    //    strHtml += '<td>'+data.student_name+'</td>';
    //    strHtml += '<td>'+data.encoding+'</td>';
    //    strHtml += '<td>报班</td>';
    //    strHtml += '<td>'+Format("yyyy-MM-dd", new Date(data.create_time))+'</td>';
    //    strHtml += '</tr>';
    //    strHtml += '</table>';
    //
    //    strHtml += '<table border="0" width="660px">';
    //    strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
    //    strHtml += '<td>编号</td>';
    //    strHtml += '<td>课程商品名称</td>';
    //    strHtml += '<td>上课时间</td>';
    //    strHtml += '<td>下课时间</td>';
    //    strHtml += '<td>报班课时</td>';
    //    strHtml += '<td>报班总金额</td>';
    //    strHtml += '</tr>';
    //    for(var i = 0 ; i < data.details.length ; i++){
    //        strHtml += '<tr align="center">';
    //        strHtml += '<td>'+(i+1)+'</td>';
    //        strHtml += '<td>'+data.details[i].course_name+'</td>';
    //        strHtml += '<td>'+data.details[i].start_time+'</td>';
    //        strHtml += '<td>'+data.details[i].end_time+'</td>';
    //        strHtml += '<td>'+data.details[i].course_total_count+'</td>';
    //        strHtml += '<td>￥'+data.details[i].former_sum_price+'</td>';
    //        strHtml += '</tr>';
    //    }
    //
    //    strHtml += '</table>';
    //
    //    strHtml += '<table border="0" width="660px">';
    //    strHtml += '<tr height="15px">';
    //    strHtml += '<td style="font-weight:900;">优惠金额：'+(data.sum_price-data.actual_price)+'</td>';
    //    strHtml += '<td style="font-weight:900;">实际需缴费金额：￥'+data.actual_price+'</td>';
    //    strHtml += '<td style="font-weight:900;">已缴费金额：￥'+data.actual_price+'</td>';
    //    strHtml += '</tr>';
    //    strHtml += '</table>';
    //
    //    strHtml += '<table border="0" width="660px">';
    //    for(var i = 0 ; i < data.payment.details.length ; i++){
    //        strHtml += '<tr height="15px">';
    //        strHtml += '<td style="font-weight:900;">缴费明细：</td>';
    //        strHtml += '<td>'+ convertPayName(data.payment.details[i].payment_way) + '</td>';
    //        strHtml += '<td>￥'+(data.payment.details[i].staffappprem?data.payment.details[i].staffappprem:0)+'</td>';
    //        strHtml += '<td>'+(data.payment.details[i].org_name?data.payment.details[i].org_name:"")+'</td>';
    //        if(data.payment.details[i].device_code){
    //            strHtml += '<td>'+data.payment.details[i].device_code+'</td>';
    //        }
    //        strHtml += '<td>'+(data.payment.details[i].createTime?data.payment.details[i].createTime:"")+'</td>';
    //        strHtml += '</tr>';
    //    }
    //    if(data.bu_id==12){
    //        strHtml += '<tr height="15px"  style="font-weight:900;"><td colspan="6">以上优惠均需报整期课程并消耗完毕，若产生退费/冻结，则优惠取消</td></tr>';
    //    }else{
    //        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    //    }
    //    for(var i = 0 ; i < 9-data.payment.details.length-data.payment.details.length ; i++){
    //        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    //    }
    //    strHtml += '</table></td></tr>';
    //    strHtml += '</table>';
    //    strHtml += '</body>';
    //    KlxxPrint(strHtml);
    //
    //}
    //
    //function CreatePrintPageXiamen(data) {
    //    //01报班
    //    var strHtml = '<style type="text/css">';
    //    strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; }';
    //    strHtml += 'tr.Line td{ border-top:1px;}';
    //    strHtml += 'tr td{ height:15px; line-height:15px;}';
    //    strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
    //    strHtml += '</style>';
    //    strHtml += '<body style="margin:0 auto;padding-top:350px;text-align:center">';
    //    strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
    //    strHtml += '<tr><td>';
    //
    //    strHtml += '<table border="0" width="660px" align="center">';
    //    strHtml += '<tr align="left" style="font-weight:900;">';
    //    strHtml += '<td colspan="5">业务校区:' + data.branch_name +  '	经办人:' + data.employee_name  + '</td>';
    //    strHtml += '</tr>';
    //    strHtml += '<tr height="15px" style="font-weight:900;">';
    //    strHtml += '<td align="center">学员姓名</td>';
    //    strHtml += '<td width="63%" align="left">业务类型</td>';
    //    strHtml += '</tr>';
    //    strHtml += '<tr>';
    //    strHtml += '<td align="center"  >'+data.student_name+'</td>';
    //    strHtml += '<td width="63%"  align="left">报班</td>';
    //    strHtml += '</tr>';
    //    strHtml += '</table>';
    //
    //    strHtml += '<table border="0" width="660px" align="center">';
    //    strHtml += '<tr align="left" height="15px" style="font-weight:900;">';
    //    strHtml += '<td>编号</td>';
    //    strHtml += '<td>报班总金额</td>';
    //    strHtml += '</tr>';
    //    strHtml += '<tr>';
    //    strHtml += '<td>'+1+'</td>';
    //    strHtml += '<td>￥'+data.actual_price+'</td>';
    //    strHtml += '</tr>';
    //    strHtml += '</table>';
    //
    //    strHtml += '<table border="0" width="660px">';
    //    strHtml += '<tr height="15px">';
    //    strHtml += '<td style="font-weight:900;">优惠金额：'+0+'</td>';
    //    strHtml += '<td style="font-weight:900;">实际需缴费金额：￥'+data.actual_price+'</td>';
    //    strHtml += '<td style="font-weight:900;">已缴费金额：￥'+data.actual_price+'</td>';
    //    strHtml += '</tr>';
    //    strHtml += '</table>';
    //
    //    strHtml += '<table border="0" width="660px">';
    //    strHtml += '<tr height="15px">';
    //    strHtml += '<td style="font-weight:900;">缴费明细：</td>';
    //    strHtml += '<td>1</td>';
    //    strHtml += '<td>￥'+data.actual_price+'</td>';
    //    strHtml += '<td>'+data.branch_name+'</td>';
    //    strHtml += '<td>'+ Format("yyyy-MM-dd", new Date(data.create_time))+'</td>';
    //    strHtml += '</tr>';
    //    if(data.bu_id==12){
    //        strHtml += '<tr height="15px"  style="font-weight:900;"><td colspan="6">以上优惠均需报整期课程并消耗完毕，若产生退费/冻结，则优惠取消</td></tr>';
    //    }else{
    //        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    //    }
    //    for(var i = 0 ; i < 9-data.payment.details.length-data.details.length ; i++){
    //        strHtml += '<tr height="15px"><td colspan="6">--</td></tr>';
    //    }
    //    strHtml += '</table></td></tr>';
    //    strHtml += '</table>';
    //    strHtml += '</body>';
    //    KlxxPrint(strHtml);

    //}
    $scope.query();
}
/**
 * @author zenglw@klxuexi.org 2017/03/13
 */
"use strict";
angular.module('ework-ui').controller(
    'erp_accountChangeBillsController',
    ['$rootScope', '$scope', '$log', '$uibMsgbox', 'erp_studentAccountService', '$uibModal', 'erp_printService',
        erp_accountChangeBillsController]);

function erp_accountChangeBillsController($rootScope, $scope, $log, $uibMsgbox,
                                          erp_studentAccountService, $uibModal, erp_printService) {

    // 搜索参数默认值
    $scope.searchParam = {
        queryStudentString: '',
        queryOrderString: '',
        dynamicType: '-1',
        remark: "",
        // 记录当前更新的账户动态记录的id
        curEditAccountDynamic: {}
    };
    $scope.accountDynamicList = null;
    //pos机
    $scope.POSList = null;
    $scope.cardNum = null;
    // 账户变动类型
    $scope.dynamicTypeList = [{
        "key": '正常单据',
        "value": "-1"
    }, {
        "key": "充值",
        "value": "1"
    }, {
        "key": "理赔",
        "value": "3"
    }, {
        "key": "取款",
        "value": "4"
    },{
        "key": "转账",
        "value": "2"
    },  {
        "key": "充值作废",
        "value": "5"
    }, {
        "key": "理赔作废",
        "value": "6"
    }, {
        "key": "取款作废",
        "value": "7"
    }];

    /**
     * 分页配置
     *
     * @param {Number}
     *            currentPage [当前页面，初始化时默认为1]
     * @param {Number}
     *            totalItems [数据总条数，每次查询时赋值]
     * @param {Number}
     *            itemsPerPage [每页显示条数]
     * @param {Number}
     *            pagesLength [可选，分页栏长度,默认为9]
     * @param {Array}
     *            perPageOptions [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param {Function}
     *            onChange [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, // 当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function () {
            $scope.queryAccountDynamic();
        }
    };

    // 作废单据
    $scope.invalidAccountDynamic = function () {

        var waitingModal = $uibMsgbox.waiting('正在处理，请稍候');
        erp_studentAccountService.del({
            dynamicId: $scope.searchParam.curEditAccountDynamic.id,
            remark: $scope.searchParam.remark
        }, function (resp) {
            waitingModal.close();
            if (!resp.error) {
                $uibMsgbox.alert("作废成功");
                $scope.queryAccountDynamic();
            } else {
                $uibMsgbox.alert(resp.message);
            }
        });
        $("#accountChangeBills_invalidAccountDynamicModal").modal(
            'hide');
        $scope.curEditAccountDynamic = {};
    };
    // 修改单据
    $scope.updateAccountDynamic = function () {

        erp_studentAccountService.put({
            id: $scope.searchParam.curEditAccountDynamic.id,
            pay_mode: $scope.searchParam.curEditAccountDynamic.pay_mode,
            account_id: $scope.cardNum.companyAccount,
            card_num: $scope.cardNum.cardNum
        }, function (resp) {
            if (!resp.error) {
                $uibMsgbox.alert(resp.message);
                $scope.queryAccountDynamic();
            } else {
                $uibMsgbox.alert(resp.message);
            }
            $("#accountChangeBills_updateAccountDynamicModal").modal('hide');
            $scope.curEditAccountDynamic = {};
            $scope.POSList = null;
            $scope.cardNum = null;
        });
    };
    // 转账弹出框
    $scope.popTransferModal = function (accountDynamic) {

        var modalInstance = $uibModal.open({
            size: 'xlg',
            template: '<rd-modal>'
            + '       <rd-modal-title>转账</rd-modal-title>'
            + '       <rd-modal-body>'
            + '           <div ng-include="\'templates/erp/student/studentIndex-accountTransfer.html\'"></div>'
            + '       </rd-modal-body>'
            + '       <rd-modal-footer><button class="btn btn-default" ng-click="$dismiss()">关闭</button></rd-modal-footer>'
            + '   </rd-modal>',
            // templateUrl: 'templates/erp/student/studentIndex-accountTransfer.html',
            controller: 'erp_studentAccountTransferController',
            resolve: {
                //目标参数获取 $scope.$resolve.changeNo
                studentId: accountDynamic.student_id,
                buId: accountDynamic.bu_id
            }
        });
    };
    // 取款弹出框
    $scope.openDrawModal = function () {
        var modalInstance = $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/erp/student/withdrawal.html',
            controller: 'erp_withDrawalController',
            resolve: {
                //目标参数获取 $scope.$resolve.changeNo
                changeNo: function () {
                    return null;
                }
            }
        });
        modalInstance.result.then(function (result) {
            $scope.queryAccountDynamic();
            $uibMsgbox.alert("取款成功");
        }, function (reason) {
            $log.info('DrawModal dismissed at: ' + new Date());
        });
    };
    // 账户变动查询
    $scope.queryAccountDynamic = function () {

        erp_studentAccountService.queryAccountDynamic({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            queryStudentString: $scope.searchParam.queryStudentString,
            queryOrderString: $scope.searchParam.queryOrderString,
            dynamicType: $scope.searchParam.dynamicType
        }, function (resp) {

            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; // 设置总条数
                $scope.accountDynamicList = resp.data;
            } else {
                $uibMsgbox.alert(resp.message);
            }
        });
    };
    //显示作废动户信息模态框
    $scope.showInvalidAccountDynamicModal = function (curEditRecord) {
        $scope.searchParam.curEditAccountDynamic = curEditRecord;
        $("#accountChangeBills_invalidAccountDynamicModal").modal('show');
    };
    //显示修改动户信息模态框
    $scope.showUpdateAccountDynamicModal = function (curEditRecord) {
        $scope.searchParam.curEditAccountDynamic = curEditRecord;

        erp_studentAccountService.queryUpdateBaseInfo({
            id: $scope.searchParam.curEditAccountDynamic.id
        }, function (resp) {
            if (!resp.error) {
                $scope.POSList = resp.POSList;
                $scope.cardNum = resp.cardNum;
                $("#accountChangeBills_updateAccountDynamicModal")
                    .modal('show');
            } else {
                $uibMsgbox.alert(resp.message);
            }
        });
    };

    $scope.queryAccountDynamic();

    $scope.printZZ = function (data) {
        erp_printService.printAccountDynamic({"dynamicId": data.id, "printType": "05"});
    };
    $scope.printQK = function (data) {
        erp_printService.printAccountDynamic({"dynamicId": data.id, "printType": "04"});
    };

    $scope.printLP = function (data) {
        var e = '<style type="text/css">';
        e += "table { width:660px; font:12px Arial; color: #000;font-weight: 400; }";
        e += "tr.Line td{ border-top:1px dashed #000;}";
        e += "tr td{ height:24px; line-height:24px;}";
        e += "h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}";
        e += "</style>";
        e += '<body style="margin:0 auto ;padding-top:350px;text-align:center">';
        e += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
        e += '<tr><td>';
        e += '<table border="0" width="660px" align="center">';
        e += '<tr align="left" style="font-weight:900;">';
        e += '<td colspan="5">业务校区:' + data.branch_name + "\t经办人:"
            + data.operator + "</td>";
        e += "</tr>";
        e += '<tr align="center" style="font-weight:900;">';
        e += '<td width="160">学员编号</td>';
        e += '<td width="66">学员姓名</td>';
        e += '<td width="185">单据编号</td>';
        e += '<td width="68">业务类型</td>';
        e += '<td width="76">业务日期</td>';
        e += "</tr>";
        e += '<tr align="center">';
        e += "<td>" + data.student_encoding + "</td>";
        e += "<td>" + data.student_name + "</td>";
        e += "<td>" + data.encoding + "</td>";
        e += "<td>理赔</td>";
        e += "<td>" + Format("yyyy-MM-dd", new Date(data.input_time)) + "</td>";
        e += "</tr>";
        e += '<tr align="left">';
        e += '<td colspan="7">理赔信息：</td>';
        e += "</tr>";
        e += "</table>";
        e += '<table border="0" width="660px" style="margin-top:15px">';
        e += '<tr height="15px" align="center" style="font-weight:900;">';
        e += "<td>编号</td>";
        e += "<td>理赔金额</td>";
        e += "<td>账户</td>";
        e += "</tr>";
        e += '<tr align="center">';
        e += "<td>1</td>";
        e += "<td>￥" + data.money + "</td>";
        e += "<td>" + data.product_line + "</td>";
        e += "</tr>";
        e += '<tr align="left">';
        e += '<td colspan="3">理赔原因：' + data.remark + "</td>";
        e += "</tr>";
        e += "</table></td></tr>";
        e += "</table>";
        e += "</body>";
        KlxxPrint(e);
    };

    // 打印单据
    $scope.printCZ = function (data) {

        var strHtml = '<style type="text/css">';
        strHtml += 'table { width:660px; font:12px Arial; color: #000;font-weight: 400; }';
        strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
        strHtml += 'tr td{ height:24px; line-height:24px;}';
        strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
        strHtml += '</style>'

        strHtml += '<body style="margin:0 auto ;padding-top:350px;text-align:center">';
        strHtml += '<table width="660px" style="display:inline-block"  border="0" cellspacing="0" cellpadding="0">';
        strHtml += '<tr><td>';

        strHtml += '<table border="0" width="660px" align="center">';
        strHtml += '<tr align="left" style="font-weight:900;">';
        strHtml += '<td colspan="5">业务校区:' + data.branch_name + '	经办人:' + data.operator + '</td>';
        strHtml += '</tr>';
        strHtml += '<tr align="center" style="font-weight:900; ">';
        strHtml += '<td width="150">学员编号</td>';
        strHtml += '<td width="66">学员姓名</td>';
        strHtml += '<td width="185">单据编号</td>';
        strHtml += '<td width="68">业务类型</td>';
        strHtml += '<td width="76">业务日期</td>';
        strHtml += '</tr>';
        strHtml += '<tr align="center">';
        strHtml += '<td>' + data.student_encoding + '</td>';
        strHtml += '<td>' + data.student_name + '</td>';
        strHtml += '<td>' + data.encoding + '</td>';
        strHtml += '<td>充值</td>';
        strHtml += '<td>' + Format("yyyy-MM-dd", new Date(data.input_time))  + '</td>';
        strHtml += '</tr>';
        strHtml += '<tr align="left" >';
        strHtml += '<td colspan="7">充值信息：</td>';
        strHtml += '</tr>';
        strHtml += '</table>';

        strHtml += '<table border="0" width="660px" style="margin-top:15px">';
        strHtml += '<tr height="15px" align="center" style="font-weight:900; >';
        strHtml += '<td>编号</td>';
        strHtml += '<td>操作账户</td>';
        strHtml += '<td>方式</td>';
        strHtml += '<td>操作金额</td>';
        strHtml += '<td>备注</td>';
        strHtml += '</tr>';
        strHtml += '<tr align="center" >';
        strHtml += '<td>1</td>';
        strHtml += '<td>' + data.product_line + '</td>';
        strHtml += '<td>' + data.pay_mode_id + '</td>';
        strHtml += '<td>￥' + data.money + '</td>';
        strHtml += '<td>' + data.remark + '</td>';
        strHtml += '</tr>';
        strHtml += '</table></td></tr>';
        strHtml += '</table>';
        strHtml += '</body>';
        KlxxPrint(strHtml);
    };
    $scope.print = function (data) {
        switch (data.dynamic_type_name) {
            case "充值":
                $scope.printCZ(data);
                break;
            case "理赔":
                $scope.printLP(data);
                break;
            case "转账":
                $scope.printZZ(data);
                break;
            case "取款":
                $scope.printQK(data);
                break;
            default:
                $uibMsgbox.alert("该类型的账户单据不支持打印");
        }
    };
}

"use strict";
angular.module('ework-ui').controller('erp_InvoiceTraceController', [
  '$rootScope',
  '$scope',
  '$uibMsgbox',
  'erp_InvoiceManagerService',
  'erp_invoiceTraceService',
  erp_InvoiceTraceController
]);

function erp_InvoiceTraceController(
   $rootScope,
   $scope,
    $uibMsgbox,
    erp_InvoiceManagerService,
    erp_invoiceTraceService
) {
  // 发票信息
  $scope.invoiceList = [];

  $scope.paginationConf = {
    currentPage: 1, // 当前页
    totalItems: 0,
    onChange: function() {
      $scope.query();
    }
  };
  $scope.paginationBars = [];

  $scope.searchParam = {
    p_receiveStatus: 0
  }

  $scope.operateType = "receive";

  $scope.studentId = $("#rootIndex_studentId").val();

  $scope.handleChangeStatus = function(receiveStatus) {
    $scope.searchParam.p_receiveStatus = receiveStatus;
    $scope.query();
  }

  $scope.query = function() {
    $scope.isDown = 'loading';

    $scope.searchParam.pageSize = $scope.paginationConf.itemsPerPage;
    $scope.searchParam.currentPage = $scope.paginationConf.currentPage;
    $scope.searchParam.p_studentId = $scope.studentId;
    $scope.searchParam.p_receiveStatus = $scope.searchParam.p_receiveStatus == 0 ? '' : $scope.searchParam.p_receiveStatus;

    erp_InvoiceManagerService.query($scope.searchParam, function(resp) {
      $scope.isDown = '';
      if (!resp.error) {
        $scope.invoiceList = resp.data;
        $scope.paginationConf.totalItems = resp.total || 0;
      } else {
          $uibMsgbox.error(resp.message);
      }
    });
  }

  /**
   * @param invoiceReceiveLog 发票领取记录对象
   * 参数invoiceId ：发票ID
   * 参数status ：领取状态 2-已领取 3-领取作废
   * 参数remark ：备注
   */
  $scope.invoiceReceiveLog = {};
  $scope.receiveInvoice = function() {
    console.log($scope.invoiceReceiveLog.receiverCode)
    if (!$scope.invoiceReceiveLog.receiverCode && $scope.invoiceReceiveLog.status == 2) {
      $uibMsgbox.error('请选择领取人！');
      return false;
    }
    erp_invoiceTraceService.receiveInvoice($scope.invoiceReceiveLog, function(resp) {
      if (!resp.error) {
        $("#invoiceInvalid").modal('hide');
        $uibMsgbox.alert($scope.invoiceReceiveLog.status == 3 ? "领取作废成功" : "领取成功");
        $scope.query();
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  $scope.invoiceReceiveList = [];
  $scope.viewReceiveLog = function(invoiceId) {
    erp_invoiceTraceService.queryList({invoiceId : invoiceId}, function(resp) {
      console.log(resp)
      if (!resp.error) {
        $scope.invoiceReceiveList = resp.data;
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  $scope.query();

  //显示领取状态记录框
  $scope.viewLog = function (item) {
    $("#viewInvoice").modal('show');
    $scope.viewReceiveLog(item);
  };
  //显示领取状态框
  $scope.openDialog = function (operateType, invoiceId) {
    $scope.operateType = operateType;
    $scope.invoiceReceiveLog.invoiceId = invoiceId;
    $scope.invoiceReceiveLog.status = operateType == 'receive' ? 2 : 3;
    $("#invoiceInvalid").modal('show');
  };
}

angular.module('ework-ui').controller('erp_newStudentController', [
  '$scope',
  '$log',
  '$state',
  '$stateParams',
  '$uibMsgbox',
  '$uibModal',
  'erp_gradeService',
  'erp_studentsService',
  'erp_studentSchoolService',
  'erp_studentContactRelationService',
  'erp_dictService',
  erp_newStudentController
])

function erp_newStudentController(
  $scope,
  $log,
  $state,
  $stateParams,
  $uibMsgbox,
  $uibModal,
  erp_gradeService,
  erp_studentsService,
  erp_studentSchoolService,
  erp_studentContactRelationService,
  erp_dictService
) {
  //学员状态
  $scope.studentStatus = [];
  $scope.newContact = {
    link_phone: '',
    link_name: '母亲',
    relation: 2,
    remark: ''
  }
  $scope.gradeList = {}
  $scope.selectedInfo = {
    school: undefined,
    recommender: undefined,
    grade: undefined
  }
  $scope.selectedCounselor = null;
  $scope.selectedGovern = null;
  $scope.student = {
    head_pic: '',
    // 姓名 必填
    student_name: '',
    // 咨询师
    counselor: {
      start_date: moment().format('YYYY-MM-DD'),
      end_date: moment().endOf('year').format('YYYY-MM-DD'),
      encoding: '',
      counselor_id:null,
      name: '',
      remark: ''
    },
    // 学管师
    govern: {
      start_date: moment().format('YYYY-MM-DD'),
      end_date: moment().endOf('year').format('YYYY-MM-DD'),
      encoding: '',
      counselor_id:null,
      name: '',
      remark: ''
    },
    // 性别 必填
    sex: "1",
    // 生日
    birthday: '',
    // 学校 必填 （全日制学校）需要有学校列表
    attend_school_id: 100000680,
    // 年级 必填
    grade_id: 7,
    // 联系电话 必填（校验）
    studentContactList: [],
    // 邮箱
    email: '',
    // QQ
    qq: '',
    // 推荐人（学生id）
    student_id_old: '',
    //学员状态:1,正常；2,重复；3,在读；4,沉睡；5,停课；6,结课
    student_status: 1,
    // 家庭住址
    address: '',
  }

  $scope.getRelationList = function() {
    erp_studentContactRelationService.query({}, function(resp) {
      $scope.relationList = resp.data;
    })
  }

  $scope.getSchools = function(schoolName) {
    return erp_studentSchoolService.query({
      pageSize: 20,
      currentPage: 1,
      school_name: schoolName
    }).$promise.then(function(resp) {
      return resp.data
    })
  }
  $scope.getGrades = function(gradeName) {
    return erp_gradeService.query({
      pageSize: 20, // 每页显示条数
      currentPage: 1, // 要获取的第几页的数据
      p_grade_name: gradeName
    }).$promise.then(function(resp) {
      return resp.data
    });
  }
  $scope.getRecommender = function(searchInfo) {
    return erp_studentsService.query({
      pageSize: 20,
      currentPage: 1,
      searchInfo: searchInfo,
      searchType: searchInfo
    }).$promise.then(function(resp) {
      _.forEach(resp.data, function(item) {
        item.studentShortInfo = item.student_name + '【' + item.branch_name + ',' + (item.grade_name || '') + '】'
      });
      return resp.data;
    })
  }
  $scope.addContact = function(contact) {
    $scope.student.studentContactList.push(_.cloneDeep(contact));
    var link_name;
    var relation;
      switch ($scope.student.studentContactList.length) {
          case 0 :
              link_name = $scope.student.student_name ? ($scope.student.student_name + '的母亲') : '母亲';
              relation = 2;
              break;
          case 1 :
              link_name = $scope.student.student_name ? ($scope.student.student_name + '的父亲') : '父亲';
              relation = 1;
              break;
          case 2 :
              link_name =  '自己';
              relation = 5;
              break;
          case 3 :
              link_name = $scope.student.student_name ? ($scope.student.student_name + '的亲戚') : '亲戚';
              relation = 3;
              break;
          case 4 :
              link_name =  '其他';
              relation = 4;
              break;
      }
      $scope.newContact = {
          link_phone: '',
          link_name: link_name,
          relation: relation,
          remark: ''
      }

  };
//  输入的学生姓名自动填充到联系人姓名
  $scope.changeStudentName = function(){
        if($scope.student.student_name) {
            $.each($scope.student.studentContactList,function(i,n){
                if(n.relation !=4 && n.relation !=5 ) {
                    var realtionName = _.result(_.find($scope.relationList, function(relationOrigin) {
                        return n.relation == relationOrigin.value;
                    }), 'label');
                    if(n.link_name.indexOf(realtionName)!= -1) {
                        n.link_name=  $scope.student.student_name + (realtionName?('的'+ realtionName) :'')  ;
                    }
                }
            });
            if($scope.newContact.relation && $scope.newContact.relation !=4 && $scope.newContact.relation !=5 ) {
                $scope.newContact.link_name = $scope.student.student_name + '的' +
                    _.result(_.find($scope.relationList, function(relationOrigin) {
                        return $scope.newContact.relation == relationOrigin.value;
                    }), 'label');
            }
        } else {
            $.each($scope.student.studentContactList,function(i,n){
                if(n.relation !=4 && n.relation !=5) {
                    var realtionName = _.result(_.find($scope.relationList, function(relationOrigin) {
                        return n.relation == relationOrigin.value;
                    }), 'label');
                    if(n.link_name.indexOf(realtionName)!= -1) {
                        n.link_name= realtionName?realtionName:'' ;
                    }
                }
            });
            if($scope.newContact.relation && $scope.newContact.relation !=4 && $scope.newContact.relation !=5 ) {
                $scope.newContact.link_name =  _.result(_.find($scope.relationList, function(relationOrigin) {
                        return relationOrigin.value == $scope.newContact.relation;
                    }), 'label');
            }
        }

  }
    //  学管师的结束时间在开始时间上加两年
    $scope.$watch("student.counselor.start_date",function(){
        var date=new Date($scope.student.counselor.start_date);
        date.setFullYear(date.getFullYear() + 2);
        date.setDate(date.getDate()-1);
        $scope.student.counselor.end_date=date.format("yyyy-MM-dd", date);
    })

    //  咨询师的结束时间在开始时间上加两年
    $scope.$watch("student.govern.start_date",function(){
        var date=new Date($scope.student.govern.start_date);
        date.setFullYear(date.getFullYear() + 2);
        date.setDate(date.getDate()-1);
        $scope.student.govern.end_date=date.format("yyyy-MM-dd", date);
    })

  $scope.removeContact = function(contact) {
    _.remove($scope.student.studentContactList, contact);
  }

  $scope.selectCounselor = function() {
    $scope.openTeachersModal('counselor').result.then(function(teacher) {
      var counselor = $scope.student.counselor;
      counselor.counselor_id = teacher.id;
      counselor.name = teacher.employee_name;
      counselor.encoding = teacher.encoding;
    }, function() {})
  }

  $scope.selectGovern = function() {
    $scope.openTeachersModal('gover').result.then(function(teacher) {
      var govern = $scope.student.govern;
      govern.counselor_id = teacher.id;
      govern.name = teacher.employee_name;
      govern.encoding = teacher.encoding;
    }, function() {})
  }

  $scope.openTeachersModal = function(type) {
    var counselorType = type == 'counselor' ? 1 : 2;
    var modalTitle = (type == 'counselor' ? '咨询师' : '学管师') + '列表';
    return $uibModal.open({
      size: 'lg',
      templateUrl: 'templates/block/modal/employee-list.modal.html',
      controller: 'erp_employeeListModalController',
      resolve: {
        counselorType: function() {
          return counselorType;
        },
        modalTitle: function() {
          return modalTitle;
        }
      }
    })
  }

  // 弹出上传头像框
  $scope.showUploadModal = function(teacher) {
    var modalInstance = $uibModal
      .open({
        // templateUrl : 'uploadHeadModalInstance.html',
        templateUrl: 'templates/block/avatar-upload.html',
        controller: 'blocks_avatarUploadController',
        resolve: {
          onUploadImg: function() {
            return function(imageUrl, $uibModalInstance) {
              // TODO 保存上传的头像
              console.log(imageUrl)
              $scope.student.head_pic = imageUrl;
              $uibModalInstance.close();
            }
          }
        }
      });
    modalInstance.result.then(function(result) {

      if (result) {
        $scope.queryTeacher();
      }
    }, function() {
      $log.info('DrawModal dismissed at: ' + new Date());
    })
  };
  $scope.saveStudent = function() {
    var stu = $scope.student;
    stu.attend_school_id = $scope.selectedInfo.school.id;


    stu.grade_id = $scope.selectedInfo.grade.id;
    if ($scope.selectedInfo.recommender && $scope.selectedInfo.recommender.id) {
      stu.student_id_old = $scope.selectedInfo.recommender.id;
    }
    var newStu = _.cloneDeep($scope.student);
    if (!$scope.studentForm.student_phone.$error.pattern 
        && $scope.newContact.link_phone && $scope.newContact.link_name) {
      newStu.studentContactList.push($scope.newContact)
    }

    if (newStu.studentContactList.length <= 0) {
      $uibMsgbox.warn('学员的联系电话未填写，请至少填写一个联系人信息！');
      return false;
    }

    if (newStu.studentContactList.length <= 0) {
        $uibMsgbox.warn('学员的联系电话未填写，请至少填写一个联系人信息！');
        return false;
    }
    if (!newStu.counselor.counselor_id) {
    	newStu.counselor=null;
    }
    if (!newStu.govern.counselor_id) {
    	newStu.govern=null;
    }

    var _waitingModal = $uibMsgbox.waiting('保存中，请稍候')
    erp_studentsService.post(newStu, function(resp) {
      _waitingModal.close()
      if (!resp.error) {
        //判断是否存在资源记录ID
        var resource_rec_id = $state.params.resource_rec_id;
        if(resource_rec_id) {
          $state.go('ordersMgrOrders', {
            studentId: resp.data.id,
            resource_rec_id:resource_rec_id,
            "path": "/orders/ordersMgr/ordersMgrOrders",
            "href": "templates/erp/orders/orders.html"
          });
          return;
        }

        $uibModal.open({
          animate: true,
          controllerAs: '$ctrl',
          template: '<div class="msgbox"><div class="modal-header">'
            + '<h3 class="modal-title" id="modal-title"><i class="iconfont icon-public_success i-text-success mr5"></i>添加成功</h3>'
            + '</div>'
            + '<div class="modal-body" id="modal-body">'
                + '<div class="content">添加学员成功，点击【继续新增】，继续添加学员，点击【立即充值】，立即为该学生充值，点击【立即报班】，立即为该学员报班</div>'
            + '</div>'
            + '<div class="modal-footer" style="text-align:center;">'
                + '<button class="btn btn-default" ng-click="$ctrl.cancel()">取消</button>'
                + '<button class="btn btn-primary" ng-click="$ctrl.ok()">继续新增</button>'
                + '<button class="btn btn-primary" ng-click="$ctrl.recharge()">立即充值</button>'
                + '<button class="btn btn-primary" ng-click="$ctrl.orders()">立即报班</button>'
            + '</div></div>',
          controller: ['$scope', '$uibModalInstance', function($scope, $uibModalInstance) {
            var $ctrl = this;
            $ctrl.cancel = function () {
              $uibModalInstance.close()
              $state.goback()
            }
            $ctrl.ok = function () {
              $uibModalInstance.close()
              $state.reload()
            }
            $ctrl.recharge = function () {
                  var studentId = '';
                  $uibModalInstance.close();
                  window.open('?studentId=' + resp.data.id  + '#/studentMgr/studentMgrAccount/studentAccountRecharge');
              }
            $ctrl.orders = function () {
              var studentId = '';
              $uibModalInstance.close();
              window.open('?studentId=' + resp.data.id  + '#/orders/ordersMgr/ordersMgrOrders');
            }
          }],
        })
        // $uibMsgbox.confirm('保存成功，继续添加？', function(res) {
        //   if (res == 'yes') {
        //     $state.reload();
        //   } else {
        //     $scope.goback();
        //   }
        // })
      }
      else {
          //判断是否存在资源记录ID
          var stus=resp.data;
          $uibModal.open({
            animation: true,
            controllerAs: '$ctrl',
            template: '<div class="msgbox"><div class="modal-header">'
                  + '<h3 class="modal-title" id="modal-title"><i class="iconfont icon-public_reminder i-text-primary mr5"></i>提示</h3>'
              + '</div>'
              + '<div class="modal-body" id="modal-body" style="overflow:hidden;">'
                  + '<div class="content">该学员账号已存在，请勿重复创建。</div>'
                  +'<div class="content col-sm-12" ng-click="$ctrl.ok()">'
                    +'<img style="width:60px;height:60px;border-radius:50%;float:left;margin-right:10px;" src="img/erp/student-default.png">'
                    +'<a href="#" class="col-sm-10"><div>姓名:'+ (stu.student_name || '')
                      +'</div><div>学员编号:'+ (stus.encoding || '')
                      +'</div><div>APP登陆名:'+ (stus.login_no || '未同步到APP')
                      +',     校区:'+ (stus.branch_name || '')
                    +'</div></a>'
                  +'</div>'
              + '</div>'
              + '<div class="modal-footer" style="text-align:center;">'
                  + '<button class="btn btn-default" ng-click="$ctrl.cancel()">取消</button>'
                  + '<button class="btn btn-primary" ng-click="$ctrl.ok()">去看看</button>'
              + '</div></div>',
              controller: ['$scope', '$uibModalInstance', function($scope, $uibModalInstance) {
                var $ctrl = this;
                $ctrl.cancel = function () {
                  $uibModalInstance.close()
                };
                $ctrl.ok = function () {
                  $uibModalInstance.close()
                  var studentId = '';
                  window.open('?studentId='+stus.id+'#/studentMgr/studentMgrIndex');
                }
              }],
          })
       }
    })
  }

  $scope.goback = function() {
    $state.go('studentsSearch');
  }

  $scope.defalutContactName = function(contact){
      if(_.some($scope.relationList,{label:contact.link_name.substr(contact.link_name.indexOf('的')+1)}) || !contact.link_name){
    	  if(contact.relation!=4&&contact.relation!=5){
                contact.link_name = ($scope.student.student_name?($scope.student.student_name + '的'):'') + _.result(_.find($scope.relationList,
                        function(relation) {
                          return relation.value == contact.relation;
                        }), 'label');
        }else  {
        	 contact.link_name= _.result(_.find($scope.relationList, function(relation) {
          return relation.value == contact.relation;
        }), 'label');
        }
      }
  }
  $scope.getRelationList();

  $scope.init = function(){
    if($state.params.resource_rec_id) {
       //通过资源记录id查询学员信息
      erp_studentsService.queryByResourceRecId({
          id:$state.params.resource_rec_id,
          page:1
      },function(resp){
          //console.log('-------------');
          console.log(resp.rows[0].resc);

          $scope.student.student_name = resp.rows[0].resc.name ? resp.rows[0].resc.name : '';
          $scope.newContact.link_name = $scope.student.student_name + $scope.newContact.link_name;
          $scope.student.sex = resp.rows[0].resc.sex.toString();
          if(resp.rows[0].resc.attend_sch_id) {
              $scope.selectedInfo.school = {
                  id:resp.rows[0].resc.attend_sch_id,
                  school_name :  resp.rows[0].resc.attend_sch_name
              };
          }
          $scope.student.counselor = {
                  start_date: $scope.student.counselor.start_date,
                  end_date: $scope.student.counselor.end_date,
                  encoding: resp.rows[0].cnselor_encoding,
                  counselor_id:resp.rows[0].cnselor_id,
                  name: resp.rows[0].cnselor_name
          };
         if(resp.rows[0].resc.rescLinks.length > 0) {
        	  $.each(resp.rows[0].resc.rescLinks,function(i,n) {
                  var crmContact = {
                      link_phone: n.mp,
                      link_name: n.name,
                      relation: n.rela_id,
                      remark: ''
                  }
                  $scope.student.studentContactList.push(_.cloneDeep(crmContact));
              });
         } else {
        	 console.log($scope.student.studentContactList.length);
        	 var crmContact = {
                     link_phone: resp.rows[0].resc.mp,
                     link_name: resp.rows[0].resc.name,
                     relation: "" + $scope.relationList[3].value
                 }
                 $scope.student.studentContactList.push(crmContact);
         };
         console.log($scope.student);
         erp_studentsService.querygradeBycrmGradeId({
             gradeId:resp.rows[0].grade_id
         },function(resp){
        	 $scope.selectedInfo.grade = {
                     id:resp.data.id,
                     grade_name : resp.data.grade_name
                 };
         });
      }) ;
    }

    erp_dictService.getDictData({"typeCode" : "studentStatus", "needProductLineCdtn" : "Y"}, function(resp) {
      if (!resp.error) {
        $scope.studentStatus = resp.data;
      }
    });
  }
  $scope.init();
 }

"use strict";
angular.module('ework-ui').controller(
    'erp_StudentManagerBranchController',
    ['$rootScope', '$scope', '$state', '$stateParams', '$uibMsgbox',
        'erp_StudentManagerService', erp_StudentManagerBranchController]);

function erp_StudentManagerBranchController($rootScope, $scope, 
        $state, $stateParams,
        $uibMsgbox, erp_StudentManagerService) {
    $scope.stuMgrAnalysisList = [];
    $scope.buId = $stateParams.buId
    $scope.searchParam = {
      p_bu_id: +$scope.buId || null,
      range: $stateParams.dateRange || 'curMonth',
      p_start_date: $stateParams.startDate || moment().startOf('month').format('YYYY-MM-DD'),
      p_end_date: $stateParams.endDate || moment().endOf('month').format('YYYY-MM-DD'),
      p_btn_tag: 'hidden',
      p_min_date: moment().startOf('month').format('YYYY-MM-DD'),
      p_max_date: moment().endOf('month').format('YYYY-MM-DD'),
    };
    $scope.gotoTeacherReport = function (buId, branchId) {
        window.location.href = "?#/students/managerReport/Teacher?buId=" + buId + 
            '&branchId=' + branchId+
            '&startDate=' + $scope.searchParam.p_start_date +
            '&endDate=' + $scope.searchParam.p_end_date +
            '&dateRange=' + $scope.searchParam.range;
    }
    $scope.queryStuMgrAnalysis = function () {
        $scope.isDown = 'loading';
        if ($scope.buId) {
            $scope.searchParam.p_bu_id = +$scope.buId;
        }
        erp_StudentManagerService.queryStuMgrBranch($scope.searchParam, function (resp) {
            $scope.isDown = '';
            if (!resp.error) {
                $scope.stuMgrAnalysisList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }

        });
    };

    $scope.queryStuMgrAnalysis();

}
"use strict";
angular.module('ework-ui').controller(
    'erp_StudentManagerBuController',
    ['$rootScope', '$scope', '$state', '$uibMsgbox',
        'erp_StudentManagerService', erp_StudentManagerBuController]);

function erp_StudentManagerBuController($rootScope, $scope, $state, $uibMsgbox, erp_StudentManagerService) {
    $scope.stuMgrAnalysisList = [];
    $scope.searchParam = {
        range: 'curMonth',
        p_start_date: moment().startOf('month').format('YYYY-MM-DD'),
        p_end_date: moment().endOf('month').format('YYYY-MM-DD'),
        p_btn_tag: 'hidden',
        p_min_date: moment().startOf('month').format('YYYY-MM-DD'),
        p_max_date: moment().endOf('month').format('YYYY-MM-DD'),
    };
    $scope.gotoBranchReport = function (buId) {
        window.location.href = "?#/students/managerReport/Branch?buId=" + buId +
            '&startDate=' + $scope.searchParam.p_start_date +
            '&endDate=' + $scope.searchParam.p_end_date +
            '&dateRange=' + $scope.searchParam.range
    }
    $scope.queryStuMgrAnalysis = function () {
        $scope.isDown = 'loading';
        if ($scope.buId) {
            $scope.searchParam.p_bu_id = $scope.buId;
        }
        erp_StudentManagerService.queryStuMgrBu($scope.searchParam, function (resp) {
            $scope.isDown = '';
            if (!resp.error) {
                $scope.stuMgrAnalysisList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }

        });
    };

    $scope.queryStuMgrAnalysis();

}
"use strict";
angular.module('ework-ui').controller(
    'erp_StudentManagerStudentController',
    ['$rootScope', '$scope', 
        '$state', '$stateParams', '$uibMsgbox',
        'erp_StudentManagerService', erp_StudentManagerStudentController]);

function erp_StudentManagerStudentController($rootScope, $scope,
    $state, $stateParams, $uibMsgbox, erp_StudentManagerService) {
    $scope.stuMgrAnalysisList = [];

    $scope.buId = $stateParams.buId ? +$stateParams.buId : null;
    $scope.branchId = $stateParams.branchId ? +$stateParams.branchId : null;
    $scope.studentManagerId = $stateParams.studentManagerId ? +$stateParams.studentManagerId : null;
    $scope.employeeName  = $stateParams.employeeName || null;
    console.log($scope.employeeName)
    $scope.searchParam = {
        range: $stateParams.dateRange || 'curMonth',
        p_start_date: $stateParams.startDate || moment().startOf('month').format('YYYY-MM-DD'),
        p_bu_id: $scope.buId,
        p_branch_id: $scope.branchId,
        p_studentManagerId: $scope.studentManagerId,
        p_end_date: $stateParams.endDate || moment().endOf('month').format('YYYY-MM-DD'),
        p_btn_tag: 'hidden',
        p_min_date: moment().startOf('month').format('YYYY-MM-DD'),
        p_max_date: moment().endOf('month').format('YYYY-MM-DD'),
    };

    $scope.queryStuMgrAnalysis = function () {
        // $scope.isDown = 'loading';
        // if ($scope.buId) {
        //     $scope.searchParam.p_bu_id = $scope.buId;
        // }
        // if ($scope.branchId) {
        //     $scope.searchParam.p_branch_id = $scope.branchId;
        // }
        // if ($scope.studentManagerId) {
        //     $scope.searchParam.p_studentManagerId = $scope.studentManagerId;
        // }
        erp_StudentManagerService.queryStuMgrStudent($scope.searchParam, function (resp) {
            $scope.isDown = '';
            if (!resp.error) {
                $scope.stuMgrAnalysisList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }

        });
    };

    $scope.queryStuMgrAnalysis();

}
"use strict";
angular.module('ework-ui').controller(
    'erp_StudentManagerController',
    ['$rootScope', '$scope', '$state', '$stateParams', '$uibMsgbox',
        'erp_StudentManagerService', erp_StudentManagerController]);

function erp_StudentManagerController($rootScope, $scope,
    $state, $stateParams, $uibMsgbox, erp_StudentManagerService) {
    $scope.stuMgrAnalysisList = [];

    $scope.buId = $stateParams.buId ? +$stateParams.buId : null;
    $scope.branchId = $stateParams.branchId ? +$stateParams.branchId : null;

    $scope.searchParam = {
      range: $stateParams.dateRange || 'curMonth',
      p_start_date: $stateParams.startDate || moment().startOf('month').format('YYYY-MM-DD'),
      p_end_date: $stateParams.endDate || moment().endOf('month').format('YYYY-MM-DD'),
      p_btn_tag: 'hidden',
      p_min_date: moment().startOf('month').format('YYYY-MM-DD'),
      p_max_date: moment().endOf('month').format('YYYY-MM-DD'),
    };
    $scope.gotoTeacherStudentReport = function (buId, branchId, studentManagerId, employeeName) {
        window.location.href = "?#/students/managerReport/student?buId=" + buId +
            '&branchId=' + branchId + '&studentManagerId=' + studentManagerId +
            '&employeeName=' + employeeName +
            '&startDate=' + $scope.searchParam.p_start_date +
            '&endDate=' + $scope.searchParam.p_end_date +
            '&dateRange=' + $scope.searchParam.range;
    }
    $scope.queryStuMgrAnalysis = function () {
        $scope.isDown = 'loading';
        if ($scope.buId) {
            $scope.searchParam.p_bu_id = $scope.buId;
        }
        if ($scope.branchId) {
            $scope.searchParam.p_branch_id = $scope.branchId;
        }
        erp_StudentManagerService.queryStuMgr($scope.searchParam, function (resp) {
            $scope.isDown = '';
            if (!resp.error) {
                $scope.stuMgrAnalysisList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }

        });
    };

    $scope.queryStuMgrAnalysis();

}
"use strict"
angular.module('ework-ui')
  .controller('erpStudentDistributeController', [
      '$rootScope',
      '$scope',
      '$log',
      erpStudentDistributeController
    ])

function erpStudentDistributeController(
    $rootScope,
    $scope,
    $log
  ) {
   
}
/**
 * Created by Liyong.zhu on 2016/9/30.
 */
/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_StudentIndexAccountController', [
        '$rootScope',
        '$scope',
        '$log',
        'erp_studentIndexAccountService',
        'erp_studentAccountService',
        'erp_studentPrintService',
        'erp_studentsService',
        erp_StudentIndexAccountController]);

function erp_StudentIndexAccountController(
    $rootScope,
    $scope,
    $log,
    erp_studentIndexAccountService,
    erp_studentAccountService,
    erp_studentPrintService,
    erp_studentsService) {
    //学员信息
    $scope.student = {};
    $scope.dateRange = {
        start_date: '',
        end_date: '',
        defaultRange: 'lastYear'
    }
    $scope.studentId = $("#rootIndex_studentId").val();
    $scope.tabsCtrl = {
        value: -1 
    }
    $scope.changeAccountTypeList = [
        // {value : -1, label : '全部'},
        {value : 1, label : '储值账户'},
        {value : 2, label : '冻结账户'},
        {value : 3, label : '退费账户'}
    ];

    function queryStudentInfo(){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                    alert(resp.message);
                }
            });
    }
    function initial(){
        queryIndexAccount();
        $('title').text('学员|'+ $scope.student.student_name);

        /*时间轴_start*/
        var callBack = function() {
            $scope.queryAccountList();
        }
        TimeLine($scope, {
            width : 600
        }, callBack);
    }

    queryStudentInfo();

    $scope.Page = {};
    // 变动 的 账户类型
    $scope.Page.change_account_type = 1;
    $scope.Page.rows = 10;
    $scope.Page.total = 0;
    $scope.change_types = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14';
    $scope.change_types_bak = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14';
    $scope.changeAccountChangePage = function(change_types){
        if($scope.change_types==change_types){
            $scope.change_types = $scope.change_types_bak;
        }else{
            $scope.change_types = change_types;
        }
        $scope.queryAccountList();
    }

    $scope.queryAccountList = function(account_type){
        if (account_type) {
            $scope.Page.change_account_type = account_type;
        }
        // else {
        //     account_type = $scope.Page.change_account_type;
        // }
        // if(account_type == -1) {
        //     $scope.change_types = $scope.change_types_bak;
        // } else if(account_type == 1) {
        //     $scope.change_types = '0,1,3,4,5,6,7,8,9,10,11';
        // } else if(account_type == 2) {
        //     $scope.change_types = '13,14';
        // } else if(account_type == 3) {
        //     $scope.change_types = '2,12';
        // }
        var param = {
            start_date:$scope.dateRange.start_date,
            end_date:$scope.dateRange.end_date,
            student_id:$scope.studentId,
            account_type:0,
            //change_types:$scope.change_types,
            change_account_type:$scope.Page.change_account_type,
            currentPage:$scope.Page.page,
            pageSize:$scope.Page.rows
        }
        $scope.isLoading = 'isLoading';
        $scope.accountDataList = [];
        erp_studentAccountService.query(param,function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.accountDataList = resp.data;

                $scope.Page.total = resp.total;
                $scope.Page.totalPage = resp.totalPage;
                $scope.Page.currentPage = resp.currentPage;
                $scope.Page.page = resp.currentPage;
                $scope.Page.pageSize = resp.pageSize;

                var _rows = $scope.Page.rows;
                $scope._total = $scope.Page.total;
                if($scope._total == 0){
                    $scope._begin = 0;
                    $scope._end = 0;
                }else{
                    $scope._begin = ($scope.Page.page - 1) * _rows + 1;
                    if($scope._total <= _rows || (($scope._begin - 1) + _rows) >= $scope._total){
                        $scope._end = $scope._total;
                    }else{
                        $scope._end = ($scope.Page.page - 1) * _rows + _rows;
                    }
                }
            }else{
                alert(resp.message);
            }
        })
    }

    // 账户详情
    $scope.studentIndexAccount = {
        STORE_ACCOUNT : 0,
        FROZEN_ACCOUNT : 0,
        REFUND_ACCOUNT : 0
    };
    // 账户余额
    $scope._total = 0;
    $scope._begin = 0;
    $scope._end = 0;
    var param = {};
    $scope.accountDataList = [];

    $scope.print = function(dynamic_id, print_type){
        if(print_type == 0){
            //充值
            erp_studentPrintService.query({dynamicId: dynamic_id,printType:'03'},function(resp){

                if(!resp.error){
                    var printDate = [];
                    printDate.push(resp.data);
                    if(resp.data.rechargeInfo.CITY_ID == 3) {
                        CreatePrintPage04Xiamen(printDate);
                    } else {
                        CreatePrintPage04(printDate);
                    }
                }else{
                    alert(resp.message);
                }

            });
        }
        if(print_type == 6){
            // 理赔
            erp_studentPrintService.query({dynamicId: dynamic_id,printType:'06'},function(resp){
                if(!resp.error){
                    if(resp.data.claimInfo.CITY_ID == 3) {
                        CreatePrintPage06Xiamen(resp.data);
                    } else {
                        CreatePrintPage06(resp.data);
                    }
                }else{
                    alert(resp.message);
                }
            });
        }
    }

    function queryIndexAccount(){
        erp_studentIndexAccountService.query({
            studentId:$scope.student.id
        },function(resp){
            if(!resp.error){
                $scope.studentIndexAccount = resp.data;
            }
        })
    }



    /**
     * 首页
     */
    $scope.begin = function(){
        $scope.Page.page = 1;
        $scope.queryAccountList();
    }

    /**
     * 上一页
     */
    $scope.up = function(){
        if($scope.Page.page <= 1){
            return;
        }
        $scope.Page.page = $scope.Page.page - 1;
        $scope.queryAccountList();
    }

    /**
     * 下一页
     */
    $scope.down = function(){
        if($scope.Page.page >= $scope.Page.totalPage){
            return;
        }
        $scope.Page.page = $scope.Page.page + 1;
        $scope.queryAccountList();
    }

    /**
     * 最后一页
     */
    $scope.end = function(){
        $scope.Page.page = $scope.Page.totalPage;
        $scope.queryAccountList();
    }
}
/**
 * Created by Liyong.zhu on 2016/9/30.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_studentAccountClaimController', [
        '$rootScope',
        '$scope',
        '$log',
        '$uibMsgbox',
        'erp_companyAccountService',
        'erp_studentAccountService',
        'erp_studentPrintService',
        'erp_studentsService',
        erp_studentAccountClaimController]);

function erp_studentAccountClaimController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    erp_companyAccountService,
    erp_studentAccountService,
    erp_studentPrintService,
    erp_studentsService) {
    //学员信息
    $scope.student = {};

    $scope.studentId = $("#rootIndex_studentId").val();

    function queryStudentInfo(){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                    $uibMsgbox.confirm(resp.message);
                }
            });
    }
    function initial(){
        $scope.payment = {
            lp_info:{
                student_heading:$scope.student.student_heading,
                student_name:$scope.student.student_name,
                encoding:$scope.student.encoding,
                remark:"",
                student_id:$scope.studentId,
                lp_price:0
            }
        };
        $('title').text('学员|'+ $scope.student.student_name);
    }

    queryStudentInfo();



    /* 理赔提交 */
    $scope.LPSubmit = function() {
        var post = {
            student_id : $scope.payment.lp_info.student_id,
            product_line : 0,
            money : $scope.payment.lp_info.lp_price,
            remark : $scope.payment.lp_info.remark
        };
        post._ = (new Date()).getTime();
        post.money = genFloatByString(post.money);
        if (!post.money || post.money < 0 || post.money > 100000) {
            $uibMsgbox.confirm("理赔失败，金额不正确！");
            return;
        }
        if (post.remark != null && post.remark.length > 100) {
            $uibMsgbox.confirm("理赔失败，描述信息过长！");
            return;
        }
        post.accountOperateType = 'claim';
        var _waitingModal = $uibMsgbox.waiting('理赔申请中，请稍候...');
        erp_studentAccountService.post(post, function(response) {
            _waitingModal.close();
            if (!response.error) {
                $uibMsgbox.confirm("已成功发起理赔审批！");
            }else{
                $uibMsgbox.confirm(response.message);
            }
        });

    };

}
/**
 * Created by Liyong.zhu on 2016/9/30.
 */
"use strict";
angular.module('ework-ui').controller('erp_studentAccountRechargeController', [
  '$rootScope',
  '$scope',
  '$state',
  '$log',
  '$uibMsgbox',
  'erp_companyAccountService',
  'erp_studentAccountService',
  'erp_studentPrintService',
  'erp_studentsService',
  'erp_deviceService',
  erp_studentAccountRechargeController
]);

function erp_studentAccountRechargeController(
  $rootScope,
  $scope,
  $state,
  $log,
  $uibMsgbox,
  erp_companyAccountService,
  erp_studentAccountService,
  erp_studentPrintService,
  erp_studentsService,
  erp_deviceService
) {
  //学员信息
  $scope.student = {};

  $scope.studentId = $("#rootIndex_studentId").val();

  function queryStudentInfo() {
    erp_studentsService.query({
        row_num: 20,
        studentId: $scope.studentId
      },
      function(resp) {
        if (!resp.error && resp.data.length) {
          $scope.student = resp.data[0];
          initial();
        } else {
          $uibMsgbox.alert(resp.message);
        }
      });
  }

  function initial() {
    queryCompanyAccount();
    queryDeviceInfo();
    $('title').text('学员|' + $scope.student.student_name);
  }
  queryStudentInfo();

  function strip(num,precision = 12){
    return +parseFloat(num.toPrecision(precision));
  }

  function sumMoney() {
    $scope.allCzMoney = 0;
    $.each($scope.submitCZList, function(i, cz) {
      $scope.allCzMoney += cz.money;
    });
    $scope.allCzMoney=strip($scope.allCzMoney);
  }
  /* 获取现金充值信息 */
  function genCashin() {
    return {
      studentId: $scope.studentId,
      pay_mode: 1,
      money: $scope.payment.cash_price
    };
  }
  /* 设定新的item序号，并统计该单项的综合 */
  function sumItemsPrice(card_detail) {
    var sum = 0;
    $.each(card_detail, function(i, model) {
      sum += model.staffappprem;
    });
    return strip(sum);
  }

  function removeTransferPrice(id) {
    if (id) {
      if ($scope.payment.transfer_detail) {
        var details = [];
        $.each($scope.payment.transfer_detail, function(i, model) {
          if (model.id != id) {
            details.push(model);
          }
        });
        $scope.payment.transfer_detail = details;
        $scope.payment.transfer_price = sumItemsPrice($scope.payment.transfer_detail);
      }

      var submitCZList = [];
      $.each($scope.submitCZList, function(i, model) {
        if (model.id != id) {
          submitCZList.push(model);
        }
      });
      $scope.submitCZList = submitCZList;
      sumMoney();
    }
  }

  function removeCardPrice(id) {
    if ($scope.payment.card_detail) {
      var card_detail = [];
      $.each($scope.payment.card_detail, function(i, model) {
        if (model.id != id) {
          card_detail.push(model);
        }
      });
      $scope.payment.card_detail = card_detail;
      $scope.payment.card_price = sumItemsPrice($scope.payment.card_detail);

    }

    var submitCZList = [];
    $.each($scope.submitCZList, function(i, model) {
      if (model.id != id) {
        submitCZList.push(model);
      }
    });
    $scope.submitCZList = submitCZList;
    sumMoney();
  }

  /* 提交刷卡信息 */
  function submitCardPrice(cardDetail) {
    
    var param = {
      studentId: $scope.studentId,
      pay_mode: cardDetail.payment_way,
      money: cardDetail.staffappprem,
      stu_card: cardDetail.client_card_no,
      company_card_id: cardDetail.company_card_id,
      remark: cardDetail.extend_column,
      id: cardDetail.id
    };
    if (param.remark != null && param.remark.length > 100) {
      $uibMsgbox.alert("描述信息过长！");
      return -1;
    }
    if (!param.stu_card || param.stu_card.length > 29) {
      $uibMsgbox.alert("请输入正确的卡号！");
      return -1;
    }
    $scope.submitCZList.push(param);
    sumMoney();
    return 1;
  }

  /* 获取pos机的信息 */
  function genPosID(inputCradInfo, account) {
    if (inputCradInfo && account) {
      $.each(account, function(i, it) {
        if (it.id == inputCradInfo.account) {
          inputCradInfo.simple_name = it.simple_name;
          inputCradInfo.pos_id = it.id;
          inputCradInfo.company_card_id = it.company_card_id;
          return it;
        }
      });
    }
  }

  $scope.submitCZList = [];
  $scope.accountList = [];
  $scope.accountTransferList = [];
  $scope.payment = {
    cash_price: '请输入金额',
    card_price: 0,
    transfer_price: 0,
    card_detail: [],
    transfer_detail: []
  }
  $scope.allCzMoney = 0;
  $scope.initialCZ = function() {
    $state.reload();
  }

  /**
   * 添加一条现金充值记录
   */

  var ids = 1;
  /* 保存现金 */
  $scope.addCashItem = function() {
    var param = genCashin();
    if (!param.money || param.money == '请输入金额') {
      $uibMsgbox.alert("请输入金额！");
      return -1;
    }
    param.money = genFloatByString(param.money);
    if (param.money <= 0 || param.money + '' == 'NaN' || param.money > 1000000) {
      $uibMsgbox.alert("输入的金额不正确！");
      return -1;
    }
    param.id = ++ids;
    $scope.submitCZList.push(param);
    sumMoney();
    return 1;
  };


  $scope.onblurCash = function() {
    if ($scope.payment && $scope.payment.cash_price == '') {
      $scope.payment.cash_price = '请输入金额';
    }
  }
  $scope.onfocusCash = function() {
    if ($scope.payment && $scope.payment.cash_price == '请输入金额') {
      $scope.payment.cash_price = '';
    }
  }
  $scope.removeCzItem = function(czItem) {
    removeTransferPrice(czItem.id);
    removeCardPrice(czItem.id);
  };

  $scope.selectAccountPOS = function(posInfo) {
    $.each($scope.accountListPos, function(idx, pos) {
      if (pos.id == $scope.inputCradInfo.account) {
        $scope.inputCradInfo.account_cmp = pos.account_name;
        return;
      }
    });
  }

  $scope.selectAccountPOS2 = function() {
    $.each($scope.accountTransferList, function(idx, pos) {
      if (pos.ID == $scope.transferPriceData.account) {
        $scope.transferPriceData.account_cmp = pos.ACCOUNT_NAME;
        return;
      }
    });
  };



  /* 刷卡 */
  $scope.skWindowOpen = function() {
    $scope.windowOpenType = 'card';
  }
  $scope.windowOpenClose = function() {
    $scope.windowOpenType = undefined;
  }
  $scope.$watch('windowOpenType', function(newValue, oldValue) {
    if (newValue == 'card') {
      $scope.toCardPrice()
    }
  });
  /* 刷卡操作 */
  $scope.toCardPrice = function() {
    $scope.inputCradInfo = {};
    $scope.inputCradInfo.account = $scope.accountListPos[0].id;
    $scope.inputCradInfo.account_cmp = $scope.accountListPos[0].account_name;
    $scope.inputCradPrice = true;

    /** 添加刷卡记录 */
    $scope.addInputCradInfo = function() {
      var str = Format('yyyy-MM-dd hh:mm:ss', new Date());
      var staffappprem = genFloatByString($scope.inputCradInfo.staffappprem);
      if (!staffappprem) {
        $scope.inputCradInfo.staffappprem = 0;
        // 保存失败了
        $uibMsgbox.alert('请输入刷卡金额！');
        return false;
      }
      $scope.inputCradInfo.staffappprem = staffappprem;

      if ($scope.inputCradInfo.staffappprem <= 0) {
        // 保存失败了
        $uibMsgbox.alert('请输入正确的刷卡金额！');
        return false;
      }
      if (!$scope.inputCradInfo.client_card_no) {
        // 保存失败了
        $uibMsgbox.alert('请输入刷卡卡号！');
        return false;
      }
      
      // 获取pos机信息
      genPosID($scope.inputCradInfo, $scope.accountListPos);
      var detailInfo = {
        client_card_no: $scope.inputCradInfo.client_card_no,
        staffappprem: parseFloat($scope.inputCradInfo.staffappprem),
        payment_way: 2,
        createTime: str,
        simple_cmp_name: $scope.inputCradInfo.account_cmp,
        pos_id: $scope.inputCradInfo.pos_id,
        company_card_id: $scope.inputCradInfo.company_card_id,
        account_name: $scope.inputCradInfo.simple_name,
        extend_column: $scope.inputCradInfo.extend_column
      };
      detailInfo.id = ++ids;
      if (submitCardPrice(detailInfo) == -1) {
        return false;
      }
      detailInfo.simple_cmp_name = $scope.inputCradInfo.account_cmp;

      // 增加一条详情
      $scope.payment.card_detail.unshift(detailInfo);

      // 获取单项总计
      $scope.payment.card_price = sumItemsPrice($scope.payment.card_detail);

      $scope.inputCradInfo = {};
      $scope.inputCradInfo.account = $scope.accountListPos[0].id;
      $scope.inputCradInfo.account_cmp = $scope.accountListPos[0].account_name;
      $scope.inputCradPrice = true;
      return true;
    };
      /**
       * 移除刷卡记录
       */
      $scope.removeCardPrice = function(id) {
        removeCardPrice(id);
      };
      $scope.onCloseCardWindow = function () {
        var str = Format('yyyy-MM-dd hh:mm:ss', new Date());
        var staffappprem = genFloatByString($scope.inputCradInfo.staffappprem);
        if (staffappprem || $scope.inputCradInfo.client_card_no) {
          if ($scope.addInputCradInfo()) {
            $scope.windowOpenClose();
          }
        } else {
          $scope.windowOpenClose();
        }
      }
    }
    /* 转账：转入 */
  $scope.zrWindowOpen = function() {
    $scope.windowOpenType = 'transfer';
  }

  /* 转账操作 */
  $scope.toTransferPrice = function() {
    $scope.transferPriceData = {};
    // 初始化公司账户信息
    $scope.transferPriceData.account = $scope.accountTransferList[0].ID;
    $scope.transferPriceData.account_cmp = $scope.accountTransferList[0].ACCOUNT_NAME;
    $scope.inputTransferPrice = true;


    // 添加操作
    $scope.addInputTransferPrice = function() {
      var staffappprem = genFloatByString($scope.transferPriceData.staffappprem);
      if (!staffappprem) {
        $scope.transferPriceData.staffappprem = 0;
        // 保存失败了
        $uibMsgbox.alert('请输入转账金额！');
        return;
      }
      $scope.transferPriceData.staffappprem = staffappprem;

      if ($scope.transferPriceData.staffappprem <= 0) {
        // 保存失败了
        $uibMsgbox.alert('请输入正确的转账金额！');
        return;
      }
      if (!$scope.transferPriceData.client_card_no) {
        // 保存失败了
        $uibMsgbox.alert('请输入转账卡号！');
        return;
      }

      var str = Format('yyyy-MM-dd hh:mm:ss', new Date());
      var detailObject = {
        client_card_no: $scope.transferPriceData.client_card_no,
        staffappprem: parseFloat($scope.transferPriceData.staffappprem),
        payment_way: 3,
        createTime: str,
        //              pos_id : scope.transferPriceData.pos_id,
        company_card_id: $scope.transferPriceData.account,
        simple_name: $scope.transferPriceData.simple_name,
        extend_column: $scope.transferPriceData.extend_column
      };
      detailObject.id = ++ids;
      if (submitCardPrice(detailObject) == -1) {
        return;
      }

      // 增加一条详情
      detailObject.simple_cmp_name = $scope.transferPriceData.account_cmp;
      $scope.payment.transfer_detail[$scope.payment.transfer_detail.length] = detailObject;
      // 获取单项总计
      $scope.payment.transfer_price = sumItemsPrice($scope.payment.transfer_detail);

    }

    /* 移除转账信息 */
    $scope.removeTransferPrice = function(id) {
      removeTransferPrice(id);
    }
  }

  function removeTransferPrice(id) {
    if (id) {
      if ($scope.payment.transfer_detail) {
        var details = [];
        $.each($scope.payment.transfer_detail, function(i, model) {
          if (model.id != id) {
            details.push(model);
          }
        });
        $scope.payment.transfer_detail = details;
        $scope.payment.transfer_price = sumItemsPrice($scope.payment.transfer_detail);
      }

      var submitCZList = [];
      $.each($scope.submitCZList, function(i, model) {
        if (model.id != id) {
          submitCZList.push(model);
        }
      });
      $scope.submitCZList = submitCZList;
      sumMoney();
    }
  }
  var printData = [];
  var submitCZBakList = [];
  /**
   * 打印充值
   */
  $scope.printCZ = function() {
    if ($scope.submitCZList && $scope.submitCZList.length > 0) {
      var ob = $scope.submitCZList.pop();
      submitCZBakList.push(ob);
      erp_studentPrintService.query({ dynamicId: ob.dynamic_id, printType: '03' }, function(resp) {
        if(!resp.error) {
          printData.push(resp.data);
          $scope.printCZ();
        }
      });
    } else if (printData.length > 0) {
        var printDataStirng = JSON.stringify(printData);
        var useragent = navigator.userAgent;
        if(useragent.indexOf('Android') > -1 || useragent.indexOf('Adr') > -1) {
          if(location.href.indexOf('klxuexi.org')>0){
            window.open("/printhtml/print_rechargeXiamen.html?printData=" + printDataStirng);
          }else{
            window.open("/klxxedu/printhtml/print_rechargeXiamen.html?printData=" + printDataStirng);
          }
        }
      if(printData[0].rechargeInfo.CITY_ID==3) {
        CreatePrintPage04Xiamen(printData);
      } else {
        CreatePrintPage04(printData);
      }
      for (var i = 0; i < submitCZBakList.length; i++) {
        $scope.submitCZList.push(submitCZBakList[i]);
      }
      submitCZBakList = [];
      printData = [];
    }
  }

  function queryCompanyAccount() {
    // 查询公司账户信息
    erp_companyAccountService.query({p_status:1}, function(resp) {
      if (!resp.error && resp.data && resp.data.length > 0) {
        $scope.accountTransferList = resp.data;
      } else {
        $scope.accountTransferList = [];
        $uibMsgbox.alert(resp.message)
      }
    });
  }

  function queryDeviceInfo() {
    
    erp_deviceService.queryBu({p_status:1}, function(resp) {
      $scope.accountListPos = [];
      if (!resp.error && resp.data && resp.data.length > 0) {
        $.each(resp.data, function(i, model) {
          if (model.account_name) {
            $scope.accountListPos.push(model);
          }
        });
      } else {
        $uibMsgbox.alert(resp.message)
      }
    });
  }

  $scope.CZSubmitALL = function() {
    if ($scope.submitCZList && $scope.submitCZList.length > 0) {

      submitCZ($scope.submitCZList);

    }
  };
  var dynamicIds = [];
  var submitCZ_bak = [];
  /* 充值 */
  function submitCZ(list) {
    if (list != null && list.length > 0) {
      var param = list.pop();
      param.accountOperateType = 'recharge';
      var _waitingModal = $uibMsgbox.waiting('充值中，请稍候...');
      erp_studentAccountService.post(param, function(response) {
        _waitingModal.close();
        if (response.error) {
          $uibMsgbox.alert("保存失败，请联系管理员！message is " + response.message);
        } else {
          if (list != null && list.length > 0) {
            param.dynamic_id = response.data.dynamic_id;
            submitCZ_bak.push(param);
            submitCZ(list);
          } else {
            param.dynamic_id = response.data.dynamic_id;
            submitCZ_bak.push(param);
            $uibMsgbox.confirm({
              content: "充值成功！请选择打印，或者继续充值",
              okText: '打印',
              cancelText: '继续充值',
              callback: function (res) {
                if (res == 'yes') {
                  $.each(submitCZ_bak, function(i, m) {
                    list.push(m);
                  });
                  submitCZ_bak = [];
                  $scope.printCZ()
                } else {
                  $scope.initialCZ()
                }
                $scope.czSummit = true;
              }
            });
          }
          dynamicIds.push(response.data.dynamic_id);
          /*alert("充值成功！");

           // 充值打印内容
           queryPrintRechargeInfo.query({dynamicId:response.data.dynamic_id},function(data){
           CreatePrintPage04(data);
           });*/
        }
      });
    }

  }
}

/**
 * Created by Liyong.zhu on 2016/10/24.studentIndex-accountTransfer.js
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_studentAccountTransferController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        '$uibMsgbox',
        'erp_studentsService',
        'erp_studentAccountQueryService',
        'erp_studentAccountService',
        'erp_printService',
        erp_studentAccountTransferController]);

function erp_studentAccountTransferController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    $uibMsgbox,
    erp_studentsService,
    erp_studentAccountQueryService,
    erp_studentAccountService,
    erp_printService) {
    // 学员信息
    $scope.student = {};
    //转出学员账户详情
    $scope.accountOutputDetail = {};
    //转入学员账户详情
    $scope.accountInputDetail = {};
    // 转出学员编号
    if ($scope.$resolve && $scope.$resolve.studentId) {
        $scope.studentId = $scope.$resolve.studentId;
        $scope.buId = $scope.$resolve.buId;
    } else {
        $scope.studentId = $("#rootIndex_studentId").val();
        $scope.buId = null;
    }
    // 转出学员信息
    $scope.transfer_out_student = {};
    // 转入学员信息
    $scope.transfer_in_student = {
    	account_type : 1
    };
    // 转出账户类型
    $scope.accountTypeOutList = [{
    	"key" : 1, "value" : "储蓄账户"
    }, {
    	"key" : 2, "value" : "冻结账户"
    }, {
    	"key" : 3, "value" : "退费账户"
    }];
    // 转进账户类型
    $scope.accountTypeInList = [{
    	"key" : 1, "value" : "储蓄账户"
    }, {
    	"key" : 2, "value" : "冻结账户"
    }, {
    	"key" : 3, "value" : "退费账户"
    }];
    
    // 动户变动记录编号 用于打印
    $scope.dynamicId = 0;
    
    // 查询学员账户信息
    $scope.queryStudentAccount = function(studentId, studentType) {
        var param = {
        	accountType : 0,
        	studentId : studentId
        };
        erp_studentAccountQueryService.query(param, function(resp) {
            if(!resp.error) {
            	if (studentType == 'out') {
            		if (resp.data) {
                        $scope.accountOutputDetail = resp.data;
                        if ($scope.transfer_out_student.account_type && $scope.transfer_out_student.account_type == 1) {//储值账户
                            $scope.transfer_out_student.fee_amount = resp.data.FEE_AMOUNT ? resp.data.FEE_AMOUNT : 0;
                        } else if ($scope.transfer_out_student.account_type && $scope.transfer_out_student.account_type == 2) {//冻结账户
                            $scope.transfer_out_student.fee_amount = resp.data.FROZEN_ACCOUNT ? resp.data.FROZEN_ACCOUNT : 0;
                        } else if ($scope.transfer_out_student.account_type && $scope.transfer_out_student.account_type == 3) {//冻结账户
                            $scope.transfer_out_student.fee_amount = resp.data.REFUND_ACCOUNT ? resp.data.REFUND_ACCOUNT : 0;
                        }
                    } else {
                    	$scope.transfer_out_student.fee_amount = 0;
                    }
            	} else {
            		if (resp.data) {
                        $scope.accountInputDetail = resp.data;
                        $scope.setTransInStuAccountType();
                        if ($scope.transfer_out_student.account_type && $scope.transfer_out_student.account_type == 1) {//储值账户
                            $scope.transfer_in_student.fee_amount = resp.data.FEE_AMOUNT ? resp.data.FEE_AMOUNT : 0;
                        } else if ($scope.transfer_out_student.account_type && ($scope.transfer_out_student.account_type == 2
                        		|| $scope.transfer_out_student.account_type == 3)) {//冻结账户
                            $scope.transfer_in_student.fee_amount = resp.data.FROZEN_ACCOUNT ? resp.data.FROZEN_ACCOUNT : 0;
                        }
                    } else {
                    	$scope.transfer_in_student.fee_amount = 0;
                    }
            	}
                //将转账金额清空
                $scope.transfer_money = 0;
            }
        });
    }
    
    $scope.setTransInStuAccountType = function () {
    	if ($scope.transfer_out_student.account_type == 3) {
        	$scope.transfer_in_student.account_type = 2;
        } else {
        	$scope.transfer_in_student.account_type = $scope.transfer_out_student.account_type;
        }
    }

    //切换转账账户类型
    $scope.changeTransferType = function() {
        $scope.transfer_money = 0;
        $scope.setTransInStuAccountType();
        
        if($scope.transfer_out_student.account_type == 1) {//储蓄账户
            $scope.transfer_out_student.fee_amount = $scope.accountOutputDetail.FEE_AMOUNT ? $scope.accountOutputDetail.FEE_AMOUNT : 0;
            $scope.transfer_in_student.fee_amount = $scope.accountInputDetail.FEE_AMOUNT ? $scope.accountInputDetail.FEE_AMOUNT : 0;
        } else if($scope.transfer_out_student.account_type == 2) {//冻结账户
            $scope.transfer_out_student.fee_amount = $scope.accountOutputDetail.FROZEN_ACCOUNT ? $scope.accountOutputDetail.FROZEN_ACCOUNT : 0;
            $scope.transfer_in_student.fee_amount = $scope.accountInputDetail.FROZEN_ACCOUNT ? $scope.accountInputDetail.FROZEN_ACCOUNT : 0;
        } else if($scope.transfer_out_student.account_type == 3) {//退费账户
            $scope.transfer_out_student.fee_amount = $scope.accountOutputDetail.REFUND_ACCOUNT ? $scope.accountOutputDetail.REFUND_ACCOUNT : 0;
            $scope.transfer_in_student.fee_amount = $scope.accountInputDetail.FROZEN_ACCOUNT ? $scope.accountInputDetail.FROZEN_ACCOUNT : 0;
        }
        
        if ($scope.transfer_out_student.account_type == 3) {
        	$scope.transfer_in_student.id = $scope.transfer_out_student.id;
            $scope.transfer_in_student.bu_id = $scope.transfer_out_student.bu_id;
            $scope.transfer_in_student.student_name = $scope.transfer_out_student.student_name;
            $scope.transfer_in_student.encoding = $scope.transfer_out_student.encoding;
            $scope.queryStudentAccount($scope.transfer_in_student.id, 'in');
            $('#txtTransferInStudentName').attr('readonly', 'readonly');
        } else {
        	$scope.transfer_in_student.id = null;
            $scope.transfer_in_student.bu_id = null;
            $scope.transfer_in_student.student_name = null;
            $scope.transfer_in_student.encoding = null;
            $('#txtTransferInStudentName').removeAttr('readonly');
        }
        //将转账金额清空
        $scope.transfer_money = 0;
    }

    // 转入学员输入框，名称变化则重新查询学员信息
    $scope.onTransferInStudentNameChange = function() {
        
        $scope.isDown = 'loading';
        $scope.searchResult = [];
        erp_studentsService.query({
            row_num: 10,
            need_contact: '1',
            searchInfo: $scope.transfer_in_student.student_name
        },
        function (resp) {
            
            $scope.isDown = '';
            if(!resp.error) {
                $scope.searchResult = resp.data;
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    }

    // 选中转入学员输入框，清空输入框内容
    $scope.onTransferInStudentNameFocus = function() {
        if($scope.transfer_in_student.student_name == '请输入学员姓名') {
            $scope.transfer_in_student.student_name = '';
        }
        $scope.inputing = true;
    };
    
    // 鼠标离开转入学员控件处理事件
    $scope.onTransferInStudentNameBlur = function() {
        if(!$scope.transfer_in_student.student_name) {
            $scope.transfer_in_student.student_name = '请输入学员姓名';
        }
        $scope.inputing = false;
    };

    // 从转入学员控件的查询结果中选择一条数据触发该事件
    $scope.selectTransferInStudent = function(student) {
    	if (student.bu_id != $scope.transfer_out_student.bu_id) {
    		$uibMsgbox.error("转入学员和转出学员不属于一个团队，不能转出");
    		return;
    	}
        $scope.transfer_in_student = student;
        $scope.searchResult = [];
        $scope.queryStudentAccount($scope.transfer_in_student.id, 'in');
    };

    // 鼠标离开转出金额控件触发该事件
    $scope.onTransferOutBlur = function() {
        if (!$scope.transfer_money) {
            $scope.transfer_money = 0;
        } else {
        	$scope.checkTransferMoney();
        }
        return true;
    }
    $scope.checkTransferMoney = function() {
    	var transferMoney = genFloatByString($scope.transfer_money);
        if (!transferMoney || transferMoney <= 0 || transferMoney > 1000000) {
        	$uibMsgbox.error('转账金额必须在0到1000000之间！');
            $scope.transfer_money = 0;
            return false;
        }
        
        var feeAmount = genFloatByString($scope.transfer_out_student.fee_amount);
        feeAmount = feeAmount ? feeAmount : 0;
        if (feeAmount < transferMoney) {
        	$uibMsgbox.error("转账金额不能大于转出账户余额");
        	$scope.transfer_money = 0;
        	return false;
        }
        return true;
    }
    
    // 转账前校验处理
    $scope.checkBeforeSubmit = function() {
    	if ($scope.checkTransferMoney()) {
    		if (!$scope.transfer_in_student.id || !$scope.transfer_in_student.student_name) {
    			$uibMsgbox.error("请选择转入学员");
    			return false;
    		}
    		
    		if (!$scope.transfer_in_student.account_type || !$scope.transfer_out_student.account_type) {
    			$uibMsgbox.error("请选择转出和转入账户类型");
    			return false;
    		}
    		
    		if ($scope.transfer_in_student.id == $scope.transfer_out_student.id) {
    			if ($scope.transfer_in_student.account_type != 2 || $scope.transfer_out_student.account_type != 3) {
    				$uibMsgbox.error("本学员转账，只能从退费账户转到冻结账户");
        			return false;
    			}
    			
    		} else if ($scope.transfer_in_student.account_type != $scope.transfer_out_student.account_type) {
    			$uibMsgbox.error("学员互转，转入和转出账户类型必须一致");
    			return false;
    		}
    		return true;
    	}
    	return false;
    }
    
    // 打印动户变动情况
    $scope.printAccountDynamic = function() {
    	// 转账打印内容
    	erp_printService.printAccountDynamic({
    		"dynamicId" : $scope.dynamicId,
    		"printType" : "05"
    	}, 'erpStudentAccountPrintPanel');
    }

    // 转账处理
    $scope.ZZSubmit = function() {
        
    	if ($scope.checkBeforeSubmit()) {
    		var postParam = {
    			p_input_student_id : $scope.transfer_in_student.id,
    			p_output_student_id : $scope.transfer_out_student.id,
    			p_input_account_type : $scope.transfer_in_student.account_type,
    			p_output_account_type : $scope.transfer_out_student.account_type,
    			p_transfer_money : $scope.transfer_money,
    			p_remark : $scope.remark
	        };

	        $scope.delMessage = 'isdoing...';
	        postParam.accountOperateType = 'transfer';
            var _waitingModal = $uibMsgbox.waiting('转账中，请稍候...');
	        erp_studentAccountService.post(postParam, function(resp) {
                _waitingModal.close();
	            $scope.delMessage = '';
	            if (!resp.error) {
	            	$("#erpStudentAccountPrintPanel").modal('show');
	                $scope.transfer_money = 0;
	                $scope.remark = '';
	                $scope.queryStudentAccount($scope.transfer_in_student.id, 'in');
	                $scope.queryStudentAccount($scope.transfer_out_student.id, 'out');

	                $scope.dynamicId = resp.data.dynamic_id;
	            } else {
	            	$uibMsgbox.error(resp.message);
	            }
	        });
    	}   
    }

    function queryStudentInfo() {
        erp_studentsService.query({
                row_num: 20,
                studentId: $scope.studentId,
                buId: $scope.buId
            },
            function (resp) {
                if (!resp.error && resp.data.length) {
                    $scope.student = resp.data[0];
                    initial();
                } else {
                	$uibMsgbox.error(resp.message);
                }
                //将学生所属团队置空
                $scope.buId = null;
            });
    }
    
    function initial() {
        $scope.transfer_out_student = $scope.student;
        $scope.transfer_out_student.account_type = 1;
        
        $scope.transfer_in_student.student_name='请输入学员姓名';
        $scope.queryStudentAccount($scope.student.id, 'out');

        $('title').text('学员|'+ $scope.student.student_name);
    }

    queryStudentInfo();
}
/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular.module('ework-ui').controller('erp_StudentIndexAttendanceController', [
  '$rootScope',
  '$scope',
  '$cookieStore',
  '$uibModal',
  '$uibMsgbox',
  '$log',
  'erp_studentCourseService',
  'erp_studentCourseTimesService',
  'erp_teacherService',
  'EmployeeManageService',
  'erp_courseService',
  'erp_attendanceService',
  'erp_attendanceDetailsService',
  'erp_attendanceMakeupService',
  'erp_studentsService',
  'erp_studentCourseSchedulingService',
  erp_StudentIndexAttendanceController
]);

function erp_StudentIndexAttendanceController(
  $rootScope,
  $scope,
  $cookieStore,
  $uibModal,
  $uibMsgbox,
  $log,
  erp_studentCourseService,
  erp_studentCourseTimesService,
  erp_teacherService,
  EmployeeManageService,
  erp_courseService,
  erp_attendanceService,
  erp_attendanceDetailsService,
  erp_attendanceMakeupService,
  erp_studentsService,
  erp_studentCourseSchedulingService
) {
  //学员信息
  $scope.student = {};
  $scope.businessType = 1;
  $scope.productLine = 1; // 产品线 1-培英精美班 2-个性化 11-佳音

  $scope.courses = [];
  $scope.ydyList = []; // 1对1考勤列表
  $scope.wfdList = []; // 晚辅导考勤列表
  $scope.wfdAttnDetailList = []; // 晚辅导考勤明细列表
  $scope.wfdAttend = {};
  
  $scope.attend = {
		  checkYdyAllFlag : false
  }

  $scope.isLoading = '';
  $('#pre-info-c').tab('show')
  $scope.changeBusinessType = function(bizType) {
    $scope.businessType = bizType;
    $scope.queryStudentCourse();
  }

  $scope.queryStudentCourse = function() {
    var param = {
      p_studentId: $scope.studentId,
      p_businessType: $scope.businessType,
      p_seacherName: $scope.searchInfo
    };
    $scope.isLoading = 'isLoading';
    if ($scope.businessType == 1) {
      $scope.courses = [];
      erp_studentCourseService.query(param, function(resp) {
        $scope.isLoading = '';
        if (!resp.error) {
          $scope.courses = resp.data;
        } else {
          $uibMsgbox.alert(resp.message);
        }
      });
    } else if ($scope.businessType == 2) {
      erp_studentCourseSchedulingService.query({
        student_id: $scope.studentId
      }, function(resp) {
        $scope.isLoading = '';
        if (!resp.error) {
          $scope.ydyList = resp.data;
        } else {
          $uibMsgbox.error(resp.message);
        }
      });
    } else if ($scope.businessType == 3) {
      erp_studentCourseService.queryWfd(param, function(resp) {
        $scope.isLoading = '';
        if (!resp.error) {
          $scope.wfdList = resp.data;
        } else {
          $uibMsgbox.alert(resp.message);
        }
      });
    }
  };

  $scope.showDetail = function(course) {
    if (course.showDetail) {
      course.showDetail = undefined;
    } else {
      course.showDetail = true;
      queryCourseTimes(course);
    }
  }

  function queryCourseTimes(course) {
    var param = {};
    param.courseId = course.ID;
    param.studentId = $scope.studentId;
    course.isLoadingTimes = true;
    erp_studentCourseTimesService.query(param, function(resp) {
      course.isLoadingTimes = false;
      if (!resp.error) {
        course.courseTimes = resp.data;
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

    //高级参数start

    $scope.paramSettingsListOrigin = [
        {   id:null,
            courseId:null,
            courseName : '学管师',
            courseVal:'',
            courseKey:'course_manager',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'',
            extandVal4:'',
            remark:''
        },{
            id:null,
            courseId:null,
            courseName : '中文老师',
            courseVal:'',
            courseKey:'course_tearcher_cn',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'课时长度',
            extandVal4:'',
            remark:''
        },{
            id:null,
            courseId:null,
            courseName : '外文老师',
            courseVal:'',
            courseKey:'course_tearcher_en',
            courseCfgScope:1,
            courseTime:null,
            extandVal1:null,
            extandVal2:null,
            extandVal3:'课时长度',
            extandVal4:'',
            remark:''
        }
    ];

    $scope.paramSettingsList =  _.cloneDeep($scope.paramSettingsListOrigin);
    $scope.queryParam = {};
    $scope.changeSearchInfo = function(paramSetting){
        if(paramSetting.courseKey == 'course_manager') {
            queryEmployeeInfo();
        } else {
            queryTeacher();
        }
    }


    function queryTeacher(){
        var param = {};
        if($scope.queryParam.search_info){
            param.search_info = $scope.queryParam.search_info;
        }
        $scope.isLoadingDataList = 'isLoadingDataList';
        $scope.queryParam.dataList = [];
        erp_teacherService.page(param,function(resp){
            $scope.isLoadingDataList = '';
            if(!resp.error){
                $scope.queryParam.dataList = $.map(resp.data,function(n,i){
                    n.name = n.teacher_name;
                    return n;
                });
            }else{
                $uibMsgbox.alert(resp.data);
            }
        });
    }

    function queryEmployeeInfo(){
        var param = {};
        if($scope.queryParam.search_info){
            param.searchInfo = $scope.queryParam.search_info;
        }
        $scope.isLoadingDataList = 'isLoadingDataList';
        $scope.queryParam.dataList = [];
        EmployeeManageService.queryEmployeeInfo(param,function(resp){
            $scope.isLoadingDataList = '';
            if(!resp.error){
                $scope.queryParam.dataList = $.map(resp.data,function(n,i){
                    n.name = n.EMPLOYEE_NAME;
                    n.encoding = n.ENCODING;
                    n.id = n.ID;
                    return n;
                });
            }else{
                $uibMsgbox.alert(resp.data);
            }
        });
    }

    $scope.isOpenParamSettings = false;
    $scope.openParamSettingsPanel = function(schedulingId,course_id){
        $scope.paramSettingsList = {};
        $scope.currentHighParam =  {
            schedulingId : schedulingId,
            course_id : course_id
        };
        $scope.isOpenParamSettings = true;
        queryCourseParamSettings(schedulingId,course_id);
    };
    $scope.closeParamSettingsPanel = function(){
        $scope.isOpenParamSettings = false;
        $scope.currentHighParam = null;
    };
    function queryCourseParamSettings(schedulingId,course_id){
        var param = {};
        param.schedulingId = schedulingId;
        $scope.isQueryCourseParamSettings = 'isQueryCourseParamSettings';
        //先查询课次级别的参数配置
        erp_courseService.querySchedulingTimeAssist(param,function(resp){
            if(!resp.error){
                var data = resp.data;
                if(data&&data.length){
                    $scope.isQueryCourseParamSettings = '';
                    $scope.paramSettingsList = data;
                }else{
                    //查询课程级别的参数配置
                    var param = {};
                    param.courseId = course_id;
                    erp_courseService.querySchedulingAssist(param,function(resp){
                        $scope.isQueryCourseParamSettings = '';
                        if(!resp.error){
                            var data = resp.data;
                            if(data&&data.length){
                                $scope.paramSettingsList = data;
                            } else {
                                $scope.paramSettingsList =  _.cloneDeep($scope.paramSettingsListOrigin);
                            }
                        }else{
                            $uibMsgbox.error(resp.message);
                        }
                    });
                }
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.selectParam = function(paramSetting,data){
        paramSetting.courseVal = data.id + '';
        paramSetting.courseValName = data.name;
    }

    $scope.saveParamSettings = function(){
        $uibMsgbox.confirm('修改高级参数，不会改变历史考勤记录，如果需要变更历史，请置空后重新考勤，是否继续？', function (res) {
            if (res == 'yes') {
                if($scope.paramSettingsList&&$scope.paramSettingsList.length){
                    $.each($scope.paramSettingsList,function(i,p){
                        p.schedulingId = $scope.currentHighParam.schedulingId;
                    });
                    var param = {};
                    param.schedulingId = $scope.currentHighParam.schedulingId;
                    param.schedulingAssistList =   $scope.paramSettingsList;
                    $scope.isSubmit = 'saveCourseParamSettings';
                    erp_courseService.updateSchedulingTimeAssist(param,function(resp){
                        $scope.isSubmit = '';
                        if(!resp.error){
                            $uibMsgbox.alert("保存成功！");
                            $scope.closeParamSettingsPanel();
                        }else{
                            $uibMsgbox.alert(resp.message);
                        }
                    });
                }
            }
        })
    }

    $scope.changeHourLen = function(paramSetting) {
        if(!paramSetting.courseVal) {
            paramSetting.extandVal1 = null;
            paramSetting.extandVal2 = null;
        }
    }
    //高级参数 end

  //检查所属地区是否属于泉州和合肥
  $scope.checkCity = function(attend) {
    return attend.city_id == 9 || attend.city_id == 7;
  }

  $scope.courseSchedulingTeacherChange = function(attend) {
    attend.teacherList = undefined;
    if (!attend.teacher_name) {
      return;
    }
    attend.isteacherLoading = 'loading...';
    erp_teacherService.query({
      teacher_name: attend.teacher_name,
      status: 1
    }, function(res) {
      attend.isteacherLoading = '';
      if (!res.error) {
        attend.teacherList = res.data;
      } else {
        $uibMsgbox.alert(res.message);
      }
    });
  };

  $scope.changeCourseSchedulingTeacher = function(attend, teacher) {
    attend.teacher_id = teacher.id;
    attend.teacher_name = teacher.teacher_name;
    attend.teacher_encoding = teacher.encoding;
    attend.teacherList = undefined;
  };


  $scope.win_change_student_infoDownListGrade = function() {
    if ($scope.win_change_student_info.grades) {
      $scope.win_change_student_info.show_grades = $scope.win_change_student_info.grades;
    }
  };

  $scope.win_change_student_infoShowGradeSelected = function(grade) {
    $scope.win_change_student_info.GRADE_NAME = grade.GRADE_NAME;
    $scope.win_change_student_info.grade_id = grade.GRADE_ID;
    $scope.win_change_student_info.show_grades = [];
  };

  $scope.changeAttendType = function(attend, attendType) {
    attend.attend_type = attendType;
  }

  /**
   * 考勤保存
   * @param attend
   * @param course
   */
  $scope.saveAttendance = function(attend, course) {
    var attendSubmit = {};
    attendSubmit.attendance_id = attend.attendance_id;
    attendSubmit.attendType = attend.attend_type;
    attendSubmit.schedulingId = attend.SCHEDULINGID;
    attendSubmit.courseDate = attend.course_date;
    attendSubmit.lock_status = attend.lock_status;
    attendSubmit.studentId = $scope.studentId;
    attendSubmit.teacherId = attend.teacher_id;
    attendSubmit.order_encoding = attend.order_encoding;
    attendSubmit.studentName=attend.student_name;
    if (attend.remark) {
      attendSubmit.remark = attend.remark;
      if ((attendSubmit.remark + "").length > 100) {
        attendSubmit.remark = (attendSubmit.remark + "").substring(0, 100);
      }
    }
    erp_attendanceService.post(attendSubmit, function(response) {
      if (!response.error) {
        attend.attend_type = attend.attend_type;
        attend.attend_date = Format('yyyy-MM-dd', new Date());
        attend.oldAttendType = attend.attend_type;
        $uibMsgbox.alert("考勤成功！");
        queryCourseTimes(course);
      } else {
        $uibMsgbox.alert(response.message);
      }
    });
  };

  /*课次考勤明细_start*/
  $scope.showAttentDetail = function(attend, course) {
    $scope.openDialog = 'open.dialog.attendDetails';
    $scope.attDetailsLoad = 'loading';
    $scope.attDetailsResult = [];
    //查询考勤历史数据
    erp_attendanceDetailsService.query({
        student_id: $scope.studentId,
        scheduling_id: attend.SCHEDULINGID
      },
      function(resp) {
        if (!resp.error) {
          if (resp.data) {
            for (var i = 0; i < resp.data.length; i++) {
              resp.data[i].course_times = attend.course_times;
              resp.data[i].course_date = attend.course_date;
              $scope.attDetailsResult.push(resp.data[i]);
            }
          }
        }
        $scope.attDetailsLoad = '';
      });
  }

  $scope.closeAttentDetail = function() {
    $scope.openDialog = '';
  }
  
  $scope.closeExtralesson = function() {
	    $scope.openDialog = '';
  }

  /*补课——start*/
  $scope.selectAttend = {};
  $scope.teach = {};
  $scope.extralesson = function(attend, teach) {
    $scope.attDetailsResult = [];
    $scope.phone = $scope.student.phone;
    $scope.selectAttend = attend;
    $scope.selectCourse_id = teach.course_id;
    var param = {};
    param.scheduling_id = attend.SCHEDULINGID;
    erp_attendanceMakeupService.query(param, function(resp) {
      if (!resp.error) {
        //if (resp.data.length == 0) {
        //  alert("该课程视频未上传，请联系相关人员上传视频~");
        //  return;
        //} else {
          $scope.openDialog = 'open.dialog.extralesson';
          $scope.attDetailsLoad = 'loading';
        //}
      }
    });
  }

  /*晚辅导考勤明细_start*/
  $scope.showWfdAttentDetail = function(wfd) {
    $uibModal.open({
      size: 'lg',
      templateUrl: 'templates/block/modal/student-attendance-wfd.modal.html',
      controller: 'erp_studentWfdAttendModalController',
      resolve: {
        studentId: function () {
          return $scope.studentId
        },
        wfdDetail: function () {
          return wfd
        }
      }
    })
  }

  /*晚辅导考勤_start*/
  $scope.handleWfdAttend = function(attendType) {
      
    }
    /*晚辅导考勤_end*/

  /* 1对1考勤_start */
  /*
   * 批量操作
   * @param operate 操作类型 21-考勤 23-排课取消
   */
  $scope.ydyBatchAttend = function(operate) {
    var attendList = [];
    $.each($scope.ydyList, function(idx, ydy) {
    	if (ydy.selectFlag) {
    		attendList.push(ydy);
    	}
    });
    
    if ($scope.checkBeforeYdyAttend(attendList, operate)) {
      $scope.handleYdyAttend(attendList, operate);
    }
  }
  
  $scope.onYdyCheckAll = function() {
	  if ($scope.ydyList && $scope.ydyList.length > 0) {
			$.each($scope.ydyList, function(idx, ydy) {
				if ($scope.attend.checkYdyAllFlag) {
					ydy.selectFlag = true;
				} else {
					ydy.selectFlag = false;
				}
			});
	  }
  }

  $scope.checkBeforeYdyAttend = function(attendList, operate) {
    if (!attendList || attendList.length == 0) {
      $uibMsgbox.error("请选择考勤记录！");
      return false;
    }

    var idList = [];
    $.each(attendList, function(idx, attend) {
      if (attend.attend_type == operate) {
        idList.push(attend.id);
      } else {
        attend.attend_type = operate;
      }
    });

    if (idList.length > 0) {
      var errMsg = '考勤单号[' + idList.join(',') + ((operate == 21) ? ']已正常上课,不能再次考勤！' : ']已排课取消，不能再次取消！');
      $uibMsgbox.error(errMsg);
      return false;
    }

    return true;
  }

  // 考勤置空
  $scope.cancelYdyAttend = function(attend) {
      if (attend.attend_type != 21) {
        $uibMsgbox.error("该记录未考勤，不能置空");
        return;
      }

      attend.attend_type = 20;
      $scope.handleYdyAttend([attend], 20);
    }
    // 排课取消
  $scope.cancelYdySched = function(attend) {
    if (attend.attend_type == 23) {
      $uibMsgbox.error("该记录已排课取消，不能再次排课取消");
      return;
    }

    attend.attend_type = 23;
    $scope.handleYdyAttend([attend], 23);
  }

  $scope.handleYdyAttend = function(attendList, operate) {
      erp_attendanceService.ydyAttend(attendList, function(resp) {
        if (!resp.error) {
          var msg = (operate == '21') ? '考勤成功' : ((operate == 20) ? '置空成功' : '排课取消成功');
          $uibMsgbox.alert(msg);
          $scope.queryStudentCourse();
        } else {
          $uibMsgbox.error(resp.message);
        }
      });
    }
    /* 1对1考勤_end */

  $scope.saveExtralesson = function() {
    if (isEmpty($("#phone").val())) {
      $uibMsgbox.alert("手机号码不能为空");
      return;
    }
    if (isEmpty($("#elStartDate").val())) {
      $uibMsgbox.alert("开始时间不能为空");
      return;
    }
    if (isEmpty($("#elEndDate").val())) {
      $uibMsgbox.alert("截止时间不能为空");
      return;
    }

    var elStartDate = $("#elStartDate").val();
    var elEndDate = $("#elEndDate").val();
    var param = {};
    param.scheduling_id = $scope.selectAttend.SCHEDULINGID;
    param.order_course_id = $scope.selectAttend.order_detail_id;
    param.status = '1';
    param.valid_start_date = elStartDate;
    param.valid_end_date = elEndDate;
    param.student_id = $scope.studentId;
    param.phone = $("#phone").val();
    $scope.attDetailsLoad = 'loading';
    /*预约校验*/
    erp_attendanceMakeupService.post(param, function(resp) {
      if (!resp.error) {
        $uibMsgbox.alert('预约补课完成,预约码为【' + resp.activation_code + '】', function() {
          $scope.openDialog = '';
      });
      } else {
        $uibMsgbox.alert(resp.message, function() {
          $scope.openDialog = '';
      });
      }
    });
    
  }

  /*补课——end*/

  $scope.studentId = $("#rootIndex_studentId").val();

  function queryStudentInfo() {
    erp_studentsService.query({
        row_num: 20,
        studentId: $scope.studentId
      },
      function(resp) {
        if (!resp.error && resp.data.length) {
          $scope.student = resp.data[0];
          $scope.productLine = resp.data[0].product_line;
          initial();
        } else {
          $uibMsgbox.alert(resp.message);
        }
      });
  }

  function initial() {
    $scope.queryStudentCourse();

    $('title').text('学员|' + $scope.student.student_name);
  }

  queryStudentInfo();
}

/**
 * 晚辅导考勤明细控制器
 */
angular.module('ework-ui').controller('erp_studentWfdAttendModalController', [
  '$rootScope',
  '$scope',
  '$log',
  '$uibModalInstance',
  '$uibMsgbox',
  'studentId',
  'wfdDetail',
  'erp_attendanceDetailsService',
  erp_studentWfdAttendModalController
])

function erp_studentWfdAttendModalController(
  $rootScope,
  $scope,
  $log,
  $uibModalInstance,
  $uibMsgbox,
  studentId,
  wfdDetail,
  erp_attendanceDetailsService
) {
  $scope.wfdAttend = {
    course_date: moment().format('YYYY-MM-DD'),
    remark: ''
  }

  $scope.wfdAttnDetailList = [];
  /**
   * [handleWfdAttend description]
   * @param  {[type]} attendType 30: 置空，31：正常上课
   * @return {[type]}            [description]
   */
  $scope.handleWfdAttend = function (attendType, wfdAttnDetail) {
    erp_attendanceDetailsService.wfdAttn({
        studentId: studentId,
        attendType: attendType,
        counselorId: wfdDetail.COUNSELOR_ID,
        orderCourseId: wfdDetail.ORDER_COURSE_ID,
        courseDate: $scope.wfdAttend.course_date,
        remark: $scope.wfdAttend.remark
      }, function(resp) {
        if (!resp.error) {
          $scope.getWfdAttendDetailList();
        } else {
          $uibMsgbox.alert(resp.message);
        }
      });
  }
  $scope.handleWfdAttendModify = function (attendType, wfdAttnDetail) {
    erp_attendanceDetailsService.wfdAttn({
        studentId: studentId,
        attendType: attendType,
        counselorId: wfdDetail.COUNSELOR_ID,
        orderCourseId: wfdDetail.ORDER_COURSE_ID,
        courseDate: wfdAttnDetail.COURSE_DATE,
        remark: wfdAttnDetail.REMARK || ''
      }, function(resp) {
        if (!resp.error) {
          $scope.getWfdAttendDetailList();
        } else {
          $uibMsgbox.alert(resp.message);
        }
      }); 
  }
  $scope.getWfdAttendDetailList = function(){
    var _uibWaitingModal = $uibMsgbox.waiting('数据加载中，请稍候');
    erp_attendanceDetailsService.queryWfd({
      p_student_id: studentId,
      p_order_id: wfdDetail.ID
    }, function(resp) {
      _uibWaitingModal.close();
      if (!resp.error) {
          $scope.wfdAttnDetailList = resp.data;
      } else {
        $uibMsgbox.alert(resp.message);
      }
    });
  }

  $scope.getWfdAttendDetailList();
}

/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_StudentBjkController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_timeSeasonService',
        'erp_subjectService',
        'erp_studentOrdersBJKService',
        'erp_studentsService',
        erp_StudentBjkController]);

function erp_StudentBjkController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_timeSeasonService,
    erp_subjectService,
    erp_studentOrdersBJKService,
    erp_studentsService) {
    //学员信息
    $scope.student = {};

    $scope.isLoading = '';
    $scope.seasons = [];
    $scope.selectedSeason = {id:-1};
    $scope.selectedSubject ={id:-1};
    $scope.selectSeason = function(){
        queryBJK();
    };
    $scope.selectSubject = function(){
        // $scope.selectedSubject = subject;
        queryBJK();
    };

    function queryTimeSeason(){
        erp_timeSeasonService.list({},function(resp){
            if(!resp.error){
                $scope.seasons =  resp.data;
                if($scope.seasons){
                    $scope.seasons.unshift({
                        id:-1,
                        course_season_name:'全部'
                    });
                    $scope.selectedSeason = $scope.seasons[0];
                }

            }
        });
    }

    function querySubject(){
        erp_subjectService.querySelectDatas({},function(resp){
            if(!resp.error){
                $scope.subjects =  resp.data;
                if($scope.subjects){
                    $scope.subjects.unshift({
                        id:-1,
                        name:'全部'
                    });
                    $scope.selectedSubject = $scope.subjects[0];
                }

            }
        });
    }


    function queryBJK(){
        var param = {
                season:$scope.selectedSeason.id,
                subject:$scope.selectedSubject.id,
                studentId:$scope.studentId
        };
        $scope.isLoading='isLoading';
        erp_studentOrdersBJKService.query(param,function(resp){
            $scope.isLoading='';
            if(!resp.error){
                $scope.orderBJK = resp.data;
            }else{
                alert(resp.message);
            }
        });
    }

    $scope.studentId = $("#rootIndex_studentId").val();

    function queryStudentInfo(){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                    alert(resp.message);
                }
            });
    }
    function initial(){
        queryTimeSeason();
        querySubject();
        queryBJK();
        $('title').text('学员|'+ $scope.student.student_name);
    }

    queryStudentInfo();

}
"use strict";
angular.module('ework-ui').controller('erp_studentCenterContactController', [
  '$scope',
  '$log',
  '$uibMsgbox',
  'erp_studentContactRelationService',
  'erp_studentContactService',
  'erp_studentsService',
  erp_studentCenterContactController
]);

function erp_studentCenterContactController(
  $scope,
  $log,
  $uibMsgbox,
  erp_studentContactRelationService,
  erp_studentContactService,
  erp_studentsService
) {
  $scope.studentId = $("#rootIndex_studentId").val();

  $scope.optype = 'add';
  // 学员信息
  $scope.student = {};
  // 联系人信息
  $scope.studentContact = {};
  // 联系人列表
  $scope.RelationList = [];
  // 联系人关系列表
  $scope.contactRelList = [];

  $scope.toAddStudentContact = function() {
    $scope.optype = 'add';
    $scope.studentContact = {};
    showContactModal();
  }

  $scope.toUpdate = function(contact) {
  	$scope.optype = 'edit';
    $scope.studentContact = contact;
    if ($scope.studentContact && $scope.studentContact.relation) {
      $log.log("begin to query option,relation is " + $scope.studentContact.relation);
      $scope.studentContact.relationModel = getRelationOption($scope.studentContact.relation);
    }
  	showContactModal();
  };

  $scope.toDefault = function(contact) {
    erp_studentContactService.updateDefaultContact({
      id:contact.student_id,
      phone:contact.link_phone,
      contact_id:contact.id,
      relation_name:contact.relation_name
    },function(resp) {
      if (!resp.error) {
        $uibMsgbox.alert("设置成功！");
        queryContact();
      } else {
        $uibMsgbox.error(resp.message);
      }
    })
  };

  $scope.deleteConfirm = function(contact) {
    var contact_ids = [];
    contact_ids.push(contact.id);
    erp_studentContactService.del({
      contact_id: contact_ids,
      studentId:$scope.studentId
    }).$promise.then(function(resp) {
      if (!resp.error) {
        $uibMsgbox.alert("删除成功！");
        queryContact();
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  };


  $scope.onSaveContact = function() {
    if (!isValid()) {
      return false;
    }

    saveStudentContact().then(function(resp) {
      if (!resp.error) {
        $uibMsgbox.alert($scope.optype == 'add' ? '添加成功' : '修改成功！');
        $scope.studentContact = {};
        hideContactModal();
        queryContact();
      } else {
        $uibMsgbox.alert(resp.message);
      }
    })
  }

  $scope.onCloseModal = function() {
    hideContactModal();
  }

  function showContactModal() {
    $('#studentContactModal').modal('show');
  }

  function hideContactModal() {
    $('#studentContactModal').modal('hide');  	
  }

  function isValid() {
    if (!$scope.studentContact.link_phone || $scope.studentContact.link_phone == '输入联系人号码') {
      $uibMsgbox.alert("请输入联系人号码！");
      return false;
    }
    if (isEmpty($scope.studentContact.relationModel)) {
      $uibMsgbox.alert('关系不能为空');
      return false;
    }
    if (!Validator.mobile.test($scope.studentContact.link_phone)) {
      $uibMsgbox.alert('电话格式不正确');
      return false;
    }
    if ($scope.studentContact.link_name == '输入联系人姓名') {
      $scope.studentContact.link_name = '';
      return false;
    }
    return true;
  }

  function saveStudentContact() {
    $scope.studentContact.student_id = $scope.studentId;
    var contact = {};
    contact.student_id = $scope.studentId;
    contact.id = $scope.studentContact.id;
    contact.link_name = $scope.studentContact.link_name;
    contact.relation = $scope.studentContact.relationModel.value;
    contact.link_phone = $scope.studentContact.link_phone;
    contact.remark = $scope.studentContact.remark;

    return $scope.optype == 'add' ?
    		erp_studentContactService.post(contact).$promise
    	: erp_studentContactService.put(contact).$promise
  }
  /*
   * 查询联系人关系类型
   */
  function queryRelationList() {
    erp_studentContactRelationService.query({}, function(resp) {
      if (!resp.error) {
        $scope.RelationList = resp.data;
        if ($scope.RelationList && $scope.RelationList[0]) {
          $scope.studentContact.relationModel = $scope.RelationList[0].value;
        }
      }
    });
  }

  function getRelationOption(relation) {
    var Option = null;
    $.each($scope.RelationList, function(i, row) {
      if (row.value + '' == relation) {
        Option = row;
        $log.log("found option,see: option.value is " + row.value + ",label is " + row.label);
      }
    });
    return Option;
  }

  /*
   * 查询联系人关系列表
   */
  function queryContact() {
    erp_studentContactService.query({student_id: $scope.studentId}, function(resp) {
      if (!resp.error) {
        $scope.contactRelList = resp.data;
      }
    });
  }

  /**
   * 查询学生信息
   * @return {[type]} [description]
   */
  function queryStudentInfo() {
    erp_studentsService.query({
        row_num: 20,
        studentId: $scope.studentId
      },
      function(resp) {
        if (!resp.error && resp.data.length) {
          $scope.student = resp.data[0];
    			$('title').text('学员|' + $scope.student.student_name);
    			queryContact();
        } else {
          alert(resp.message);
        }
      });
  }
  $scope.defalutContactName = function(contact){
    if(_.some($scope.RelationList,{label:contact.link_name })|| !contact.link_name){
      contact.link_name = _.result(_.find($scope.RelationList, function(relation) {
        return relation.value == contact.relationModel.value;
      }), 'label');
    }
  }
  function init() {
    queryRelationList();
    queryStudentInfo();
  }

  init();
}

"use strict";
angular.module('ework-ui').controller('erp_studentCenterCounselorController', [
  '$scope',
  '$log',
  '$uibModal',
  '$uibMsgbox',
  'erp_studentCounselorService',
  'erp_employeeService',
  'erp_studentsService',
  erp_studentCenterCounselorController
]);

function erp_studentCenterCounselorController(
  $scope,
  $log,
  $uibModal,
  $uibMsgbox,
  erp_studentCounselorService,
  erp_employeeService,
  erp_studentsService
) {
  // 学员ID
  $scope.studentId = $("#rootIndex_studentId").val();
  // 页面模块显示控制
  $scope.viewCtrl = {
    showEditCounselor: false,
    showEditGovern: false
  }
  // 学员信息
  $scope.student = {}
  // 当前咨询师
  $scope.counselor = {
    start_date: '',
    end_date: ''
  }
  // 暂存的咨询师数据
  $scope.counselorCopy = {}
  // 历任咨询师列表
  $scope.historyCounselorList = []
  // 当前学管师
  $scope.govern = {
    start_date: '',
    end_date: ''
  }
  // 暂存的学管师数据
  $scope.governCopy = {}
  // 历任学管师列表
  $scope.historyGovernList = []
  
  // 编辑咨询师
  $scope.showEditCounselor = function () {
    angular.copy($scope.counselor, $scope.counselorCopy);
    $scope.viewCtrl.showEditCounselor = true;
  }

  // 显示历任咨询师
  $scope.showHistoryCounselor = function () {
    openHistoryCounselorModal({
      title: '历任咨询师',
      type: 1,
      studentId: $scope.studentId
    })
  }

  // 取消咨询师修改
  $scope.cancelCounselorEdit = function () {
    angular.copy($scope.counselor, $scope.counselorCopy);
    $scope.viewCtrl.showEditCounselor = false;
  }

  // 保存咨询师修改
  $scope.saveCounselor = function () {
    var start_date = $scope.counselorCopy.start_date;
    var end_date = $scope.counselorCopy.end_date;

    if (isEmpty($scope.counselorCopy.name) || isEmpty($scope.counselorCopy.counselor_id) || isEmpty($scope.counselorCopy.encoding)) {
      $uibMsgbox.alert("咨询师不能为空");
      return;
    }
    if (isEmpty(start_date) || isEmpty(end_date) || !checkStartEndTime(start_date, end_date)) {
      $uibMsgbox.alert("开始日期和结束日期错误");
      return;
    }
    var counselorInfo = {};
    counselorInfo.id = $scope.counselor.id;
    counselorInfo.student_id = $scope.studentId;
    counselorInfo.counselor_type = 1;
    counselorInfo.is_valid = 1;
    counselorInfo.start_date = start_date;
    counselorInfo.end_date = end_date;
    counselorInfo.counselor_id = $scope.counselorCopy.counselor_id;
    counselorInfo.encoding = $scope.counselorCopy.encoding;
    counselorInfo.name = $scope.counselorCopy.name;
    counselorInfo.remark = $scope.counselorCopy.remark;

    var waitModal = $uibMsgbox.waiting('保存中，请稍候...')
    erp_studentCounselorService.post(counselorInfo).$promise.then(function(resp) {
      waitModal.close();
      if (!resp.error) {
        $uibMsgbox.alert("添加成功！");
        angular.copy($scope.counselorCopy, $scope.counselor)
        $scope.viewCtrl.showEditCounselor = false;
        getCounselor($scope.student.id);
      } else {
        $uibMsgbox.alert(resp.message);
      }
    }, function(resp) {
      waitModal.close();
      console.error(resp);
      $uibMsgbox.error('请求失败，请联系管理员！');
    })
    //if(counselorInfo.id && counselorInfo.counselor_id == $scope.counselor.counselor_id) {
    //  erp_studentCounselorService.put(counselorInfo, function(resp) {
    //    if (!resp.error) {
    //      $uibMsgbox.alert("修改成功！");
    //      angular.copy($scope.counselorCopy, $scope.counselor)
    //      $scope.viewCtrl.showEditCounselor = false;
    //      getCounselor($scope.student.id);
    //    } else {
    //      $uibMsgbox.alert(resp.message);
    //    }
    //  })
    //} else {
    //  erp_studentCounselorService.post(counselorInfo, function(resp) {
    //    if (!resp.error) {
    //      $uibMsgbox.alert("修改成功！");
    //      angular.copy($scope.counselorCopy, $scope.counselor)
    //      $scope.viewCtrl.showEditCounselor = false;
    //      getCounselor($scope.student.id);
    //    } else {
    //      $uibMsgbox.alert(resp.message);
    //    }
    //  })
    //}


  }

  // 显示修改学管师对话框
  $scope.showEditGovern = function () {
    angular.copy($scope.govern, $scope.governCopy)
    $scope.viewCtrl.showEditGovern = true;
  }

  // 显示历任学管师
  $scope.showHistoryGovern = function () {
    openHistoryCounselorModal({
      title: '历任学管师',
      type: 2,
      studentId: $scope.studentId
    })
  }

  // 取消学管师修改
  $scope.cancelGovernEdit = function () {
    angular.copy($scope.govern, $scope.governCopy);
    $scope.viewCtrl.showEditGovern = false;
  }

  // 保存学管师修改
  $scope.saveGovern = function () {
    var start_date = $scope.governCopy.start_date;
    var end_date = $scope.governCopy.end_date;
    
    if (isEmpty($scope.governCopy.name) 
      || isEmpty($scope.governCopy.counselor_id) 
      || isEmpty($scope.governCopy.encoding)) {
      $uibMsgbox.alert("学管师不能为空");
      return;
    }
    
    if (isEmpty(start_date) 
      || isEmpty(end_date) 
      || !checkStartEndTime(start_date, end_date)) {
      $uibMsgbox.alert("开始日期和结束日期错误");
      return;
    }
    var governInfo = {};
    governInfo.id = $scope.govern.id;
    governInfo.student_id = $scope.studentId;
    governInfo.counselor_type = 2;
    governInfo.is_valid = 1;
    governInfo.start_date = start_date;
    governInfo.end_date = end_date;
    /*$scope.counselor中ed_开头字段装载入governInfo*/
    governInfo.counselor_id = $scope.governCopy.counselor_id;
    governInfo.encoding = $scope.governCopy.encoding;
    governInfo.name = $scope.governCopy.name;
    governInfo.remark = $scope.governCopy.remark;

    var waitModal = $uibMsgbox.waiting('保存中，请稍候...')
    erp_studentCounselorService.post(governInfo)
      .$promise.then(function(resp) {
        waitModal.close();
        if (!resp.error) {
          $uibMsgbox.alert("添加成功！");
          $scope.govern_action = 1;
          angular.copy($scope.governCopy, $scope.govern)
          $scope.viewCtrl.showEditGovern = false;
          getGovern($scope.student.id);
        } else {
          $uibMsgbox.error(resp.message);
        }
      }, function () {
        waitModal.close()
      })

    //if(governInfo.id && governInfo.counselor_id == $scope.govern.counselor_id) {
    //  erp_studentCounselorService.put(governInfo, function(resp) {//添加
    //    if (!resp.error) {
    //      $uibMsgbox.alert("修改成功！");
    //      $scope.govern_action = 1;
    //      angular.copy($scope.governCopy, $scope.govern)
    //      $scope.viewCtrl.showEditGovern = false;
    //      getGovern($scope.student.id);
    //    } else {
    //      alert(resp.message);
    //    }
    //  });
    //} else {
    //  erp_studentCounselorService.post(governInfo, function(resp) {
    //    if (!resp.error) {
    //      $uibMsgbox.alert("修改成功！");
    //      $scope.govern_action = 1;
    //      angular.copy($scope.governCopy, $scope.govern)
    //      $scope.viewCtrl.showEditGovern = false;
    //      getGovern($scope.student.id);
    //    } else {
    //      alert(resp.message);
    //    }
    //  });
    //}
  }

  $scope.selectCounselor = function() {
    $scope.openTeachersModal('counselor').result.then(function(teacher) {
      var counselor = $scope.counselorCopy;
      counselor.counselor_id = teacher.id;
      counselor.name = teacher.employee_name;
      counselor.encoding = teacher.encoding;
    }, function() {})
  }

  $scope.selectGovern = function() {
    $scope.openTeachersModal('gover').result.then(function(teacher) {
      var govern = $scope.governCopy;
      govern.counselor_id = teacher.id;
      govern.name = teacher.employee_name;
      govern.encoding = teacher.encoding;
    }, function() {})
  }

  $scope.openTeachersModal = function(type) {
    var counselorType = type == 'counselor' ? 1 : 2;
    var modalTitle = (type == 'counselor' ? '咨询师' : '学管师') + '列表';
    return $uibModal.open({
      size: 'lg',
      templateUrl: 'templates/block/modal/employee-list.modal.html',
      controller: 'erp_employeeListModalController',
      resolve: {
        counselorType: function() {
          return counselorType;
        },
        modalTitle: function() {
          return modalTitle;
        }
      }
    })
  }

  init();

  // 界面初始化
  function init() {
    getStudentInfo().then(function(stu){
      if (stu) {
        initStudent(stu)
        getCounselor(stu.id);
        getGovern(stu.id)
      }
    })
  }
  
  //  学管师的结束时间在开始时间上加两年
  $scope.$watch("governCopy.start_date",function(){
	  var date=new Date($scope.governCopy.start_date);
	  date.setFullYear(date.getFullYear() + 2);
	  date.setDate(date.getDate()-1);
	  $scope.governCopy.end_date=date.format("yyyy-MM-dd", date);
  })
  
  //  咨询师的结束时间在开始时间上加两年
    $scope.$watch("counselorCopy.start_date",function(){
	  var date=new Date($scope.counselorCopy.start_date);
	  date.setFullYear(date.getFullYear() + 2);
	  date.setDate(date.getDate()-1);
	  $scope.counselorCopy.end_date=date.format("yyyy-MM-dd", date);
  })

  // 获取学生信息
  function getStudentInfo(stuId) {
    return erp_studentsService.query({studentId: $scope.studentId}).$promise
      .then(function(resp){
        if (!resp.error && resp.data.length) {
          return resp.data[0];
        } else {
          $uibMsgbox.alert(resp.message);
          return false;
        }
      })
  }

  // 初始化学生信息
  function initStudent(stu) {
    $scope.student = stu;
    $('title').text('学员|' + $scope.student.student_name); 
  }

  // 获取当前咨询师
  function getCounselor(stuId) {
    getStuCurCounselor(stuId, 1).then(function(resp) {
      $scope.counselor = resp || {};
      $scope.viewCtrl.showEditCounselor = !resp;
    })
  }

  // 获取当前学管师
  function getGovern(stuId) {
    getStuCurCounselor(stuId, 2).then(function(resp) {
      $scope.govern = resp || {};
      $scope.viewCtrl.showEditGovern = !resp;
    })
  }

  // 获取当前咨询师/学管师
  function getStuCurCounselor(stuId, counselorType) {
    return erp_studentCounselorService.query({
      student_id: stuId,
      counselor_type: counselorType,
      cur_date: moment().format('YYYY-MM-DD')
    }).$promise.then(function(resp) {
      if (!resp.error && resp.data && resp.data.length) {
        return resp.data[0]
      } else {
        return null
      }
    })
  }

  function modalController (scope) {
    console.log(arguments)
  }

  function openHistoryCounselorModal(conf) {
    return $uibModal.open({
      templateUrl: 'employeeList.html',
      size: 'lg',
      resolve: {
        conf: function () {
          return conf
        }
      },
      controller: [
        '$scope',
        'erp_employeeService',
        'conf',
        function (scope, erp_employeeService, conf) {
          scope.pageConf = {
            itemsPerPage: 10,
            totalItems: 0,
            currentPage: 1,
            onChange: function() {
              query();
            }
          }
          scope.employeeList = [];
          scope.conf = conf;
          function query () {
            erp_studentCounselorService.query({
              status: 1,
              pageSize: scope.pageConf.itemsPerPage,
              currentPage: scope.pageConf.currentPage,
              student_id: conf.studentId,
              counselor_type: conf.type
            }).$promise.then(function(resp) {
              if (!resp.error && resp.data && resp.data.length) {
                scope.employeeList = resp.data;
                scope.pageConf.totalItems = resp.total;
              } else {
                scope.employeeList = []
              }
            })
          } 
          query();
        }]
    })
  }
}

"use strict";
angular.module('ework-ui').controller('erp_studentCenterInfoController', [
  '$rootScope',
  '$scope',
  '$state',
  '$cookieStore',
  '$log',
  '$interval',
  '$uibModal',
  '$uibMsgbox',
  'erp_gradeService',
  'erp_studentsService',
  'erp_studentOrgService',
  'erp_studentsCheckService',
  'erp_studentSchoolService',
  'erp_studentContactService',
  'erp_studentIndexCounselorsService',
  'erp_dictService',
  erp_studentCenterInfoController
]);

function erp_studentCenterInfoController(
  $rootScope,
  $scope,
  $state,
  $cookieStore,
  $log,
  $interval,
  $uibModal,
  $uibMsgbox,
  erp_gradeService,
  erp_studentsService,
  erp_studentOrgService,
  erp_studentsCheckService,
  erp_studentSchoolService,
  erp_studentContactService,
  erp_studentIndexCounselorsService,
  erp_dictService
) {
  $scope.tabPanel = 'basicInfo';
  // 学员信息
  $scope.student = {};
  $scope.studentCopy = {};
  $scope.selectedInfo = {
    school: undefined,
    grade: undefined
  }
  $scope.studentIndexCounselors = {};
  $scope.disModifyDetail = false;
  $scope.SexList = [{ value: 1, label: "男" }, { value: 0, label: "女" }];
  $scope.StudentStatusList = [];


  $scope.StudentContactList = [];

  // 查询学生的联系人列表
  function queryStudentContact() {
    erp_studentContactService.query({ student_id: $scope.studentId }, function(resp) {
      if (!resp.error) {
        $scope.StudentContactList = resp.data;
        if (!isEmpty($scope.student.contact_id)) {
          $scope.student._contact_id = $scope.student.contact_id;
        } else {
          $scope.student._contact_id = $scope.StudentContactList[0].id;
        }
      }
    });
  }
  //推荐人
  $scope.getRecommender = function(searchInfo) {
    return erp_studentsService.query({
      pageSize: 20,
      currentPage: 1,
      searchInfo: searchInfo,
      searchType: searchInfo
    }).$promise.then(function(resp) {
      _.forEach(resp.data, function(item) {
        item.studentShortInfo = item.student_name + '【' + item.branch_name + ',' + (item.grade_name || '') + '】'
      });
      return resp.data;
    })
  }
  //报备人
  $scope.getRecorderList = function(searchInfo) {
    return erp_studentsService.queryRecorder({
      nameOrEncoding: searchInfo
    }).$promise.then(function(resp) {
      return resp.data;
    })
  }

  //学员历史推荐人reference_student_ht_modal
  $scope.queryReferenceStudentHt = function(studentId) {
    erp_studentsService.queryReferenceStudentHt({studentId:studentId},function(resp) {
      if(!resp.error) {
        //显示推荐人历史框
        $scope.referenceStudentList = resp.data;
        $("#reference_student_ht_modal").modal("show");
      } else {
        $uibMsgbox.error(resp.message);
      }
    })
}
  $scope.recorderPaginationConf = {
    currentPage: 1, // 当前页
    totalItems: 0,
    itemsPerPage: 10,
    onChange: function() {
      $scope.queryStudentRecord();
    }
  };

  //查询学员历史报备人信息
  $scope.queryStudentRecord = function(){
    erp_studentsService.queryStudentRecordHt({
      p_studentId:$scope.studentId,
      currentPage:$scope.recorderPaginationConf.currentPage,
      pageSize:$scope.recorderPaginationConf.itemsPerPage
    },function(resp) {
      if(!resp.error) {
        //显示推荐人历史框
        $scope.studentRecorderList = resp.data;
        $scope.recorderPaginationConf.totalItems = resp.total;
      } else {
        $uibMsgbox.error(resp.message);
      }
    })
  }
  //添加报备人
   $scope.recorderStartDate = {};
  $scope.addRecorder = function(){
    if(!$scope.recorder|| !$scope.recorder.ID) {
      $uibMsgbox.warn("请选择报备人");
      return;
    }
    $uibMsgbox.confirm('确认添加报备人？', function(res) {
          if (res == 'yes') {
              var _modalInstance = $uibMsgbox.waiting('添加中，请稍后');
              erp_studentsService.addRecorder({
                  userId:$scope.recorder.ID,
                  studentId:parseInt($scope.studentId),
                  startDate:$scope.recorderStartDate.val
              },function(resp){
                  _modalInstance.close();
                  if(!resp.error) {
                      $scope.recorderStartDate.val = null;
                      $scope.queryStudentRecord();
                  } else {
                      $uibMsgbox.error(resp.message);
                  }
              });
           }
       });
     }
  //学员报备人student_recorder_modal
  $scope.showRecorderModal = function() {
    $scope.queryStudentRecord();
    $("#student_recorder_modal").modal("show");
}
  // 控制修改或返回
  $scope.actionSwitch = function(action, property_name) {
    if (property_name == 'student_name') {
      if (isEmpty($scope.student._student_name) || $scope.student._student_name == $scope.student.student_name)
        $scope.act_student_name = '返回';
      else
        $scope.act_student_name = '确认';
    } else if (property_name == 'sex') {
      if ($scope.student._sex == -1)
        $scope.act_sex = '返回';
      else
        $scope.act_sex = '确认';
    } else if (property_name == 'phone') {
      if (isEmpty($scope.student._contact_id))
        $scope.act_phone = '返回';
      else
        $scope.act_phone = '确认';
    } else if (property_name == 'email') {
      if (isEmpty($scope.student._email))
        $scope.act_email = '返回';
      else
        $scope.act_email = '确认';
    } else if (property_name == 'qq') {
      if (isEmpty($scope.student._qq))
        $scope.act_qq = '返回';
      else
        $scope.act_qq = '确认';
    }
  };

  // 弹出上传头像框
  $scope.showUploadModal = function(teacher) {
    var modalInstance = $uibModal.open({
      // templateUrl : 'uploadHeadModalInstance.html',
      templateUrl: 'templates/block/avatar-upload.html',
      controller: 'blocks_avatarUploadController',
      resolve: {
        onUploadImg: function() {
          return function(base64Img, $uibModalInstance) {
            erp_studentsService.modifyHeadImg({
              id:$scope.student.id.toString(),
              oldPhoto:$scope.student.head_pic,
              photoBase64:base64Img
            },function(resp){
                if(!resp.error) {
                  $scope.student.head_pic=resp.url;
                } else {
                  $uibMsgbox.error(resp.message);
                }
                $uibModalInstance.close(base64Img);
            });
          }
        }
      }
    });
    modalInstance.result.then(function(result) {
    }, function() {
      $log.info('DrawModal dismissed at: ' + new Date());
    })
  };

  // 修改学生信息
  $scope.operStudentInfo = function(action, property_name) {
    // {{ }} 和 input 是隐藏和显示关系 _开头的未输入框内容
    if (property_name == 'student_name') {
      $scope.dis_student_name = !$scope.dis_student_name;
      if (action == '返回') {
        $scope.act_student_name = '修改';
        return;
      } else {
        if (isNotEmpty($scope.student._student_name)) {
          $scope.student.student_name = $scope.student._student_name;
          $scope.act_student_name = '修改';
        } else {
          $scope.act_student_name = '返回';
          $scope.student._student_name = $scope.student.student_name;
          return;
        }
        if ($scope.dis_student_name) {
          $scope.act_student_name = '确认';
          return;
        }
      }
    } else if (property_name == 'sex') {
      $scope.dis_sex = !$scope.dis_sex;
      if (action == '返回') {
        $scope.act_sex = '修改';
        return;
      } else {
        if (isNotEmpty($scope.student._sex) && $scope.student._sex != -1) {
          $scope.student.sex = $scope.student._sex;
          $scope.act_sex = '修改';
        } else {
          $scope.act_sex = '返回';
          $scope.student._sex = $scope.student.sex;
          return;
        }
        if ($scope.dis_sex) {
          $scope.act_sex = '确认';
          return;
        }
      }
    } else if (property_name == 'birthday') {
      $scope.dis_birthday = !$scope.dis_birthday;
      if (isNotEmpty($('#student_birthday').val()))
        $scope.student.birthday = $('#student_birthday').val();
      else
        return;
    } else if (property_name == 'phone') {
      $scope.dis_phone = !$scope.dis_phone;
      if (action == '返回') {
        $scope.act_phone = '修改';
        return;
      } else {
        if (isNotEmpty($scope.student._contact_id))
          if (Validator.natural.test($scope.student._contact_id)) {
            if ($scope.student.contact_id != $scope.student._contact_id) {
              $scope.student.phone_verify = 0;
            }
            // 填充数据
            $scope.student.contact_id = $scope.student._contact_id;
            for (var i = 0; i < $scope.StudentContactList.length; i++) {
              if ($scope.student.contact_id == $scope.StudentContactList[i].id) {
                $scope.student.phone = $scope.StudentContactList[i].link_phone;
                $scope.student.relation_name = $scope.StudentContactList[i].relation_name;
                break;
              }
            }
            $scope.act_phone = '修改';
          } else {
            $scope.dis_phone = !$scope.dis_phone;
            return;
          }
        else {
          $scope.act_phone = '返回';
          $scope.student._phone = $scope.student.contact_id;
          return;
        }
        if ($scope.dis_phone) {
          $scope.act_phone = '确认';
          return;
        }
      }
    } else if (property_name == 'email') {
      $scope.dis_email = !$scope.dis_email;
      if (action == '返回') {
        $scope.act_email = '修改';
        return;
      } else {
        if (isNotEmpty($scope.student._email))
          if (Validator.email.test($scope.student._email)) {
            $scope.student.email = $scope.student._email;
            $scope.act_email = '修改';
          } else {
            $scope.dis_email = !$scope.dis_email;
            return;
          }
        else {
          $scope.act_email = '返回';
          $scope.student._email = $scope.student.email;
          return;
        }
        if ($scope.dis_email) {
          $scope.act_email = '确认';
          return;
        }
      }
    } else if (property_name == 'qq') {
      $scope.dis_qq = !$scope.dis_qq;
      if (action == '返回') {
        $scope.act_qq = '修改';
        return;
      } else {
        if (isNotEmpty($scope.student._qq))
          if (Validator.qq.test($scope.student._qq)) {
            $scope.student.qq = $scope.student._qq;
            $scope.act_qq = '修改';
          } else {
            $scope.dis_qq = !$scope.dis_qq;
            return;
          }
        else {
          $scope.act_qq = '返回';
          $scope.student._qq = $scope.student.qq;
          return;
        }
        if ($scope.dis_qq) {
          $scope.act_qq = '确认';
          return;
        }
      }
    }

    $scope.saveStudent();
  };

  $scope.saveStudent = function(callback) {
    var studentInfo = {};
    studentInfo.id = $scope.student.id;
    studentInfo.head_pic = $scope.student.head_pic;
    studentInfo.student_name = $scope.student.student_name;
    studentInfo.sex = $scope.student.sex;
    studentInfo.birthday = $scope.student.birthday;
    studentInfo.student_status = $scope.student.student_status;
    studentInfo.address = $scope.student.address;
    studentInfo.qq = $scope.student.qq;
    studentInfo.phone = $scope.student.phone;
    studentInfo.contact_id = $scope.student.contact_id;
    studentInfo.relation_name = $scope.student.relation_name;
    studentInfo.email = $scope.student.email;
    studentInfo.grade_id = $scope.student.grade_id;
    studentInfo.attend_school_id = $scope.student.attend_school_id;
    studentInfo.city_id = $scope.student.city_id;
    studentInfo.code = $scope.student.code;
    studentInfo.phone_verify = $scope.student.phone_verify;
    studentInfo.student_id_old =  $scope.student.recommender.id;
    //不校验学员姓名是否重复
    //erp_studentsCheckService.check(studentInfo, function(resp) {
    //  if (!resp.error) {
    //  } else {
    //    $uibMsgbox.alert(resp.message);
    //  }
    //});
    erp_studentsService.update(studentInfo, function(result) {
      if (result.error) {
        $uibMsgbox.warn(result.message,function(){
            window.location = window.location.toString().substring(0,window.location.toString().indexOf(window.location.search))+ '#/students/studentsSearch';
            // $state.go('studentsSearch', {
            //     "href": "templates/erp/student/students.html",
            //     "path": "/students/studentsSearch"
            // });
        });
      } else {
        $scope.student = result.data;

        for (var i = 0; i < $scope.SexList.length; i++) {
          if ($scope.SexList[i].value == $scope.student.sex)
            $scope.student.sex_name = $scope.SexList[i].label;
        }
        for (var i = 0; i < $scope.StudentStatusList.length; i++) {
          if ($scope.StudentStatusList[i].value == $scope.student.student_status)
            $scope.student.student_status_name = $scope.StudentStatusList[i].label;
        }

        $scope.student._attend_school = $scope.student.attend_school_name;
        $scope.student._grade = $scope.student.grade_name;

        $rootScope.currentStudent = $scope.student;
        $cookieStore.put(
            "student",
            $scope.student);
        $uibMsgbox.alert("修改成功!", function() {
          if (typeof callback == 'function') {
            callback($scope.student);
          }
        });
        initial()
      }
    });
  }

  $scope.getSchools = function(schoolName) {
    return erp_studentSchoolService.query({
      pageSize: 20,
      currentPage: 1,
      school_name: schoolName
    }).$promise.then(function(resp) {
      return resp.data
    })
  }
  $scope.getGrades = function(gradeName) {
    return erp_gradeService.query({
      pageSize: 20, // 每页显示条数
      currentPage: 1, // 要获取的第几页的数据
      p_grade_name: gradeName
    }).$promise.then(function(resp) {
      return resp.data
    });
  }

  $scope.initStudentInfoDialog = function() {
    $('div#studentInfoDialog #_student_id').val($scope.studentId);
  }

  $scope.updateHead = function() {
    $('div#studentInfoDialog #pic').attr('src',
      genWebContext() + "/common/js/qiniu/upload.jsp");
    $('div#studentInfoDialog').show(0);
  }

  $scope.closeStudentInfoDialog = function() {
    $('div#studentInfoDialog').hide(0);
  }


  $scope.selectPanel = function(tab) {
    $scope.tabPanel = tab;
  };


  $scope.downloadQr = function() {
    window.open($scope.qrSrc + '&isDown=1');
  };

  $scope.studentId = $("#rootIndex_studentId").val();

  function queryStudentInfo() {
    erp_studentsService.query({
        row_num: 20,
        studentId: $scope.studentId
      },
      function(resp) {
        if (!resp.error && resp.data.length) {
          $scope.student = resp.data[0];
          if ($scope.student) {
            $scope.student._attend_school = $scope.student.attend_school_name;
            $scope.student._grade = $scope.student.grade_name;
          }
          initial();
        } else {
          alert(resp.message);
        }
      });
  }

  function initial() {
    // 显示学生状态
    for (var i = 0; i < $scope.StudentStatusList.length; i++) {
      if ($scope.StudentStatusList[i].value == $scope.student.student_status)
        $scope.student.student_status_name = $scope.StudentStatusList[i].label;
    }
    // 显示性别
    for (var i = 0; i < $scope.SexList.length; i++) {
      if ($scope.SexList[i].value == $scope.student.sex)
        $scope.student.sex_name = $scope.SexList[i].label;
    }

    // 定义下拉框默认项
    $scope.student._sex = $scope.SexList[0].value;
    $scope.student._student_status = $scope.StudentStatusList[0].value;
    queryStudentContact();
    $scope.act_student_name = $scope.act_sex = $scope.act_birthday = $scope.act_phone = $scope.act_email = $scope.act_qq = $scope.act_attend_school = $scope.act_grade = $scope.act_student_status = $scope.act_address = $scope.act_code = $scope.act_city = '修改';

    $scope.studentEncodeEncoding = BASE64.encoder($scope.student.encoding);
    $scope.qrSrc = '/erp/studentservice/student/weChat?encoding=' + $scope.studentEncodeEncoding;
    $('title').text('学员|' + $scope.student.student_name);
    $scope.selectedInfo.school = {
      id: $scope.student.attend_school_id,
      school_name: $scope.student.attend_school_name
    }
    
    
    $scope.synToDouble= function() {
  	  erp_studentsService.synToDouble($scope.student, function(resp) {
  	      if (!resp.error) {
  	    	 $uibMsgbox.success(resp.message);
  	      } else {
  	        $uibMsgbox.error(resp.message);
  	      }
  	    })
    }

    $scope.resetPasswordDouble= function() {
      erp_studentsService.resetPasswordDouble($scope.student, function(resp) {
          if (!resp.error) {
           $uibMsgbox.success(resp.message);
          } else {
            $uibMsgbox.error(resp.message);
          }
        })
    }
    
    $scope.selectedInfo.grade = {
        id: $scope.student.grade_id,
        grade_name: $scope.student.grade_name
      }
      // $scope.searchCity();
  }

  /**
   * 显示修改学生详细信息模块
   * @return {[type]} [description]
   */
  $scope.showModifyDetail = function() {
    angular.copy($scope.student, $scope.studentCopy);
    $scope.studentCopy.recommender = {
      id:$scope.studentCopy.referrals_id,
      studentShortInfo: $scope.studentCopy.referrals
    }
    $scope.disModifyDetail = true;
  }

  $scope.saveModifyDetail = function() {
    $scope.studentCopy.attend_school_id = $scope.selectedInfo.school.id;
    $scope.studentCopy.grade_id = $scope.selectedInfo.grade.id;
    angular.copy($scope.studentCopy, $scope.student);
    $scope.saveStudent(function(student) {
      $scope.disModifyDetail = false;
    });
  }

  $scope.cancelModifyDetail = function() {
    $scope.disModifyDetail = false;
  }

  function queryIndexCounselors(){
      erp_studentIndexCounselorsService.query({
          studentId:$scope.studentId
      },function(resp){
          if(!resp.error){
              $scope.studentIndexCounselors = resp.data;
          }
      });
  }

  $scope.queryStudentStatus = function() {
    erp_dictService.getDictData({"typeCode" : "studentStatus", "needProductLineCdtn" : "Y"}, function(resp) {
      if (!resp.error) {
        $scope.StudentStatusList = resp.data;
        if ($scope.StudentStatusList && $scope.StudentStatusList.length > 0) {
          $.each($scope.StudentStatusList, function(idx, studentStatus) {
            studentStatus.code = Number(studentStatus.code);
          });
        }
      }
    });
  }

  queryStudentInfo();
  queryIndexCounselors();
  $scope.queryStudentStatus();
}

/**
 * old code
 * 
 */
/*
  $scope.selectSchool = function(school) {
    $scope.act_attend_school = '确认';
    $scope.student._attend_school = school.school_name;
    $scope.student.attend_school = school.id;
    $scope.dis_school = false;
    $scope.schoolResult = [];
  };

  $scope.searchGrade = function() {
    $scope.gradeResult = [];
    $scope.dis_gradeResult = true;
    if (isEmpty($scope.student._grade)) {
      return;
    }
    erp_gradeService.querySelectDatas({
      grade_name: $scope.student._grade
    }, function(resp) {
      $scope.gradeResult = resp.data;
    });
  }
  $scope.selectGrade = function(grade) {
    $scope.act_grade = '确认';
    $scope.student._grade = grade.grade_name;
    $scope.student.grade = grade.id;
    $scope.dis_gradeResult = false;
    $scope.gradeResult = [];
  }

  $scope.searchCity = function() {
    $scope.cityResult = [];
    $scope.dis_region = true;
    var _param = { org_type: 2 };
    erp_studentOrgService.query(_param, function(resp) {
      if (!resp.error) {
        $scope.cityResult = resp.data;
      }
    });
  };

  $scope.selectCity = function(city) {
    $scope.act_city = '确认';
    $scope.student.city = city.id;
    $scope.student._city = city.org_name;
    $scope.dis_region = false;
    $scope.cityResult = [];
  }


  $scope.searchSchool = function() {
    $scope.schoolResult = [];
    $scope.dis_school = true;
    var param = {};
    param.school_name = $(
        '#p_attend_school input[ng-model="student._attend_school"]')
      .val();
    if (param.school_name == null || param.school_name == '') {
      return;
    }
    erp_studentSchoolService.query(param, function(result) {
      if (!result.error) {
        $scope.schoolResult = result.data;
      }
    });
  };

  function initial() {
    // 显示学生状态
    for (var i = 0; i < $scope.StudentStatusList.length; i++) {
      if ($scope.StudentStatusList[i].value == $scope.student.student_status)
        $scope.student.student_status_name = $scope.StudentStatusList[i].label;
    }
    // 显示性别
    for (var i = 0; i < $scope.SexList.length; i++) {
      if ($scope.SexList[i].value == $scope.student.sex)
        $scope.student.sex_name = $scope.SexList[i].label;
    }

    // 定义下拉框默认项
    $scope.student._sex = $scope.SexList[0].value;
    $scope.student._student_status = $scope.StudentStatusList[0].value;
    queryStudentContact();
    $scope.act_student_name = $scope.act_sex = $scope.act_birthday = $scope.act_phone = $scope.act_email = $scope.act_qq = $scope.act_attend_school = $scope.act_grade = $scope.act_student_status = $scope.act_address = $scope.act_code = $scope.act_city = '修改';

    $scope.studentEncodeEncoding = BASE64.encoder($scope.student.encoding);
    $scope.qrSrc = '/erp/studentservice/student/weChat?encoding=' + $scope.studentEncodeEncoding;
    $interval(verifyTime, 1000);
    $('title').text('学员|' + $scope.student.student_name);

    // $scope.searchCity();
  }

 */

angular.module('ework-ui').controller('erp_studentIntegralController', [
	'$rootScope',
	'$scope',
	'$log',
	'$state',
	'$uibMsgbox',
	'erp_studentIndexIntegralService',
	erp_studentIntegralController
]);

function erp_studentIntegralController(
	$rootScope,
	$scope,
	$log,
	$state,
	$uibMsgbox,
	erp_studentIndexIntegralService
) {
	// 学员ID
	$scope.studentId = $("#rootIndex_studentId").val();
	
	// 查询条件
	$scope.searchParams = {
		p_start_date: '',
		p_end_date: '',
		p_account_id: -1,
		p_student_id: $("#rootIndex_studentId").val()
	};

	// 分页配置
	$scope.pageConf = {
		currentPage: 1,
		totalItems: 0,
		itemsPerPage: 10,
		onChange: function () {
			$scope.queryDetail()
		}	
	};

	// 积分校区列表容器样式表
  $scope.integralContainerStyle = {
      "width": "auto"
  }	;

  // 积分校区列表
	$scope.integralList = [];

	// 重置各校区积分的container的宽度
	$scope.resetIntegraContainerWidth = function () {
		$scope.integralContainerStyle.width =
			$scope.integralList.length * 220 + 'px';
	};

	// 查询所有校区的流水
	$scope.handleQueryAllDetail = function () {
		$scope.searchParams.p_account_id = -1;
		//$scope.queryDetail();
		$scope.integralDetailList = [];
		$scope.pageConf.totalItems = 0;
	};

	// 查询指定校区的积分流水
	$scope.handleQueryBranchDetail = function (detail) {
		$scope.searchParams.p_account_id = detail.id;
		$scope.queryDetail();
	};

	// 查询积分流水
	$scope.queryDetail = function () {
		if(!$scope.searchParams.p_account_id || $scope.searchParams.p_account_id < 0) {
			$uibMsgbox.alert("只能查询校区积分流水，请选定校区！");
			return;
		}
		var params = angular.extend($scope.searchParams, {
			currentPage: $scope.pageConf.currentPage,
			pageSize: $scope.pageConf.itemsPerPage
		});

		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
		// 查询列表,成功后，初始化分页总条数
		erp_studentIndexIntegralService.queryStudentIntegralFlow(params, function (resp) {
			_uibModalInstance.close();
			if (!resp.error) {
				$scope.integralDetailList = resp.data;
				$scope.pageConf.totalItems = resp.total || 0;
			} else {
				$uibMsgbox.error(resp.message)
			}
		});
	};

	// 导出积分流水
	$scope.outputDetail = function () {
		if(!$scope.searchParams.p_account_id || $scope.searchParams.p_account_id < 0) {
			$uibMsgbox.alert("只能导出校区积分流水，请选定校区！");
			return;
		}
		var params = angular.extend($scope.searchParams, {});

		var _uibModalInstance = $uibMsgbox.waiting('正在导出数据，请稍候...');
		// 查询列表,成功后，初始化分页总条数
		erp_studentIndexIntegralService.outputStudentIntegralFlow(params, function (resp) {
			_uibModalInstance.close();
			if (!resp.error) {
				window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	};

	// 查询学员积分
	$scope.queryIntegral = function () {
		erp_studentIndexIntegralService.queryStudentIntegral($scope.searchParams, function (resp) {
			if (!resp.error) {
				$scope.integralList = resp.data;
				// 总账户
				var totalAcount = {
					integral : 0,
					money : 0
				};
				if($scope.integralList && $scope.integralList.length > 0) {
					_.each($scope.integralList, function (item) {
						totalAcount.integral += item.crrent_integral || 0;
						totalAcount.money += item.attend_amount || 0;
					});
				}
				$scope.totalAcount = totalAcount;

				// 查询到结果调用以下方法调整积分管理的宽度
				$scope.resetIntegraContainerWidth();
			} else {
				$uibMsgbox.error(resp.message)
			}
		});
	};

	// 初始化查询
	$scope.queryIntegral();
}
"use strict";
angular.module('ework-ui')
		.controller(
				'erp_studentListeningController',
				[
                    '$rootScope',
                    '$scope',
                    '$cookieStore',
                    '$log',
                    '$uibMsgbox',
                    'erp_studentContactRelationService',
                    'erp_studentContactService',
                    'erp_courseListeningService',
                    'erp_timeSeasonService',
                    'erp_subjectService',
                    'erp_gradeService',
                    'erp_studentBuOrgsService',
                    'erp_courseService',
                    'erp_courseTimesService',
                    'erp_studentsService',
                    erp_studentListeningController ]);

function erp_studentListeningController(
        $rootScope,
        $scope,
        $cookieStore,
		$log,
        $uibMsgbox,
        erp_studentContactRelationService,
        erp_studentContactService,
        erp_courseListeningService,
        erp_timeSeasonService,
        erp_subjectService,
        erp_gradeService,
        erp_studentBuOrgsService,
        erp_courseService,
        erp_courseTimesService,
        erp_studentsService) {
	// 学员信息
	$scope.student = {};
    $scope.searchParams = {
        startDate: '2015-01-01',
        endDate: getCurrentDate()
    }
    /*初始化_start*/
    $scope.Listening = {}; 					// 试听
    $scope.Listening.Page = {};				// 分页
    $scope.Listening.product_line = 1;		// 产品线
    /*初始化_end*/

    /*切换产品线_start*/
    $scope.changeProduct = function(product_line){
        $scope.Listening.product_line = product_line;
        /*展示数据*/
        $scope.Listening.Page.page = 1;
        $scope.queryListeningResults();
    }
    /*切换产品线_end*/


    /*时间轴_end*/

    /*分页_start*/
    $scope.Listening.Page.page =  1;		/*当前页*/
    $scope.Listening.Page.rows =  6;		/*每页N行*/
    $scope.Listening.Page.total = 0;		/*总记录数*/
    $scope.Listening.Page.totalPage = 0;	/*总页数*/

    $scope.queryListeningResults = function(){
        $scope.isLoading = 'loading...';
        $scope.ListeningResults = [];
        var param = {};

        if(!$scope.studentId){
            $uibMsgbox.alert('未知学生');
            return;
        }
        param.student_id = $scope.studentId;
        param.business_type = 1;
        param.start_date = $scope.searchParams.startDate;
        param.end_date = $scope.searchParams.endDate;
        param.currentPage = $scope.Listening.Page.page;
        param.pageSize = $scope.Listening.Page.rows;
        $scope.isLoading = 'isLoading';
        erp_courseListeningService.query(param,function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.Listening.Page.total = resp.total;
                $scope.Listening.Page.totalPage = resp.totalPage;
                $scope.Listening.Page.currentPage = resp.currentPage;
                $scope.Listening.Page.page = resp.currentPage;
                $scope.Listening.Page.pageSize = resp.pageSize;
                $scope.ListeningResults = resp.data;

                var _rows = $scope.Listening.Page.rows;
                $scope._total = $scope.Listening.Page.total;
                if($scope._total == 0){
                    $scope._begin = 0;
                    $scope._end = 0;
                }else{
                    $scope._begin = ($scope.Listening.Page.page - 1) * _rows + 1;
                    if($scope._total <= _rows || (($scope._begin - 1) + _rows) >= $scope._total){
                        $scope._end = $scope._total;
                    }else{
                        $scope._end = ($scope.Listening.Page.page - 1) * _rows + _rows;
                    }
                }
            }else{
                $uibMsgbox.alert(resp.message);
            }
        })
    }

    $scope.openSelectCourseWindow = function(){
        $('#selectCourseWindow').modal('show');
        $scope.querySelectedCourse();
    }

    $scope.closeSelectCourseWindow = function(){
        $('#selectCourseWindow').modal('hide');
    }

    /*报班*/
    $scope.agree = function(Result){
        window.open('?studentId=' +  $scope.studentId + '#/orders/ordersMgr/ordersMgrOrders', '_blank');
    };


    /**
     * 首页
     */
    $scope.begin = function(){
        $scope.Listening.Page.page = 1;
        $scope.queryListeningResults();
    }

    /**
     * 上一页
     */
    $scope.up = function(){
        if($scope.Listening.Page.page <= 1){
            return;
        }
        $scope.Listening.Page.page = $scope.Listening.Page.page - 1;
        $scope.queryListeningResults();
    }

    /**
     * 下一页
     */
    $scope.down = function(){
        if($scope.Listening.Page.page >= $scope.Listening.Page.totalPage){
            return;
        }
        $scope.Listening.Page.page = $scope.Listening.Page.page + 1;
        $scope.queryListeningResults();
    }

    /**
     * 最后一页
     */
    $scope.end = function(){
        $scope.Listening.Page.page = $scope.Listening.Page.totalPage;
        $scope.queryListeningResults();
    }

    $scope.subjectList = [];
    $scope.selectedSubject = {id:-1};
    $scope.gradeList = [];
    $scope.selectedGrade = {id:-1};
    $scope.selectedTimeSeason = {id:-1};
    $scope.timeSeasonList = [];
    $scope.selectedBranch = {id:-1};

    function queryTimeSeason(){
        erp_timeSeasonService.list({

        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
                $scope.timeSeasonList.unshift({
                    id:-1,
                    course_season_name:'--全部课程季--'
                });
                $scope.selectedTimeSeason = $scope.timeSeasonList[0];
            }
        })
    }
    function querySubject(){
        erp_subjectService.querySelectDatas({
            branch_id:$scope.selectedBranch.id,
            season_id:$scope.selectedTimeSeason.id,
            grade_id:$scope.selectedGrade.id
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
                $scope.subjectList.unshift({
                    id:-1,
                    name:'--全部科目--'
                });
                $scope.selectedSubject = $scope.subjectList[0];
            }
        })
    }
    function queryGrade(){
        erp_gradeService.querySelectDatas({
            branch_id:$scope.selectedBranch.id,
            season_id:$scope.selectedTimeSeason.id
        },function(resp){
            if(!resp.error){
                $scope.gradeList = resp.data;
                $scope.gradeList.unshift({
                    id:-1,
                    grade_name:'--全部年级--'
                });
                $scope.selectedGrade = $scope.gradeList[0];
            }
        })
    }
    function queryBuOrgs(){
        erp_studentBuOrgsService.query({},function(resp){
            if(!resp.error){
                $scope.branchList = resp.data;
                $scope.branchList.unshift({
                    id:-1,
                    org_name:'--全部校区--'
                });
                $scope.selectedBranch = $scope.branchList[0];
            }
        })
    }



    $scope.changeBranch = function(){
        querySubject();
        queryGrade();
    }
    $scope.changeSeason = function(){
        querySubject();
        queryGrade();
    }
    $scope.changeGrade = function(){
        querySubject();
    }

    $scope.pageConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        onChange: function() {
            $scope.querySelectedCourse();
        }
    };

    $scope.querySelectedCourse = function(){
        var param = {
            pageSize: $scope.pageConf.itemsPerPage,
            currentPage: $scope.pageConf.currentPage,
            branch_id:$scope.selectedBranch.id,
            season_id:$scope.selectedTimeSeason.id,
            grade_id:$scope.selectedGrade.id,
            subject_id:$scope.selectedSubject.id,
            business_type:1,
            status:1 //上架课程 
        };
        $scope.isLoading = 'isLoading';
        $scope.toSelectingCourseList = [];
        erp_courseService.query(param,function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.toSelectingCourseList = resp.data;
                $scope.pageConf.totalItems = resp.total || 0;
            }else{
                $uibMsgbox.alert(resp.message);
            }
        })
    }

    $scope.selectCourseItem = function(course){
        if(!course.courseTimesList){
            course.courseTimesList = [];

            course.isLoadingCourseTime = 'isLoadingCourseTime';
            erp_courseTimesService.query({courseId:course.id},function(resp){
                course.isLoadingCourseTime = '';
                if(!resp.error){
                    course.courseTimesList = resp.data;
                }else{
                    $uibMsgbox.alert(resp.message);
                }
            })
        }
    }

    $scope.postListeningCourseTime = function(course,courseTime){
        var param = {
            course_id:course.id,
            student_id:$scope.studentId,
            course_times:courseTime.course_times,
            course_date:courseTime.course_date
        };

        erp_courseListeningService.post(param,function(resp){
            if(!resp.error){
                $uibMsgbox.success("试听成功！")
                $scope.queryListeningResults();
            }else{
                $uibMsgbox.alert(resp.message);
            }
        })
    }

    $scope.toOpenUpdateListeningPanel = function(Result){
        $('#updateListeningModal').modal('show');
        $scope.selectedUpdateListeningResult = Result;
    }

    $scope.toCloseUpdateListeningPanel = function(){
        $('#updateListeningModal').modal('hide');
        $scope.selectedUpdateListeningResult = undefined;
    }

    $scope.updateListening = function(){
        var param = {
            course_id:$scope.selectedUpdateListeningResult.COURSE_ID,
            student_id:$scope.studentId,
            remark:$scope.selectedUpdateListeningResult.remark,
            id:$scope.selectedUpdateListeningResult.ID,
            pay_status:2
        };

        erp_courseListeningService.put(param,function(resp){
            if(!resp.error){
                $uibMsgbox.alert("已经拒缴!");
                $scope.toCloseUpdateListeningPanel();
                $scope.queryListeningResults();
            }else{
                $uibMsgbox.alert(resp.message);
            }
        })
    }

    $scope.studentId = $("#rootIndex_studentId").val();

    function queryStudentInfo(){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                    $uibMsgbox.alert(resp.message);
                }
            });
    }
    function initial(){
        /*时间轴_start*/
        var callBack = function() {
            var start_date = $scope.searchParams.startDate;
            var end_date = $scope.searchParams.endDate;
            $scope.Listening.Page.p_start_date = start_date;
            $scope.Listening.Page.p_end_date = end_date;

            $scope.Listening.Page.page = 1;
            $scope.queryListeningResults();
        }
        TimeLine($scope, {
            width : 600
        }, callBack);

        queryTimeSeason();
        querySubject();
        queryGrade();
        queryBuOrgs();

        $('title').text('学员|'+ $scope.student.student_name);
    }

    queryStudentInfo();

}

"use strict"
angular.module('ework-ui').controller('erp_studentIndexOrderDetailDelModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    erp_studentIndexOrderDetailDelModalController
  ])

function erp_studentIndexOrderDetailDelModalController(
  $rootScope,
  $scope,
  $uibModalInstance,
  $uibMsgbox
) {
	 $scope.conf = {
			 remark: ''
	 };
	  $scope.handleModalCancel = function() {
	    $uibModalInstance.dismiss('cancel');
	  }
	  
	  $scope.handleModalConfirm = function() {
		  $uibModalInstance.close({
			  remark: $scope.conf.remark
		  });
	  }
  
}

"use strict"
angular.module('ework-ui').controller('erp_studentIndexOrderDetailLockModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    erp_studentIndexOrderDetailLockModalController
  ])

function erp_studentIndexOrderDetailLockModalController(
  $rootScope,
  $scope,
  $uibModalInstance,
  $uibMsgbox
) {
	 $scope.conf = {
			 remark: ''
	 };
	  $scope.handleModalCancel = function() {
	    $uibModalInstance.dismiss('cancel');
	  }
	  
	  $scope.handleModalConfirm = function() {
		  $uibModalInstance.close({
			  remark: $scope.conf.remark
		  });
	  }
}

"use strict"
angular.module('ework-ui').controller('erp_studentIndexOrderDetailUnlockModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    erp_studentIndexOrderDetailUnlockModalController
  ])

function erp_studentIndexOrderDetailUnlockModalController(
  $rootScope,
  $scope,
  $uibModalInstance,
  $uibMsgbox
) {
	 $scope.conf = {
			 remark: ''
	 };
	  $scope.handleModalCancel = function() {
	    $uibModalInstance.dismiss('cancel');
	  }
	  
	  $scope.handleModalConfirm = function() {
		  $uibModalInstance.close({
			  remark: $scope.conf.remark
		  });
	  }
  
}

/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_StudentOrderDetailController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        '$state',
        '$uibModal',
        '$uibMsgbox', // 消息提示框服务，其他服务按需引入
        'erp_FinanceOrderService',
        'erp_orderManagerService',
        'erp_InvoiceManagerService',
        'PUBORGSelectedService',
        'erp_orderChangeService',
        erp_StudentOrderDetailController]);

function erp_StudentOrderDetailController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    $state,
    $uibModal,
    $uibMsgbox,
    erp_FinanceOrderService,
    erp_orderManagerService,
    erp_InvoiceManagerService,
    PUBORGSelectedService,
    erp_orderChangeService) {
    $scope.currentOrderId = $("#rootIndex_orderId").val();
    $scope.orderType = $("#rootIndex_orderType").val();

    $scope.studentId = $("#rootIndex_studentId").val();
    $scope.temporaryOrderRemarkDisabled = true;
    $scope.temporaryOrderRemarkCopy = '';
    $scope.isLoading = 'loadOrderInfo';
    $scope.selectedOrg = {};
    $scope.remark="1111";
    function querySelectedOrg(){
        var param = {};
        PUBORGSelectedService.query(param,function(resp){
           if(!resp.error){
               $scope.selectedOrg = resp.data;
           }
        });
    }

    // 编辑备注
    $scope.editTemporaryOrderRemark = function (remark) {
        $scope.temporaryOrderRemarkCopy = _.cloneDeep(remark);
        $scope.temporaryOrderRemarkDisabled = false;
    }

    // 保存备注
    $scope.saveTemporaryOrderRemark = function (remark) {
        var waitingModal = $uibMsgbox.waiting('保存备注中，请稍候...')
        // save Remark
        // After Request
        erp_orderManagerService.updateOrderInfo({
            id:  $scope.currentOrderId,
            remark: remark
        }, function (resp) {
            waitingModal.close()
            if (!resp.error) {
                $uibMsgbox.alert('保存成功!')
                $scope.temporaryOrderRemarkCopy = '';
                $scope.temporaryOrderRemarkDisabled = true;
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    }

    // 取消备注修改
    $scope.cancelTemporaryOrderRemark = function  () {
        $scope.order.temporaryOrder.remark = _.cloneDeep($scope.temporaryOrderRemarkCopy);
        $scope.temporaryOrderRemarkCopy = '';
        $scope.temporaryOrderRemarkDisabled = true;
    }
    // 处理【订单作废】按钮点击事件
    $scope.handleCancelOrder = function () {
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/student-order-detail-del.modal.html',
            controller: 'erp_studentIndexOrderDetailDelModalController'
        }).result.then(function (resp) {
        	console.info(resp);
        	 $uibMsgbox.confirm('确定作废当前订单？', function (result) {
                 if(result != 'yes') {
                     return;
                 }
                 $scope.del(resp);
             });
        	
        }, function () { 
        	
        });
    };
    
    // 处理【订单锁定】按钮点击事件
    $scope.handleLockOrder = function () {
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/student-order-detail-lock.modal.html',
            controller: 'erp_studentIndexOrderDetailLockModalController',
            scope: $scope
        }).result.then(function (resp) {
        	$scope.lock(resp);
        }, function () { 
        	
        });
    };
    
    // 处理【订单解锁】按钮点击事件
    $scope.handleUnLockOrder = function () {
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/student-order-detail-unlock.modal.html',
            controller: 'erp_studentIndexOrderDetailUnlockModalController',
            scope: $scope
        }).result.then(function (resp) {
        	$scope.unLock(resp);
        }, function () { 
        	
        });
    };
    
    // 锁定
    $scope.lock= function (resp) {
    	erp_FinanceOrderService.lock({
    		remark:resp.remark ,
    		orderId : $scope.currentOrderId,
    		status:1
    	}, function (resp) {
    		if (!resp.error) {
    			$state.reload();
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    // 解锁
    $scope.unLock= function (resp) {
    	erp_FinanceOrderService.lock({
    		remark:resp.remark ,
    		orderId : $scope.currentOrderId,
    		status:3
    	}, function (resp) {
    		if (!resp.error) {
    			$state.reload();
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    // 删除
    $scope.del= function (resp) {
    	erp_FinanceOrderService.remove({
    		remark:resp.remark ,
    		orderId : $scope.currentOrderId
    	}, function (resp) {
    		if (!resp.error) {
    			$state.reload();
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    function initialOrderInfo(){
        erp_orderManagerService.query({
            order_id:$scope.currentOrderId,
            orderType: $scope.orderType
        },function(resp){
            if(!resp.error){
                if($scope.orderType && $scope.orderType == 'temporaryOrder' && resp.data && resp.data.order_status != 1) { //临时订单

                    $scope.order = {};
                    $scope.order.temporaryOrder = resp.data;
                    $scope.order.studentInfo = $scope.order.temporaryOrder.studentInfo;
                    $scope.order.order_no = $scope.order.temporaryOrder.encoding; //报班单号
                    $scope.order.order_status = $scope.order.temporaryOrder.order_status;
                    $scope.order.actural_amount = $scope.order.temporaryOrder.actual_price; //订单现价
                    $scope.order.fee_amount = $scope.order.temporaryOrder.sum_price; //订单原价
                    $scope.order.orderDetails = $scope.order.temporaryOrder.details; //订单明细
                    _.forEach($scope.order.orderDetails, function (detail, index) {
                        detail.course = detail.tCourseInfo;
                        detail.course_surplus_count = 0; //临时订单，不显示置空课时
                    });
                } else { //正式订单
                    $scope.order = resp.data;
                    console.log($scope.order)
                }
                
                if( $scope.order.studentInfo && $scope.order.studentInfo.phone ){
                    $scope.order.studentInfo.phone = parseInt($scope.order.studentInfo.phone);
                }
                if($scope.order&&$scope.order.temporaryOrder&&$scope.order.temporaryOrder.create_time){
                    var date = new Date();
                    date.setTime($scope.order.temporaryOrder.create_time);
                    $scope.order.temporaryOrder.create_time = Format('yyyy-MM-dd hh:mm',date);
                }

                if($scope.order&&$scope.order.fin_confirm_date){
                    var date = new Date();
                    date.setTime($scope.order.fin_confirm_date);
                    $scope.order.fin_confirm_date = Format('yyyy-MM-dd hh:mm',date);
                }

                if($scope.order.orderDetails){
                    $.each($scope.order.orderDetails,function(j,detail){
                        detail.kaoqinCount = 0;
                        detail.guaqiCount = 0;
                        detail.tuifeiCount = 0;
                        detail.zhuanbanCount = 0;
                        detail.dongjieCount = 0;
                        detail.tuifeiAuditCount = 0;
                        //考勤
                        if(detail && detail.tAttendanceList && detail.tAttendanceList.length){
                            $.each(detail.tAttendanceList,function(i,att){
                                if(att.attend_date){
                                    var date = new Date();
                                    date.setTime(att.attend_date);
                                    att.attend_date = Format('yyyy-MM-dd', date);
                                }
                                if(att.course_time){
                                    var date = new Date();
                                    date.setTime(att.course_time);
                                    att.course_time = Format('yyyy-MM-dd',date);
                                }
                                if(att.attend_type&&att.attend_type != 10&&att.attend_type != 20&&att.attend_type != 30){
                                    if (att.attend_type == 11 ) { //培英班挂起
                                    	detail.guaqiCount++;
                                    } else if(att.attend_type == 12 || att.attend_type == 31  ){//培英班晚辅导考勤
                                        detail.kaoqinCount++;
                                    } else if(att.attend_type ==21 || att.attend_type ==22) {//一对一考勤
                                            detail.kaoqinCount += att.course_times;
                                    }
                                }
                            });
                        }
                        //退费
                        if(detail && detail.orderCourseChange && detail.orderCourseChange.length){
                            $.each(detail.orderCourseChange,function(i,ocg){
                                if(ocg.change_type==1&&ocg.change_status==5){
                                    detail.tuifeiCount=detail.tuifeiCount+parseInt(ocg.course_times);
                                }
                            });
                        }
                        //转班
                        if(detail && detail.orderCourseChange && detail.orderCourseChange.length){
                            $.each(detail.orderCourseChange,function(i,ocg){
                                if(ocg.change_type==2&&ocg.change_status==5&&ocg.order_course_id == detail.id && ocg.transfer_flag==0){
                                    detail.zhuanbanCount=detail.zhuanbanCount+parseInt(ocg.course_times);
                                }
                            });
                        }
                        //冻结
                        if(detail && detail.orderCourseChange && detail.orderCourseChange.length){
                            $.each(detail.orderCourseChange,function(i,ocg){
                                if(ocg.change_type==5&&ocg.change_status==5){
                                    detail.dongjieCount=detail.dongjieCount+parseInt(ocg.course_times);
                                }
                            });
                        }

                        $.each($scope.order.temporaryOrder.details,function(hh,tDetail){
                            if(tDetail.id == detail.id){
                                detail.temporaryOrderDetail = tDetail;
                            }
                        });
                        // 退费审批
                        if(detail && $scope.order.premiumAuditList && $scope.order.premiumAuditList.length){
                            detail.premiumAuditList = [];
                            $.each($scope.order.premiumAuditList,function(i,premiumAudit){
                                if(detail.id == premiumAudit.ORDER_COURSE_ID){
                                    detail.tuifeiAuditCount += parseInt(premiumAudit.COURSE_TIMES);
                                    detail.premiumAuditList.push(premiumAudit);
                                }
                            });
                        }
                    });
                }

                $scope.isLoading = '';
            }else{
                alert(resp.message);
                $scope.isLoading = 'loadOrderInfoFailed';
                $scope.isLoadingFailedInfo = resp.message;
            }
        });
    }

    initialOrderInfo();
    $scope.showDetailTimesPanel = '';
    $('#detailTimesPanel').modal('hide');
    $scope.showDetailTimes = function(detail,type){
        if($scope.selectedOrg.productLine == 2) {
            return
        }
        if(type == 'shenyu'){
            $scope.showDetailTimesPanel = 'showDetailTimesPanel.shenyu';
            $scope.showDetailTimesPanelLoading = 'loading';
            $scope.showDetailTimesPanelSelectedDetail = detail;
            queryOrderCourseSurplusCount(detail);
        } else if(type == 'kaoqin'){
            $scope.showDetailTimesPanel = 'showDetailTimesPanel.kaoqin';
            $scope.showDetailTimesPanelSelectedDetail = detail;
        } else if(type == 'guaqi'){
            $scope.showDetailTimesPanel = 'showDetailTimesPanel.guaqi';
            $scope.showDetailTimesPanelSelectedDetail = detail;
        }  else if(type == 'zhuanban'){
            $scope.showDetailTimesPanel = 'showDetailTimesPanel.zhuanban';
            $scope.showDetailTimesPanelLoading = 'loading';
            $scope.showDetailTimesPanelSelectedDetail = detail;
            queryOrderChangeTimesInfo(detail);
        } else if(type == 'tuifei'){
            $scope.showDetailTimesPanel = 'showDetailTimesPanel.tuifei';
            $scope.showDetailTimesPanelLoading = 'loading';
            $scope.showDetailTimesPanelSelectedDetail = detail;
            queryOrderChangeTimesInfo(detail);
        } else if(type == 'dongjie'){
            $scope.showDetailTimesPanel = 'showDetailTimesPanel.dongjie';
            $scope.showDetailTimesPanelSelectedDetail = detail;
            queryOrderChangeTimesInfo(detail);
        }  else if(type == 'tuifeiAudit'){
            $scope.showDetailTimesPanel = 'showDetailTimesPanel.tuifeiAudit';
            $scope.showDetailTimesPanelSelectedDetail = detail;
        }
        $('#detailTimesPanel').modal('show');
    }

    function queryOrderCourseSurplusCount(detail){
        var param = {};
        param.orderDetailId = detail.id;
        erp_orderManagerService.orderCourseSurplusCount(param,function(resp){
            $scope.showDetailTimesPanelLoading = '';
            if(!resp.error){
                $scope.showDetailTimesPanelSelectedDetail.orderCourseSurplusCount = resp.data;
            }else{
                alert(resp.message);
            }
        });
    }

    function queryOrderChangeTimesInfo(detail){
        var param = {};
        param.orderDetailId = detail.id;
        erp_orderManagerService.queryOrderChangeCourseTimes(param,function(resp){
            $scope.showDetailTimesPanelLoading = '';
            if(!resp.error){
                $scope.showDetailTimesPanelSelectedDetail.orderChangeCourseTimes = resp.data;
                if($scope.showDetailTimesPanelSelectedDetail.orderChangeCourseTimes){
                    $.each($scope.showDetailTimesPanelSelectedDetail.orderChangeCourseTimes,function(i,ch){
                        if(ch.courseDate){
                            var date = new Date();
                            date.setTime(ch.courseDate);
                            ch.courseDate = Format('yyyy-MM-dd',date);
                        }
                        if(ch.finConfirmTime){
                            var date = new Date();
                            date.setTime(ch.finConfirmTime);
                            ch.finConfirmTime = Format('yyyy-MM-dd hh:mm:ss',date);
                        }
                        if(ch.createTime){
                            var date = new Date();
                            date.setTime(ch.createTime);
                            ch.createTime = Format('yyyy-MM-dd hh:mm:ss',date);
                        }
                    });
                }
            }else{
                alert(resp.message);
            }
        });
    }

    $scope.closeShowDetailTimes = function(){
        $scope.showDetailTimesPanel = '';
        $('#detailTimesPanel').modal('hide');
    }

    $scope.isQueryInvoiceData = '';
    function queryInvoiceInfo(){
        var param = {};
        param.orderId = $scope.currentOrderId;
        $scope.isQueryInvoiceData = 'isLoading';
        erp_InvoiceManagerService.queryByOrder(param,function(resp){
            $scope.isQueryInvoiceData = '';
           if(!resp.error){
               $scope.invoiceData =  resp.data;
               if($scope.invoiceData){
                   $.each($scope.invoiceData,function(i,invoice){
                       if(invoice && invoice.invoiceDate){
                           var date = new Date();
                           date.setTime(invoice.invoiceDate);
                           invoice.invoiceDate = Format('yyyy-MM-dd',date);
                       }
                   });

               }
           }
        });
    }
    $scope.orderTuifeiInfo = [];
    $scope.orderZhuanbanInfo = [];

    function queryOrderChange(){
        var param = {};
        param.orderId = $scope.currentOrderId;
        $scope.orderTuifeiInfo = [];
        erp_orderManagerService.orderChangeInfo(param,function(resp){
            if(!resp.error){
                var orderChangeInfo =  resp.data;
                if(orderChangeInfo){
                    $.each(orderChangeInfo,function(i,change){
                        if((change.change_type == 1|| change.change_type == 4) && change.change_status == 5){
                            $scope.orderTuifeiInfo.push(change);
                        }

                        if(change.change_type == 2){
                            $scope.orderZhuanbanInfo.push(change);
                        }
                    });

                }
            }
        });
    }

    $scope.printPremium = function(premium){
        PrintPage02($scope.student,premium);
    }

    function PrintPage02(student,premium){
        //02冻结
        var strHtml = '<style type="text/css">';
        strHtml += 'table { width:660px; font:12px Arial;font-weight: 400; margin-left:10px;}';
        strHtml += 'tr.Line td{ border-top:1px dashed #000;}';
        strHtml += 'tr td{ height:15px; line-height:15px;}';
        strHtml += 'h1{ text-align:center; font:12px 微软雅黑,Arial,Helvetica,sans-serif}';
        strHtml += '</style>';
        strHtml += '<table width="660px" style="margin:103px 0 0 95px;" height="600px" border="0" cellspacing="0" cellpadding="0">';
        strHtml += '<tr height="300px"><td ></td></tr>';
        strHtml += '<tr height="330px"><td>';
        strHtml += '<table border="0" width="660px" height="48" align="center">';
        strHtml += '<tr align="left" style="font-weight:900;">';
        strHtml += '<td colspan="5">业务校区:' + premium.branch_name + '	经办人:' + premium.createUserName + '</td>';
        strHtml += '</tr>';
        strHtml += '<tr align="center" style="font-weight:900;">';
        strHtml += '<td width="150">学员编号</td>';
        strHtml += '<td width="66">学员姓名</td>';
        strHtml += '<td width="155">单据编号</td>';
        strHtml += '<td width="68">业务类型</td>';
        strHtml += '<td width="76" align="center">业务日期</td>';
        strHtml += '</tr>';
        strHtml += '<tr align="center">';
        strHtml += '<td>'+premium.student_encoding+'</td>';
        strHtml += '<td>'+premium.student_name+'</td>';
        strHtml += '<td>'+premium.order_no+'</td>';
        strHtml += '<td>退费</td>';
        strHtml += '<td>'+premium.apply_time_string+'</td>';
        strHtml += '</tr>';
        strHtml += '<tr align="left">';
        strHtml += '<td colspan="6">冻结信息：'+(premium.remark?premium.remark:'-')+'</td>';
        strHtml += '</tr>';
        strHtml += '</table>';
        //
        strHtml += '<table border="0" width="660px" height="48">';
        strHtml += '<tr height="15px" align="center" style="font-weight:900;">';
        strHtml += '<td>编号</td>';
        strHtml += '<td>课程商品名称</td>';
        strHtml += '<td>冻结课时</td>';
        strHtml += '<td>冻结金额</td>';
        strHtml += '<td>冻结类型</td>';
        if(premium.fee_deduction_amount){
            strHtml += '<td>冻结补扣</td>';
        }
        strHtml += '</tr>';
        strHtml += '<tr align="center">';
        strHtml += '<td>'+premium.courseNo+'</td>';
        strHtml += '<td>'+premium.courseName+'</td>';
        strHtml += '<td>'+premium.courseTimes+'</td>';
        strHtml += '<td>'+premium.fee_amount+'</td>';
        strHtml += '<td>退费冻结</td>';
        if(premium.fee_deduction_amount){
            strHtml += '<td>'+premium.fee_deduction_amount+'</td>';
        }
        strHtml += '</tr>';
        strHtml += '</table>';

        KlxxPrint(strHtml);
    }

    $scope.printOrder = function(order){
        erp_orderManagerService.query({
            order_id:order.id,
            orderType:'temporaryOrder'
        },function(resp){
            $scope.openPanel = '';

            if(!resp.error){
                $scope.temporaryOrder = resp.data;
                if (!$scope.temporaryOrder.details) {
                    $scope.temporaryOrder = $scope.temporaryOrder.temporaryOrder;
                }
                if($scope.temporaryOrder.business_type == 2) {//1对1
                    CreatePrintPageGxhYdyBb($scope.temporaryOrder);
                } else if($scope.temporaryOrder.business_type == 1) {//班级课
                    if ($scope.temporaryOrder.city_id == 3) {
                        CreatePrintPageXiamen($scope.temporaryOrder);
                    } else {
                        CreatePrintPage($scope.temporaryOrder);
                    }
                } else {
                    CreatePrintPage($scope.temporaryOrder);
                }
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    }
    
    $scope.openModal = function() {
    	$uibModal.open({
			resolve : {
				orderId : function() {
					return $scope.order.temporaryOrder ? $scope.order.temporaryOrder.id : $scope.order.id;
				}
			},
			templateUrl : 'templates/block/modal/order_workflow.modal.html',
			controller : 'orderWorkflowModalController'
		}).result.then(function() {
		}, function() {
		});
    }

    $scope.checkOrderChange = function(order, orderDetailId, changeType) {
        erp_orderChangeService.changeCheck({
            orderCourseId : orderDetailId
        }, function(resp) {
            if(!resp.error){
                var url = "?studentId=" + order.student_id + "&orderDetailId=" + orderDetailId;
                if (changeType == 'transfer') {
                    url += "#/orders/orderChangeTransfer";
                } else if (changeType == 'frozen') {
                    url += "&bizType=" + order.business_type + "#/orders/classesFrozen";
                } else {
                    url +=  "&bizType=" + order.business_type + "#/orders/classesRefund";
                }
                var newTab = window.open();
                newTab.location.href = url;
            }else{
                var message = resp.message;
                message = message.replace(new RegExp('退费', 'g'), changeType == 'transfer' ? "转班" : (changeType == 'frozen' ? "冻结" : "退费"));
                $uibMsgbox.error(message);
            }
        });
    }

    queryInvoiceInfo();
    querySelectedOrg();
    queryOrderChange();
}
/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_StudentOrdersController', [
        '$rootScope',
        '$scope',
        '$log',
        '$uibMsgbox',
        '$cookieStore',
        'erp_studentOrdersService',
        'erp_orderManagerService',
        'erp_studentsService',
        'erp_InvoiceManagerService',
        erp_StudentOrdersController]);

function erp_StudentOrdersController(
    $rootScope,
    $scope,
    $log,
    $uibMsgbox,
    $cookieStore,
    erp_studentOrdersService,
    erp_orderManagerService,
    erp_studentsService,
    erp_InvoiceManagerService) {
    //学员信息
    $scope.student = {};
    $scope.searchParam = {
        selectedMonth: '-1'
    }
    var date = new Date();
    var mm = date.getMonth();
    var yy = date.getFullYear();
    $scope.selectMonthModel = [
        {
            value : -1,
            label : '全部'
        },
        {
            value : 1,
            label : '最近1个月'
        },
        {
            value : 2,
            label : (mm - 1 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 1 >= 0 ? mm
                    : mm + 1 + 12 - 1))
                + '月'
        },
        {
            value : 3,
            label : (mm - 2 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 2 >= 0 ? mm - 1
                    : mm + 1 + 12 - 2))
                + '月'
        },
        {
            value : 4,
            label : (mm - 3 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 3 >= 0 ? mm - 2
                    : mm + 1 + 12 - 3))
                + '月'
        },
        {
            value : 5,
            label : (mm - 4 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 4 >= 0 ? mm - 3
                    : mm + 1 + 12 - 4))
                + '月'
        } ];

    $scope.monthOrder = $scope.selectMonthModel[0];
    
    // add by lincm 20170309 发票抬头选择框下拉值
    $scope.headerList = [{
    	"key" : "1", "value" : "个人"
    }, {
    	"key" : "2", "value" : "公司"
    }];


    $scope.isLoading = '';
    $scope.selectMonth = function(){
        queryStudentOrders();
    }

    function queryStudentOrders(){
        $scope.isLoading = 'isLoading';
        erp_studentOrdersService.query({
            studentId:$scope.studentId,
            month:$scope.searchParam.selectedMonth
        },function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.orderInfoList = resp.data;
            }
        });
    }

    /**
     * 显示
     *
     * @param targetId
     */
    $scope.toShow = function(targetId) {
        if ($("#" + targetId).hasClass("showed")) {
            $("#" + targetId).hide();
            $("#" + targetId).removeClass("showed");
        } else {
            $("#" + targetId).show();
            $("#" + targetId).addClass("showed");
        }
    };
    
    /**
     * 隐藏
     *
     * @param targetId
     */
    $scope.toHide = function(targetId) {
        $("#" + targetId).hide();
        $("#" + targetId).removeClass("showed");
    };

    $scope.toSubmitOrder = function(order){
        $cookieStore.put("temporaryOrderId",order.ID);
        return true;
    }
    $scope.detailOrderHref = ' ';
    $scope.toOrderDetail = function(orderInfo){
        var isTemporaryOrder = false; //是否临时订单
        if(orderInfo.CHECK_STATUS==1 && orderInfo.VALID_STATUS != 0 ||   //暂存
           orderInfo.VALID_STATUS == 0 && !orderInfo.PAY_STATUS ||       //已删除
           orderInfo.CHECK_STATUS==4 && orderInfo.VALID_STATUS == 1 && !orderInfo.PAY_STATUS ||  //未通过
           orderInfo.CHECK_STATUS==3 && orderInfo.VALID_STATUS == 1 && !orderInfo.PAY_STATUS  ||  //待缴费
           orderInfo.CHECK_STATUS==2 && orderInfo.VALID_STATUS == 1                           //审核中 
        ) {
            isTemporaryOrder = true;
        }
        var href = '?studentId=' + orderInfo.STUDENT_ID + '&orderId=' + orderInfo.ID;
        href += isTemporaryOrder == true ? '&orderType=temporaryOrder' : '';
        href += '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
        $scope.detailOrderHref = href;

        $cookieStore.put("currentOrderId",orderInfo.ID);
        return true;
    };
    $scope.openPanel = '';
    $scope.deleteOrder = function(order){
        $scope.openPanel = 'deleteOrder';
        console.log($scope.$parent)
        var param = {};
        param.orderId = order.ID;
        erp_orderManagerService.delete(param,function(resp){
            $scope.openPanel = '';
            if(!resp.error){
            	$uibMsgbox.success("已成功删除！");
                queryStudentOrders();
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    };
    $scope.printPage = '';
    $scope.printOrder = function(order){
        $scope.printPage = 'beginPrint';

        erp_orderManagerService.query({
            order_id:order.ID,
            orderType:'temporaryOrder'
        },function(resp){
            $scope.openPanel = '';
            
            if(!resp.error){
                $scope.temporaryOrder = resp.data;
                if (!$scope.temporaryOrder.details) {
                    $scope.temporaryOrder = $scope.temporaryOrder.temporaryOrder;
                }
                var printDataStirng = JSON.stringify(resp.data);
                if($scope.temporaryOrder.business_type == 2) {//1对1
                    var useragent = navigator.userAgent;
                    if(useragent.indexOf('Android') > -1 || useragent.indexOf('Adr') > -1){
                        window.localStorage.setItem('baobanData', printDataStirng)
                        if(location.href.indexOf('klxuexi.org')>0){
                            window.open("/printhtml/print_classlist.html");
                        }else{
                        window.open("/klxxedu/printhtml/print_classlist.html");
                        }
                    }else{
                        CreatePrintPageGxhYdyBb($scope.temporaryOrder);
                    }
                } else if($scope.temporaryOrder.business_type == 1) {//班级课
                    var useragent = navigator.userAgent;
                    if(useragent.indexOf('Android') > -1 || useragent.indexOf('Adr') > -1){
                        window.localStorage.setItem('BJKData', printDataStirng)
                        if(location.href.indexOf('klxuexi.org')>0){
                            window.open("/printhtml/print_BJKclasslist.html");
                        }else{
                        window.open("/klxxedu/printhtml/print_BJKclasslist.html");
                        }
                    }else{
                    if ($scope.temporaryOrder.city_id == 3) {
                        CreatePrintPageXiamen($scope.temporaryOrder);
                    } else {
                        CreatePrintPage($scope.temporaryOrder);
                    }
                } }else {
                    CreatePrintPage($scope.temporaryOrder);
                }
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.closePrintWindow = function(){
        $scope.printPage = '';
    }

    $scope.studentId = $("#rootIndex_studentId").val();

    function queryStudentInfo(){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                	$uibMsgbox.error(resp.message);
                }
            });
    }
    function initial(){
        queryStudentOrders();

        $('title').text('学员|'+ $scope.student.student_name);
    }
    
    // add by lincm 20170309 发票申请处理
    $scope.invoice = {
    	orderId : '',
    	branchId : '',
    	studentId : '',
    	orderMoney : 0,
    	heading : '1',
    	money : 0,
    	requiredMoney : 0,
    	companyName : '',
    	taxNum : '',
    	invoiceExplain : ''
    };
    
    $scope.invoiceApply = function(orderId) {
    	erp_InvoiceManagerService.queryForApply({
    		"orderId" : orderId
    	}, function(resp) {
            if(!resp.error) {
            	$scope.invoice = resp.data;
            	$scope.invoice.heading = "1";
            	$('#erpStudentMgrInvoiceApplyPanel').modal('show');
            } else{
            	$uibMsgbox.error(resp.message);
            }
    	});
    }
    
    $scope.setTaxNum = function() {
    	if ($scope.invoice.heading == "1") {
    		$scope.invoice.taxNum = $scope.invoice.companyName;
    	}    
    }
    
    $scope.clearTaxNumAndCompName = function() {
		$scope.invoice.taxNum = null;
		$scope.invoice.companyName = null;
    }
    
    $scope.handleInvoiceApply = function() {
        var _modalInstance = $uibMsgbox.waiting('发票申请中，请稍候...');
    	erp_InvoiceManagerService.post($scope.invoice, function(resp) {
            _modalInstance.close();
            if(!resp.error) {
            	$uibMsgbox.success("发票申请成功");
            	$('#erpStudentMgrInvoiceApplyPanel').modal('hide');
            } else{
            	$uibMsgbox.error(resp.message);
            }
    	});
    }
    
    $scope.handleInvoiceApplyCancel = function() {
    	$('#erpStudentMgrInvoiceApplyPanel').modal('hide');
    }

    queryStudentInfo();
}
angular.module('ework-ui').controller('erp_studentIndexScheduleController', [
  '$rootScope',
  '$scope',
  '$log',
  '$uibMsgbox',
  'calendarConfig',
  'erp_studentScheduleService',
  erp_studentIndexScheduleController
]);

function erp_studentIndexScheduleController(
  $rootScope,
  $scope,
  $log,
  $uibMsgbox,
  calendarConfig,
  erp_studentScheduleService
) {
  moment.locale('zh-cn');
  $scope.monthList = [{
      name: '1月',
      value: 0
    }, {
      name: '2月',
      value: 1
    }, {
      name: '3月',
      value: 2
    }, {
      name: '4月',
      value: 3
    }, {
      name: '5月',
      value: 4
    }, {
      name: '6月',
      value: 5
    }, {
      name: '7月',
      value: 6
    }, {
      name: '8月',
      value: 7
    }, {
      name: '9月',
      value: 8
    }, {
      name: '10月',
      value: 9
    }, {
      name: '11月',
      value: 10
    }, {
      name: '12月',
      value: 11
    }]
  $scope.yearList = []
  var startYear = new Date().getFullYear() + 5;
  for (var i = 0; i < 10; i++) {
    $scope.yearList.push(startYear - i);
  }
    // 日历配置
  $scope.calendar = {
    view: 'month',
    viewDate: new Date(),
    events: [{
      title: '语文',
      startsAt: moment().startOf('day').add(8, 'hours').toDate(),
      endsAt: moment().startOf('day').add(9, 'hours').toDate()
    }]
  };

  $scope.$watch('calendar.view', function (newValue, oldValue) {

  })
  $scope.detail = {
    dateStr: moment().format('YYYY-MM-DD dddd'),
    dayStr: moment().format('DD'),
    courseList: []
  };

  $scope.dateRange = {
    year: moment().year(),
    month: moment().month()
  }
  $scope.searchParam = {
    p_student_id: $("#rootIndex_studentId").val(),
    p_attend_type: '21,28', //正常上课、正常排课
    p_start_date: moment().startOf('month').format('YYYY-MM-DD'),
    p_end_date: moment().endOf('month').format('YYYY-MM-DD')
  };

  $scope.onViewChangeClick = function(calendarDate,calendarNextView) {
    $scope.timeSpanClick(calendarDate);
  }
  $scope.getSearchParam = function () {
    var m = moment({
      y: $scope.dateRange.year,
      M: $scope.dateRange.month
    });
    $scope.searchParam.p_start_date = m.startOf('month').format('YYYY-MM-DD');
    $scope.searchParam.p_end_date = m.endOf('month').format('YYYY-MM-DD');
  }
  $scope.timeSpanClick = function(calendarDate) {
    var date = moment(calendarDate);
    $scope.detail.dateStr = date.format('YYYY-MM-DD dddd');
    $scope.detail.dayStr = date.format('DD');
    $scope.detail.courseList.splice(0, $scope.detail.courseList);
    var list = _.filter($scope.calendar.events, { course_date: Number(date.format('YYYYMMDD')) });
    $scope.detail.courseList = list;
  };


  $scope.addCourse = function(courseList) {
    _.forEach(courseList, function(course) {
      course.title = (course.course_name || ' ') + (course.subject_name || ' ');
      var startTimeStr = '' + course.course_date + ' ' + course.start_time;
      var endTimeStr = '' + course.course_date + ' ' + course.end_time;
      course.startsAt = moment(startTimeStr, 'YYYYMMDD HH:mm').toDate();
      course.endsAt = moment(endTimeStr, 'YYYYMMDD HH:mm').toDate();
      $scope.calendar.events.push(course);
    });
    var m = moment({
      y: $scope.dateRange.year,
      M: $scope.dateRange.month
    });
    var newDate = m.startOf('month').toDate();
    $scope.timeSpanClick(newDate);
  };

  $scope.removeAllCourse = function() {
    $scope.calendar.events.splice(0, $scope.calendar.events.length)
  };

  $scope.prevYear = function () {
    if ($scope.dateRange.year > _.last($scope.yearList)) {
      $scope.dateRange.year --;
      $scope.getCourseList();
    }
  }

  $scope.nextYear = function () {
    if ($scope.dateRange.year < _.head($scope.yearList)) {
      $scope.dateRange.year ++;
      $scope.getCourseList();
    }
  }

  $scope.prevMonth = function () {
    if ($scope.dateRange.month > 0) {
      $scope.dateRange.month--;
      $scope.getCourseList();
    }
  }

  $scope.nextMonth = function () {
    if ($scope.dateRange.month < 11) {
      $scope.dateRange.month++;
      $scope.getCourseList();
    }
  }

  $scope.queryYDYSchedule = function() {
    // 个性化课程
    erp_studentScheduleService.queryYDY($scope.searchParam, function(resp) {
      if (!resp.error) {
        $scope.addCourse(resp.data)
      } else {
        $uibMsgbox.error(resp.message);
        return;
      }
    });
  };

  $scope.queryBJKSchedule = function() {
    // 班级课
    erp_studentScheduleService.queryBJK($scope.searchParam, function(resp) {
      if (!resp.error) {
        $scope.addCourse(resp.data)
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  };
  $scope.getCourseList = function() {
    $scope.getSearchParam();
    var m = moment({
      y: $scope.dateRange.year,
      M: $scope.dateRange.month
    });
    var newDate = m.startOf('month').toDate();
    $scope.calendar.viewDate = newDate;
    $scope.removeAllCourse();
    $scope.queryBJKSchedule();
    $scope.queryYDYSchedule();
  };

  // 初始化
  $scope.initialize = function() {
    $scope.getCourseList();
  };

  $scope.initialize();
}

"use strict"
angular.module('ework-ui').controller('erp_studentIndexSheduleModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    'erp_studentOrderCourseService',
    'scheduleDetail',
    'studentId',
    'optype',
    erp_studentIndexSheduleModalController
  ])

function erp_studentIndexSheduleModalController(
  $rootScope,
  $scope,
  $uibModalInstance,
  $uibMsgbox,
  erp_studentOrderCourseService,
  scheduleDetail,
  studentId,
  optype
) {
  $scope.studentId = studentId
  $scope.paginationConf = {
      currentPage: 1, //当前页
      totalItems: 0,
      itemsPerPage: 10,
      onChange: function(){
          $scope.queryStudentOrderCourse();
      }
  };
  $scope.optype = optype;
  $scope.scheduleDetail = scheduleDetail;
  $scope.tableConf = {
    checkAllFlag: false
  }
  $scope.orderCourseList=[];
  $scope.attendTime={};
  $scope.attendPeriod={};
  $scope.orderList=[];
  $scope.schedule_type ='time';
  $scope.selectScheduleType = function(schedule_type){
        $scope.schedule_type = schedule_type;
        return true;
    }

  $scope.handleModalCancel = function() {
    $uibModalInstance.dismiss('cancel');
  }
  $scope.handleModalConfirm = function() {
    $scope.scheduleDetail.orderCourseIds=getSelectedIds();
    if($scope.scheduleDetail.orderCourseIds.length==0){
      $uibMsgbox.alert('请选择要操作的课程！');
      return;
    }
    $scope.scheduleDetail.scheduleType=$scope.schedule_type;
    if($scope.schedule_type =='time'){
      $scope.scheduleDetail.startDate=$scope.attendTime.start_date;
      $scope.scheduleDetail.start_time=$scope.attendTime.start_time;
      $scope.scheduleDetail.end_time=$scope.attendTime.end_time;
      $scope.scheduleDetail.subject_id=$scope.attendTime.subject.id;
    }else{
      $scope.scheduleDetail.attendClassPeriod=$scope.attendPeriod.period;
      $scope.scheduleDetail.courseScheduleCount=$scope.attendPeriod.hour_len;
      $scope.scheduleDetail.startDate=$scope.attendPeriod.start_date;
      $scope.scheduleDetail.endDate=$scope.attendPeriod.end_date;
      $scope.scheduleDetail.start_time=$scope.attendPeriod.start_time;
      $scope.scheduleDetail.end_time=$scope.attendPeriod.end_time;
      $scope.scheduleDetail.subject_id=$scope.attendPeriod.subject.id;
    }
    $uibModalInstance.close($scope.scheduleDetail);
  }

  function getSelectedCourseList () {
      var orderList = [];
      _.forEach($scope.orderCourseList ,function(course) {
          if (course.selectFlag) {
            orderList.push(course);
          }
      })
      return orderList;
  }

  //获取所有选中的id
  function getSelectedIds () {
      var ids = "";
      _.forEach($scope.orderCourseList ,function(course) {
          if (course.selectFlag) {
            ids+= "," + course.id;
          }
      })
      return ids.substring(1);
  }

  // 全选事件
  $scope.onCheckAll = function () {
      console.info($scope.tableConf.checkAllFlag)
      _.forEach($scope.orderCourseList ,function(course) {
          course.selectFlag = $scope.tableConf.checkAllFlag;
      })
  }

  // 某一行Checkbox选择事件
  $scope.onCourseChecked = function (course) {
      $scope.tableConf.checkAllFlag= _.every($scope.orderCourseList, {selectFlag: true});
  }

  $scope.insertLeader = function(teacher) {
        $scope.scheduleDetail.teacher_name = teacher.teacher_name;
        $scope.scheduleDetail.teacher_id = teacher.id;
  }
  // 查询方法
  $scope.queryStudentOrderCourse = function () {
    erp_studentOrderCourseService.queryOrderCourse({
          pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
          currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
          studentId: $scope.studentId,
          businessType:2
      }, function (resp) {
          if (!resp.error) {
              $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
              $scope.orderCourseList = resp.data.sort(function (a, b) {
                return a.create_time > b.create_time
              })
              _.forEach($scope.orderCourseList, function (item) {
                item.selectFlag = false
              })
          } else {
            $uibMsgbox.error(resp.message);
          }
      });
  };

  $scope.queryStudentOrderCourse();
}

/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('erp_studentScheduingController', [
    '$rootScope',
    '$scope',
    '$log',
    'erp_subjectService',
    '$uibModal',
    '$uibMsgbox', // 消息提示框服务，其他服务按需引入
    '$filter',
    '$stateParams',
    'uibDateParser',
    'PUBORGSelectedService',
    'erp_tpScheduleTimeService',
    'erp_studentOrderCourseService',
    'erp_studentIndexCounselorsService',
    'erp_studentCourseSchedulingService',
    erp_studentScheduingController
]);

function erp_studentScheduingController(
    $rootScope,
    $scope,
    $log,
    erp_subjectService,
    $uibModal,
    $uibMsgbox,
    $filter,
    $stateParams,
    uibDateParser,
    PUBORGSelectedService,
    erp_tpScheduleTimeService,
    erp_studentOrderCourseService,
    erp_studentIndexCounselorsService,
    erp_studentCourseSchedulingService
) {
    // 学生ID
    $scope.studentId = $("#rootIndex_studentId").val();
    $scope.student = null;
    $scope.studentIndexCounselors = null;
    
    function queryIndexCounselors(){
        return erp_studentIndexCounselorsService.query({
            studentId:$scope.studentId
        }).$promise.then(function(resp){
            if(!resp.error){
                $scope.studentIndexCounselors = resp.data
            } else {
                $uibMsgbox.error(resp.message)
            }
        }, function (resp) {
            $uibMsgbox.error(resp.message)
        });
    }
    $scope.moment = moment
    // 界面展示，list:显示列表，add:显示新增排课
    $scope.pageView = 'list';
    // $scope.pageView = 'add';

    /**
     *  列表页面相关数据 
     */
    // 搜索参数
    $scope.searchInfo = {
        branch_id: '',
        attend_type: null,
        start_date: moment().startOf('month').format('YYYY-MM-DD'),
        end_date: moment().endOf('month').format('YYYY-MM-DD')
    };

    // 排课列表
    $scope.scheduleList = [];

    /**
     * 分页配置
     * @param  {Number} currentPage     [当前页面，初始化时默认为1]
     * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
     * @param  {Number} itemsPerPage    [每页显示条数]
     * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
     * @param  {Array}  perPageOptions  [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
     * @param  {Function} onChange      [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
     */
    $scope.paginationConf = {
        currentPage: 1, //当前页
        totalItems: 0,
        itemsPerPage: 10,
        onChange: function () {
            $scope.query();
        }
    };

    // 查询参数
    $scope.searchParam = {};

    // 科目列表
    $scope.subjectList = [];

    // 排课状态
    $scope.attendTypeList = [
        { "key": null, "value": "全部"},
        { "key": 28, "value": "未考勤" },
        { "key": 21, "value": "正常上课" },
        { "key": 23, "value": "排课取消" },
        { "key": 29, "value": "考勤作废" }
    ];

    // 与表单绑定的数据，用于添加和修改
    $scope.scheduleDetail = {
        course_date: '',
        attend_type: null,
        scheduleType: '',
        orderCourseIds: '',
        attendClassPeriod: '',
        courseScheduleCount: '',
        startDate: '',
        endDate: '',
        start_time: '',
        end_time: '',
        subject_id: '',
        student_id: '',
        teacher_id: ''
    };


    // 处理【新增排课】按钮点击事件
    $scope.addScheduleCourse = function () {
        if (!$scope.studentIndexCounselors.LEARNINGMGR_ID || !$scope.studentIndexCounselors.LEARNINGMGR_NAME) {
            return $uibMsgbox.error('学员未绑定学管师，无法进行排课，请先绑定学管师！')
        }
        if (!$rootScope.curAccount.employeeId == 0 && 
            !$scope.studentIndexCounselors.LEARNINGMGR_ID == $rootScope.curAccount.employeeId) {
            return $uibMsgbox.error('您不是当前学员的学管师，不能对此学员进行排课！当前学员的学管师为：【' + $scope.studentIndexCounselors.LEARNINGMGR_NAME +'】')
        }
        $scope.initAddPage();
    };

    // 处理【修改排课】按钮点击事件
    $scope.editSchedule = function (schedule) {
        schedule.subjectList = $scope.subjectList;
        $uibModal.open({
            size: 'lg',
            templateUrl: 'templates/block/modal/student-scheduling-edit.modal.html',
            controller: 'erp_studentIndexSheduleEditModalController',
            resolve: {
                optype: function () {
                    return 'edit'
                },
                scheduleDetail: function () {
                    return schedule
                },
                studentId: function () {
                    return $scope.studentId
                },
                disabled: function () {
                    return true
                }
            }
        }).result.then(function (detail) {
            $scope.query();
        }, function () { });
    };

    //获取所有选中的id
    function getSelectedIds() {
        var ids = "";
        _.forEach($scope.scheduleList, function (schedule) {
            if (schedule.selectFlag) {
                ids += "," + schedule.id;
            }
        })
        return ids.substring(1);
    }

    function querySelectedOrg(){
        PUBORGSelectedService.query({},function(resp){
            if(!resp.error){
                $scope.selectedOrg = resp.data;
                if($scope.selectedOrg&&$scope.selectedOrg.id&&$scope.selectedOrg.type=="4"){
                }else{
                    $uibMsgbox.warn("请选择具体校区之后再进行学员排课!");
                }
            }else{
                $uibMsgbox.error(resp.message);
            }
        })
    }
    // 全选事件
    $scope.onScheduleCheckAll = function () {
        _.forEach($scope.scheduleList, function (schedule) {
            schedule.selectFlag = $scope.checkAllFlag;
        })
    }

    // 某一行Checkbox选择事件
    $scope.onScheduleChecked = function (schedule) {
        $scope.checkAllFlag = _.every($scope.scheduleList, { selectFlag: true });
    }

    // 处理【取消排课】按钮点击事件
    $scope.cancelScheduleCourse = function (id) {
        var ids = getSelectedIds();
        if (!ids || ids.length < 1) {
            $uibMsgbox.alert('请选定要取消排课的课程！');
            return;
        }
        $uibMsgbox.confirm('确定取消排课？', function (result) {
            if (result != 'yes') {
                return;
            }
            $scope.del(ids);
        });
    };

    // 处理【查询年级】按钮点击事件
    $scope.querySchedule = function () {
        $scope.query();
    };

    // 添加
    $scope.add = function () {
        $scope.scheduleDetail.student_id = $scope.studentId;
        delete $scope.scheduleDetail.teacher_name;
        erp_studentCourseSchedulingService.addYdyOrderCourseScheduling($scope.scheduleDetail, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success(resp.message);
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    // 修改
    $scope.put = function () {
        delete $scope.scheduleDetail.teacher_name;
        delete $scope.scheduleDetail.subjectList;
        erp_studentCourseSchedulingService.updateYdyOrderCourseScheduling(
            {
                "attend_type": $scope.scheduleDetail.attend_type,
                "id": $scope.scheduleDetail.id,
                "attTeacherName": $scope.scheduleDetail.attTeacherName,
                "teacher_id": $scope.scheduleDetail.teacher_id,
                "subject_id": $scope.scheduleDetail.subject_id
            }
            , function (resp) {
                if (!resp.error) {
                    $uibMsgbox.success(resp.message);
                    $scope.query();
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    };

    // 删除
    $scope.del = function (id) {
        var waitingModal = $uibMsgbox.waiting('操作中，请稍候...')
        erp_studentCourseSchedulingService.cancelYdyOrderCourseScheduling({
            attend_ids: id
        }, function (resp) {
            waitingModal.close();
            if (!resp.error) {
                $uibMsgbox.success(resp.message);
                $scope.query();
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    /**
     * 查询科目
     */
    function querySubject() {
        erp_subjectService.querySelectDatas({
            branch_id: $scope.searchParam.branch_id ? $scope.searchParam.branch_id : -1,
            season_id: $scope.searchParam.season_id ? $scope.searchParam.season_id : -1
        }, function (resp) {
            if (!resp.error) {
                $scope.subjectList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        })
    }

    // 查询方法
    $scope.query = function () {
        if ($scope.scheduleDetail.endDate) {
            $scope.searchInfo.end_date = $scope.scheduleDetail.endDate;
        } else {
            if ($scope.scheduleDetail.startDate) {
                $scope.searchInfo.end_date = $scope.scheduleDetail.startDate;
            }
        }
        erp_studentCourseSchedulingService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            student_id: $scope.studentId,
            branch_id: $scope.searchInfo.branch_id,
            attend_type: $scope.searchInfo.attend_type,
            start_date: $scope.searchInfo.start_date,
            end_date: $scope.searchInfo.end_date
        }, function (resp) {
            if (!resp.error) {
                $scope.paginationConf.totalItems = resp.total || 0; //设置总条数
                $scope.scheduleList = resp.data;
                _.forEach($scope.scheduleList, function (item) {
                    var date = uibDateParser.parse('' + item.course_date, 'yyyyMMdd');
                    var dateStr = $filter('date')(date, 'yyyy-MM-dd');
                    item.course_date = dateStr;
                });
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    // 排课状态
    $scope.attendType = function (type) {
        return getTypeName($scope.attendTypeList, type);
    }

    $scope.insertLeader = function (teacher) {
        $scope.scheduleDetail.teacher_name = teacher.teacher_name;
        $scope.scheduleDetail.teacher_id = teacher.id;
    }

    // 获取某类型key对应的Value
    function getTypeName(typeArray, type) {
        var text = '';
        for (var i = 0; i < typeArray.length; i++) {
            if (type == typeArray[i].key) {
                text = typeArray[i].value;
            }
        }
        return text;
    }

//-- 新增课程，界面初始化
    $scope.conflictObject = {};
    

    //-- 已经添加的排课
    $scope.addedScheduleList = [];

    $scope.attendTime = {
        start_time: '',
        end_time: '',
        subject: null,
        defaultDuration: 2 * 60 * 60 * 1000,
        period: null
    }
    $scope.attendPeriod = {
        period: '',
        hour_len: '',
        start_date: '',
        end_date: '',
        subject: ''
    }
    // 返回到列表
    $scope.goBack = function () {
        $scope.pageView = 'list'
        $scope.query();
    }

    // 初始化新增排课页面
    $scope.initAddPage = function () {
        $scope.pageView = 'add';
        $scope.getOrderCourseList();
    }
    // 切换标签页【按时间排课】/【近期排课】
    $scope.selectScheduleType = function (schedule_type) {
        $scope.schedule_type = schedule_type;
    }
//-- End 新增课程，界面初始化

//-- 新增课程，报班单相关
    // 新增课程，学员报班单列表(所有)
    $scope.orderCourseList = [];
    $scope.course_surplus_total = 0;
    // 新增课程，学员当前校区的报班单
    $scope.curBranchCourseList = [];
    // 新增课程，学员报班单是否全选
    $scope.orderCourseListCheckedAllFlag = false;
    // 获取学员课程报班单
    $scope.getOrderCourseList = function () {
        var waitingModal = $uibMsgbox.waiting('加载学员报班单中，请稍候...')
        erp_studentOrderCourseService.queryOrderCourse({
            pageSize: 999, // 每页显示条数
            currentPage: 1, // 要获取的第几页的数据
            studentId: $scope.studentId,
            isAllBranch:1,
            businessType: 2
        }).$promise.then(function (resp) {
            waitingModal.close()
            if (!resp.error) {
                var arry = _.filter(_.sortBy(resp.data, 'create_time'), function (o) {
                    return o.course_schedule_count > 0;
                })
                _.forEach(arry, function (item) {
                    item.available = item.branch_id == $scope.selectedOrg.id
                    // item.disabled = true
                    item.checked = false
                })
                $scope.orderCourseList = arry;
                $scope.curBranchCourseList = _.filter(arry, {branch_id: $scope.selectedOrg.id})
                if (_.isArray($scope.curBranchCourseList) && $scope.curBranchCourseList.length > 0) {
                    $scope.curBranchCourseList[0].checked = true;
                    $scope.onCourseChecked($scope.curBranchCourseList[0])
                }
            } else {
                $uibMsgbox.error(resp.message);
            }
        }, function (resp) {
            waitingModal.close()
        });
    }
    // 学员报班单勾选/取消事件处理
    $scope.onCourseChecked = function (course) {
        if (!_.isArray($scope.curBranchCourseList)) {
            return false
        }
        // for(var i = 0; i < $scope.curBranchCourseList.length; i ++ ) {
        //     var preCourse = $scope.curBranchCourseList[i-1]
        //     var curCourse = $scope.curBranchCourseList[i]
        //     var nextCourse = $scope.curBranchCourseList[i + 1]
        //     if (curCourse.checked) {
        //         curCourse.disabled = !!(nextCourse && nextCourse.checked)
        //     } else {
        //         curCourse.disabled = !!(preCourse && !preCourse.checked)
        //     }
        // }
        $scope.orderCourseListCheckedAllFlag = _.every($scope.curBranchCourseList, {checked: true})
    }
    // 全选/反选课程
    $scope.onCheckAllOrderCourse = function() {
        _.forEach($scope.curBranchCourseList, function (item)  {
            item.checked = $scope.orderCourseListCheckedAllFlag
        })
        $scope.onCourseChecked()
    }
//-- End 新增课程，报班单相关

//-- 新增课程，时间档期
    $scope.schedule_type = 'time';
    // 时间档期列表
    $scope.tpScheduleTimeList = []
    // 获取时间档期列表
    $scope.getTpScheduleTimeList = function () {
        erp_tpScheduleTimeService.queryList({}, function (resp) {
            if (!resp.error) {
                _.forEach(resp.data, function (item) {
                    item.checked = false
                })
                $scope.tpScheduleTimeList = resp.data
            } else {
                $uibMsgbox.error(resp.message)
            }
        })
    }
    // 时间档期切换事件处理
    $scope.onTpScheduleTimeChange = function (period) {
        _.forEach($scope.tpScheduleTimeList, function (period) {
            period.checked = false
        })
        $scope.attendTime.period = period
        $scope.attendTime.start_time = period.startTime
        $scope.attendTime.end_time = period.endTime
        $scope.attendTime.defaultDuration = moment(period.endTime, 'HH:mm')
            - moment(period.startTime, 'HH:mm')
        period.checked = true
    }
    // 监听排课开始时间，改变时，结束时间也相应改变
    $scope.$watch('attendTime.start_time', function (newValue, oldValue) {
        $scope.attendTime.end_time = moment(moment(newValue, 'HH:mm')
            + $scope.attendTime.defaultDuration).format('HH:mm')
    })
//-- End 新增课程，时间档期

//-- 已选择教师
    $scope.scheduleSelectedTeacher = null
    // 选择老师事件处理
    $scope.onSelectTeacher = function (teacher) {
        $scope.scheduleSelectedTeacher = _.cloneDeep(teacher)
    }
//-- End 已选择教师 

//-- 日历相关
    $scope.calendar = {
        yearMonth: moment().format('YYYY年MM月'),
        weeks: getCalendar(moment()),
        currentDate: moment(),
        checkedDays: []
    }
    function getCalendar(curDate, checkedList) {
        // 已经选择的日期
        checkedList = checkedList || []
        // 当前日期
        var curMoment = moment(curDate)
        // 本月第一天
        var curMonthFirstDay = moment(curMoment.startOf('month'))
        // 本月最后一天
        var curMonthLastDay = moment(curMoment.endOf('month'))
        // 本月第一天是一周中的第几天（周日第0天，周一第1天...周六第6天）
        var curMonthFirstDayWeek = curMonthFirstDay.day()
        // 本月最后一天是一周中的第几天
        var curMonthLastDayWeek = curMonthLastDay.day()
        // 当前月日历的第一天（例如本月第一天是周三，那就需要再填充三天）
        var calFirstDay = moment(curMonthFirstDay).subtract((curMonthFirstDayWeek + 6) % 7, 'day')
        // 当前月日历的最后一天
        var calLastDay = moment(curMonthLastDay).add((6 - (curMonthLastDayWeek + 6) % 7), 'day')
        // 当前月日历的所有天数
        var daysArray = []
        var dayPointer = moment(calFirstDay)
        for (; dayPointer < calLastDay; dayPointer.add('day', 1)) {
            // 当前日期是否已经选择
            var isChecked = false
            // 查看当前日期是否在已经选择的日期列表中
            _.forEach(checkedList, function (item) {
                var d = moment(item.value)
                if (d.format('YYYYMMDD') == dayPointer.format('YYYYMMDD')) {
                    isChecked = true
                }
            })
            daysArray.push({
                time: moment(dayPointer),
                date: dayPointer.date(),
                month: dayPointer.month(),
                isChecked: isChecked,
                isCurrentMonth: dayPointer.month() == curDate.month()
            })
        }
        return _.chunk(daysArray, 7)
    }
    function reloadCalendar(calendar) {
        calendar.yearMonth = calendar.currentDate.format('YYYY年MM月')
        calendar.weeks = getCalendar(calendar.currentDate, calendar.checkedDays)
    }
    $scope.calendarToggleCheck = function (day) {
        day.isChecked = !day.isChecked;
        var dayStr = day.time.format('YYYY-MM-DD')
        var checkedDays = $scope.calendar.checkedDays
        if (day.isChecked && !_.some(checkedDays, {value: dayStr})) {
            checkedDays.push({
                key: moment(dayStr, 'YYYY-MM-DD').format('YYYYMMDD'),
                value: dayStr
            })
        }
        if (!day.isChecked) {
            checkedDays.splice(_.findIndex(checkedDays, {value: dayStr}), 1)
        }
    }
    $scope.calendarDecrement = function (calendar, type) {
        calendar.currentDate.subtract(1, type)
        reloadCalendar(calendar)
    }
    $scope.calendarIncrement = function (calendar, type) {
        calendar.currentDate.add(1, type)
        reloadCalendar(calendar)
    }
    $scope.clearAllCalendarChecked = function (calendar) {
        calendar.checkedDays.splice(0, calendar.checkedDays.length)
        reloadCalendar(calendar)
    }
    $scope.setCalendarToCurrenDay = function (calendar) {
        calendar.currentDate = moment()
        reloadCalendar(calendar)
    }
    $scope.deleteCheckDay = function (day) {
        var idx = _.findIndex($scope.calendar.checkedDays, {key: day.key})
        $scope.calendar.checkedDays.splice(idx, 1)
        reloadCalendar($scope.calendar)
    }
//-- End 日历相关

//-- 按时间添加排课，确定添加
    // 校验按时间添加排课
    function validAddScheduleByTime () {
        if (getSelectedCourseList($scope.orderCourseList).length <= 0) {
            $uibMsgbox.error('请先选择报班单！')
            return false
        }
        if (!$scope.attendTime.start_time) { 
            $uibMsgbox.error('请选择上课时间')
            return false
        }
        if (!$scope.attendTime.end_time) {
            $uibMsgbox.error('请选择下课时间')
            return false
        }
        if (!$scope.attendTime.subject) { 
            $uibMsgbox.error('请选择科目') 
            return false
        }
        if (!$scope.scheduleSelectedTeacher) {
            $uibMsgbox.error('请选择老师')
            return false
        }
        if (!_.isArray($scope.calendar.checkedDays) || $scope.calendar.checkedDays.length <= 0) {
            $uibMsgbox.error('请至少选择一个日期')
            return false
        }
        return true
    }
    // 检测课程是否冲突
    function queryConflictScheduling (
        studentId,
        startTime,
        endTime,
        teacherId,
        checkedDays,
        callback ) {
        var waitingModal = $uibMsgbox.waiting('排课校验中，请稍候...')
        var schedulingArry = []
        _.forEach(checkedDays, function (courseDay) {
            schedulingArry.push({
                student_id: studentId,
                start_time: startTime,
                end_time: endTime,
                teacher_id: teacherId,
                course_date: courseDay.key
            })
        })
        return erp_studentCourseSchedulingService.queryConflictScheduling(schedulingArry)
            .$promise.then(function (resp) {
                waitingModal.close()
                if (!resp.error) {
                    callback(resp)
                } else {
                    $uibMsgbox.error(resp.message)
                }
            }, function (resp) {
                $uibMsgbox.error(resp.message)
            });
    }
    // 获取已选择的报班单
    function getSelectedCourseList(courseList) {
        var courseIdList = [];
        _.forEach(courseList, function (course) {
            if (course.checked) {
                courseIdList.push(course.id);
            }
        })
        return courseIdList.join(',');
    }

    $scope.addScheduleByTime = function () {
        if (!validAddScheduleByTime()) {
            return false
        }
        queryConflictScheduling(
            $scope.studentId,
            $scope.attendTime.start_time,
            $scope.attendTime.end_time,
            $scope.scheduleSelectedTeacher.id,
            $scope.calendar.checkedDays,
            function (resp) {
                $scope.conflictObject = resp.data
                $scope.conflictList = []
                _.forIn(resp.data, function (value, key) {
                    $scope.conflictList.push(value[0])
                })
                _.forEach($scope.calendar.checkedDays, function(day) {
                    if(!!$scope.conflictObject[day.key]) {
                        day.cls="danger"
                    }
                })
                $scope.conflictList = _.orderBy($scope.conflictList, 'course_date')
                var courseIdListStr = getSelectedCourseList($scope.orderCourseList);
                $uibModal.open({
                    backdrop: false,
                    templateUrl: 'newScheduleListByDate.html',
                    size: 'xlg',
                    scope: $scope,
                    controller: ['$scope', function($scope){
                        $scope.onOk = function () {
                            if($scope.calendar.checkedDays.length <= 0) {
                                return $uibMsgbox.error('排课列表为空，请选择排课日期！', function () {
                                    $scope.$dismiss();
                                })
                            }
                            var scheduleList = []
                            _.forEach($scope.calendar.checkedDays, function (day) {
                                scheduleList.push({
                                    orderCourseIds: courseIdListStr,
                                    scheduleType: "time",
                                    student_id: $scope.studentId,
                                    start_time: $scope.attendTime.start_time,
                                    end_time: $scope.attendTime.end_time,
                                    startDate: day.value,
                                    subject_id: $scope.attendTime.subject.id,
                                    teacher_id: $scope.scheduleSelectedTeacher.id
                                })
                            })
                            var waitingModal = $uibMsgbox.waiting('排课中，请稍候...')
                            erp_studentCourseSchedulingService.addYdyOrderCourseSchedulingList(
                                scheduleList, function (resp) {
                                waitingModal.close();
                                if (!resp.error) {
                                    if(!_.isArray($scope.addedScheduleList)) {
                                        $scope.addedScheduleList = []
                                    }
                                    _.forEach(resp.data, function (item) {
                                        $scope.addedScheduleList.push(item)
                                    })
                                    $uibMsgbox.success(resp.message || '添加排课成功！', function(){
                                        $scope.$close();
                                    });
                                } else {
                                    $uibMsgbox.error(resp.message);
                                }
                            });
                        }
                    }]
                }).result.then(function () {
                    $scope.getOrderCourseList();
                    $scope.query();
                    $scope.calendar.checkedDays.splice(0, $scope.calendar.checkedDays.length)
                    $scope.attendTime.period = null
                    $scope.attendTime.start_time = ''
                    $scope.attendTime.end_time = ''
                    reloadCalendar($scope.calendar)
                })
            }
        )
    }
    
    $scope.addScheduleByPeriod = function () {
        var courseIdListStr = getSelectedCourseList($scope.orderCourseList);
        if(courseIdListStr.length==0){
            $uibMsgbox.alert('请选择要操作的课程！');
            return;
        }
        var scheduleDetail = {
            orderCourseIds: courseIdListStr
        }
        scheduleDetail.scheduleType=$scope.schedule_type;
        scheduleDetail.attendClassPeriod=$scope.attendPeriod.period;
        scheduleDetail.courseScheduleCount=$scope.attendPeriod.hour_len;
        scheduleDetail.startDate=$scope.attendPeriod.start_date;
        scheduleDetail.endDate=$scope.attendPeriod.end_date;
        scheduleDetail.start_time=$scope.attendTime.start_time;
        scheduleDetail.end_time=$scope.attendTime.end_time;
        scheduleDetail.teacher_id = $scope.scheduleSelectedTeacher.id;
        scheduleDetail.subject_id=$scope.attendPeriod.subject.id;
        scheduleDetail.student_id = $scope.studentId;
        erp_studentCourseSchedulingService.addYdyOrderCourseScheduling(scheduleDetail, function (resp) {
            if (!resp.error) {
                $uibMsgbox.success(resp.message);
                if(!_.isArray($scope.addedScheduleList)) {
                    $scope.addedScheduleList = []
                }
                _.forEach(resp.data, function (item) {
                    $scope.addedScheduleList.push(item)
                })
                $scope.getOrderCourseList()
            } else {
                $uibMsgbox.error(resp.message);
            }
        });

    }
//--End 按时间添加排课，确定添加
    activate();

//-- 页面加载后初始化页面
    // $scope.initAddPage();
    function activate() {
        $scope.query();
        $scope.getTpScheduleTimeList();
        querySubject();
        querySelectedOrg();
        queryIndexCounselors($scope.studentId).then(function() {
            if ($stateParams.optype == 'newScheduling') {
            $scope.addScheduleCourse();
            }
        })
    }
}

"use strict"
angular.module('ework-ui').controller('erp_studentIndexSheduleEditModalController', [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    'scheduleDetail',
    'studentId',
    'disabled',
    '$uibMsgbox',
    'erp_studentCourseSchedulingService',
    erp_studentIndexSheduleEditModalController
  ])

function erp_studentIndexSheduleEditModalController(
  $rootScope,
  $scope,
  $uibModalInstance,
  scheduleDetail,
  studentId,
  disabled,
  $uibMsgbox,
  erp_studentCourseSchedulingService
) {
  var deltaTime = moment(scheduleDetail.end_time, 'hh:mm') - moment(scheduleDetail.start_time, 'hh:mm')
  $scope.scheduleDetail = scheduleDetail;
  $scope.disabled = disabled;
  scheduleDetail.teacher_name=scheduleDetail.attTeacherName;
  $scope.handleModalCancel = function() {
    $uibModalInstance.dismiss('cancel')
  }
  $scope.$watch('scheduleDetail.start_time', function (newValue, oldValue) {
    if (newValue != oldValue) {
      $scope.scheduleDetail.end_time = moment(newValue, 'HH:mm').add(deltaTime).format('HH:mm')
    }
  })
  $scope.$watch('scheduleDetail.end_time', function (newValue, oldValue) {
    if (newValue != oldValue) {
      $scope.scheduleDetail.start_time = moment(newValue, 'HH:mm').subtract(deltaTime).format('HH:mm')
    }
  })
  $scope.handleModalConfirm = function() {
    var waitingModal = $uibMsgbox.waiting('保存中，请稍候...')
    erp_studentCourseSchedulingService.updateYdyOrderCourseScheduling({
      "attend_type": $scope.scheduleDetail.attend_type,
      "id": $scope.scheduleDetail.id,
      "attTeacherName": $scope.scheduleDetail.attTeacherName,
      "teacher_id": $scope.scheduleDetail.teacher_id,
      "subject_id": $scope.scheduleDetail.subject_id,
      "course_date": moment($scope.scheduleDetail.course_date).format('YYYYMMDD'),
      "start_time": $scope.scheduleDetail.start_time,
      "student_id": studentId,
      "end_time": $scope.scheduleDetail.end_time
    }, function (resp) {
      waitingModal.close()
      if (!resp.error) {
          $uibMsgbox.success(resp.message);
          $uibModalInstance.close()
      } else {
          $uibMsgbox.error(resp.message);
      }
    });
  }
  $scope.insertLeader = function(teacher) {
        $scope.scheduleDetail.teacher_name = teacher.teacher_name;
        $scope.scheduleDetail.teacher_id = teacher.id;
  }
}

(function () {
  'use strict';

  angular
    .module('ework-ui')
    .controller('StudentScoreController', StudentScoreController);

  StudentScoreController.$inject = [
    '$scope',
    '$uibMsgbox',
    '$uibModal',
    'erp_dictService',
    'erp_studentsService',
    'erp_studentScoreService'];

  function StudentScoreController(
    $scope,
    $uibMsgbox,
    $uibModal,
    erp_dictService,
    erp_studentsService,
    erp_studentScoreService
  ) {
    var vm = this;

    $scope.studentId = $("#rootIndex_studentId").val();
    $scope.student = {};
    $scope.scoreList = [];
    $scope.examTypeList = [];
    $scope.schoolTermList = [];
    $scope.progressList = [];
    $scope.progressMap = {
      1: '进步',
      2: '退步',
      3: '持平'
    }
    $scope.pageConf = {
      currentPage: 1, //当前页
      totalItems: 0,
      itemsPerPage: 10,
      onChange: function(){
          $scope.doSearch();
      }
    }
    $scope.searchParam = {
      gradeId: null,
      // subjectId: null,
      term: null,
      examType: null
    }

    ////////////////
    // 获取列表
    $scope.doSearch = function () {
      $scope.searchParam.studentId = $scope.studentId;
      $scope.searchParam.currentPage = $scope.pageConf.currentPage;
      $scope.searchParam.pageSize = $scope.pageConf.itemsPerPage;
      erp_studentScoreService.query($scope.searchParam).$promise
        .then(function (resp) {
          if (!resp.error) {
            _.forEach(resp.data, function (item) {
              item.showDetailList = false;
            })
            $scope.scoreList = resp.data;
            $scope.pageConf.totalItems = resp.total;
          } else {
            $uibMsgbox.error(resp.message);
          }
        }, function (resp) {
          $uibMsgbox.error(resp);
        })
    }

    function openScoreDetailModal (optype, score) {
      return $uibModal.open({
        size: 'lg',
        backdrop: 'static',
        resolve: {
          optype: function () {
            return optype
          },
          score: function () {
            return score
          },
          student: function () {
            return $scope.student
          },
          schoolTermList: function () {
            return $scope.schoolTermList
          },
          examTypeList: function () {
            return $scope.examTypeList
          }
        },
        templateUrl: 'studentScoreDetail.html',
        controller: [
          '$scope', 
          '$uibMsgbox',
          'optype',
          'student',
          'examTypeList',
          'schoolTermList',
          'erp_dictService',
          'erp_studentSchoolService', 
          function (
            $scope, 
            $uibMsgbox,
            optype,
            student,
            examTypeList,
            schoolTermList,
            erp_dictService,
            erp_studentSchoolService
          ) {
            $scope.forms = {};
            $scope.optype = optype;
            $scope.student = student;
            $scope.examTypeList = examTypeList;
            $scope.schoolTermList = schoolTermList;
            $scope.school = {}
            $scope.progressList = [{
              value: '1', label: '进步'
            }, {
              value: '2', label: '退步'
            }, {
              value: '3', label: '持平'
            }];

            $scope.scoreRankingTypeList = [];

            $scope.score = {
              term: null,
              studentScoreList: [],
              gradeId: ''
            }
            if (optype == 'edit' && score) {
              $scope.score = {
                id: score.id || null,
                studentId: score.studentId || student.id,
                schoolId: score.schoolId || student.attend_school_id,
                gradeId: score.gradeId || student.gradeId,
                term: score.term || '',
                examType: score.examType || '',
                studentScoreList: score.studentScoreList || [],
                studentScoreRankingList: score.studentScoreRankingList || []
              }
            }
            $scope.getSchools = function(schoolName) {
              return erp_studentSchoolService.query({
                pageSize: 20,
                currentPage: 1,
                school_name: schoolName
              }).$promise.then(function(resp) {
                return resp.data
              })
            }
            $scope.addScoreItem = function () {
              if (!_.isArray($scope.score.studentScoreList)) {
                $scope.score.studentScoreList = []
              }
              $scope.score.studentScoreList.push({
                progress: '3',
                fullMark: 100
              })
            }

            $scope.addScoreRankingItem = function() {
              if (!_.isArray($scope.score.studentScoreRankingList)) {
                $scope.score.studentScoreRankingList = []
              }
              $scope.score.studentScoreRankingList.push({
                scoreRankingType: '',
                ranking: ''
              });
            }

            $scope.deleteScoreItem = function(idx) {
              $scope.score.studentScoreList.splice(idx, 1)
            }

            $scope.deleteScoreRankingItem = function(idx) {
              $scope.score.studentScoreRankingList.splice(idx, 1);
            }

            function valid () {
              if (!$scope.forms.score.$valid) {
                $uibMsgbox.error('请校验输入是否正确，带*号的必填荐是否都有填写！')
                return false
              }
              if(_.isArray($scope.score.studentScoreList)) {
                for (var i = 0; i < $scope.score.studentScoreList.length; i ++ ) {
                  var item = $scope.score.studentScoreList[i]
                  var prefix = '序号为【' + (i + 1) +'】的单科成绩信息校验失败：'
                  if (!item.subjectId) {
                    $uibMsgbox.error( prefix + '未选择【科目】，请选择【科目】！')
                    return false
                  }
                  if (!item.score || !_.isNumber(+item.score) || item.score < 0) {
                    $uibMsgbox.error(prefix + '【成绩】输入不合法！')
                    return false
                  }
                  if (!item.fullMark || !_.isNumber(+item.fullMark) || item.score < 0) {
                    $uibMsgbox.error(prefix + '【满分】分数输入不合法！')
                    return false
                  }
                  if (item.fullMark < item.score) {
                    $uibMsgbox.error(prefix + '【成绩】不能大于【满分】成绩！')
                    return false
                  }
                }
              } else {
                $uibMsgbox.error('请至少输入一条学生单科成绩！')
                return false
              }
              return true
            }
            $scope.onOk = function () {
              if (!valid()) {
                return false;
              }
              $scope.score.studentId = student.id
              $scope.score.schoolId = $scope.school.id

              var serviceRet = null
              if (optype == 'add') {
                serviceRet = erp_studentScoreService.post($scope.score)
              } else {
                serviceRet = erp_studentScoreService.put($scope.score)
              }
              var waitingModal = $uibMsgbox.waiting('保存中，请稍候！');
              serviceRet.$promise.then(function (resp) {
                waitingModal.close();
                if (!resp.error) {
                  $scope.$close()
                } else {
                  $uibMsgbox.error(resp.message)
                }
              }, function (resp) {
                waitingModal.close();
                $uibMsgbox.error('请求失败：' + resp)
                console.log(resp)
              })
            }
            
            init()
            ///////

            function init() {
              if (!$scope.score.gradeId && student.grade_id) {
                $scope.score.gradeId = student.grade_id
              }
              if (student.attend_school_name && student.attend_school_id) {
                $scope.school = {
                  id: student.attend_school_id,
                  school_name: student.attend_school_name
                }
              }

              queryScoreRankingTypeList ();
            }
            
            function queryScoreRankingTypeList () {
              return erp_dictService.get({
                code: 'scoreRankingType'
              }).$promise.then(function (resp) {
                if (!resp.error) {
                  $scope.scoreRankingTypeList = resp.data;
                } else {
                  $uibMsgbox.error(resp.message);
                }
              }, function (resp) {
                $uibMsgbox.error(resp)
              })
            }
          }]
      })
    }
    $scope.handleAddScore = function () {
      openScoreDetailModal('add').result.then(function() {
        $scope.doSearch()
      }, function () {})
    }

    $scope.handleEditScore = function (score) {
      openScoreDetailModal('edit', score).result.then(function() {
        $scope.doSearch()
      }, function () {})
    }

    $scope.handleDeleteScore = function (score) {
      $uibMsgbox.confirm('确定删除所选成绩档案？', function(res) {
        if (res == 'yes') {
          erp_studentScoreService.delete({
            id: score.id
          }).$promise.then(function(resp) {
            if (!resp.error) {
              $scope.doSearch()
            } else {
              $uibMsgbox.error(resp.message)
              $scope.doSearch()
            }
          })
        }
      })
    }

    function queryStudentInfo () {
      return erp_studentsService.query({
        row_num: 20,
        studentId: $scope.studentId
      }).$promise.then(function(resp) {
        if (!resp.error && resp.data.length) {
          $scope.student = resp.data[0];
        } else {
          $uibMsgbox.error('查询不到学生信息！');
        }
      }, function () {});
    }

    // 获取学期列表
    function querySchoolTermList () {
      return erp_dictService.get({
        code: 'term'
      }).$promise.then(function (resp) {
        if (!resp.error) {
          $scope.schoolTermList = resp.data;
        } else {
          $uibMsgbox.error(resp.message);
        }
      }, function (resp) {
        $uibMsgbox.error(resp);
      })
    }

    // 获取考试类型列表
    function queryExamTypeList () {
      return erp_dictService.get({
        code: 'examType'
      }).$promise.then(function (resp) {
        if (!resp.error) {
          $scope.examTypeList = resp.data;
        } else {
          $uibMsgbox.error(resp.message);
        }
      }, function (resp) {
        $uibMsgbox.error(resp)
      })
    }

    // 获取学生进步情况列表
    function queryStuProgressList () {
      return erp_dictService.get({
        code: 'progress'
      }).$promise.then(function (resp) {
        if (!resp.error) {
          $scope.progressList = resp.data;
        } else {
          $uibMsgbox.error(resp.message);
        }
      }, function (resp) {
        $uibMsgbox.error(resp)
      })
    }

    

    //////////////////
    activate();

    function activate() {
      // 获取学生信息
      queryStudentInfo().then(function () {
        $scope.searchParam.gradeId = $scope.student.grade_id
        return querySchoolTermList()
      }).then(function () {
        return queryExamTypeList()
      }).then(function () {
        return queryStuProgressList()
      }).then(function () {
        $scope.doSearch()
      })
    }
  }
})();
/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_StudentOrdersWfdController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_studentOrdersWFDService',
        'erp_studentsService',
        erp_StudentOrdersWfdController]);

function erp_StudentOrdersWfdController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_studentOrdersWFDService,
    erp_studentsService) {
    //学员信息
    $scope.student = {};

    var date = new Date();
    var mm = date.getMonth();
    var yy = date.getFullYear();
    $scope.selectMonthModel = [
        {
            value : -1,
            label : '全部'
        },
        {
            value : 1,
            label : '最近1个月'
        },
        {
            value : 2,
            label : (mm - 1 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 1 >= 0 ? mm
                    : mm + 1 + 12 - 1))
                + '月'
        },
        {
            value : 3,
            label : (mm - 2 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 2 >= 0 ? mm - 1
                    : mm + 1 + 12 - 2))
                + '月'
        },
        {
            value : 4,
            label : (mm - 3 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 3 >= 0 ? mm - 2
                    : mm + 1 + 12 - 3))
                + '月'
        },
        {
            value : 5,
            label : (mm - 4 >= 0 ? yy : yy - 1)
                + '年'
                + ((mm - 4 >= 0 ? mm - 3
                    : mm + 1 + 12 - 4))
                + '月'
        } ];

    $scope.monthOrder = $scope.selectMonthModel[0];


    $scope.isLoading = '';
    $scope.selectMonth = function(month){
        $scope.monthOrder = month;
        queryStudentOrdersWfd();
    }

    function queryStudentOrdersWfd(){
        $scope.isLoading = 'isLoading';
        $log.log($scope.monthOrder.value);
        erp_studentOrdersWFDService.query({
            studentId:$scope.studentId,
            month:$scope.monthOrder.value
        },function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.orderInfoList = resp.data;
            }
        });
    }



    $scope.studentId = $("#rootIndex_studentId").val();

    function queryStudentInfo(){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                    alert(resp.message);
                }
            });
    }
    function initial(){
        queryStudentOrdersWfd();
        $('title').text('学员|'+ $scope.student.student_name);
    }

    $scope.detailOrderHref = ' ';
    $scope.toOrderDetail = function(orderInfo){
        var isTemporaryOrder = false; //是否临时订单
        if(orderInfo.CHECK_STATUS==1 && orderInfo.VALID_STATUS != 0 ||   //暂存
            orderInfo.VALID_STATUS == 0 && !orderInfo.PAY_STATUS ||       //已删除
            orderInfo.CHECK_STATUS==4 && orderInfo.VALID_STATUS == 1 && !orderInfo.PAY_STATUS ||  //未通过
            orderInfo.CHECK_STATUS==3 && orderInfo.VALID_STATUS == 1 && !orderInfo.PAY_STATUS  ||  //待缴费
            orderInfo.CHECK_STATUS==2 && orderInfo.VALID_STATUS == 1                           //审核中
        ) {
            isTemporaryOrder = true;
        }
        var href = '?studentId=' + orderInfo.STUDENT_ID + '&orderId=' + orderInfo.ORDER_ID;
        href += isTemporaryOrder == true ? '&orderType=temporaryOrder' : '';
        href += '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
        $scope.detailOrderHref = href;

        $cookieStore.put("currentOrderId",orderInfo.ORDER_ID);
        return true;
    };

    queryStudentInfo();
}
/**
 * @author liufq@klxuexi.org 2017/04/12
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_StudentOrdersYdyController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        '$uibMsgbox',
        'erp_studentsService',
        'erp_studentOrdersYdyService',
        erp_StudentOrdersYdyController]);

function erp_StudentOrdersYdyController(
	$rootScope,
	$scope,
	$cookieStore,
    $log,
    $uibMsgbox,
    erp_studentsService,
    erp_studentOrdersYdyService) {
    //学员信息
    $scope.student = {};

    $scope.selectMonthModel = [
        {
            value : -1,
            label : '全部'
        },
        {
            value : 1,
            label : '最近1个月'
        },
        {
        	value : 2,
            label : '最近2个月'
        },
        {
        	value : 3,
            label : '最近3个月'
        },
        {
        	value : 4,
            label : '最近4个月'
        },
        {
        	value : 5,
            label : '最近5个月'
        } ];

    $scope.monthOrder = $scope.selectMonthModel[0];
    
    /**
	 * 分页配置
	 * 
	 * @param {Number}
	 *            currentPage [当前页面，初始化时默认为1]
	 * @param {Number}
	 *            totalItems [数据总条数，每次查询时赋值]
	 * @param {Number}
	 *            itemsPerPage [每页显示条数]
	 * @param {Number}
	 *            pagesLength [可选，分页栏长度,默认为9]
	 * @param {Array}
	 *            perPageOptions [可选，默认]
	 * @param {Function}
	 *            perPageOptions [description]
	 */
	$scope.paginationConf = {
		currentPage : 1, // 当前页
		totalItems : 0,
		onChange : function() {
			queryStudentOrdersYdy();
		}
	}
    
    $scope.isLoading = '';
    $scope.selectMonth = function(month){
        $scope.monthOrder = month;
        queryStudentOrdersYdy();
    }

    function queryStudentOrdersYdy(){
        $scope.isLoading = 'isLoading';
        $log.log($scope.monthOrder.value);
        erp_studentOrdersYdyService.query({
        	pageSize : $scope.paginationConf.itemsPerPage,
			currentPage : $scope.paginationConf.currentPage,
            studentId:$scope.studentId,
            month:$scope.monthOrder.value,
            businessType:2
        },function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.courseYDYInfoList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
				$uibMsgbox.error(resp.message);
			}
        });
    }

    $scope.studentId = $("#rootIndex_studentId").val();
    
    function queryStudentInfo(){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                    alert(resp.message);
                }
            });
    }
    
    function initial(){
        queryStudentOrdersYdy();
        $('title').text('学员|'+ $scope.student.student_name);
    }

    queryStudentInfo();
}
/**
 * Created by Liyong.zhu on 2016/9/18.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_StudentIndexController', [
        '$rootScope',
        '$scope',
        '$log',
        '$state',
        '$uibMsgbox',
        'erp_studentIndexAccountService',
        'erp_studentIndexCounselorsService',
        'erp_studentsService',
        'erp_MessageService',
        'erp_studentContactService',
        erp_StudentIndexController]);

function erp_StudentIndexController(
    $rootScope,
    $scope,
    $log,
    $state,
    $uibMsgbox,
    erp_studentIndexAccountService,
    erp_studentIndexCounselorsService,
    erp_studentsService,
    erp_MessageService,
    erp_studentContactService) {
    //学员信息
    // debugger
    $scope.student = {};
    //学员账户信息
    $scope.studentIndexAccount = {};
    //学员咨询学管
    $scope.studentIndexCounselors = {};
    //学员报班记录查询类型
    $scope.queryHistoryType = 0;

    $scope.studentId = $("#rootIndex_studentId").val();

    $scope.queryStudentInfo = function (){
        erp_studentsService.query(
            {
                row_num: 20,
                studentId: $scope.studentId
            },
            function(resp){
                if(!resp.error && resp.data.length){
                    $scope.student = resp.data[0];
                    initial();
                }else{
                    $uibMsgbox.error('请切换到业务团队查看该学员信息');
                    window.location.href = '#/studentMgr/studentMgrCourse/studentMgrOrderDetail';
                }
            });
    }

    $scope.queryStudentInfo();

    function initial(){
        queryIndexAccount();
        queryIndexCounselors();
        $('title').text($scope.student.student_name +" | 厝边素高");
        $scope._d = (new Date()).getTime();
        $scope.studentOrdersUrl = 'templates/erp/student/studentIndex-order.html?_='+ $scope._d;
        $scope.studentOrderBJKUrl = 'templates/erp/student/studentIndex-order-bjk.html?_='+ $scope._d;
        $scope.studentOrderYDYUrl = 'templates/erp/student/studentIndex-order-ydy.html?_='+ $scope._d;
        $scope.studentOrderWFDUrl = 'templates/erp/student/studentIndex-order-wfd.html?_='+ $scope._d;
    }

    $scope.changeOrderType = function(type){
        $scope.queryHistoryType = type;
    }

    function queryIndexAccount(){
        erp_studentIndexAccountService.query({
            studentId:$scope.studentId
        },function(resp){
            if(!resp.error){
                $scope.studentIndexAccount = resp.data;
            }
        })
    }

    function queryIndexCounselors(){
        erp_studentIndexCounselorsService.query({
            studentId:$scope.studentId
        },function(resp){
            if(!resp.error){
                $scope.studentIndexCounselors = resp.data;
            }
        });
    }

    $scope.gotoBasicInfo = function () {
        window.location.href = '#/studentMgr/studentMgrBasicInfo'
    }

    $scope.onStudentSelect = function (stu) {
        window.location.href = '?studentId=' + stu.id + '#/studentMgr/studentMgrIndex'
    }

    /* 验证手机_start */
    $scope.inputPhoneCode = null;
    $scope.originPhoneCode = null;
    $scope.timer = 0;
    $scope.showVerifyPhone = function() {
        if (!$scope.student.phone) {
            alert('请填写手机号码');
            return;
        }
        $uibMsgbox.confirm('确认发送短信验证码？',function(res) {
            if(res == 'yes') {
                $("#studentIndex_validPhoneModal").modal('show');
                $scope.sendMessage();
            }
        });
    }
    //发送短信验证码
    $scope.sendMessage = function() {
        // 发送验证码
        var _uibModalInstance = $uibMsgbox.waiting('正在发送短信，请稍候...');
        erp_MessageService.sendMessage({
            mobile: $scope.student.phone
        }, function (resp) {
            _uibModalInstance.close();
            if (resp.error == true || !resp.rsp_verify_code) {
                alert('发送失败_' + resp.errMsg);
                return;
            } else {
                $scope.originPhoneCode = resp.rsp_verify_code;
            }
        });
    };
    //等待60秒后发送短信验证码
    $scope.waitAndSendMessage = function(){
        $scope.timer = 60;
        var intervalHandler = setInterval(function(){
            $scope.$apply(function(){
                $scope.timer--;
                if($scope.timer <0) {
                    $scope.timer =0;
                    clearInterval(intervalHandler);
                }
            })
        },1000);
        $scope.sendMessage();
    };
    //关闭短信验证弹出框
    $scope.cancleValidPhone = function() {
        $scope.originPhoneCode = null;
        $scope.inputPhoneCode = null;
        $("#studentIndex_validPhoneModal").modal('hide');
    }
    //短信模态框隐藏事件
    $("#studentIndex_validPhoneModal").on('hidden.bs.modal', function (e) {
        $scope.cancleValidPhone();
    })
    //验证短信
    $scope.validPhone = function() {
        if($scope.originPhoneCode == $scope.inputPhoneCode) {
            //更新学员信息中的phone_verify
            erp_studentContactService.updateDefaultContact({
                id:$scope.student.id,
                phone_verify:1
            },function(resp) {
                if (!resp.error) {
                    $uibMsgbox.alert("设置成功！");
                    $scope.queryStudentInfo();
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
            $scope.cancleValidPhone();
        } else {
            $uibMsgbox.warn("短信验证码错误");
        }
    }
    /* 验证手机_end */
}
/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular.module('ework-ui').controller(
    'erp_StudentMineController',
    ['$rootScope', '$scope', '$uibMsgbox',
        'erp_studentMineService', erp_StudentMineController]);

function erp_StudentMineController($rootScope, $scope, $uibMsgbox,
    erp_studentMineService) {
    // 学员信息
    $scope.studentList = [];
    $scope.pageParam = new Object();
    $scope.statusBtnNames = [
        { status: null, name: '全部' },
        { status: 1, name: '正常' },
        { status: 6, name: '结课' },
        { status: 4, name: '沉睡' }
    ]

    $scope.paginationConf = {
        currentPage: 1, // 当前页
        totalItems: 0,
        itemsPerPage: 50,
        onChange: function () {
            $scope.queryMineStudent();
        }
    };
    $scope.searchParam = {
        student_status: null,
        student_name: null
    };
    $scope.queryMineStudentByStatus = function (status) {
        $scope.searchParam.student_status = status;
        $scope.queryMineStudent();
    }
    $scope.queryMineStudent = function () {
        $scope.isDown = 'loading';
        erp_studentMineService.query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            p_student_name: $scope.searchParam.student_name,
            p_student_status: $scope.searchParam.student_status //学员状态
        }, function (resp) {
            $scope.isDown = '';
            if (!resp.error) {
                $scope.studentList.splice(0, $scope.studentList.length);
                $scope.studentList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message);
            }

        });
    };
    $scope.openStudentTraceInfo = function (student) {

    };

    $scope.exportExcel = function () {
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        erp_studentMineService.exportExcel({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            p_student_name: $scope.searchParam.student_name,
            p_student_status: status //学员状态
        }, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.queryMineStudent();

}
angular.module('ework-ui').controller('erp_StudentListController', [
  '$rootScope',
  '$scope',
  'erp_studentsService',
  '$state',
  '$cookieStore',
  '$uibMsgbox',
  erp_StudentListController
]);

function erp_StudentListController(
  $rootScope,
  $scope,
  erp_studentsService,
  $state,
  $cookieStore,
  $uibMsgbox
) {
  $scope.studentDetail = {
    
  }
  $scope.viewCtrl = {
    view: 'list',
    optype: 'add'
  }
	$scope.searchParam = {
		searchInfo: '',
		exact: false
	}

	$scope.studentsList = [];

  $scope.pageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 20,
    showInfos: false,
    showFirstAndLast: true,
    onChange: function() {
      $scope.getCurrentPage();
    }
  }

  $scope.getCurrentPage = function() {
  	var _uibModalInstance = $uibMsgbox.waiting('加载中，请稍候...');
  	erp_studentsService.query({
  		pageSize: $scope.pageConf.itemsPerpage,
  		row_num: $scope.pageConf.currentPage,
  		currentPage: $scope.pageConf.currentPage,
  		need_contact: '1',
  		searchInfo: $scope.searchParam.searchInfo,
  		searchType: $scope.searchParam.exact ? 1 : 0
  	}, function (resp) {
  		_uibModalInstance.close();
  		$scope.studentsList.splice(0, $scope.studentsList.length);
  		for (var i = 0; i < resp.data.length; i++) {
  			$scope.studentsList.push(resp.data[i]);
  		}
        $scope.pageConf.totalItems = resp.total;
    })
  }

  $scope.viewStudentDetail = function (stu) {
  	window.open('?studentId='+stu.id+'#/studentMgr/studentMgrIndex');
  }

  $scope.doSearch = function () {
  	$scope.pageConf.currentPage = 1;
  	$scope.getCurrentPage();
  }
  $scope.getCurrentPage();

  $scope.addStudent = function () {
    $state.go('newStudent')
  }
}

"use strict";

angular.module('ework-ui').controller('erp_studentDistributeController', [
  '$rootScope',
  '$scope',
  '$log',
  '$uibMsgbox',
  'erp_stuCounselorDistService',
  erp_studentDistributeController
]);

function erp_studentDistributeController(
  $rootScope,
  $scope,
  $log,
  $uibMsgbox,
  erp_stuCounselorDistService
) {
  $scope.resArray = []
  $scope.counselorFrom = []
  $scope.counselorTo = []
  $scope.students = []
  $scope.chosenCounselorToId = null
  $scope.chosenCounselorToName = ''
  $scope.searchCounselorFrom = ''
  $scope.searchCounselorTo = ''

  $scope.fromPageConf = {
    currentPage: 1, //当前页
    totalItems: 0,
    itemsPerPage: 10,
    showInfos: false,
    onChange: function() {
      $scope.getCounselorFrom()
    }
  };

  $scope.toPageConf = {
    currentPage: 1,
    totalItems: 0,
    itemsPerPage: 10,
    showInfos: false,
    onChange: function() {
      $scope.getCounselorTo()
    }
  }
  
  // 获取可转移出去的学管师
  $scope.queryCounselorFrom = function(counselor) {
    var modalInstance = $uibMsgbox.waiting('数据加载中，请稍候...')
    erp_stuCounselorDistService.queryDistributeFrom({
      currentPage: 1,
      pageSize: $scope.fromPageConf.itemsPerPage,
      p_emp_name: $scope.searchCounselorFrom
    }, function(resp) {
      modalInstance.close()
      if (!resp.error) {
        $scope.fromPageConf.totalItems = resp.total
        $scope.counselorFrom = resp.data
        initResArray()
      } else {
        $uibMsgbox.error(resp.message)
      }
    })
  }

  // 获取可转移出去的学管师
  $scope.getCounselorFrom = function(counselor) {
    var modalInstance = $uibMsgbox.waiting('数据加载中，请稍候...')
    erp_stuCounselorDistService.queryDistributeFrom({
      currentPage: $scope.fromPageConf.currentPage,
      pageSize: $scope.fromPageConf.itemsPerPage,
      p_emp_name: $scope.searchCounselorFrom
    }, function(resp) {
      modalInstance.close()
      if (!resp.error) {
        $scope.fromPageConf.totalItems = resp.total
        $scope.counselorFrom = resp.data
        initResArray()
      } else {
        $uibMsgbox.error(resp.message)
      }
    })
  }

  // 获取可转移进来的学管师
  $scope.getCounselorTo = function(counselor) {
    erp_stuCounselorDistService.queryDistributeTo({
      currentPage: $scope.toPageConf.currentPage,
      pageSize: $scope.toPageConf.itemsPerPage,
      p_emp_name: $scope.searchCounselorTo
    }, function(resp) {
      $scope.toPageConf.totalItems = resp.total
      $scope.counselorTo = resp.data
    })
  }

  // 显示或隐藏老师底下的学生
  $scope.toggleRes = function(item) {
    if (item.isStu) {
      return
    }
    item.showStu = !item.showStu
    if (item.showStu) {
      if (item.students) {
        $scope.showStudents(item)
      } else {
        $scope.getStudents(item)
      }
    } else {
      $scope.hideStudents()
    }

  }

  // 隐藏学生
  $scope.hideStudents = function() {
    for (var i = $scope.resArray.length - 1; i >= 0; i--) {
      if ($scope.resArray[i].showStu) {
        $scope.resArray[i].showStu = false
      }
      if($scope.resArray[i].isStu) {
        console.log($scope.resArray[i])
        $scope.resArray.splice(i, 1)
      }
    }
  }

  // 获取学生
  $scope.getStudents = function (counselor, page) {
    var modalInstance = $uibMsgbox.waiting('数据加载中，请稍候...')
    page = page || 1
    erp_stuCounselorDistService.query({
      currentPage: page,
      pageSize: 999, // TODO 优化页面加载，显示更多按钮
      p_counselor_id: counselor.ID
    }, function(resp){
      modalInstance.close();
      if (!counselor.students || !counselor.students.concat) {
        counselor.students = []
      } 
      if (!resp.error) {
        for (var i = 0; i < resp.data.length; i++) {
          resp.data[i].isStu = true
          counselor.students.push(resp.data[i])
        }
        $scope.showStudents(counselor)
      } else {
        $uibMsgbox.error(resp.message)
      }
    })
  }

  // 显示学生
  $scope.showStudents =function(counselor) {
    $scope.resArray.splice(0, $scope.resArray.length)
    for (var i = 0; i < $scope.counselorFrom.length; i++) {
      $scope.resArray.push($scope.counselorFrom[i])
      if ($scope.counselorFrom[i].emp_id == counselor.emp_id) {
        $scope.resArray = $scope.resArray.concat(counselor.students)
      } else {
        $scope.counselorFrom[i].showStu = false
      }
    }
  }

  // 初始化老师
  function initResArray() {
    $scope.resArray.splice(0, $scope.resArray.length)
    for (var i = 0; i < $scope.counselorFrom.length; i++) {
      $scope.counselorFrom[i].isStu = false
      $scope.counselorFrom[i].showStu = false
      $scope.resArray.push($scope.counselorFrom[i])
    }
  }

  // 选择要转入的老师
  $scope.chooseCounselorTo = function(counselor) {
    $scope.chosenCounselorToId = counselor.emp_id
    $scope.chosenCounselorToName = counselor.emp_name
  }

  // 批量转移学员
  $scope.transferAll = function (counselor) {
    if (!$scope.chosenCounselorToId) {
      $uibMsgbox.warn('请选择要转入的老师！')
      return
    }
    $uibMsgbox.confirm('确定要将<span class="text-danger">【' + counselor.emp_name 
      + '】</span>老师的所有学员分配给<span class="text-danger">【'+ $scope.chosenCounselorToName +'】</span>老师?', function (res) {
      if (res == 'yes') {
        var _modalInstance = $uibMsgbox.waiting('转移中，请稍候...')
        erp_stuCounselorDistService.distributeBatch({
          p_from_conselor_id: '' + counselor.emp_id,
          p_to_conselor_id: '' + $scope.chosenCounselorToId
        }, function (resp) {
          _modalInstance.close()
          if (!resp.error) {
            $uibMsgbox.success('转移成功！')
            $scope.getCounselorFrom()
          } else {
            $uibMsgbox.error(resp.message)
          }
        }) 
      }
    })
  }

  // 转移单个学员
  $scope.transfer = function (student) {
    if (!$scope.chosenCounselorToId) {
      $uibMsgbox.warn('请选择要转入的老师！')
      return
    }
    $uibMsgbox.confirm('确定要将学员<span class="text-danger">【' + student.student_name 
      + '，学号：' + student.encoding + '】</span>分配给<span class="text-danger">【'+ $scope.chosenCounselorToName +'】</span>老师?', function (res) {
      if (res == 'yes') {
        var _modalInstance = $uibMsgbox.waiting('转移中，请稍候...')
        erp_stuCounselorDistService.post({
          new_counselor_id: '' + $scope.chosenCounselorToId,
          stu_counselor_id: '' + student.stu_counselor_id
        }, function (resp) {
          _modalInstance.close();
          if (!resp.error) {
            $uibMsgbox.success('转移成功！')
            $scope.getCounselorFrom()
          } else {
            $uibMsgbox.error(resp.message)
          }
        }) 
      }
    })
  }

  $scope.getCounselorFrom()
  $scope.getCounselorTo()
}

/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular.module('ework-ui').controller('erp_StudentTraceInfoController', [
  '$rootScope',
  '$scope',
  '$uibMsgbox',
  'erp_studentTraceInfoService',
  erp_StudentTraceInfoController
]);

function erp_StudentTraceInfoController(
  $rootScope,
  $scope,
  $uibMsgbox,
  erp_studentTraceInfoService
) {
  // 学员信息
  $scope.studentTraceInfoList = [];
  /**
   * 分页配置
   * 
   * @param {Number}
   *            currentPage [当前页面，初始化时默认为1]
   * @param {Number}
   *            totalItems [数据总条数，每次查询时赋值]
   * @param {Number}
   *            itemsPerPage [每页显示条数]
   * @param {Number}
   *            pagesLength [可选，分页栏长度,默认为9]
   * @param {Array}
   *            perPageOptions [可选，每页显示数据条数的下拉框选项，默认为[10, 20, 30, 40, 50]]
   * @param {Function}
   *            onChange [必需，分页组件选择某一页后，触发事件，调用onChange方法，主要改变currentPage的值]
   */
  $scope.paginationConf = {
    currentPage: 1, // 当前页
    totalItems: 0,
    onChange: function() {
      $scope.query()
    }
  };

  $scope.studentId = $("#rootIndex_studentId").val();

  $scope.paginationBars = [];
  // 表单操作类型，添加： add，修改：put
  $scope.optype = 'add';

  $scope.query = function() {
    $scope.studentTraceInfoList = [];
    $scope.isDown = 'loading';
    erp_studentTraceInfoService.query({
        pageSize: $scope.paginationConf.itemsPerPage,
        currentPage: $scope.paginationConf.currentPage,
        p_student_id: $scope.studentId
    }, function(resp) {
      $scope.isDown = '';
      if (!resp.error) {
        $scope.studentTraceInfoList = resp.data;
        $scope.paginationConf.totalItems = resp.total || 0;
      } else {
          $uibMsgbox.error(resp.message);
      }
    });
  }

  // 处理【添加】按钮点击事件
  $scope.handleAddTraceInfo = function() {
    $scope.optype = 'add';
    $('#erpStudentTraceInfoPanel').modal('show');
    $scope.newStudentTraceInfo = {
      student_id: $scope.studentId
    };
  }

  // 处理【取消】按钮点击事件
  $scope.handleModalCancel = function() {
    $('#erpStudentTraceInfoPanel').modal('hide');
  }

  // 处理【确认】按钮点击事件
  $scope.handleModalConfirm = function() {
    if ($scope.optype == 'add') {
      // 添加的内容
      $scope.add();
      $scope.query();
    } else if ($scope.optype == 'put') {
      $scope.put();
    }
    $('#erpStudentTraceInfoPanel').modal('hide');
  }

  // 添加
  $scope.add = function() {
    erp_studentTraceInfoService.add($scope.newStudentTraceInfo, function(resp) {
      if (!resp.error) {
        $uibMsgbox.success("添加成功");
        $scope.query();
        $('#erpSystemDictTimeSeasonPanel').modal('hide');
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  $scope.addStudentTrace = function() {
    location.href = "?studentId=" + $scope.studentId + "#/studentMgr/studentTraceInfoAdd";
  }

    $scope.searchParam = {
        p_studentId : $scope.studentId
    }
  $scope.exportCourseInfo = function() {
      erp_studentTraceInfoService.exportCourseInfo($scope.searchParam, function(resp) {
          if (!resp.error) {
              window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
          } else {
              $uibMsgbox.error(resp.message);
          }
      });
  }

  $scope.query();
}

/**
 * Created by Liyong.zhu on 2016/9/19.
 */
"use strict";
angular.module('ework-ui').controller('erp_studentTraceInfoAddController', [
    '$rootScope',
    '$state',
    '$scope',
    '$uibMsgbox',
    'FileUploader',
    'erp_studentContactRelationService',
    'erp_dictService',
    'erp_studentTraceInfoService',
    erp_StudentTraceInfoController
]);

function erp_StudentTraceInfoController(
    $rootScope,
    $state,
    $scope,
    $uibMsgbox,
    FileUploader,
    erp_studentContactRelationService,
    erp_dictService,
    erp_studentTraceInfoService
) {
    $scope.waitingModal = null
    // TODO 添加异常的捕获
    function getFileType(fileName) {
        if (!fileName || !fileName.split) {
            return null
        }
        if (fileName.split('.').length <= 0) {
            return null;
        }
        return '.' + fileName.split('.').pop().toLowerCase();
    }
    function getFileIconCls(fileType) {
        console.log(fileType)
        if (fileType == '.jpg' || fileType == '.png') {
            return 'fa fa-file-image-o'
        } else if (fileType == '.pdf') {
            return 'fa fa-file-pdf-o'
        } else if (fileType == '.doc' || fileType == '.docx' || fileType == '.wps') {
            return 'fa fa-file-word-o'
        } else {
            return 'fa fa-file-o'
        }
    }
    $scope.uploader = new FileUploader({
        filters: [{
            name: 'fileSize',
            fn: function (item) {
                var fileType = getFileType(item.name)
                if (_.indexOf(['.jpg', '.png', '.pdf', '.doc', '.docx'], fileType) == -1) {
                    return false;
                }
                if (_.indexOf(['jpg', 'png'], fileType) != -1) {
                    if (item.size > 2*1000*1000) {
                        $uibMsgbox.error('您选择的图片【' + item.name + '】大小超过2M，请压缩后再上传！');
                        return false
                    }
                }
                return true
            }
        }],
        onAfterAddingAll: function (items) {
            _.forEach(items, function (item) {
                item.iconCls = getFileIconCls(getFileType(item.file.name))
            })
        },
        onCompleteAll: function () {
            if ($scope.waitingModal && typeof $scope.waitingModal.close == 'function') {
                $scope.waitingModal.close()
            }
            $scope.goBackConfirm();        
        }
    });
    $scope.studentTraceInfo = {
        studentTraceDetailList: [],
        studentTracePlanList: [],
        studentTraceAttachList: []
    };

    $scope.studentId = $("#rootIndex_studentId").val();
    $scope.id = $("#rootIndex_id").val();
    $scope.opType = $("#rootIndex_opType").val();

    $scope.relationList = [];
    $scope.getRelationList = function () {
        erp_studentContactRelationService.query({}, function (resp) {
            $scope.relationList = resp.data;
        });
    }

    $scope.traceTypeList = [];
    $scope.getTraceTypeList = function () {
        erp_dictService.get({
            code: 'traceType'
        }, function (resp) {
            if (!resp.error) {
                $scope.traceTypeList = resp.data;
            }
        });
    }

    $scope.traceDetailTab = 1;
    $scope.changeTraceDetailTab = function (idx) {
        $scope.traceDetailTab = idx;
    }

    $scope.tracePlanTab = 1;
    $scope.changeTracePlanTab = function (idx) {
        $scope.tracePlanTab = idx;
    }
    $scope.deleteUploadedFile = function (item) {
        $uibMsgbox.confirm('确定删除已选择的附件【' + item.fileName +'】？', function (res) {
            if (res == 'yes') {
                erp_studentTraceInfoService.deleteAttachById({
                    id: item.id
                }).$promise.then(function (resp) {
                    if (!resp.error) {
                        $scope.studentTraceInfo.studentTraceAttachList.splice(_.findIndex($scope.studentTraceInfo.studentTraceAttachList, {id: item.id}))
                    } else {
                        $uibMsgbox.error(resp.message)
                    }
                }, function (resp) {
                    $uibMsgbox.error('请求失败！' + resp.message)
                })
            }
        })
    }
    $scope.queryById = function () {
        return erp_studentTraceInfoService.queryById({
            id: $scope.id
        }, function (resp) {
            if (!resp.error) {
                $scope.studentTraceInfo = resp.data;
                if (resp.data.relation) {
                    $scope.studentTraceInfo.relation = Number(resp.data.relation);
                }
                if (resp.data && resp.data.studentTraceDetailList && resp.data.studentTraceDetailList.length > 0) {
                    $.each(resp.data.studentTraceDetailList, function (idx, studentTraceDetail) {
                        if (studentTraceDetail.type && studentTraceDetail.content) {
                            $('#detailContent' + studentTraceDetail.type).val(studentTraceDetail.content);
                        }
                    });
                }
                if (resp.data && resp.data.studentTracePlanList && resp.data.studentTracePlanList.length > 0) {
                    $.each(resp.data.studentTracePlanList, function (idx, studentTracePlan) {
                        if (studentTracePlan.type && studentTracePlan.content) {
                            $('#planContent' + studentTracePlan.type).val(studentTracePlan.content);
                        }
                    });
                }
                if ($scope.studentTraceInfo.studentTraceAttachList) {
                    _.forEach($scope.studentTraceInfo.studentTraceAttachList, function (item) {
                        item.iconCls = getFileIconCls(item.fileType.toLowerCase())
                    })
                }
            } else {
                $uibMsgbox.error(resp.message);
            }
        }).$promise
    }
    function uploadAllFiles (uploader, traceId) {
        if (uploader.queue.length <= 0) {
            return $scope.goBackConfirm();
        }
        _.forEach(uploader.queue, function (item) {
            item.url = '/erp/studentTraceInfo/uploadAttach?traceId=' + traceId
        })
        $scope.waitingModal = $uibMsgbox.waiting('上传附件中，请稍候...');
        uploader.uploadAll();
    }
    function traceInfoValid(traceInfo) {
        if (!traceInfo.traceDate) {
            $uibMsgbox.error('沟通日期必填！');
            return false;
        }
        if (!traceInfo.traceTime) {
            $uibMsgbox.error('沟通时间必填！');
            return false;
        }
        if (!traceInfo.relation) {
            $uibMsgbox.error('沟通对象必填！');
            return false;
        }
        if (!traceInfo.traceType) {
            $uibMsgbox.error('沟通类型必填！');
            return false;
        }
        if (!traceInfo.tracePurpose) {
            $uibMsgbox.error('沟通目的/备注必填！');
            return false;
        }
        return true;
    }
    $scope.saveStudentTrace = function () {
        if (!traceInfoValid($scope.studentTraceInfo)) {
            return;
        }
        $scope.studentTraceInfo.studentTraceDetailList = [];
        $scope.studentTraceInfo.studentTracePlanList = [];
        _.forEach($scope.studentTraceInfo.studentTraceAttachList, function (item) {
            if (item.iconCls) {
                delete item.iconCls
            }
        });

        for (var i = 1; i <= 4; i++) {
            if ($('#detailContent' + i).val()) {
              $scope.studentTraceInfo.studentTraceDetailList.push({ type: i, content: $('#detailContent' + i).val() });
            }
        }

        for (var i = 1; i <= 3; i++) {
            if ($('#planContent' + i).val()) {
                $scope.studentTraceInfo.studentTracePlanList.push({ type: i, content: $('#planContent' + i).val() });
            }
        }

        var waitingModal = $uibMsgbox.waiting('保存中基本信息，请稍候...');
        if ($scope.id) {
            $scope.studentTraceInfo.id = $scope.id;
            erp_studentTraceInfoService.update($scope.studentTraceInfo).$promise.then(function(resp) {
                if (!resp.error) {
                    uploadAllFiles($scope.uploader, $scope.id)
                    waitingModal.close();
                } else {
                    $uibMsgbox.error(resp.message);
                    waitingModal.close();
                }
            }, function (resp) {
                waitingModal.close();
                $uibMsgbox.error('请求失败，请联系管理员！错误码：' + resp.status + '，错误信息：' + resp.statusText);
            })
        } else {
            $scope.studentTraceInfo.studentId = $scope.studentId;
            erp_studentTraceInfoService.add($scope.studentTraceInfo).$promise.then(function (resp) {
                if (!resp.error) {
                    $scope.id = $scope.studentTraceInfo.id = resp.data.id
                    uploadAllFiles($scope.uploader, $scope.id)
                    waitingModal.close();
                } else {
                    $uibMsgbox.error(resp.message);
                    waitingModal.close();
                }
            }, function () {
                waitingModal.close();
                $uibMsgbox.error('请求失败，请联系管理员！错误码：' + resp.status + '，错误信息：' + resp.statusText)
            })
        }
    }

    $scope.goBackConfirm = function () {
        $uibMsgbox.confirm('跟踪信息保存成功！是否返回跟踪列表页面？', function(res) {
            if (res == 'yes') {
                $scope.goBack();
            } else {
                $scope.queryById().then(function () {
                    $scope.uploader.clearQueue();
                })
            }
        })
    }
    $scope.goBack = function () {
        $state.go('studentTraceInfo', {
            path: '/studentMgr/studentTraceInfo'
        });
    }
    $scope.initial = function () {
        $scope.getRelationList();
        $scope.getTraceTypeList();
        if ($scope.id) {
            $scope.queryById();
        }
    }

    $scope.initial();
}

/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_withDrawalController', [
        '$scope',
        '$log',
        '$uibMsgbox', // 消息提示框服务，其他服务按需引入
        '$uibModalInstance',
        'erp_studentAccountService',
        'erp_studentsService',
        'erp_refundService',
        'erp_studentAccountQueryService',
        'erp_studentAccountQueryService',
        'erp_printService',
        erp_withDrawalController]);

function erp_withDrawalController(
    $scope,
    $log,
    $uibMsgbox,
    $uibModalInstance,
    erp_studentAccountService,
    erp_studentsService,
    erp_refundService,
    erp_studentAccountQueryService,
    erp_printService,
    erp_withDrawalController) {
    $scope.accountType_list = [
        { id : 1,name:'储值账户'},
        { id : 2,name:'冻结账户'},
        { id : 3,name:'退费账户'}
    ];
    
    $scope.payMode_list = [
        { id : 1,name:'现金'},
        { id : 3,name:'银行转账'}
    ];
    
    $scope.withDrawalInfo  = {
    		accountType:1,
    		pay_mode:1,
    		fee_amount:0,
    		money:0
    };
    
    $scope.queryParam  = {
            page:1
    };
    
    $scope.withDrawalInfo.id= $scope.$resolve.studentId;
    
    $scope.withDrawalInfo.encoding = $scope.$resolve.changeNo;
    
    $scope.isRefundWithDraw = "false"; // 是否退费单据退款标识
    if ($scope.withDrawalInfo.encoding) {
    	$scope.isRefundWithDraw = "true";
    }
    
    // 打印动户变动情况
//    $scope.printAccountDynamic = function() {
//    	// 取款打印内容
//    	erp_printService.printAccountDynamic({
//    		"dynamicId" : $scope.dynamicId,
//    		"printType" : "03"
//    	}, 'erpStudentAccountPrintPanel');
//    }
    
    function queryStudent(){
        var param = {};
        if($scope.queryParam.search_info){
            param.searchInfo = $scope.queryParam.search_info;
        }
        $scope.queryParam.studentList = [];
        erp_studentsService.query(param,function(resp){
            if(!resp.error){
                $scope.queryParam.studentList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    }
    

    $scope.payModeFunc = function (){
    	if($scope.withDrawalInfo.pay_mode==3){
    		$scope.isShow = true;  
    	}else{
    		$scope.isShow = false;  
    	}
    }
    
    
    $scope.selectStudent = function(student){
        $scope.student_id = student.id;
        $scope.withDrawalInfo.student_encoding = student.encoding;
        $scope.withDrawalInfo.student_name = student.student_name;
        $scope.withDrawalInfo.student_id=student.id;
        $scope.withDrawalInfo.bu_name=student.bu_name;
        queryStudentAccount();
    };
    
    function queryRefund(){
        var param = {};
        if($scope.withDrawalInfo.encoding){
            param.refundEncoding = $scope.withDrawalInfo.encoding;
        }
        $scope.refundInfo =[];
        erp_refundService.query(param,function(resp){
            if(!resp.error){
                $scope.refundInfo = resp.data;
                if( $scope.refundInfo.length ==1){
	                $scope.withDrawalInfo=$scope.refundInfo[0];
	                $scope.withDrawalInfo.accountType=3; //退费账户
	                $scope.withDrawalInfo.pay_mode=1;
	                if(!$scope.withDrawalInfo.fee_amount){
	                	$scope.withDrawalInfo.fee_amount=0;
	                }
	                queryStudentAccount();
            	}
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    }
    
    function queryStudentAccount(){
        var param = { studentId:$scope.withDrawalInfo.student_id,bu_id:$scope.withDrawalInfo.bu_id};
        $scope.studentAccount ={};
        if(!$scope.withDrawalInfo.student_id){
        	$uibMsgbox.warn("请先选择学生！");
        	return;
        }
        erp_studentAccountQueryService.query(param,function(resp){
            if(!resp.error){
                $scope.studentAccount = resp.data;
                if($scope.withDrawalInfo){
	                if($scope.withDrawalInfo.accountType==3){ //退费账户
	                	$scope.studentAccount.money=($scope.studentAccount.REFUND_ACCOUNT==null?0:$scope.studentAccount.REFUND_ACCOUNT);
	                } else if($scope.withDrawalInfo.accountType==2){ //冻结账户
                        $scope.studentAccount.money=($scope.studentAccount.FROZEN_ACCOUNT==null?0:$scope.studentAccount.FROZEN_ACCOUNT);
                    } else { // 储值账户
	                	$scope.studentAccount.money=$scope.studentAccount.FEE_AMOUNT;
	                }
                }
            }else{
            	$uibMsgbox.error(resp.message);
            }
        });
    }

    $scope.changeSearchInfo = function(){
        queryStudent();
    };
    
    
    $scope.queryRefundInfo = function(){
    	queryRefund();
    };
    
    $scope.changeAccountType= function(){
        // 选择 冻结账户 时，要求 退费单据不可填写 ，故清空
        if($scope.withDrawalInfo && $scope.withDrawalInfo.accountType==2){
            $scope.withDrawalInfo.encoding = null;
        }
    	queryStudentAccount();
    };
    
    // 账户取款按钮提交
    $scope.handleModalConfirm= function () {
    	$scope.withDrawalInfo.accountOperateType='withDrawal';
    	$scope.withDrawalInfo.money=$scope.withDrawalInfo.fee_amount;
        var _modalInstance = $uibMsgbox.waiting('账户取款操作中，请稍候...');
    	erp_studentAccountService.post($scope.withDrawalInfo, function (resp) {
            _modalInstance.close();
            if (!resp.error) {
                $uibModalInstance.close(resp.data);
            } else {
            	$uibMsgbox.error(resp.message);
            }
        });
    };
    
    if($scope.withDrawalInfo.id){
    	queryStudent();
    }
    if($scope.withDrawalInfo.encoding){
    	queryRefund();
    }
    
    queryStudent();
}
"use strict";
angular.module('ework-ui').controller(
  'erp_noticeController', ['$scope', '$log', '$uibMsgbox', '$state', '$uibModal', 'erp_noticeService',
    erp_noticeController
  ]);

function erp_noticeController($scope, $log, $uibMsgbox, $state, $uibModal,
  erp_noticeService) {
  $scope.searchForm = {};
  $scope.notice = {};
  $scope.noticeList = [];
  // $scope.optype = 'add';

  $scope.paginationConf = {
    currentPage: 1, //当前页
    totalItems: 0,
    showFirstAndLast: true,
    showInfos: false,
    onChange: function() {}
  }

  $scope.paginationBars = [];

  $scope.queryPage = function() {
    $scope.searchForm.pageSize = $scope.paginationConf.itemsPerPage;
    $scope.searchForm.currentPage = $scope.paginationConf.currentPage;
    erp_noticeService.queryPage($scope.searchForm, function(resp) {
      if (resp.error) {
        $uibMsgbox.error(resp.message);
      } else {
        $scope.noticeList = resp.data;
        $scope.paginationConf.totalItems = resp.total || 0;
      }
    });
  }

  $scope.handleAddNotice = function() {
    $scope.openModal('add');
  }

  $scope.handlePutNotice = function(notice) {
    $scope.notice = notice;
    $scope.openModal('update');
  }
  
  $scope.handleViewNotice = function (notice) {
  	$scope.notice = notice;
  	$scope.openModal('view');
  }

  $scope.openModal = function(optype) {
    $uibModal.open({
      size: optype == 'view'?'':'lg',
      templateUrl: 'templates/block/modal/notice_detail.modal.html',
      controller: 'erp_noticeDetailController',
      scope: $scope,
      resolve: {
      	optype: function () {
      		return optype;
      	}
      }
    }).result.then(function(detail) {
    	$scope.notice = detail.notice;
      if (detail.optype == 'add') {
        $scope.add();
      } else {
        $scope.update();
      }
    }, function() {});
  }

  $scope.handleDeleteNotice = function(id) {
    $scope.remove(id);
  }

  $scope.add = function() {
    erp_noticeService.post($scope.notice, function(resp) {
      if (resp.error) {
        $uibMsgbox.error(resp.message);
      } else {
        $uibMsgbox.alert("添加成功");
        $scope.queryPage();
      }
    });
  }

  $scope.update = function() {
    erp_noticeService.put($scope.notice, function(resp) {
      if (resp.error) {
        $uibMsgbox.error(resp.message);
      } else {
        $uibMsgbox.alert('修改成功');
        $scope.queryPage();
      }
    });
  }

  $scope.remove = function(id) {
    $uibMsgbox.confirm('确认删除该通知？删除后不可恢复！', function(res) {
      if (res == 'yes') {
        erp_noticeService.remove({ id: id }, function(resp) {
          if (resp.error) {
            $uibMsgbox.error(resp.message);
          } else {
            $uibMsgbox.alert('删除成功');
            $scope.queryPage();
          }
        })
      }
    })
  }

  $scope.queryPage();
}

angular.module('ework-ui').controller('erp_noticeListModalController', [
  '$rootScope',
  '$scope',
  '$log',
  'optype',
  erp_noticeListModalController
])

function erp_noticeListModalController(
	$rootScope,
	$scope,
	$log,
	optype
) {
	$scope.optype = optype || 'view';
}

"use strict"
angular.module('ework-ui').controller('erp_noticeDetailController', [
  '$rootScope',
  '$scope',
  '$uibModalInstance',
  '$uibMsgbox',
  'optype',
  erp_noticeDetailController
])

function erp_noticeDetailController(
  $rootScope,
  $scope,
  $uibModalInstance,
  $uibMsgbox,
  optype
) {
	
	$scope.optype = optype || 'view';
	
	if ($scope.optype == 'add') {
		$scope.notice = {};
	}

  $scope.messageTypeList = [{label:'公告',value:1}];

  $scope.handleModalCancel = function() {
    $uibModalInstance.dismiss('cancel');
  }

  $scope.beforeAdd = function() {
    if (!$scope.notice.subject) {
      $uibMsgbox.error("请输入标题");
      return false;
    }

    if (!$scope.notice.type) {
      $uibMsgbox.error("请选择通知类型");
      return false;
    }

    if (!$scope.notice.start_date) {
      $uibMsgbox.error("请选择开始日期");
      return false;
    }

    if (!$scope.notice.end_date) {
      $uibMsgbox.error("请选择截止日期");
      return false;
    }

    if (!checkStartEndTime($scope.notice.start_date, $scope.notice.end_date)) {
      $uibMsgbox.error("截止日期不能小于开始日期");
      return false;
    }

    if (!$scope.notice.content) {
      $uibMsgbox.error("请输入内容");
      return false;
    }
    return true;
  }

  $scope.handleModalConfirm = function() {
    if ($scope.beforeAdd()) {
      $uibModalInstance.close({
      	optype: $scope.optype,
      	notice:$scope.notice
      });
    }
  }
}

angular.module('ework-ui')
  .controller('erp_attendTeacherGroupModalController', [
    '$scope',
    '$uibModalInstance',
    '$uibMsgbox',
    'optype',
    'branchList',
    'attendTeacherGroup',
    erp_attendTeacherGroupModalController
  ])

function erp_attendTeacherGroupModalController(
  $scope,
  $uibModalInstance,
  $uibMsgbox,
  optype,
  branchList,
  attendTeacherGroup
) {

  $scope.modalSearchParam = {
    status:'1',
    bussinessType:'2'
  };
  $scope.attendTeacherGroup = attendTeacherGroup;
  $scope.optype = optype;
  $scope.branchList = branchList;
  $scope.showLeaderSearchModal = false;
  $scope.leaderList = [];
  $scope.teacherList = [];

  //初始化teacherList
  if(attendTeacherGroup.groupTeacherList && attendTeacherGroup.groupTeacherList.length) {
    $scope.teacherList = $.map(attendTeacherGroup.groupTeacherList,function(n) {
      return n.teacher;
    })
  }
  if(!$scope.attendTeacherGroup.branch_id) {
    $scope.attendTeacherGroup.branch_id = $scope.branchList[0].id
  }

  $scope.insertTeacher = function(teacher) {
    var idx = _.findIndex($scope.teacherList, function(o) {
      return o.id == teacher.id;
    })
    if (idx == -1) {
      $scope.teacherList.push(teacher);
    }
    // console.log($scope.teacherList);
  }

  $scope.removeTeacher = function(teacher) {
    _.remove($scope.teacherList, function(o) {
      return o.id == teacher.id;
    });
  }

  $scope.removeLeader = function(teacher) {
    _.remove($scope.leaderList, function(o) {
      return o.id == teacher.id;
    });
  }

  $scope.ok = function() {
    $uibMsgbox.confirm('确认保存？', function(res) {
      if (res == 'yes') {
        if ($scope.teacherList && $scope.teacherList.length > 0) {
          var teacher_id_arr = [];
          teacher_id_arr = $.map($scope.teacherList,function(n) {
            return n.id;
          });
          $scope.attendTeacherGroup.teacher_ids = teacher_id_arr.join(',');
          console.log($scope.attendTeacherGroup.teacher_ids);
        }
        $uibModalInstance.close($scope.attendTeacherGroup);
      }
    });
  }
}

/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular
  .module('ework-ui')
  .controller('erp_attendanceGroupController', [
    '$scope',
    '$log',
    '$uibMsgbox',
    '$uibModal',
    'erp_studentBuOrgsService',
    'erp_teacherGroupService',
    'erp_attendanceTeacherGroupService',
    erp_attendanceGroupController
  ]);

function erp_attendanceGroupController(
  $scope,
  $log,
  $uibMsgbox,
  $uibModal,
  erp_studentBuOrgsService,
  erp_teacherGroupService,
  erp_attendanceTeacherGroupService
) {

  // 搜索字段
  $scope.searchParam = {
    teach_group_name: ''
  };
  //弹出框操作类型
  $scope.optype = 'add';
  // 考勤教师组列表
  $scope.attendTeacherGroupList = [];

  // 与表单绑定的数据，用于添加和修改
  $scope.attendTeacherGroup = {};

  // 校区列表
  $scope.branchList = [];

  /**
   * 分页配置
   * @param  {Number} currentPage     [当前页面，初始化时默认为1]
   * @param  {Number} totalItems      [数据总条数，每次查询时赋值]
   * @param  {Number} itemsPerPage    [每页显示条数]
   * @param  {Number} pagesLength     [可选，分页栏长度,默认为9]
   * @param  {Array}  perPageOptions  [可选，默认]
   * @param  {Function} perPageOptions [description]
   */
  $scope.paginationConf = {
    currentPage: 1, //当前页
    totalItems: 0,
    onChange: function() {
      $scope.query();
    }
  }

  $scope.paginationBars = [];

  // 处理【添加考勤教师组】按钮点击事件
  $scope.handleAddAttendTeacherGroup = function() {
    $scope.optype = 'add';
    openAttendTeacherGroup("添加");
  }

  // 处理【修改考勤教师组】按钮点击事件
  $scope.handlePutAttendTeacherGroup = function(rowData) {
    $scope.optype = 'put';
    erp_attendanceTeacherGroupService.queryDetail({"p_group_id":rowData.id},//通过教师组id查询教师组详细信息
        function(resp) {
          if (!resp.error) {
            angular.copy(resp.data,$scope.attendTeacherGroup);
            openAttendTeacherGroup("修改");
          } else {
            $uibMsgbox.error(resp.message);
          }
        });
  }

  // 打开对话框
  function openAttendTeacherGroup(optype) {
    $uibModal.open({
      resolve: {
        optype: function() {return optype},
        attendTeacherGroup: function() {return $scope.attendTeacherGroup},
        branchList: function () {return $scope.branchList}
      },
      templateUrl: 'templates/block/modal/teacher-attendance-group.modal.html',
      controller: 'erp_attendTeacherGroupModalController'
    }).result.then(function(attendTeacherGroup) {
      if ($scope.optype == 'add') {
        $scope.add(attendTeacherGroup);
      } else {
        $scope.put(attendTeacherGroup);
      }
    }, function() {})
  }

  // 处理【删除考勤教师组】按钮点击事件
  $scope.handleDeleteAttendTeacherGroup = function(id) {
    if (window.confirm('确定删除选中考勤教师组？')) {
      $scope.remove(id);
    }
  }

  // 处理【查询考勤教师组】按钮点击事件
  $scope.handleQueryAttendTeacherGroup = function() {
    $scope.query();
  }

  $scope.checkBeforeSave = function() {
    if (!$scope.attendTeacherGroup.teach_group_name) {
      $uibMsgbox.error("考勤教师组名称必填");
      return false;
    }

    if (!$scope.attendTeacherGroup.bu_id) {
      $uibMsgbox.error("团队必填");
      return false;
    }
  }

  // 查询考勤教师组
  $scope.query = function() {
    
    erp_attendanceTeacherGroupService.query({
        pageSize: $scope.paginationConf.itemsPerPage,
        currentPage: $scope.paginationConf.currentPage,
        p_teach_group_name: $scope.searchParam.teach_group_name,
      },
      function(resp) {
        if (!resp.error) {
          $scope.attendTeacherGroupList = resp.data;
          $scope.paginationConf.totalItems = resp.total || 0;
        } else {
          $uibMsgbox.error(resp.message);
        }
      });
  }

  // 添加考勤教师组
  $scope.add = function(attendTeacherGroup) {
    $scope.attendTeacherGroup = {};
    erp_attendanceTeacherGroupService.post(attendTeacherGroup, function(resp) {
      if (!resp.error) {
        $uibMsgbox.success("添加成功");
        $scope.query();
        $('#erpAttendTeacherGroupPanel').modal('hide');
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  // 修改考勤教师组
  $scope.put = function(attendTeacherGroup) {
    erp_attendanceTeacherGroupService.put(attendTeacherGroup , function(resp) {
      $scope.attendTeacherGroup = {};
      if (!resp.error) {
        $uibMsgbox.success("修改成功");
        $scope.query();
        $('#erpAttendTeacherGroupPanel').modal('hide');
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  // 删除考勤教师组
  $scope.remove = function(id) {
    erp_attendanceTeacherGroupService.remove({ "ids": id }, function(resp) {
      if (!resp.error) {
        $uibMsgbox.success("删除成功");
        $scope.query();
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  $scope.initialize = function() {
    $scope.query();
    
    erp_studentBuOrgsService.query({}, function(resp) {
      if (!resp.error) {
        $scope.branchList = resp.data;
      }
    });
  }

  $scope.initialize();
}

// /**
//  * 教师日历
//  * Created By yans@klxuexi.org 2017-11-17
//  * 
//  */
// angular.module('ework-ui').controller('erp_courseScheduleController',  [
//   '$scope',
//   '$log',
//   '$state',
//   '$uibMsgbox',
//   '$uibModal',
//   'erp_TeacherListService',
//   erp_courseScheduleController
// ])
// function erp_courseScheduleController(
//   $scope,
//   $log,
//   $state,
//   $uibMsgbox,
//   $uibModal,
//   erp_TeacherListService
// ){
//   $scope.groupId = $("#rootIndex_groupId").val();
//   $scope.teacherList = [];
//   $scope.courseList = [];  
//   $scope.teacherDetail = [];
//   $scope.paginationConf = {
//     currentPage: 1, // 当前页
//     totalItems: 0,
//     itemsPerPage: 22,
//     onChange: function() {
//       $scope.queryTeacher();
//     }
//   };  
//   $("[data-toggle=tooltip]").tooltip();
//   $scope.getCourse = function(){
//     erp_TeacherListService
//       .queryTeacherSched({
//         startDate : $scope.curFroms,
//         endDate :  $scope.curTos,
//         teacherId :$scope.teacherDetail.id
//       },
//       function (resp) {
//         if (!resp.error) {
//           var item=resp.data;
//           $scope.space = $('.teacher-calendar-time').width() / 8;
//           for(var i=0;i<item.length;i++){
//             item[i].xAxis = item[i].xAxis * $scope.space;
//            for(var j=i+1;j<item.length;j++){
//             if(item[i].courseDate == item[j].courseDate){
//               // console.log(item[j])            
//               var tag=item[i].yAxis+item[i].courseLen;
//               if(item[j].yAxis<tag && item[j].yAxis>item[i].yAxis){
//                 console.log('dd')  
//                 console.log(item[j])   
//                 item[j].xAxis = item[j].xAxis + 35;
//               }
//             }
//            }
//           }
//           // console.log(resp.data)
//           $scope.courseList = item;
//         }
//       });
//   }

//   $scope.queryTeacher = function () {
//     erp_TeacherListService
//     .query({
//         pageSize:22,
//         teach_group_id:$scope.groupId,
//         search_info: $scope.teacher_name
//       },
//       function (resp) {
//         if (!resp.error) {
//           $scope.teacherList = resp.data;
//           if($scope.teacherDetail==''){
//             $scope.teacherDetail = $scope.teacherList[0]; 
//             $scope.getCourse()
//          }
//         } 
//       });
//   };
//   $scope.queryTeacher();
  
//   $scope.getTeacher = function(arr){
//     // $scope.curWeek();//切换老师重置时间到本周
//     $scope.teacherDetail = arr;
//     $scope.getCourse();
//   }
//   $scope.curFirst;
//   $scope.weekList = [];
//   $scope.year = new Date().getFullYear();
//   $scope.month = (new Date().getMonth()+1);
//   $scope.day = new Date().getDate();
//   $scope.weekDay = [];
//   $scope.formatDate = function(date){             
//     $scope.year = date.getFullYear()+'年';
//     $scope.month = (date.getMonth()+1)+'月';
//     $scope.day = date.getDate()+'日';
//     $scope.weekDay = ['周日','周一','周二','周三','周四','周五','周六'][date.getDay()];  

//     return $scope.weekDay+'('+$scope.month+$scope.day+')';
//   };
//   $scope.changeDate= function(date,n){       
//       date.setDate(date.getDate()+n);        
//       return date;
//   };

//   $scope.getWeek = function(arr){ 
//     var week = arr.getDay() +1;
//     var date = $scope.changeDate(arr, week * -1);
//     $scope.curFirst = new Date(date);
//     var curdata = $scope.curFirst;
//     $scope.curFrom = Format('yyyy年MM月dd日', curdata)
//     $scope.curTo = Format('yyyy年MM月dd日', new Date(curdata.getTime() + 24*6*60*60*1000))
//     $scope.curFroms = Format('yyyy-MM-dd', curdata)
//     $scope.curTos = Format('yyyy-MM-dd', new Date(curdata.getTime() + 24*6*60*60*1000))
//     for (var i = 0; i < 7; i++) {
//       $scope.weekList[i] = $scope.formatDate(i == 0 ? date : $scope.changeDate(date, 1));
//     }   
//     $scope.getCourse();         
//   };             
//   $scope.prevWeek = function(){
//     $scope.getWeek( $scope.changeDate( $scope.curFirst,-5));         
//   };             
//   $scope.nextWeek = function(){                 
//     $scope.getWeek( $scope.changeDate( $scope.curFirst,10));
//   };     
//   $scope.curWeek = function(){                 
//     $scope.getWeek(new Date());
//   };     
//   $scope.getWeek(new Date());
// }
angular.module('ework-ui').controller('erp_teacherExcelInputModalController', [
  '$rootScope',
  '$scope',
  '$uibModalInstance',
  '$uibMsgbox',
  '$filter',
  'teacherDetail',
  'erp_tmpTeacherInfoService',
  function(
  	$rootScope,
  	$scope,
  	$uibModalInstance,
  	$uibMsgbox,
  	$filter,
  	teacherDetail,
  	erp_tmpTeacherInfoService
  ) {
	  	
  		$scope.teacherDetail = _.cloneDeep(teacherDetail);
  		
  		$scope.handleModalCancel = function () {
  			$uibModalInstance.dismiss();
  		}
  		
  		$scope.handleModalConfirm = function () {
  			delete $scope.teacherDetail.errorList;
  			delete $scope.teacherDetail.errorMsgObj;
        console.log($scope.teacherDetail)
  			erp_tmpTeacherInfoService.put($scope.teacherDetail, function(resp) {
  				if (!resp.error) {
		            if (_.isArray(resp.data.errorList) && resp.data.errorList.length > 0) {
		              $uibMsgbox.confirm('检验失败，是否继续修改？', function (res) {
		            	  if (res == 'yes') {
		            		  _.assign($scope.teacherDetail, resp.data);
		                	} else {
		                		_.assign(teacherDetail, resp.data);
		                		$uibModalInstance.close(resp.data);
		                	}
		              	});
		            } else {
		            	_.assign(teacherDetail, resp.data);
		            	$uibModalInstance.close(resp.data);
		            }
  				} else {
  					$uibMsgbox.error(resp.message);
  				}
  			});
  		}
  	
  		$scope.toManage = function() {
	  		erp_tmpTeacherInfoService.toManage({}, function(resp) {
	  			if (!resp.error) {
	  				$scope.statusList = resp.statusList;
	  			}
	  		});
  		}
  }
]);

angular.module('ework-ui').controller('erp_teacherExcelInputController', [
  '$rootScope',
  '$scope',
  '$log',
  '$state',
  '$uibMsgbox',
  '$uibModal',
  'erp_TeacherIndexService',
  'erp_subjectService',
  function(
    $rootScope,
    $scope,
    $log,
    $state,
    $uibMsgbox,
    $uibModal,
	erp_TeacherIndexService,
    erp_subjectService
  ) {
    $scope.currentStep = 1;

    $scope.steps = [
      { title: '1. 上传文件' },
      { title: '2. 数据校验' },
      { title: '3. 数据导入' }
    ];
	 $scope.validDisable          = true; // 是否可以开始校验，文件还未上传时，不能点击开始校验
	  $scope.fileUpload            = null; // 待上传的文件
	  $scope.waitingModel          = null; // 等待模态框
	$scope.initImportDataStatus = function() {
		$scope.importData              = []; // 所有数据列表
		$scope.importDataSuccess              = [];
		$scope.importDataFailure              = [];
		$scope.importDataForPageView = [];
		$scope.importDataForView = [];
		$scope.viewDataType = '全部';
		$scope.viewImportedDataType='全部';
	}

    // 分页配置
    $scope.paginationConf = {
		currentPage: 1,
		totalItems: 0,
		itemsPerPage: 10,
		showFirstAndLast: true,
		onChange: function() {
			$scope.genPageData();
		}
    };
	  $scope.genPageData = function(){
		  var startIndex = ($scope.paginationConf.currentPage-1)*$scope.paginationConf.itemsPerPage;
		  var endIndex = $scope.paginationConf.currentPage*$scope.paginationConf.itemsPerPage;
		  $scope.importDataForPageView = [];
		  for(i=startIndex;i<endIndex;i++) {
			  if(!$scope.importDataForView[i]) {
				  break;
			  }
			  $scope.importDataForPageView.push($scope.importDataForView[i]);
		  }
	  };

    // 上传的文件改变事件
    $scope.onFileChange = function(files) {
    	$scope.fileUpload = files[0];
    	$scope.validDisable = !$scope.fileUpload;
    	$scope.$apply();
    }

    // 校验文件
    $scope.handleValidate = function() {
    	$scope.uploadFiles();
    }

	  $scope.filterData = function(){
		if($scope.viewDataType == "全部") {
			$scope.importDataForView = $scope.importData;
		} else if($scope.viewDataType == "成功") {
			$scope.importDataForView = $scope.importDataSuccess;
		} else {
			$scope.importDataForView = $scope.importDataFailure;
		}
		$scope.paginationConf.totalItems = $scope.importDataForView.length || 0; // 设置总条数
		$scope.genPageData();
	  }
	  $scope.filterImportedData = function(){
		if($scope.viewImportedDataType == "全部") {
			$scope.importDataForView = $scope.importData;
		} else if($scope.viewImportedDataType == "已导入") {
			$scope.importDataForView = $scope.importDataSuccess;
		} else {
			$scope.importDataForView = $scope.importDataFailure;
		}
		$scope.paginationConf.totalItems = $scope.importDataForView.length || 0; // 设置总条数
		$scope.genPageData();
	  }
    // 修改数据
    //$scope.handleModifyItem = function(item) {
    //	$uibModal.open({
    //		templateUrl: 'templates/block/modal/teacher-excelInput.modal.html',
    //		controller: 'erp_teacherExcelInputModalController',
    //		resolve: {
    //			teacherDetail: function () {
    //				return {
		//				item:item,
		//				rows:$scope.importData
		//			};
    //			}
    //		}
    //  }).result.then(function(res) {
    //    $scope.proceErrorMsg();
    //  }, function() {
    //  });
    //}

    // 全部导出
    //$scope.exportAll = function(step) {
    //	$scope.outputExcel();
    //}
    //
    //// 错误导出
    //$scope.exportError = function(step) {
    //	if (step == 2) {
    //		$scope.outputExcel(1);
    //	}
    //}

    // 关闭当前页
    $scope.closeCurrentPage = function() {
      history.back();
    }

    // 上传文件
    $scope.uploadFiles = function () {
		$scope.initImportDataStatus();
    	$scope.waitingModal = $uibMsgbox.waiting('正在上传，请稍候...');
    	$.ajaxFileUpload({
    		url: '/erp/teacherservice/inputExcel',
    		secureuri: false,
    		fileElementId: 'fileExcel',
    		dataType: 'json',
    		method: 'post',
    		data: { 
    		},
    		success: function(resp) {
    			// 文件上传完成并且返回校验的数据
    			if ($scope.waitingModal) {
    				$scope.waitingModal.close();
    			}
    			if (!resp.error) {
    				if (resp.data && resp.data.length > 0) {
    					$scope.currentStep = 2;
        				$scope.importData = resp.data;
						$scope.importDataForView = $scope.importData;
    				}
					$scope.paginationConf.totalItems = $scope.importDataForView.length || 0; // 设置总条数
					$scope.genPageData();
					//分类校验成功和校验失败的数据
					for(var i in $scope.importData) {
						if($scope.importData[i].checkStatus == '成功') {
							$scope.importDataSuccess.push($scope.importData[i]);
						}else {
							$scope.importDataFailure.push($scope.importData[i]);
						}
					}
    			} else {
    				$uibMsgbox.warn(resp.message);
    			}
    		},
    		error: function(html, status, e) {
    			if ($scope.waitingModal && $scope.waitingModal.close) {
    				$scope.waitingModal.close();
    			}
    			$uibMsgbox.error('上传失败！' + e)
    		}
    	});
    };

	  $scope.inputData = function(index){
		  var index = index?index:0;
		  var row = $scope.importData[index];
		  if (index >= $scope.importData.length) {//退出递归
			  $scope.currentStep = 3;
			  $('#import-teacher-progress-modal').modal('hide');
			  //分类导入成功和导入失败的数据
			  $scope.importDataSuccess = [];
			  $scope.importDataFailure = [];
			  for(var i in $scope.importData) {
				  if($scope.importData[i].checkStatus == '已导入') {
					  $scope.importDataSuccess.push($scope.importData[i]);
				  }else {
					  $scope.importDataFailure.push($scope.importData[i]);
				  }
			  }
			  return;
		  }
		  $scope.currentImportIndex = index + 1;
		  erp_TeacherIndexService.post({
			  employee_id: _.result(_.find(row.cells,{'cellName':'employee_encoding'}),'holdValue'),
			  encoding: _.result(_.find(row.cells,{'cellName':'teacher_encoding'}),'holdValue'),
			  teacher_name: _.result(_.find(row.cells,{'cellName':'teacher_name'}),'holdValue'),
			  nickname: _.result(_.find(row.cells,{'cellName':'nickname'}),'holdValue'),
			  teacher_age: _.result(_.find(row.cells,{'cellName':'teacher_age'}),'holdValue'),
			  seniority: _.result(_.find(row.cells,{'cellName':'seniority'}),'holdValue'),
			  teacher_type: _.result(_.find(row.cells,{'cellName':'teacher_type'}),'holdValue'),
			  status: _.result(_.find(row.cells,{'cellName':'status'}),'holdValue'),
			  sex: _.result(_.find(row.cells,{'cellName':'sex'}),'holdValue'),
			  phone: _.result(_.find(row.cells,{'cellName':'phone'}),'holdValue'),
			  is_pluralistic: _.result(_.find(row.cells,{'cellName':'is_pluralistic'}),'holdValue'),
			  email: _.result(_.find(row.cells,{'cellName':'email'}),'holdValue'),
			  description:_.result(_.find(row.cells,{'cellName':'description'}),'holdValue'),
			  subject:_.result(_.find(row.cells,{'cellName':'subject_names'}),'holdValue'),
			  bu_id:_.result(_.find(row.cells,{'cellName':'bu'}),'holdValue')
		  }, function(resp) {
			  if (!resp.error) {
				  row.checkStatus = "已导入";
				  $scope.importSuccessItems++;
				  $scope.importSuccessProgress = Number(($scope.importSuccessItems /  $scope.importData.length * 100)).toFixed(2);
			  } else {
				  row.checkStatus = "导入失败";
				  $scope.importFailureItems++;
				  $scope.importFailureProgress = Number(($scope.importFailureItems /  $scope.importData.length * 100)).toFixed(2)
			  }
			  $scope.inputData(++index);
		  });
	  }


    $scope.teacherImport = function() {

		if($scope.importDataFailure.length>0 ) {
			$uibMsgbox.error('存在校验失败的数据，不允许导入');
		} else if($scope.importData.length<=0){
			$uibMsgbox.error('没有数据可以导入');
		} else {
			$uibMsgbox.confirm("即将导入校验成功的数据，共" + $scope.importData.length + "条，确认导入？",function(res){
				if (res == 'yes') {
					$('#import-teacher-progress-modal').modal('show');
					$scope.currentImportIndex    = 1;
					$scope.importSuccessItems = 0;
					$scope.importFailureItems = 0;
					$scope.importSuccessProgress = 0;
					$scope.importFailureProgress = 0;
					$scope.inputData(0);
				}
			});
		}
    }

    // 导出数据
    //$scope.outputExcel = function(handleStatus) {
    //	erp_tmpTeacherInfoService.exportExcel({"batchNo" : $scope.batchNo, "handleStatus" : handleStatus}, function(resp) {
    //		if (!resp.error) {
    //			window.location.href = '../erp/coursemanagerment/downloadExcel?fileName=' + resp.data;
    //		} else {
    //			$uibMsgbox.error(resp.message);
    //		}
    //	});
    //}
	  // 修改教师弹出框
	  $scope.shopUpdateModal = function(row) {
		  var modalInstance = $uibModal
			  .open({
				  size: 'xlg',
				  templateUrl: 'importTeacherModalInstance.html',
				  controller: 'importTeacherModalInstanceController',
				  resolve: {
					  // 目标参数获取
					  params: function() {
						  return {
							  row: row,
							  rows:$scope.importData
						  }
					  }
				  }});
				  modalInstance.result.then(function(result) {
					  _.remove($scope.importDataFailure,row);
					  var v = _.find($scope.importDataSuccess,row)
					  if(!v) {
						  $scope.importDataSuccess.push(row);
					  }
					  $scope.paginationConf.totalItems = $scope.importDataForView.length || 0; // 设置总条数
				  }, function(reason) {
					  $log.info('DrawModal dismissed at: ' + new Date());
				  });
	  }
}]);

// 修改教师信息
angular.module('ework-ui').controller(
	'importTeacherModalInstanceController', ['$rootScope', '$scope', '$state', '$uibMsgbox',
		'erp_TeacherIndexService', 'erp_employeeService',
		'erp_studentOrgService', 'erp_TeacherListService',
		'$uibModalInstance', 'params','erp_subjectService',
		importTeacherModalInstanceController
	]);

function importTeacherModalInstanceController($rootScope, $scope, $state,
											  $uibMsgbox, erp_TeacherIndexService, erp_employeeService,
											  erp_studentOrgService, erp_TeacherListService, $uibModalInstance,
											  params,erp_subjectService) {
	$scope.rowOrigin = params.row;
	$scope.row = {};
	angular.copy($scope.rowOrigin,$scope.row);
	//绑定到表单的对象
	$scope.bindRow = {
		employee_encoding: _.find($scope.row.cells,{'cellName':'employee_encoding'}),
		teacher_encoding: _.find($scope.row.cells,{'cellName':'teacher_encoding'}),
		teacher_name: _.find($scope.row.cells,{'cellName':'teacher_name'}),
		nickname: _.find($scope.row.cells,{'cellName':'nickname'}),
		teacher_age: _.find($scope.row.cells,{'cellName':'teacher_age'}),
		seniority: _.find($scope.row.cells,{'cellName':'seniority'}),
		teacher_type: _.find($scope.row.cells,{'cellName':'teacher_type'}),
		status: _.find($scope.row.cells,{'cellName':'status'}),
		sex: _.find($scope.row.cells,{'cellName':'sex'}),
		phone: _.find($scope.row.cells,{'cellName':'phone'}),
		is_pluralistic: _.find($scope.row.cells,{'cellName':'is_pluralistic'}),
		bu: _.find($scope.row.cells,{'cellName':'bu'}),
		subject_names: _.find($scope.row.cells,{'cellName':'subject_names'}),
		email: _.find($scope.row.cells,{'cellName':'email'}),
		description: _.find($scope.row.cells,{'cellName':'description'})
	}

	$scope.statusList = [];
	$scope.genderList = [];
	$scope.partTimeList = [];
	$scope.teacherTypeList = [];
	$scope.buList = [];
	$scope.subjectList = [];
	$scope.selSubjectList = [];
	$scope.subjectSearchInfo = '';
	$scope.searchEmployeeInfo = {
		employee_name:''
	};

	// 关联员工输入框，名称变化则重新查询员工信息
	$scope.onEmployeeNameChange = function() {
		$scope.isDown = 'loading';
		$scope.searchResult = [];
		erp_employeeService.query({
			row_num: 10,
			pageSize: 10,
			currentPage: 1,
			employee_name:$scope.searchEmployeeInfo.employee_name
		}, function(resp) {
			$scope.isDown = '';
			if (!resp.error) {
				$scope.searchResult = resp.data;
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}

	//下拉框值改变事件
	$scope.onChangeForSelector = function(cell,selectorDatas) {
		cell.checkErrorMessage = null;
		cell.displayValue = _.result(_.find(selectorDatas,{"code":cell.holdValue}),'name') ;
	}
	//必填文本框改变事件
	$scope.onChangeForPureNotNull = function(cell) {
		if(cell.holdValue != undefined && cell.holdValue != null && _.trim(cell.holdValue.toString()!= '')) {
			cell.checkErrorMessage = null;
		} else {
			cell.checkErrorMessage = "必填";
		}
		cell.displayValue = cell.holdValue;
	}
	//普通文本框改变事件
	$scope.onChangeForCommonText = function(cell) {
		cell.displayValue = cell.holdValue;
	}

	// 从员工查询控件的查询结果中选择一条数据触发该事件
	$scope.selectEmployee = function(employee) {
		$scope.bindRow.employee_encoding.holdValue = employee.id;
		$scope.bindRow.employee_encoding.displayValue = employee.employee_name;
		$scope.bindRow.employee_encoding.checkErrorMessage = null;
		$("#importEmployeeModifyDropdown").toggleClass("hidden");
	};
	$scope.showDropdown = function() {
		$("#importEmployeeModifyDropdown").toggleClass("hidden");
	}
	//教师编码输入框值改变事件
	$scope.onTeacherEncodingChange= function() {
		//1.查询教师编码在文档中是否已经存在
		var isExist = false;
		$.each(params.rows,function(i,n) {
			if(n.rowNumber != $scope.row.rowNumber) {
				if(_.result(_.find(n.cells,{'cellName':'teacher_encoding'}),'holdValue') == $scope.bindRow.teacher_encoding.holdValue){
					isExist = true;
					return false;
				}
			}
		});
		$scope.bindRow.teacher_encoding.checkErrorMessage = isExist?"教师编码在文档中已经存在":null;
		$scope.bindRow.teacher_encoding.displayValue = $scope.bindRow.teacher_encoding.holdValue;
	}
	//联系方式格式校验
	$scope.onPhoneChange=function() {
		var phoneReg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
		if(!phoneReg.test($scope.bindRow.phone.holdValue)) {
			$scope.bindRow.phone.checkErrorMessage = '手机号码格式不正确';
		} else {
			//1.查询电话号码在文档中是否已经存在
			var isExist = false;
			$.each(params.rows,function(i,n) {
				if(n.rowNumber != $scope.row.rowNumber) {
					if(_.result(_.find(n.cells,{'cellName':'phone'}),'holdValue') == $scope.bindRow.phone.holdValue){
						isExist = true;
						return false;
					}
				}
			});
			$scope.bindRow.phone.checkErrorMessage = isExist?"电话号码在文档中已经存在":null;
		}
		$scope.bindRow.phone.displayValue = $scope.bindRow.phone.holdValue;
	}

	//修改弹出框打开初始化科目信息
	$scope.initSubject = function(){
		var names = $scope.bindRow.subject_names.displayValue.split(/[,，]/);
		var ids = $scope.bindRow.subject_names.holdValue.split(/[,，]/);
		$.each(ids,function(i,n) {
			var subject = _.find($scope.subjectList,{id:parseInt(n)});
			subject.checked = true;
			$scope.selSubjectList.push(subject);
		})
	}

	//移除科目
	$scope.removeSubject = function (subject) {
		subject.checked = false;
		_.remove($scope.selSubjectList, subject);
		$scope.bindRow.subject_names.checkErrorMessage = $scope.selSubjectList.length<=0? '科目必填':null;
	}

	//选中，反选科目
	$scope.handleSubjectChange = function (subject) {
		if (subject.checked && !_.some($scope.selSubjectList, subject)) {
			$scope.selSubjectList.push(subject);
		} else {
			_.remove($scope.selSubjectList, subject);
		}
		$scope.bindRow.subject_names.checkErrorMessage = $scope.selSubjectList.length<=0? '科目必填':null;
	}

	//服务端校验
	$scope.checkOnServer = function() {
		//1.教师在数据库中是否已经存在
		//2.联系方式在数据库中是否已经存在
		erp_TeacherListService.checkImportRecord({
			teacher_encoding:$scope.bindRow.teacher_encoding.holdValue,
			phone: $scope.bindRow.phone.holdValue
		},function(resp) {
			if(!resp.error) {
				var cells = resp.data.cells;
				$scope.bindRow.teacher_encoding.checkErrorMessage = _.result(_.find(cells,{'cellName':"teacher_encoding"}),'checkErrorMessage');
				$scope.bindRow.phone.checkErrorMessage = _.result(_.find(cells,{'cellName':"phone"}),'checkErrorMessage');
				if( !($scope.bindRow.teacher_encoding.checkErrorMessage || $scope.bindRow.phone.checkErrorMessage)) {
					//1.校验成功，将数据同步到表格
					//-1.格式化科目信息
					var subjectNames = [];
					var subjectIds = [];
					$.each($scope.selSubjectList,function(i,n) {
						subjectNames.push(n.name);
						subjectIds.push(n.id);
					});
					$scope.bindRow.subject_names.displayValue = subjectNames.join(',');
					$scope.bindRow.subject_names.holdValue = subjectIds.join(',');
					//-2.将数据同步到表格
					$scope.rowOrigin.cells = $scope.row.cells;
					$scope.rowOrigin.checkStatus='成功';
					//2.关闭窗口
					$uibModalInstance.close("success");
				} else {
					$scope.rowOrigin.checkStatus='失败';
				}
			} else {
				$uibMsgbox.error(resp.message);
			}
		})
	}

	$scope.checkRow = function() {
		var htmlCheckFlag = 'success';
		$.each($scope.row.cells,function(i,n) {
			if(n.checkErrorMessage) {
				htmlCheckFlag = 'fail';
				return false;
			}
		});
		if(htmlCheckFlag == 'success') {
			//服务端校验
			$scope.checkOnServer();
		}
	}

	/**
	 * 模态框取消
	 */
	$scope.handleModalCancel = function() {
		$uibModalInstance.dismiss('cancel');
	}

    $scope.changeBu = function(){
        $scope.selSubjectList = [];
        erp_subjectService.querySelectDatas({
            bu_id:$scope.bindRow.bu.holdValue
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.initialize = function() {
        erp_TeacherIndexService.toManage({}, function(resp) {
            if (!resp.error) {
                $.each(resp.teacherType, function(i, n) {
                    n.code = parseInt(n.code);
                })
                $scope.teacherTypeList = resp.teacherType;
                $.each(resp.teacherStatus, function(i, n) {
                    n.code = parseInt(n.code);
                })
                $scope.statusList = resp.teacherStatus;
                $.each(resp.gender, function(i, n) {
                    n.code = parseInt(n.code);
                })
                $scope.genderList = resp.gender;
                $.each(resp.isPartTime, function(i, n) {
                    n.code = parseInt(n.code);
                })
                $scope.partTimeList = resp.isPartTime;
                //$scope.cityList = resp.cityList;
                $scope.buList = $.map(resp.buList,function(n,i) {
                    if(n.parent_id == resp.city_id) return n;
                });
                //$scope.subjectList = resp.subjectList;
                //$scope.updateTeacher.city_id = resp.city_id;
                //$scope.updateTeacher.bu_id = resp.bu_id;
            } else {
                $uibMsgbox.error(resp.message);
            }
            erp_subjectService.querySelectDatas({
                bu_id:$scope.bindRow.bu.holdValue
            },function(resp){
                if(!resp.error){
                    $scope.subjectList = resp.data;
                    $scope.initSubject();
                }else{
                    $uibMsgbox.error(resp.message);
                }
            });
        });
    }
	$scope.initialize();
}

angular.module('ework-ui').controller(
		'erp_teacherGroupModalController',
		[ '$scope', '$uibModalInstance', '$uibMsgbox', 'optype', 'buList',
				'teacherGroup', erp_teacherGroupModalController ])

function erp_teacherGroupModalController($scope, $uibModalInstance, $uibMsgbox,
		optype, buList, teacherGroup) {
	$scope.teacherGroup = teacherGroup;
	$scope.optype = optype;
	$scope.buList = buList;
	$scope.showLeaderSearchModal = false;
	$scope.leaderList = [];
	$scope.teacherList = [];
	
	if (teacherGroup && teacherGroup.leaderList) {
		$scope.leaderList = teacherGroup.leaderList;
	}
	
	if (teacherGroup && teacherGroup.teacherList) {
		$scope.teacherList = teacherGroup.teacherList;
	}
	
	$scope.onLeaderSearchModalChange = function() {
		console.log('onLeaderSearchModalChange');
	}

	$scope.insertLeader = function(teacher) {
		var idx = _.findIndex($scope.leaderList, function(o) {
			return o.id == teacher.id;
		});
		if (idx == -1) {
			$scope.leaderList.push(teacher);
		}
	}

	$scope.insertTeacher = function(teacher) {
		var idx = _.findIndex($scope.teacherList, function(o) {
			return o.id == teacher.id;
		})
		if (idx == -1) {
			$scope.teacherList.push(teacher);
		}
		console.log($scope.teacherList);
	}

	$scope.removeTeacher = function(teacher) {
		_.remove($scope.teacherList, function(o) {
			return o.id == teacher.id;
		});
	}

	$scope.removeLeader = function(teacher) {
		_.remove($scope.leaderList, function(o) {
			return o.id == teacher.id;
		});
	}

	$scope.ok = function() {
		$uibMsgbox.confirm('确认保存？', function(res) {
			if (res == 'yes') {
				if ($scope.leaderList && $scope.leaderList.length > 0) {
					$scope.teacherGroup.leaderList = [];
					$.each($scope.leaderList, function(idx, leader) {
						$scope.teacherGroup.leaderList.push({
							employee_id : leader.employee_id,
							teacher_id : leader.id
						});
					});
				}

				if ($scope.teacherList && $scope.teacherList.length > 0) {
					$scope.teacherGroup.teacherList = [];
					$.each($scope.teacherList, function(idx, teacher) {
						$scope.teacherGroup.teacherList.push({
							teacher_id : teacher.id
						});
					});
				}

				$uibModalInstance.close($scope.teacherGroup);
			}
		});
	}
}

/**
 * Created by Liyong.zhu on 2017/2/14.
 */
"use strict";
angular.module('ework-ui').controller(
		'erp_teacherGroupController',
		[ '$scope', '$log', '$uibMsgbox', '$uibModal',
				'erp_organizationService', 'erp_teacherGroupService',
				erp_teacherGroupController ]);

function erp_teacherGroupController($scope, $log, $uibMsgbox, $uibModal,
		erp_organizationService, erp_teacherGroupService) {
	// 表单操作类型，添加： add，修改：put
	$scope.optype = 'add'; //

	// 搜索字段
	$scope.searchParam = {
		teach_group_name : ''
	};

	// 教研组列表
	$scope.teacherGroupList = [];

	// 与表单绑定的数据，用于添加和修改
	$scope.teacherGroup = {};
	
	// 当前登录用户所在城市团队列表
	$scope.oriBuList = [];

	// 团队列表
	$scope.buList = [];

	/**
	 * 分页配置
	 * 
	 * @param {Number}
	 *            currentPage [当前页面，初始化时默认为1]
	 * @param {Number}
	 *            totalItems [数据总条数，每次查询时赋值]
	 * @param {Number}
	 *            itemsPerPage [每页显示条数]
	 * @param {Number}
	 *            pagesLength [可选，分页栏长度,默认为9]
	 * @param {Array}
	 *            perPageOptions [可选，默认]
	 * @param {Function}
	 *            perPageOptions [description]
	 */
	$scope.paginationConf = {
		currentPage : 1, // 当前页
		totalItems : 0,
		onChange : function() {
			$scope.query();
		}
	}

	$scope.paginationBars = [];

	// 处理【添加教研组】按钮点击事件
	$scope.handleAddTeacherGroup = function() {
		$scope.optype = 'add';
		openTeacherGroup();
	}

	// 处理【修改教研组】按钮点击事件
	$scope.handlePutTeacherGroup = function(rowData) {
		$scope.optype = 'put';
		erp_teacherGroupService.toManage({
			id : rowData.id
		}, function(resp) {
			if (!resp.error) {
				$scope.teacherGroup = resp.data;

				erp_organizationService.teamList({city_id : rowData.city_id}, function(resp) {
					if (!resp.error) {
						$scope.buList = resp.data;
						openTeacherGroup();
					}
				});
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}

	// 打开对话框
	function openTeacherGroup() {
		$uibModal.open({
			resolve : {
				optype : function() {
					return $scope.optype;
				},
				teacherGroup : function() {
					return ($scope.optype == 'add') ? {} : $scope.teacherGroup;
				},
				buList : function() {
					return ($scope.optype == 'add') ? $scope.oriBuList : $scope.buList;
				}
			},
			templateUrl : 'templates/block/modal/teacher-group.modal.html',
			controller : 'erp_teacherGroupModalController'
		}).result.then(function(teacherGroup) {
			console.log(teacherGroup)
			if ($scope.optype == 'add') {
				$scope.add(teacherGroup);
			} else {
				$scope.put(teacherGroup);
			}
		}, function() {
		});
	}

	// 处理【删除教研组】按钮点击事件
	$scope.handleDeleteTeacherGroup = function(id) {
		if (window.confirm('确定删除选中教研组？')) {
			$scope.remove(id);
		}
	}

	// 处理【查询教研组】按钮点击事件
	$scope.handleQueryTeacherGroup = function() {
		$scope.query();
	}

	$scope.checkBeforeSave = function() {
		if (!$scope.teacherGroup.teach_group_name) {
			$uibMsgbox.error("教研组名称必填");
			return false;
		}

		if (!$scope.teacherGroup.bu_id) {
			$uibMsgbox.error("团队必填");
			return false;
		}
	}

	// 查询教研组
	$scope.query = function() {
		erp_teacherGroupService.query({
			pageSize : $scope.paginationConf.itemsPerPage,
			currentPage : $scope.paginationConf.currentPage,
			p_teach_group_name : $scope.searchParam.teach_group_name,
		}, function(resp) {
			if (!resp.error) {
				$scope.teacherGroupList = resp.data;
				$scope.paginationConf.totalItems = resp.total;
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}

	// 添加教研组
	$scope.add = function(teacherGroup) {
		erp_teacherGroupService.post(teacherGroup || $scope.teacherGroup,
				function(resp) {
					if (!resp.error) {
						$uibMsgbox.success("添加成功");
						$scope.query();
						$('#erpTeacherGroupPanel').modal('hide');
					} else {
						$uibMsgbox.error(resp.message);
					}
				});
	}

	// 修改教研组
	$scope.put = function(teacherGroup) {
		erp_teacherGroupService.put(teacherGroup || $scope.teacherGroup,
				function(resp) {
					if (!resp.error) {
						$uibMsgbox.success("修改成功");
						$scope.query();
						$('#erpTeacherGroupPanel').modal('hide');
					} else {
						$uibMsgbox.error(resp.message);
					}
				});
	}

	// 删除教研组
	$scope.remove = function(id) {
		erp_teacherGroupService.remove({
			"id" : id
		}, function(resp) {
			if (!resp.error) {
				$uibMsgbox.success("删除成功");
				$scope.query();
			} else {
				$uibMsgbox.error(resp.message);
			}
		});
	}
	
	$scope.initialize = function() {
		$scope.query();
		erp_organizationService.teamList({}, function(resp) {
			if (!resp.error) {
				$scope.oriBuList = resp.data;
				$scope.buList = resp.data;
			}
		});
	}

	$scope.initialize();
}

"use strict";
angular.module('ework-ui').controller(
		'erp_TeacherIndexController',
		[ '$rootScope', '$scope', 'erp_TeacherIndexService', '$state', '$log',
				 erp_TeacherIndexController ]);
function erp_TeacherIndexController($rootScope, $scope,
		erp_TeacherIndexService, $state, $log) {
	$scope.teacherDetail = {};
	
	$scope.editStatus = true;
	
	$scope.statusSelect = [
	                {desc : "正式员工", status : 1},
	                {desc : "试用员工", status : 2},
	                {desc : "返聘", status : 3},
	                {desc : "辞职", status : 4},
	                {desc : "解聘", status : 5}
	            ];
	$scope.sexSelect = [
	   	                {desc : "男", sex : 1},
	   	                {desc : "女", sex : 2}
	   	            ];
    $scope.teacherId = $("#rootIndex_teacherId").val();

	
	$scope.editTeacherInfo = function() {
		$scope.editStatus = false;
	};
	
	$scope.updateTeacherInfo = function() {
		$scope.editStatus = true;
		$log.log($scope.teacherDetail);
		$scope.teacherDetail.create_time = null;
		$scope.teacherDetail.update_time = null;
		erp_TeacherIndexService.put($scope.teacherDetail,
                function(resp){
					if(!resp.error){
							$scope.teacherIndex();
					}
                }
		);
	};

	$scope.teacherIndex = function() {
		$scope.teacherDetail = {};
		$scope.isDown = 'loading';
		erp_TeacherIndexService.query({
			teacherId : $scope.teacherId
		}, function(resp) {
			$scope.isDown = '';
			if (!resp.error) {
				$scope.teacherDetail = resp.data;
			} else {
				alert(resp.message);
			}
		});
	};
	$scope.teacherIndex();
}

"use strict";
angular.module('ework-ui').controller('erp_NewTeacherController', [
    '$rootScope',
    '$scope',
    '$state',
    '$uibMsgbox',
    'erp_employeeService',
    'erp_studentOrgService',
    'erp_TeacherIndexService',
    'erp_subjectService',
    erp_NewTeacherController
]);

function erp_NewTeacherController(
    $rootScope,
    $scope,
    $state,
    $uibMsgbox,
    erp_employeeService,
    erp_studentOrgService,
    erp_TeacherIndexService,
    erp_subjectService
) {

    $scope.newTeacher = {
        status: 1,
        sex: '1',
        is_pluralistic: 4,
        teacher_type: 0
    };

    $scope.statusList = [];
    $scope.genderList = [];
    $scope.partTimeList = [];
    $scope.teacherTypeList = [];
    //$scope.cityList = [];
    $scope.buList = [];
    $scope.subjectList = [];
    $scope.selSubjectList = [];
    $scope.subjectSearchInfo = '';
    $scope.selSubjectList = [];
    $scope.selTeamList = [];
    $scope.teamSearchInfo = '';
    $scope.selTeamList = [];

    // 选中关联员工输入框，清空输入框内容
    $scope.onEmployeeNameFocus = function() {
        if ($scope.newTeacher.employee_name == '请输入员工姓名') {
            $scope.newTeacher.employee_name = '';
        }
        $scope.inputing = true;
    };

    // 鼠标离开关联员工控件处理事件
    $scope.onEmployeeNameBlur = function() {
        if (!$scope.newTeacher.employee_name) {
            $scope.newTeacher.employee_name = '请输入员工姓名';
        }
        $scope.inputing = false;
    };


    // 关联员工输入框，名称变化则重新查询员工信息
    $scope.onEmployeeNameChange = function() {
        $scope.isDown = 'loading';
        $scope.searchResult = [];
        erp_employeeService.query({
                row_num: 10,
                currentPage: 1,
                pageSize: 10,
                employee_name: $scope.newTeacher.employee_name
            },
            function(resp) {
                $scope.isDown = '';
                if (!resp.error) {
                    $scope.searchResult = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    }

    $scope.changeBu = function(){
        $scope.selSubjectList = [];
        erp_subjectService.querySelectDatas({
            bu_id:$scope.newTeacher.bu_id
        },function(resp){
            if(!resp.error){
                $scope.subjectList = resp.data;
            }else{
                $uibMsgbox.error(resp.message);
            }
        });
    };
    // 从转入学员控件的查询结果中选择一条数据触发该事件
    $scope.selectEmployee = function(employee) {
        console.log(employee)
        $scope.newTeacher.employee_id = employee.id;
        $scope.newTeacher.teacher_name
            = $scope.newTeacher.nickname
            = $scope.newTeacher.employee_name
            = employee.employee_name;

        $scope.searchResult = [];
    };

    $scope.checkBeforeSave = function() {
        if (!$scope.newTeacher.employee_name) {
            $uibMsgbox.error('关联员工必填');
            return false;
        }

        if (!$scope.newTeacher.encoding) {
            $uibMsgbox.error('教师编码必填');
            return false;
        }

        if (!$scope.newTeacher.teacher_name) {
            $uibMsgbox.error('教师姓名必填');
            return false;
        }

        if (!$scope.newTeacher.teacher_type) {
            $uibMsgbox.error('教师身份必填');
            return false;
        }

        if (!$scope.newTeacher.status) {
            $uibMsgbox.error('教师状态必填');
            return false;
        }

        if (!$scope.newTeacher.is_pluralistic  != 0 && $scope.newTeacher.is_pluralistic  != 1) {
            $uibMsgbox.error('是否兼职必填');
            return false;
        }

        if (!$scope.newTeacher.sex) {
            $uibMsgbox.error('教师性别必填');
            return false;
        }

        if (!$scope.newTeacher.phone) {
            $uibMsgbox.error('教师联系方式必填');
            return false;
        }

        if ($scope.newTeacher.email && !(Validator.email.test($scope.newTeacher.email))) {
            $uibMsgbox.error('邮箱格式不正确');
            return false;
        }

        if ($scope.selSubjectList.length <= 0) {
            $uibMsgbox.error('科目必填');
            return false;
        }
        return true;
    }

    $scope.removeSubject = function (subject) {
        subject.checked = false;
        _.remove($scope.selSubjectList, subject);
    }

    $scope.removeTeam = function (team) {
        team.checked = false;
        _.remove($scope.selTeamList, team);
    }

    $scope.handleSubjectChange = function (subject) {
        if (subject.checked && !_.some($scope.selSubjectList, subject)) {
            $scope.selSubjectList.push(subject)
        } else {
            _.remove($scope.selSubjectList, subject);
        }
    }


    $scope.handleTeamChange = function (team) {
        if (team.checked && !_.some($scope.selTeamList, team)) {
            $scope.selTeamList.push(team)
        } else {
            _.remove($scope.selTeamList, team);
        }
    }

    $scope.saveTeacher = function() {
        if ($scope.checkBeforeSave()) {
            var teacherForSave = {};
            angular.copy($scope.newTeacher, teacherForSave);
            var subject = teacherForSave.subject = [];
            _.forEach($scope.selSubjectList, function(item) {
                teacherForSave.subject.push(item.id)
            })
            if (subject) {
                teacherForSave.subject = subject.join(",");
            }
            var team = teacherForSave.team = [];
            _.forEach($scope.selTeamList, function(item) {
                teacherForSave.team.push(item.id)
            })
            if (team) {
                teacherForSave.team = team.join(",");
            }

            erp_TeacherIndexService.post(teacherForSave, function(resp) {
                if (!resp.error) {
                    $uibMsgbox.success('教师添加成功');
                    $scope.newTeacher = {};
                    // window.location.href = "/klxxedu/#/teachers/teacherSearch";
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
        }
    };

  $scope.initialize = function() {
    erp_TeacherIndexService.toManage({}, function(resp) {
      if (!resp.error) {
        $scope.teacherTypeList = resp.teacherType;
        $scope.statusList = resp.teacherStatus;
        $scope.genderList = resp.gender;
        $scope.partTimeList = resp.isPartTime;
        //$scope.cityList = resp.cityList;
        $scope.buList = resp.buList;
        $scope.subjectList = resp.subjectList;
        //$scope.newTeacher.city_id = resp.city_id;
        // $scope.buList = $.map(resp.buList,function(n,i) {
        //     if(n.parent_id == resp.city_id) return n;
        // });
        $scope.newTeacher.bu_id = resp.bu_id;

        $scope.newTeacher.teacher_type = resp.teacherType[3].code;
        $scope.newTeacher.status = resp.teacherStatus[1].code;
        $scope.newTeacher.is_pluralistic = resp.isPartTime[1].code;
      }
        $scope.subjectList =  $scope.changeBu();
    });
  }

  $scope.initialize();
}

"use strict";
angular.module('ework-ui').controller('erp_TeacherSearchController', [
  '$scope',
  '$uibMsgbox',
  '$uibModal',
  '$log',
  'PUBORGService',
  'erp_organizationService',
  'erp_TeacherListService',
   erp_TeacherSearchController
]);
  function erp_TeacherSearchController($scope, $uibMsgbox, $uibModal, $log,PUBORGService,erp_organizationService,
    erp_TeacherListService) {
    $scope.teacherList = [];
    // 批量选中标识
    $scope.selectAllFlag = false;
    $scope.searchParam={};
    $scope.paginationConf = {
      currentPage: 1, // 当前页
      totalItems: 0,
      itemsPerPage: 10,
      onChange: function() {
        $scope.queryTeacher();
      }
    };
    $scope.buList = [];

    $scope.queryTeacher = function() {

      $scope.teacherList = [];
      erp_TeacherListService
        .query({
            pageSize: $scope.paginationConf.itemsPerPage, // 每页显示条数
            currentPage: $scope.paginationConf.currentPage, // 要获取的第几页的数据
            search_info: $scope.teacher_name,
            org_id : $scope.searchParam.p_bu_id
          },
          function(resp) {
            if (!resp.error) {
              $scope.paginationConf.totalItems = resp.total || 0; // 设置总条数
              $scope.teacherList = resp.data;
            } else {
              $uibMsgbox
                .alert(resp.message);
            }
            $scope.selectAllFlag = false;
          });
    };
    // 多选
    $scope.$watch(
      'selectAllFlag',
      function(newValue, oldValue) {
        var i;
        if (newValue == true) {

          for (i in $scope.teacherList) {

            $scope.teacherList[i].selectFlag = true;
          }
        } else {

          for (i in $scope.teacherList) {

            $scope.teacherList[i].selectFlag = false;
          }
        }
      });
      // 获取所有选中的id
    $scope.getSelectedIds = function() {
      var selectFlag = null;
      var i = null;
      var syncTeacherIds = "";
      for (i in $scope.teacherList) {
        selectFlag = $scope.teacherList[i].selectFlag;
        if (selectFlag) {
          // 拼接需要同步到叮当的教师id
          syncTeacherIds += ("," + $scope.teacherList[i].id);
        }
      }
      return syncTeacherIds.substring(1);
    };
    // 获取所有选中的id和教师姓名
    $scope.getSelectedIdAndTeacherInfos = function() {
        var selectFlag = null;
        var i = null;
        var syncTeacherIdAndTeacherInfos = "";
        for (i in $scope.teacherList) {
          selectFlag = $scope.teacherList[i].selectFlag;
          if (selectFlag) {
            // 拼接需要同步到叮当的教师id
            syncTeacherIdAndTeacherInfos += ("," + $scope.teacherList[i].id + "&" + $scope.teacherList[i].teacher_name + "@" + $scope.teacherList[i].encoding);
          }
        }
        return syncTeacherIdAndTeacherInfos.substring(1);
      }
      // 同步到叮当
    $scope.syncDingDang = function() {
        var syncTeacherIdAndTeacherInfos = $scope.getSelectedIdAndTeacherInfos();
        // 同步到叮当
        if (syncTeacherIdAndTeacherInfos) {
          erp_TeacherListService.synToDoubleCourse({
            teacherIdAndTeacherInfos: syncTeacherIdAndTeacherInfos
          }, function(resp) {
            // 刷新数据
            $scope.queryTeacher();
            if (!resp.error) {
              if (resp.fail) {
                $uibMsgbox.error("同步失败的教师有：" + resp.fail);
              } else {
                $uibMsgbox.alert("同步成功");
              }
            } else {
              $uibMsgbox.alert(resp.message);
            }
          });
        } else {
          $uibMsgbox.warn("未选中教师");
        }
      }
      // 推送工作平台邀请码
    $scope.sendInvation = function() {
      var invationTeacherIds = $scope.getSelectedIds();
      // 开始推送工作平台邀请码
      if (invationTeacherIds) {
        erp_TeacherListService.sendInvation({
          teacherIds: invationTeacherIds
        }, function(resp) {
          if (!resp.error) {
            // 刷新数据
            $scope.queryTeacher();
            if (resp.fail) {
              $uibMsgbox.error("推送失败的教师有：" + resp.fail);
            } else {
              $uibMsgbox.success("全部推送成功");
            }
          } else {
            $uibMsgbox.alert(resp.message);
          }
        });
      } else {
        $uibMsgbox.warn("未选中教师");
      }
    };
    // 改变上架下架状态
    //$scope.changeStatus = function(teacher) {
    //  var options = (teacher.status == 1 ? "enable" : "disable");
    //  teacher.status = teacher.status == 1 ? 2 : 1;
    //  $uibMsgbox.confirm('确认改变状态？', function(res) {
    //    if (res == 'yes') {
    //      erp_TeacherListService.changeStatus({
    //        teacherIds: teacher.id,
    //        status: options
    //      }, function(resp) {
    //        if (!resp.error) {
    //          $uibMsgbox.success("操作成功");
    //          $scope.queryTeacher();
    //        } else {
    //          $uibMsgbox.alert(resp.message);
    //        }
    //      });
    //    }
    //  });
    //};
    // 弹出上传头像框
    $scope.showUploadModal = function(teacher) {
      teacher.photo = teacher.photo || '';
      var modalInstance = $uibModal
        .open({
          // templateUrl : 'uploadHeadModalInstance.html',
          templateUrl: 'templates/block/avatar-upload.html',
          controller: 'blocks_avatarUploadController',
          resolve: {
            onUploadImg: function() {
              return function(result, $uibModalInstance) {
                erp_TeacherListService.uploadImg({
                  teacherId: teacher.id.toString(),
                  oldPhoto: teacher.photo.toString(),
                  photoBase64: result
                }, function(resp) {
                  if (!resp.error) {
                    $uibModalInstance.close();
                    $scope.queryTeacher();
                  } else {
                    $uibMsgbox.alert(resp.message);
                  }
                });
              }
            }
          }
        });
      modalInstance.result.then(function(result) {

        if (result) {
          $scope.queryTeacher();
        }
      }, function() {
        $log.info('DrawModal dismissed at: ' + new Date());
      })
    };

    // 修改教师弹出框
    $scope.shopUpdateModal = function(teacher) {
      var updateTeacher = {};
      angular.copy(teacher, updateTeacher);
      var modalInstance = $uibModal
        .open({
          size: 'xlg',
          templateUrl: 'updateTeacherModalInstance.html',
          controller: 'updateTeacherModalInstanceController',
          resolve: {
            // 目标参数获取
            // $scope.$resolve.changeNo
            params: function() {
              return {
                teacher: updateTeacher
              }
            }
          }
        });
      modalInstance.result.then(function(result) {
        $scope.queryTeacher();
        $uibMsgbox.alert("操作成功");
      }, function(reason) {
        $log.info('DrawModal dismissed at: ' + new Date());
      });
    }
    $scope.initPage = function() {
          PUBORGService.queryBu({}, function(resp) {
              if (!resp.error) {
                  $scope.buList = resp.data;
              }
          });

      }
    $scope.initPage();
    $scope.queryTeacher();
  }


// 修改教师信息
angular.module('ework-ui').controller(
  'updateTeacherModalInstanceController', ['$rootScope', '$scope', '$state', '$uibMsgbox',
    'erp_TeacherIndexService', 'erp_employeeService',
    'erp_studentOrgService', 'erp_TeacherListService','erp_subjectService',
    '$uibModalInstance', 'params',
    updateTeacherModalInstanceController
  ]);

function updateTeacherModalInstanceController($rootScope, $scope, $state,
  $uibMsgbox, erp_TeacherIndexService, erp_employeeService,
  erp_studentOrgService, erp_TeacherListService,erp_subjectService, $uibModalInstance,
  params) {

  $scope.statusList = [];
  $scope.genderList = [];
  $scope.partTimeList = [];
  $scope.teacherTypeList = [];
  //$scope.cityList = [];
  $scope.buList = [];
  $scope.subjectList = [];
  $scope.selSubjectList = [];
  $scope.subjectSearchInfo = '';
  $scope.updateTeacher = {
    id: params.teacher.id,
    employee_id: params.teacher.employee_id,
    employee_name: params.teacher.employee_name,
    encoding: params.teacher.encoding,
    teacher_name: params.teacher.teacher_name,
    nickname: params.teacher.nickname,
    teacher_age: params.teacher.teacher_age,
    seniority: params.teacher.seniority,
    teacher_type: params.teacher.teacher_type,
    status: params.teacher.status,
    sex: params.teacher.sex,
    phone: params.teacher.phone,
    is_pluralistic: params.teacher.is_pluralistic,
    bu_id: params.teacher.bu_id,
    description: params.teacher.description,
    email: params.teacher.email,
    old_id: params.teacher.old_id
  };

  // 选中关联员工输入框，清空输入框内容
  $scope.onEmployeeNameFocus = function() {
    if ($scope.updateTeacher.employee_name == '请输入员工姓名') {
      $scope.updateTeacher.employee_name = '';
    }
    $scope.inputing = true;
  };

  // 鼠标离开关联员工控件处理事件
  $scope.onEmployeeNameBlur = function() {
    if (!$scope.updateTeacher.employee_name) {
      $scope.updateTeacher.employee_name = '请输入员工姓名';
    }
    $scope.inputing = false;
  };

  // 关联员工输入框，名称变化则重新查询员工信息
  $scope.onEmployeeNameChange = function() {
    $scope.isDown = 'loading';
    $scope.searchResult = [];
    erp_employeeService.query({
      row_num: 10,
      pageSize: 10,
      currentPage: 1,
      employee_name: $scope.updateTeacher.employee_name
    }, function(resp) {
      $scope.isDown = '';
      if (!resp.error) {
        $scope.searchResult = resp.data;
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
  }

  // 从转入学员控件的查询结果中选择一条数据触发该事件
  $scope.selectEmployee = function(employee) {
    $scope.updateTeacher.employee_id = employee.id;
    $scope.updateTeacher.employee_name = employee.employee_name;
    $scope.searchResult = [];
  };

  $scope.checkBeforeSave = function() {
    if (!$scope.updateTeacher.employee_name) {
      $uibMsgbox.error('关联员工必填');
      return false;
    }

    if (!$scope.updateTeacher.encoding) {
      $uibMsgbox.error('教师编码必填');
      return false;
    }

    if (!$scope.updateTeacher.teacher_name) {
      $uibMsgbox.error('教师姓名必填');
      return false;
    }

    if (!$scope.updateTeacher.teacher_type) {
      $uibMsgbox.error('教师身份必填');
      return false;
    }

    if (!$scope.updateTeacher.status && $scope.updateTeacher.status!=0) {
      $uibMsgbox.error('教师状态必填');
      return false;
    }
      if ($scope.updateTeacher.is_pluralistic  != 0 && $scope.updateTeacher.is_pluralistic  != 1) {
          $uibMsgbox.error('是否兼职必填');
          return false;
      }

    if (!$scope.updateTeacher.sex) {
      $uibMsgbox.error('教师性别必填');
      return false;
    }

    if (!$scope.updateTeacher.phone) {
      $uibMsgbox.error('教师电话必填');
      return false;
    }
    
    if ($scope.updateTeacher.email && !(Validator.email.test($scope.updateTeacher.email))) {
    	$uibMsgbox.error('邮箱格式不正确');
    	return false;
    }

    if ($scope.selSubjectList.length <= 0) {
      $uibMsgbox.error('科目必填');
      return false;
    }
    return true;
  }

  $scope.removeSubject = function (subject) {
    subject.checked = false;
    _.remove($scope.selSubjectList, subject);
  }

  $scope.handleSubjectChange = function (subject) {
    if (subject.checked && !_.some($scope.selSubjectList, subject)) {
      $scope.selSubjectList.push(subject)
    } else {
      _.remove($scope.selSubjectList, subject);
    }
  }

  /**
   * 模态框确认
   */
  $scope.putTeacher = function() {

    if ($scope.checkBeforeSave()) {

      var teacherForUpdate = {};
      angular.copy($scope.updateTeacher, teacherForUpdate);
      var subject = teacherForUpdate.subject = [];
      _.forEach($scope.selSubjectList, function(item) {
        teacherForUpdate.subject.push(item.id)
      })
      if (subject) {
        teacherForUpdate.subject = subject.join(",");
      }
      erp_TeacherIndexService.put(teacherForUpdate, function(resp) {
        if (!resp.error) {
          $uibModalInstance.close("success");
        } else {
          $uibMsgbox.error(resp.message);
        }
      });
    }
  };

  /**
   * 模态框取消
   */
  $scope.handleModalCancel = function() {
    $uibModalInstance.dismiss('cancel');
  }

  $scope.initialize = function() {
    // 通过教师id查询教师关联的科目
    erp_TeacherListService.querySubject({
      teacherId: $scope.updateTeacher.id
    }, function(resp) {
      if (!resp.error) {
        $scope.selSubjectList = resp.data;
      } else {
        $uibMsgbox.error(resp.message);
      }
    });
      $scope.changeBu = function(){
          $scope.selSubjectList = [];
          erp_subjectService.querySelectDatas({
              bu_id:$scope.updateTeacher.bu_id
          },function(resp){
              if(!resp.error){
                  $scope.subjectList = resp.data;
              }else{
                  $uibMsgbox.error(resp.message);
              }
          });
      };
    erp_TeacherIndexService.toManage({}, function(resp) {
      if (!resp.error) {
        $.each(resp.teacherType, function(i, n) {
          n.code = parseInt(n.code);
        })
        $scope.teacherTypeList = resp.teacherType;
        $.each(resp.teacherStatus, function(i, n) {
          n.code = parseInt(n.code);
        })
        $scope.statusList = resp.teacherStatus;
        $.each(resp.gender, function(i, n) {
          n.code = parseInt(n.code);
        })
        $scope.genderList = resp.gender;
        $.each(resp.isPartTime, function(i, n) {
          n.code = parseInt(n.code);
        })
        $scope.partTimeList = resp.isPartTime;
        //$scope.cityList = resp.cityList;
        $scope.buList = $.map(resp.buList,function(n,i) {
          if(n.parent_id == resp.city_id) return n;
        });
        //$scope.subjectList = resp.subjectList;
        //$scope.updateTeacher.city_id = resp.city_id;
        //$scope.updateTeacher.bu_id = resp.bu_id;
      } else {
        $uibMsgbox.error(resp.message);
      }

      erp_subjectService.querySelectDatas({
          bu_id:$scope.updateTeacher.bu_id
      },function(resp){
          if(!resp.error){
              $scope.subjectList = resp.data;
          }else{
              $uibMsgbox.error(resp.message);
          }
      });
    });
  }

  $scope.initialize();
}

/**
 * 
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_workflowTaskAppication', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_workflowMyAppicationService',
        'erp_workflowTaskService',
        erp_workflowMgrmentController]);

function erp_workflowMgrmentController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_workflowMyAppicationService,
    erp_workflowTaskService) {
	$scope.page = {
				currentPage:1,
				pageSize:5,
				totalCount:0
			};
	$scope.isLoading = '';
	$scope.app_info = '';
	$scope.isDetailLoading='';
	$scope.showDetail = false;
	$scope.queryModuleList = [
	    {
	    	"name":"全部",
	    	"value":"-1"
	    },{
	    	"name":"erp",
	    	"value":"erp"
	    },{
	    	"name":"hrm",
	    	"value":"hrm"
	    }
	];
	$scope.selectedModule = $scope.queryModuleList[0];
	$scope.queryWorkFlowStateList = [
  	    {
  	    	"name":"全部",
  	    	"value":"-1"
  	    },{
  	    	"name":"申请已提交",
  	    	"value":"申请已提交"
  	    },{
  	    	"name":"待审核",
  	    	"value":"待审核"
  	    },{
  	    	"name":"已通过",
  	    	"value":"已通过"
  	    },{
  	    	"name":"审核通过，订单生效",
  	    	"value":"审核通过，订单生效"
  	    },{
  	    	"name":"审核通过，订单作废处理",
  	    	"value":"审核通过，订单作废处理"
  	    },{
  	    	"name":"审核通过，退费单生效",
  	    	"value":"审核通过，退费单生效"
  	    },{
  	    	"name":"订单审批不通过",
  	    	"value":"订单审批不通过"
  	    },{
  	    	"name":"审批不通过，退费单作废",
  	    	"value":"审批不通过，退费单作废"
  	    }
  	];
	$scope.selectedWorkFlowState = $scope.queryWorkFlowStateList[2];
	
	$scope.queryMyAppications = function (){
		var param = {
				currentPage:$scope.page.currentPage,
				pageSize:$scope.page.pageSize
		};
		param.app_info = $scope.app_info;
		param.module = $scope.selectedModule.value;
		param.start_date = $("#cdt_start_date_02").val();
		param.end_date = $("#cdt_end_date_02").val();
		param.auditStatus = $scope.selectedWorkFlowState.value;
		$scope.isLoading = 'isLoading';
		erp_workflowMyAppicationService.query(param,function(resp){
			
			$scope.isLoading = '';
			if(!resp.error){
				$.each(resp.data.resultList,function(i,n) {
					n.APPLICATION = n.APPLICATION.replace(/\[(.+?)\]/g,"【<span style='color:#1b8cf2'>$1</span>】");
				})
				$scope.page = resp.data;
			}else{
				alert(resp.message);
			}
		});
	};
	
	$scope.pageQuery =function(currentPage){
		$scope.page.currentPage = currentPage;
		if($scope.page.currentPage<1){
			$scope.page.currentPage = 1;
		}
		if($scope.page.currentPage>$scope.page.totalPage){
			$scope.page.currentPage=$scope.page.totalPage;
		}
		$scope.queryMyAppications();
	};
	
	$scope.deleteApplication = function(row){
		var param = {
				applicationId:row.ID
		};
		$scope.isLoading = 'isDeleting';
		erp_workflowMyAppicationService.del(param,function(resp){
			$scope.isLoading = '';
			if(!resp.error){
				alert("删除成功！");
				$scope.queryMyAppications();
			}else{
				alert(resp.message);
			}
		});
	};
	
	$scope.queryMore = function(){
		$scope.page.pageSize = $scope.page.pageSize + 5;
		$scope.pageQuery(1);
	};
	$scope.queryInitial = function(){
		$scope.page.pageSize = 5;
		$scope.pageQuery(1);
	};
	
	$scope.showDetailInfo = function(row){
        if(row.showDetail ){
            row.showDetail = false;
            return true;
        }
		row.showDetail = true;
		$scope.selectedRow = row;
		$scope.isDetailLoading='isDetailLoading';
		var param = {};
		$scope.selectedRow.task = undefined;
		param.taskId = row.taskId;
		erp_workflowTaskService.query(param,function(resp){
			$scope.isDetailLoading='';
			if(!resp.error){
                var taskDetailInfo = resp;
                if(taskDetailInfo && taskDetailInfo.task &&  taskDetailInfo.task.createTime){
                    var dt = new Date();
                    dt.setTime(taskDetailInfo.task.createTime);
                    taskDetailInfo.task.createTime = Format('yyyy-MM-dd hh:mm:ss',dt);
                }

                if(taskDetailInfo && taskDetailInfo.historyTasks){
                    $.each( taskDetailInfo.historyTasks,function(i,historyTask){
                        if(historyTask.createTime){
                            var dt = new Date();
                            dt.setTime(historyTask.createTime);
                            historyTask.createTime = Format('yyyy-MM-dd hh:mm:ss',dt);
                        }
                    });
                }
                
                $scope.selectedRow.task = taskDetailInfo;
                if($scope.selectedRow.task&&$scope.selectedRow.task.task&&$scope.selectedRow.task.task.extData){
                	$scope.selectedRow.extData = $scope.selectedRow.task.task.extData;
                }

            }else{
                alert(resp.message);
            }
		});
	};
	$scope.closeDetailInfo = function(row){
        row.showDetail = false;
	};
	$scope.closeDeletingInfo = function(){
		$scope.isLoading = '';
	};


    $scope.query = function(){
        $scope.page.resultList = [];
        $scope.page.pageSize = 5;
        $scope.queryMyAppications();
    }

    $scope.queryMyAppications();
};
/**
 * 
 */
"use strict";
angular
  .module('ework-ui')
  .controller('erp_workflowBrachTaskAppicationController', [
    '$rootScope',
    '$scope',
    '$cookieStore',
    '$log',
    '$uibMsgbox',
    'erp_workflowBranchAppicationService',
    'erp_workflowTaskService',
    erp_workflowBrachTaskAppicationController
  ]);

function erp_workflowBrachTaskAppicationController(
  $rootScope,
  $scope,
  $cookieStore,
  $log,
  $uibMsgbox,
  erp_workflowBranchAppicationService,
  erp_workflowTaskService) {
  $scope.page = {
    currentPage: 1,
    pageSize: 5,
    totalCount: 0
  };
  $scope.isLoading = '';
  $scope.app_info = '';
  $scope.isDetailLoading = '';
  $scope.showDetail = false;
  $scope.queryModuleList = [{
    "name": "全部",
    "value": "-1"
  }, {
    "name": "erp",
    "value": "erp"
  }, {
    "name": "hrm",
    "value": "hrm"
  }];
  $scope.selectedModule = $scope.queryModuleList[0];
  $scope.queryWorkFlowStateList = [{
    "name": "全部",
    "value": "-1"
  }, {
    "name": "申请已提交",
    "value": "申请已提交"
  }, {
    "name": "待审核",
    "value": "待审核"
  }, {
    "name": "已通过",
    "value": "已通过"
  }, {
    "name": "审核通过，订单生效",
    "value": "审核通过，订单生效"
  }, {
    "name": "审核通过，订单作废处理",
    "value": "审核通过，订单作废处理"
  }, {
    "name": "审核通过，退费单生效",
    "value": "审核通过，退费单生效"
  }, {
    "name": "订单审批不通过",
    "value": "订单审批不通过"
  }, {
    "name": "审批不通过，退费单作废",
    "value": "审批不通过，退费单作废"
  }];
  $scope.selectedWorkFlowState = $scope.queryWorkFlowStateList[2];

  $scope.queryMyAppications = function() {
    var param = {
      currentPage: $scope.page.currentPage,
      pageSize: $scope.page.pageSize
    };
    param.app_info = $scope.app_info;
    param.module = $scope.selectedModule.value;
    param.start_date = $("#cdt_start_date_04").val();
    param.end_date = $("#cdt_end_date_04").val();
    param.auditStatus = $scope.selectedWorkFlowState.value;
    $scope.isLoading = 'isLoading';
    erp_workflowBranchAppicationService.query(param, function(resp) {
      $scope.isLoading = '';
      if (!resp.error) {
        $scope.page = resp.data;
        if ($scope.page.resultList) {
          $.each($scope.page.resultList, function(i, r) {
            var dt = new Date();
            dt.setTime(r.createTime);
            r.createTime = Format('yyyy-MM-dd hh:mm:ss', dt);

            if (r.extData && r.extData.businessDetailInfo) {
              r.extData.businessDetailInfo = r.extData.businessDetailInfo.split("$$$$").join("");
            }
          });
        }
      } else {
        $uibMsgbox.alert(resp.message);
      }
    });
  };

  $scope.pageQuery = function(currentPage) {
    $scope.page.currentPage = currentPage;
    if ($scope.page.currentPage < 1) {
      $scope.page.currentPage = 1;
    }
    if ($scope.page.currentPage > $scope.page.totalPage) {
      $scope.page.currentPage = $scope.page.totalPage;
    }
    $scope.queryMyAppications();
  };



  $scope.queryMore = function() {
    $scope.page.pageSize = $scope.page.pageSize + 5;
    $scope.pageQuery(1);
  };
  $scope.queryInitial = function() {
    $scope.page.pageSize = 5;
    $scope.pageQuery(1);
  };

  $scope.showDetailInfo = function(row) {
    if (row.showDetail) {
      row.showDetail = false;
      return true;
    }
    row.showDetail = true;
    $scope.selectedRow = row;
    $scope.isDetailLoading = 'isDetailLoading';
    var param = {};
    $scope.selectedRow.task = undefined;
    param.taskId = row.id;
    erp_workflowTaskService.query(param, function(resp) {
      $scope.isDetailLoading = '';
      if (!resp.error) {
        var taskDetailInfo = resp;
        if (taskDetailInfo && taskDetailInfo.task && taskDetailInfo.task.createTime) {
          var dt = new Date();
          dt.setTime(taskDetailInfo.task.createTime);
          taskDetailInfo.task.createTime = Format('yyyy-MM-dd hh:mm:ss', dt);
          if (taskDetailInfo.task.extData && taskDetailInfo.task.extData.businessDetailInfo) {
            taskDetailInfo.task.extData.businessDetailInfo = taskDetailInfo.task.extData.businessDetailInfo.split("$$$$").join("");
          }
        }

        if (taskDetailInfo && taskDetailInfo.historyTasks) {
          $.each(taskDetailInfo.historyTasks, function(i, historyTask) {
            if (historyTask.createTime) {
              var dt = new Date();
              dt.setTime(historyTask.createTime);
              historyTask.createTime = Format('yyyy-MM-dd hh:mm:ss', dt);
            }
          });
        }

        $scope.selectedRow.task = taskDetailInfo;
        if ($scope.selectedRow.task && $scope.selectedRow.task.task && $scope.selectedRow.task.task.extData) {
          $scope.selectedRow.extData = $scope.selectedRow.task.task.extData;
        }

      } else {
        $uibMsgbox.alert(resp.message);
      }
    });
  };
  $scope.closeDetailInfo = function(row) {
    row.showDetail = false;
  };
  $scope.closeDeletingInfo = function() {
    $scope.isLoading = '';
  };


  $scope.query = function() {
    $scope.page.resultList = [];
    $scope.page.pageSize = 5;
    $scope.queryMyAppications();
  }

  $scope.queryMyAppications();
};

/**
 * Created by Liyong.zhu on 2017/1/12.
 */
/**
 *
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_workflowTaskTodoController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_studentBuOrgsService',
        'erp_workflowTaskTodoService',
        'erp_workflowTaskService',
        'erp_workflowTaskExamineAndApproveService',
        'klxx_EmployeeService',
        'erp_workflowTaskTodoChangeService',
        erp_workflowTaskTodoController]);

function erp_workflowTaskTodoController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_studentBuOrgsService,
    erp_workflowTaskTodoService,
    erp_workflowTaskService,
    erp_workflowTaskExamineAndApproveService,
    klxx_EmployeeService,
    erp_workflowTaskTodoChangeService
    ) {
    $scope.page = {
        currentPage:1,
        pageSize:5,
        totalCount:0
    };
    $scope.isLoading = '';
    $scope.app_info = '';
    $scope.isDetailLoading='';
    $scope.showDetail = false;
    $scope.queryModuleList = [
        {
            "name":"全部",
            "value":"-1"
        },{
            "name":"erp",
            "value":"erp"
        },{
            "name":"hrm",
            "value":"hrm"
        }
    ];
    $scope.selectedModule = $scope.queryModuleList[0];
    $scope.queryWorkFlowStateList = [
        {
            "name":"全部",
            "value":"-1"
        },{
            "name":"申请已提交",
            "value":"申请已提交"
        },{
            "name":"待审核",
            "value":"待审核"
        },{
            "name":"已通过",
            "value":"已通过"
        },{
            "name":"审核通过，订单生效",
            "value":"审核通过，订单生效"
        },{
            "name":"审核通过，订单作废处理",
            "value":"审核通过，订单作废处理"
        },{
            "name":"审核通过，退费单生效",
            "value":"审核通过，退费单生效"
        },{
            "name":"订单审批不通过",
            "value":"订单审批不通过"
        },{
            "name":"审批不通过，退费单作废",
            "value":"审批不通过，退费单作废"
        }
    ];
    $scope.selectedWorkFlowState = $scope.queryWorkFlowStateList[2];
    $scope.todoTaskPage = {
        pageSize:5
    };
    $scope.isLoading='';
    function queryTodoTaskList(){
        var param = {};
        $scope.isLoading='isLoading';
        param.pageSize = $scope.todoTaskPage.pageSize;
        param.queryString = $scope.app_info;
        param.branchId = $scope.selectedBranch;
        param.startDate = $("#cdt_start_date").val();
        param.endDate = $("#cdt_end_date").val();
        erp_workflowTaskTodoService.query(param,function(resp){
            $scope.isLoading='';
            if(!resp.error){
                $scope.todoTaskPage = resp.data;
                if( $scope.todoTaskPage&& $scope.todoTaskPage.resultList){
                    $.each($scope.todoTaskPage.resultList,function(i,row){
                        if(row.createTime){
                           var date =  new Date();
                            date.setTime(row.createTime);
                            row.createTime = Format('yyyy/MM/dd hh:mm',date);
                        }
                    })
                }
            }
        });
    }

    queryTodoTaskList();
    queryBuOrgs();

    $scope.pageQuery =function(currentPage){
        $scope.todoTaskPage.currentPage = currentPage;
        if($scope.todoTaskPage.currentPage<1){
            $scope.todoTaskPage.currentPage = 1;
        }
        if($scope.todoTaskPage.currentPage>$scope.todoTaskPage.totalPage){
            $scope.todoTaskPage.currentPage=$scope.todoTaskPage.totalPage;
        }
        queryTodoTaskList();
    };

    $scope.queryMore = function(){
        $scope.todoTaskPage.pageSize = $scope.todoTaskPage.pageSize + 5;
        $scope.pageQuery(1);
    };

    $scope.queryTask = function(){
        $scope.todoTaskPage.resultList = [];
        $scope.todoTaskPage.pageSize = 5;
        queryTodoTaskList();
    }

    $scope.showDetailInfo = function(row){
        if(row.showDetail ){
            row.showDetail = false;
            return true;
        }
        row.showDetail = true;
        $scope.selectedRow = row;
        row.isDetailLoading='isDetailLoading';
        var param = {};
        $scope.selectedRow.task = undefined;
        param.taskId = row.id;
        erp_workflowTaskService.query(param,function(resp){
            row.isDetailLoading=undefined;
            if(!resp.error){
                var taskDetailInfo = resp;
                if(taskDetailInfo && taskDetailInfo.task &&  taskDetailInfo.task.createTime){
                    var dt = new Date();
                    dt.setTime(taskDetailInfo.task.createTime);
                    taskDetailInfo.task.createTime = Format('yyyy-MM-dd hh:mm:ss',dt);
                }
                if(taskDetailInfo && taskDetailInfo.task && taskDetailInfo.task.extData && taskDetailInfo.task.extData.businessDetailInfo){
                    taskDetailInfo.task.extData.businessDetailInfo = taskDetailInfo.task.extData.businessDetailInfo.split("$$$$").join("");
                }

                if(taskDetailInfo && taskDetailInfo.historyTasks){
                    $.each( taskDetailInfo.historyTasks,function(i,historyTask){
                        if(historyTask.createTime){
                            var dt = new Date();
                            dt.setTime(historyTask.createTime);
                            historyTask.createTime = Format('yyyy-MM-dd hh:mm:ss',dt);
                        }
                    });
                }

                $scope.selectedRow.task = taskDetailInfo;
                if($scope.selectedRow.task&&$scope.selectedRow.task.task&&$scope.selectedRow.task.task.extData){
                    $scope.selectedRow.extData = $scope.selectedRow.task.task.extData;
                }

            }else{
                alert(resp.message);
            }
        });
        queryTaskTodoChange(row);
    };
    $scope.closeDetailInfo = function(row){
        row.showDetail = false;
    };


    $scope.submitTask = function(task,outcome){
        var param = {};
        param.taskId = task.id;
        param.remark = task.submitRemark;
        param.outcome = outcome;
        $scope.isSubmitTask = 'isSubmitTask';
        erp_workflowTaskExamineAndApproveService.post(param,function(resp){
            $scope.isSubmitTask = '';
            if(!resp.error){
                alert("审批已处理！");
                $scope.queryTask();
            }else{
                alert(resp.message);
            }
        });
    }
    $scope.employeeList = [];
    $scope.toEntrust = function(todoTask){
        todoTask.entrust = true;
        $scope.queryEmployeeList(todoTask);
    }

    $scope.queryEmployeeList = function(todoTask){
        todoTask.entrustIsLoadingDetail = 'entrustIsLoadingDetail';
        var param = {};
        $scope.employeeList = [];
        param.searchName = todoTask.searchName;
        klxx_EmployeeService.query(param,function(resp){
            todoTask.entrustIsLoadingDetail='';
            if(!resp.error){
                $scope.employeeList = resp.data;
            }else{
                alert(resp.message);
            }
        });
    }



    $scope.returnDetail = function(todoTask){
        todoTask.entrust = undefined;
    }

    $scope.checkEmployee =function(employee){
        if(employee.checked){
            employee.checked = false;
        }else{
            employee.checked = true;
        }
    }
    $scope.changeTask = function(todoTask){
        if(!$rootScope.curAccount){
            alert("服务端异常，未查询到当前登录用户,提交失败！");
            return ;
        }
        var param = {};
        param.beginDate = $("#cdt_start_date_0201").val();
        param.endDate = $("#cdt_end_date_0201").val();
        param.consigneeTaskId = todoTask.id+"";
        param.consignorRole = $rootScope.curAccount.id+"";
        param.employees = [];
        param.employeesName = [];
        $.each($scope.employeeList,function(i,empl){
            if(empl.checked){
                param.employees.push(empl.id);
                param.employeesName.push(empl.employeeName);
            }
        });
        if(param.employees.length==0){
            alert("请选择委托人！");
            return;
        }

        if(!param.beginDate){
            alert("请设置委托开始时间！");
            return;
        }
        if(!param.endDate){
            alert("请设置委托结束时间！");
            return;
        }

        todoTask.entrustIsLoadingDetail = 'entrustIsPosting';
        erp_workflowTaskTodoChangeService.post(param,function(response){
            todoTask.entrustIsLoadingDetail = '';
            if(!response.error){
                alert("委托成功！");
            }else{
                alert(response.message);
            }
        });
    };


    function queryTaskTodoChange(todoTask){
        var param = {};
        param.consignorRole = $rootScope.curAccount.id+"";
        param.consigneeTaskId = todoTask.id+"";
        erp_workflowTaskTodoChangeService.query(param,function(resp){
            if(!resp.error){
                todoTask.historyChangeTaskList = resp.data;
            }else{
                alert(resp.message);
            }
        })
    }

    /**
     * 查询校区
     */
    function queryBuOrgs() {
        erp_studentBuOrgsService.query({}, function (resp) {
            if (!resp.error) {
                var data = resp.data;
                if (data && data.length) {
                    $scope.branchList = resp.data;
                    //将全部option添加到branchList
                    $scope.branchList.unshift(
                        {
                            id : -1,
                            org_name:"-- 全部 --"
                        }
                    );
                }
            }
        })
    }
};
/**
 * Created by Liyong.zhu on 2016/11/9.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_workflowMgrmentController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_workflowMgrmentService',
        erp_workflowMgrmentController]);

function erp_workflowMgrmentController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_workflowMgrmentService) {
    $scope.processInfoList = [];
    $scope.isLoading = '';
    $scope.openPanel = '';
    $scope.selectedProcess = null;

    $scope.toOpenPanel = function(process){
        $scope.selectedProcess = process;
        $scope.openPanel = 'showWorkflowPng';
    }

    $scope.toClosePanel = function(){
        $scope.openPanel = '';
        $scope.selectedProcess = null;
    }

    $scope.refresh = function(){
        queryWorkflowDefined();
    }
    /**
     * 查询流程定义
     */
    function queryWorkflowDefined(){
        $scope.isLoading = 'isLoading';
        $scope.processInfoList = [];
        erp_workflowMgrmentService.query({},function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.processInfoList = resp.fileList;
                $scope.path = resp.path;
            }else{
                alert("流程信息获取不正确！");
            }
        })
    }

    queryWorkflowDefined();

    /**
     * 发布流程
     * @param processInfo
     */
    $scope.deployProcess = function(processInfo){
        var param = {};
        param.processFile = processInfo.file;
        $scope.openPanel = 'deployProcess';
        erp_workflowMgrmentService.post(param,function(resp){
            $scope.openPanel = '';
            if(!resp.error){
                alert("发布成功！");
                queryWorkflowDefined();
            }else{
                alert(resp.message);
            }
        })
    }

    /**
     * 更新流程
     * @param processInfo
     */
    $scope.updateProcess = function(processInfo){
        var param = {};
        param.processDeployId = processInfo.deployId;
        param.processZip = processInfo.file;
        $scope.openPanel = 'updateProcess';
        erp_workflowMgrmentService.update(param,function(resp){
            $scope.openPanel = '';
            if(!resp.error){
                alert("更新成功！");
                queryWorkflowDefined();
            }else{
                alert(resp.message);
            }
        })
    }


};
/**
 * Created by Liyong.zhu on 2016/11/9.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_workflowProcessDefinitionController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        'erp_workflowDeployedProcessDefinitionService',
        'erp_workflowProcessInstanceService',
        erp_workflowProcessDefinitionController]);

function erp_workflowProcessDefinitionController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    erp_workflowDeployedProcessDefinitionService,
    erp_workflowProcessInstanceService) {
    $scope.processInfoList = [];
    $scope.isLoading = '';
    $scope.openPanel = '';
    $scope.selectedProcess = null;
    $scope.selectedProcess = null;

    $scope.toOpenPanel = function(process){
        $scope.selectedProcess = process;
        $scope.openPanel = 'showWorkflowPng';
    }

    $scope.toClosePanel = function(){
        $scope.openPanel = '';
    }

    $scope.refresh = function(){
        queryWorkflowDefined();
    }
    /**
     * 查询流程定义
     */
    function queryWorkflowDefined(){
        $scope.isLoading = 'isLoading';
        $scope.processInfoList = [];
        erp_workflowDeployedProcessDefinitionService.query({},function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.processInfoList = resp.data;
            }else{
                alert("流程信息获取不正确！");
            }
        })
    }

    queryWorkflowDefined();

    $scope.deleteDefinition = function(processInfo){
        $scope.openPanel = 'deleteProcessDefinition';
        var param = {};
        param.deploymentid = processInfo.deploymentid;
        erp_workflowDeployedProcessDefinitionService.delete(param,function(resp){
            $scope.openPanel = '';
            if(!resp.error){
                alert("删除成功！");
                queryWorkflowDefined();
            }else{
                alert(resp.message);
            }
        });
    }

    $scope.startProcess = function(processInfo){
        var param = {};
        param.id = processInfo.id;
        $scope.openPanel = 'startProcess';
        erp_workflowDeployedProcessDefinitionService.post(param,function(resp){
            $scope.openPanel = '';
            if(!resp.error){
                alert("流程启动成功！");
            }else{
                alert(resp.message);
            }
        })
    }

    $scope.deleteDefinitionForse = function(processInfo){
        $scope.openPanel = 'deleteProcessDefinition';
        var param = {};
        param.deploymentid = processInfo.deploymentid;
        param.deleteType = 'force';
        erp_workflowDeployedProcessDefinitionService.delete(param,function(resp){
            $scope.openPanel = '';
            if(!resp.error){
                alert("删除成功！");
                queryWorkflowDefined();
            }else{
                alert(resp.message);
            }
        })
    }

    /**
     * 查询工作流的流程实例
     * @param process
     */
    $scope.queryWorkflowProcessInstance = function(process){
        $scope.selectedProcess = process;
        queryWorkflowProcessInstanceDetail();
    }


    function queryWorkflowProcessInstanceDetail(){
        $scope.openPanel = 'queryProcessDefinitionDetail';
        var param = {};
        $scope.isQueryProcessDefinitionDetail = true;
        $scope.selectedProcess.instanceList = [];
        param.deploymentid = $scope.selectedProcess.deploymentid;
        erp_workflowProcessInstanceService.query(param,function(resp){
            $scope.isQueryProcessDefinitionDetail = false;
            if(!resp.error){
                $scope.selectedProcess.instanceList = resp.data;
            }
        })
    }






};
/**
 * Created by Liyong.zhu on 2016/11/9.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_workflowProcessNodeController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        '$resource',
        'erp_workflowDeployedProcessDefinitionService',
        'erp_workflowProcessNodeRoleService',
        'erp_workflowProcessNodeRoleMappingService',
        erp_workflowProcessNodeController]);

function erp_workflowProcessNodeController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    $resource,
    erp_workflowDeployedProcessDefinitionService,
    erp_workflowProcessNodeRoleService,
    erp_workflowProcessNodeRoleMappingService) {
    $scope.processInfoList = [];
    $scope.isLoading = '';
    $scope.openPanel = '';
    $scope.selectedProcess = null;
    $scope.selectedProcess = null;
    $scope.ext_query_business_role_url = null;

    $scope.toOpenPanel = function(process){
        $scope.selectedProcess = process;
        $scope.openPanel = 'showWorkflowPng';
    }

    $scope.toClosePanel = function(){
        $scope.openPanel = '';
    }

    $scope.refresh = function(){
        queryWorkflowDefined();
    }
    /**
     * 查询流程定义
     */
    function queryWorkflowDefined(){
        $scope.isLoading = 'isLoading';
        $scope.processInfoList = [];
        erp_workflowDeployedProcessDefinitionService.query({},function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.processInfoList = resp.data;
            }else{
                alert(resp.message);
            }
        })
    }

    queryWorkflowDefined();


    /**
     * 查询工作流的流程实例
     * @param process
     */
    $scope.queryProcessNodeRight = function(process){
        $scope.selectedProcess = process;
        queryProcessNodeRightDetail();
    }


    function queryProcessNodeRightDetail(){
        $scope.openPanel = 'queryProcessDefinitionDetail';
        var param = {};
        $scope.isQueryProcessDefinitionDetail = true;
        $scope.selectedProcess.roleList = [];
        $scope.selectedRole = null;
        param.processKey = $scope.selectedProcess.key;
        erp_workflowProcessNodeRoleService.query(param,function(resp){
            $scope.isQueryProcessDefinitionDetail = false;
            if(!resp.error){
                $scope.selectedProcess.roleList = resp.data;
                $scope.ext_query_business_role_url = resp.ext_query_business_role_url;
                if($scope.selectedProcess.roleList && $scope.selectedProcess.roleList.length ){
                    if($scope.selectedRole){
                        $scope.selectProcessNode($scope.selectedRole);
                    }else{
                        $scope.selectProcessNode($scope.selectedProcess.roleList[0]);
                    }
                }

            }
        });
    }

    $scope.selectProcessNode = function(processRole){
        $scope.selectedRole = processRole;
    }

    $scope.removeRoleMapping = function(mapping){
        var param = {};
        param.id = mapping.id;
        erp_workflowProcessNodeRoleMappingService.delete(param,function(resp){
            if(!resp.error){
                alert("删除成功！");
                queryProcessNodeRightDetail();
            }else{
                alert(resp.message);
            }
        })
    }
    $scope.queryBusinessRoleParam = {
        searchName:'',
        isSearch:false
    };
    $scope.searchRoleList = [];
    /**
     * 查询业务角色，ext_query_business_role_url为员工查询服务扩展点。返回值为员工列表，参数为queryString
     * @returns {boolean}
     */
    $scope.queryBusinessRole = function(){
        if($scope.openSearchRoleList){
            $scope.openSearchRoleList = false;
            return false;
        }
        if(!$scope.ext_query_business_role_url){
            alert("没有角色查询服务！ext_query_business_role_url is null.");
            return false;
        }

        var queryService = $resource($scope.ext_query_business_role_url,{},{
            query: {method:'GET', params:{}, isArray:false}
        });

        $scope.queryBusinessRoleParam.isSearch = true;
        $scope.searchRoleList = [];
        queryService.query({
            searchName:$scope.queryBusinessRoleParam.searchName
        },function(resp){
            $scope.queryBusinessRoleParam.isSearch = false;
            if(!resp.error){
                $scope.searchRoleList = resp.data;
            }else{
                alert(resp.message);
            }
        });
        $scope.openSearchRoleList = true;

        return true;
    }



    $scope.selectSearchRole = function(employee){
        $scope.queryBusinessRoleParam.searchName = employee.employeeName;
        $scope.queryBusinessRoleParam.employee = employee;
        if($scope.openSearchRoleList){
            $scope.openSearchRoleList = false;
            $scope.searchRoleList = [];
        }
    }

    $scope.addRoleMapping = function(){
        if(!$scope.queryBusinessRoleParam.employee){
            alert("请搜索并选择员工！");
            return;
        }

        if(!$scope.selectedRole){
            alert("请在左侧选择流程审批节点！");
            return;
        }

        var roleDef = {};
        roleDef.id = $scope.selectedRole.id;
        roleDef.processKey = $scope.selectedRole.processKey;
        roleDef.processTask = $scope.selectedRole.processTask;
        roleDef.remark = $scope.selectedRole.remark;
        var mapping = {};
        mapping.processRoleDefId = $scope.selectedRole.id;
        mapping.businessRole = $scope.queryBusinessRoleParam.employee.employeeName+"-"+$scope.queryBusinessRoleParam.employee.encoding+","+$scope.queryBusinessRoleParam.employee.orgName;
        mapping.businessRoleId = $scope.queryBusinessRoleParam.employee.id;
        mapping.processRoleDef = roleDef;
        $scope.openPanel2 = 'isAddProcessNodeRole';
        erp_workflowProcessNodeRoleMappingService.post(mapping,function(resp){
            $scope.openPanel2 = '';
            if(!resp.error){
                alert("添加成功！");
                queryProcessNodeRightDetail();
            }else{
                alert(resp.message);
            }
        });

    }






};
/**
 * Created by Liyong.zhu on 2016/11/9.
 */
"use strict";
angular
    .module('ework-ui')
    .controller('erp_workflowProcessTaskController', [
        '$rootScope',
        '$scope',
        '$cookieStore',
        '$log',
        '$resource',
        'erp_workflowProcessTaskService',
        'erp_workflowTaskExamineAndApproveService',
        'erp_workflowTaskOutcomesService',
        erp_workflowProcessTaskController]);

function erp_workflowProcessTaskController(
    $rootScope,
    $scope,
    $cookieStore,
    $log,
    $resource,
    erp_workflowProcessTaskService,
    erp_workflowTaskExamineAndApproveService,
    erp_workflowTaskOutcomesService) {
    $scope.taskInfoList = [];
    $scope.isLoading = '';
    $scope.openPanel = '';
    $scope.selectedProcess = null;
    $scope.selectedProcess = null;
    $scope.queryTaskParam = {
        beginNo:0,
        endNo:19,
        totalCount:0,
        currentPage:1,
        rowNo:20,
        searcherName:null,
        remark:''
    };
    $scope.taskDetailInfo = {};

    $scope.toOpenPanel = function(process){
        $scope.selectedProcess = process;
        $scope.openPanel = 'showWorkflowPng';
    }

    $scope.toClosePanel = function(){
        $scope.openPanel = '';
    }

    $scope.refresh = function(){
        queryWorkflowTaskList();
    }

    $scope.selectPage = function(next){
        $scope.queryTaskParam.currentPage = next;
        $scope.queryTaskParam.endNo =  $scope.queryTaskParam.currentPage * $scope.queryTaskParam.rowNo-1;
        $scope.queryTaskParam.beginNo =  ($scope.queryTaskParam.currentPage-1) * $scope.queryTaskParam.rowNo;
        queryWorkflowTaskList();
    }

    /**
     * 查询流程任务列表
     */
    function queryWorkflowTaskList(){
        $scope.isLoading = 'isLoading';
        $scope.taskInfoList = [];
        var param = $scope.queryTaskParam;
        erp_workflowProcessTaskService.query(param,function(resp){
            $scope.isLoading = '';
            if(!resp.error){
                $scope.taskInfoList = resp.data;
                $scope.queryTaskParam.totalCount = resp.totalCount;
                $scope.queryTaskParam.beginNo = resp.beginNo;
                $scope.queryTaskParam.endNo = resp.endNo;
                if($scope.queryTaskParam.totalCount<$scope.queryTaskParam.beginNo){
                    $scope.queryTaskParam.beginNo = $scope.queryTaskParam.totalCount;
                }
                if($scope.queryTaskParam.totalCount<$scope.queryTaskParam.endNo){
                    $scope.queryTaskParam.endNo = $scope.queryTaskParam.totalCount;
                }

                if( $scope.taskInfoList){
                    $.each( $scope.taskInfoList,function(i,model){
                        if(model.createTime){
                            var d = new Date();
                            d.setTime(model.createTime);
                            model.createTimeString = Format('yyyy-MM-dd hh:ss',d);
                        }
                        if(model.variables){
                            var paramPbj = {};
                            $.each(model.variables,function(j,v){
                                v.val_ = genStringValue(v.date_value_)
                                    +""+genStringValue(v.double_value_)
                                    +""+genStringValue(v.long_value_)
                                    +""+genStringValue(v.string_value_)
                                    +""+genStringValue(v.text_value_);
                                paramPbj[v.key_] =  v.val_;
                            });
                            model.paramPbj = paramPbj;
                        }
                    });
                }
            }else{
                alert(resp.message);
            }
        })
    }

    function genStringValue(v){
        return v?v+"":"";
    }

    queryWorkflowTaskList();

    $scope.queryWorkflowTaskList = function(){
        queryWorkflowTaskList();
    }
    $scope.selectedTask = null;
    $scope.detailPanel = function(taskInfo){
        $scope.selectedTask = taskInfo;
        $scope.openPanel = 'detail';
        $scope.queryTaskParam.remark = '';
        var param = {};
        param.taskId = taskInfo.dbid_;
        $scope.taskDetailInfo = {};
        $scope.openPanel2 = 'detailPanel';
        erp_workflowTaskOutcomesService.query(param,function(resp){
            $scope.openPanel2 = '';
            if(!resp.error){
                $scope.taskDetailInfo = resp;
                if($scope.taskDetailInfo && $scope.taskDetailInfo.task &&  $scope.taskDetailInfo.task.createTime){
                    var dt = new Date();
                    dt.setTime($scope.taskDetailInfo.task.createTime);
                    $scope.taskDetailInfo.task.createTime = Format('yyyy-MM-dd hh:mm:ss',dt);
                }

                if($scope.taskDetailInfo && $scope.taskDetailInfo.historyTasks){
                    $.each( $scope.taskDetailInfo.historyTasks,function(i,historyTask){
                        if(historyTask.createTime){
                            var dt = new Date();
                            dt.setTime(historyTask.createTime);
                            historyTask.createTime = Format('yyyy-MM-dd hh:mm:ss',dt);
                        }
                    })
                }

            }else{
                alert(resp.message);
            }
        })
    }

    $scope.processTask = function(outcome){
        if(!$scope.selectedTask){
            alert("请选择要审批的任务！");
            $scope.openPanel = '';
            return;
        }
        $scope.openPanel2 = 'processTask';
        var param = {};
        param.taskId = $scope.selectedTask.dbid_;
        param.remark = $scope.queryTaskParam.remark;
        param.outcome = outcome;
        erp_workflowTaskExamineAndApproveService.post(param,function(resp){
            $scope.openPanel2 = '';
            $scope.openPanel = '';
            if(!resp.error){
                alert("审批成功！");
                queryWorkflowTaskList();
            }else{
                alert(resp.message);
            }
        })
    }

};
angular.module('ework-ui').controller('report_courseAnalysisController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'erp_organizationService',
    'report_courseAnalysisService',
  report_courseAnalysisController
]);

function report_courseAnalysisController($rootScope,
                                    $scope,
                                    $uibMsgbox,
                                    erp_organizationService,
                                    report_courseAnalysisService) {
    $scope.searchParam = {
        startDate: '',
        endDate: '',
        branchId: '',
        courseInfo: '',
        dateType: '1',
        teacherId: '',
        buId: '',
        default_range: 'curMonth',
        btnTag: 'hidden'
    };

  $scope.paginationConf = {
    currentPage: 1, //当前页
    totalItems: 0,
    onChange: function() {
      $scope.queryReport();
    }
  };

    $scope.dataList = [];

    $scope.beforeQuery = function() {
          if (!$scope.searchParam.branchId) {
            $uibMsgbox.error("请选择校区");
            return false;
          }
        if (!$scope.searchParam.dateType) {
            $uibMsgbox.error("请选择日期类型");
            return false;
        }
        if (!$scope.searchParam.startDate) {
            $uibMsgbox.error("请选择开始日期");
            return false;
        }
        if (!$scope.searchParam.endDate) {
            $uibMsgbox.error("请选择截止日期");
            return false;
        }
        if (!checkStartEndTime($scope.searchParam.startDate, $scope.searchParam.endDate)) {
            $uibMsgbox.alert('截止日期必须大于或等于开始日期');
            return false;
        }

        if (!checkStartEndDateIntervalDays($scope.searchParam.startDate, $scope.searchParam.endDate, 30)) {
          $uibMsgbox.alert('起止日期间隔不能超过30天');
          return false;
        }
        return true;
    };

    $scope.queryReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }

        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');

        $scope.searchParam.pageSize = $scope.paginationConf.itemsPerPage;
        $scope.searchParam.currentPage = $scope.paginationConf.currentPage;

        report_courseAnalysisService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
                $scope.paginationConf.totalItems = resp.total || 0;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.exportReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_courseAnalysisService.exportExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    }
    activate ();

    function activate() {
      if ($rootScope.selectedOrg && $rootScope.selectedOrg.buId && $rootScope.selectedOrg.id) {
        $scope.searchParam.buId = $rootScope.selectedOrg.buId;
        $scope.searchParam.branchId = $rootScope.selectedOrg.id;
      }
      $scope.$watch('selectedOrg', function (newValue, oldValue) {
        if (newValue){
          $scope.searchParam.buId = $rootScope.selectedOrg.buId;
          $scope.searchParam.branchId = $rootScope.selectedOrg.id;
        }
      });
    }
}
angular.module('ework-ui').controller('report_teacherWorkloadAttendController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_teacherWorkloadService',
    report_teacherWorkloadAttendController
]);

function report_teacherWorkloadAttendController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  report_teacherWorkloadService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_start_date: '',
        p_end_date: '',
        p_branch_id: '',
        p_isCourseTime: 'false',
        p_course_name: '',
        default_range: 'lastMonth'
    };

    $scope.dataList = undefined;

    $scope.queryReport = function () {
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_teacherWorkloadService.queryAttendanceStudents($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_teacherWorkloadService.outputAttendanceStudents($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.GetQueryString = function(name)
    {
        var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if(r!=null)return  decodeURI(r[2]); return null;
    };

    $scope.searchParam.p_course_id = $scope.GetQueryString("courseId");
    $scope.searchParam.p_course_times = $scope.GetQueryString("courseTime");
    $scope.searchParam.p_isCourseTime = $scope.GetQueryString("isCourseTime");
    $scope.searchParam.p_start_date = $scope.GetQueryString("startDate");
    $scope.searchParam.p_end_date = $scope.GetQueryString("endDate");

    $scope.queryReport();
}
angular.module('ework-ui').controller('report_teacherWorkloadOrderController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_teacherWorkloadService',
    report_teacherWorkloadOrderController
]);

function report_teacherWorkloadOrderController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  report_teacherWorkloadService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_start_date: '',
        p_end_date: '',
        p_branch_id: '',
        p_isCourseTime: 'false',
        p_course_name: '',
        default_range: 'lastMonth'
    };

    $scope.dataList = undefined;

    $scope.queryReport = function () {

        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_teacherWorkloadService.queryOrderStudents($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_teacherWorkloadService.outputOrderStudents($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.GetQueryString = function(name)
    {
        var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if(r!=null)return  decodeURI(r[2]); return null;
    };

    $scope.searchParam.p_course_id = $scope.GetQueryString("courseId");
    $scope.searchParam.p_course_times = $scope.GetQueryString("courseTime");

    $scope.queryReport();
}
angular.module('ework-ui').controller('report_teacherWorkloadController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_teacherWorkloadService',
    report_teacherWorkloadController
]);

function report_teacherWorkloadController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  report_teacherWorkloadService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_start_date: '',
        p_end_date: '',
        p_branch_id: '',
        p_isCourseTime: 'false',
        p_course_name: '',
        default_range: 'lastMonth'
    };

    $scope.dataList = undefined;

    $scope.beforeQuery = function() {
        if (!$scope.searchParam.p_bu_id || $scope.searchParam.p_bu_id == -1) {
            $uibMsgbox.error("请选择团队");
            return false;
        }
        if (!$scope.searchParam.p_start_date) {
            $uibMsgbox.error("请选择开始日期");
            return false;
        }
        if (!$scope.searchParam.p_end_date) {
            $uibMsgbox.error("请选择截止日期");
            return false;
        }
        if (!$scope.searchParam.p_teacher_type) {
            $uibMsgbox.error("请选择老师类型:主讲/辅师");
            return false;
        }
        if (!checkStartEndTime($scope.searchParam.p_start_date, $scope.searchParam.p_end_date)) {
            $uibMsgbox.alert('截止日期必须大于或等于开始日期');
            return false;
        }
        return true;
    };

    $scope.queryReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_teacherWorkloadService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_teacherWorkloadService.output($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

}
angular.module('ework-ui').controller('report_accountController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'report_accountService',
    report_accountController
]);

function report_accountController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  report_accountService) {

    $scope.searchParam = {
        selectedBuId: ''
    };

    $scope.buList = [];

    $scope.branchList = [];

    $scope.dataList = undefined;

    $scope.queryReport = function () {
        if (!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_accountService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if (!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_accountService.output($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                // window.open('../report/common/downloadTempFile?fileName=' + resp.data);
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.buChange = function() {
        $scope.initBranchSelector();
    }

    $scope.initBranchSelector = function() {
        var param = {};
        if ($scope.searchParam.p_bu_id) {
            param.bu_id = $scope.searchParam.p_bu_id;
        }
        erp_organizationService.branchList(param, function(resp) {
            if (!resp.error) {
                $scope.branchList = resp.data;
            }
        });
    }

    $scope.initialize = function () {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
            }
        });

        $scope.initBranchSelector();
    };

    $scope.initialize();
}
angular.module('ework-ui').controller('report_accountFlowController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'erp_organizationService',
    'report_accountFlowService',
    report_accountFlowController
]);

function report_accountFlowController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  erp_organizationService,
                                  report_accountFlowService) {

    $scope.searchParam = {
        p_branch_id :null
    };
    
    $scope.branchList = [];

    $scope.checkBeforeQuery = function() {
    	//if (!$scope.searchParam.p_branch_id) {
    	//	$uibMsgbox.error("请选择校区");
    	//	return false;
    	//}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
            report_accountFlowService.queryList($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.accountFlowList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
	    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
	    	report_accountFlowService.exportExcel($scope.searchParam, function (resp) {
	            _uibModalInstance.close();
	            if (!resp.error) {
	                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
	            } else {
	                $uibMsgbox.error(resp.message);
	            }
	        });
    	}
    };
    
    $scope.initPage = function() {
    	erp_organizationService.branchList({}, function(resp) {
    		if (!resp.error) {
    			$scope.branchList = resp.data;
                $scope.branchList.unshift({id:null,org_name:'全部'});
    		}
    	});
    }
    
    $scope.initPage();
}
angular.module('ework-ui').controller('report_accountCashierController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_printService',
    'report_accountCashierService',
    report_accountCashierController
]);

function report_accountCashierController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_printService,
                                  report_accountCashierService) {

    $scope.searchParam = {};
    
    $scope.buList = [];
    
    $scope.branchList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
		if(isEmpty($scope.searchParam.p_start_date)){
			alert("请填写开始日期");
			return false;
		}
		if(isEmpty($scope.searchParam.p_end_date)){
			alert("请填写结束日期");
			return false;
		}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_accountCashierService.query($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.accountCashierList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    	report_accountCashierService.exportExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };

    $scope.print = function (data) {
        switch (data.opt_type_name) {
            case "充值":
                erp_printService.printAccountDynamic({"dynamicId": data.opt_id, "printType": "03"});
                break;
            case "报班":
                erp_printService.printAccountDynamic({"encoding": data.opt_encoding, "printType": "01"});
                break;
            case "退费":
                var refund = {
                    branch_name:data.branch_name,
                    create_time:data.input_time,
                    student_name:data.student_name,
                    student_encoding:data.student_encoding,
                    encoding:data.opt_encoding,
                    fee_amount:data.pay_amount
                }
                CreatePrintPageForRefund (refund);
                break;
            case "取款":
                erp_printService.printAccountDynamic({"dynamicId": data.opt_id, "printType": "04"});
                break;
            default:
                $uibMsgbox.alert("该类型的账户单据不支持打印");
        }
    };
}
angular.module('ework-ui').controller('report_rechargeCashController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'report_rechargeCashService',
    report_rechargeCashController
]);

function report_rechargeCashController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  report_rechargeCashService) {
    
    $scope.searchParam = {};
    
    $scope.buList = [];
    
    $scope.branchList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
		if(isEmpty($scope.searchParam.p_start_date)){
			alert("请填写开始日期");
			return false;
		}
		if(isEmpty($scope.searchParam.p_end_date)){
			alert("请填写结束日期");
			return false;
		}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_rechargeCashService.query($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.rechargeCashList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    	report_rechargeCashService.exportExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };
    
    $scope.buChange = function() {
    	$scope.initBranchSelector();
    }
    
    $scope.initBranchSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_organizationService.branchList(param, function(resp) {
    		if (!resp.error) {
    			$scope.branchList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
            }
        });
    	
    	$scope.initBranchSelector();
    }
    
    $scope.initPage();
}
angular.module('ework-ui').controller('report_attendanceMonthController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_attendanceMonthService',
    report_attendanceMonthController
]);

function report_attendanceMonthController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  report_attendanceMonthService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_branch_id: '',
        p_yearMonth: new Date().format("yyyy年MM月")
    };

    $scope.dataList = undefined;

    $scope.queryReport = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_attendanceMonthService.query($scope.getQueryParam(), function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_attendanceMonthService.output($scope.getQueryParam(), function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.getQueryParam = function () {
        var queryParam = angular.copy($scope.searchParam);
        queryParam.p_yearMonth = $('#p_yearMonth').val();
        if(queryParam.p_yearMonth) {
            queryParam.p_yearMonth = queryParam.p_yearMonth.replace('年', '-').replace('月', '');
        }
        return queryParam;
    };

}
angular.module('ework-ui').controller('report_attendanceReportController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_attendanceReportService',
    report_attendanceReportController
]);

function report_attendanceReportController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  report_attendanceReportService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_start_date: '',
        p_end_date: '',
        p_branch_id: '',
        p_isCourseTime: 'false',
        p_business_type: '1',
        default_range: 'lastWeek'
    };

    $scope.dataList = undefined;

    $scope.beforeQuery = function() {
        if (!$scope.searchParam.p_bu_id || $scope.searchParam.p_bu_id == -1) {
            $uibMsgbox.error("请选择团队");
            return false;
        }
        if (!$scope.searchParam.p_start_date) {
            $uibMsgbox.error("请选择开始日期");
            return false;
        }
        if (!$scope.searchParam.p_end_date) {
            $uibMsgbox.error("请选择截止日期");
            return false;
        }
        if (!checkStartEndTime($scope.searchParam.p_start_date, $scope.searchParam.p_end_date)) {
            $uibMsgbox.alert('截止日期必须大于或等于开始日期');
            return false;
        }
        return true;
    };

    $scope.queryReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_attendanceReportService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_attendanceReportService.output($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

}
angular.module('ework-ui').controller('report_autoAttendanceReportController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_autoAttendanceReportService',
    report_autoAttendanceReportController
]);

function report_autoAttendanceReportController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                               report_autoAttendanceReportService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_start_date: '',
        p_end_date: '',
        p_branch_id: '',
        p_isCourseTime: 'false',
        p_business_type: '1',
        default_range: 'lastWeek'
    };

    $scope.dataList = undefined;

    $scope.beforeQuery = function() {
        if (!$scope.searchParam.p_bu_id || $scope.searchParam.p_bu_id == -1) {
            $uibMsgbox.error("请选择团队");
            return false;
        }
        if (!$scope.searchParam.p_start_date) {
            $uibMsgbox.error("请选择开始日期");
            return false;
        }
        if (!$scope.searchParam.p_end_date) {
            $uibMsgbox.error("请选择截止日期");
            return false;
        }
        if (!checkStartEndTime($scope.searchParam.p_start_date, $scope.searchParam.p_end_date)) {
            $uibMsgbox.alert('截止日期必须大于或等于开始日期');
            return false;
        }
        return true;
    };

    $scope.queryReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_autoAttendanceReportService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_autoAttendanceReportService.output($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

}
angular.module('ework-ui').controller('report_busAttendMonthController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_busAttendMonthService',
    report_busAttendMonthController
]);

function report_busAttendMonthController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  report_busAttendMonthService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_yearMonth: new Date().format("yyyy年MM月")
    };

    $scope.dataList = [];

    $scope.queryReport = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_busAttendMonthService.query($scope.getQueryParam(), function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_busAttendMonthService.output($scope.getQueryParam(), function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.getQueryParam = function () {
        var queryParam = angular.copy($scope.searchParam);
        queryParam.p_yearMonth = $('#p_yearMonth').val();
        if(queryParam.p_yearMonth) {
            queryParam.p_yearMonth = queryParam.p_yearMonth.replace('年', '-').replace('月', '');
        }
        return queryParam;
    };

}
angular.module('ework-ui').controller('report_businessStatisticsController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_bizStatisticsService',
    report_businessStatisticsController
]);

function report_businessStatisticsController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_bizStatisticsService) {
    
    $scope.searchParam = {
	};
    
    $scope.buList = [];
    
    $scope.timeSeasonList = [];
    
    $scope.gradeList = [];
    
    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
    	if (!$scope.searchParam.p_season_id) {
    		$uibMsgbox.error("请选择课程季");
    		return false;
    	}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');

            report_bizStatisticsService.query($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.busStatisticss = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
        	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');

            report_bizStatisticsService.exportExcel($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };
    
    $scope.buChange = function() {
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
    $scope.initTimeSeasonSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_timeSeasonService.list(param, function(resp) {
    		if (!resp.error) {
    			$scope.timeSeasonList = resp.data;
    		}
    	});
    }
    
    $scope.initGradeSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_gradeService.querySelectDatas(param, function(resp) {
    		if (!resp.error) {
    			$scope.gradeList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
				$scope.searchParam.p_bu_id = $scope.buList[0].buId;
            }
        });
    	
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    };
    
    $scope.initPage();
}
angular.module('ework-ui').controller('report_fullclassRateController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_fullclassRateService',
    report_fullclassRateController
]);

function report_fullclassRateController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_fullclassRateService) {
    
    $scope.searchParam = {
	};
    
    $scope.buList = [];
    
    $scope.timeSeasonList = [];
    
    $scope.gradeList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
    	if (!$scope.searchParam.p_season_id) {
    		$uibMsgbox.error("请选择课程季");
    		return false;
    	}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		var selected_season = $("#season_name").find("option:selected").text()
    		var season_name = null;
    		
    		if(selected_season.indexOf("春季班") > 0){
    			season_name = "春季班";
    		}else if(selected_season.indexOf("暑假班") > 0){
    			season_name = "暑假班";
    		}else if(selected_season.indexOf("秋季班") > 0){
    			season_name = "秋季班";
    		}else if(selected_season.indexOf("寒假班") > 0){
    			season_name = "寒假班";
    		}
    		$scope.searchParam.p_season_name = season_name;
            report_fullclassRateService.query($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.fullclassRateList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
        	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    		var selected_season = $("#season_name").find("option:selected").text()
    		var season_name = null;
    		
    		if(selected_season.indexOf("春季班") > 0){
    			season_name = "春季班";
    		}else if(selected_season.indexOf("暑假班") > 0){
    			season_name = "暑假班";
    		}else if(selected_season.indexOf("秋季班") > 0){
    			season_name = "秋季班";
    		}else if(selected_season.indexOf("寒假班") > 0){
    			season_name = "寒假班";
    		}
    		$scope.searchParam.p_season_name = season_name;
            report_fullclassRateService.exportExcel($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };
    
    $scope.buChange = function() {
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
    $scope.initTimeSeasonSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_timeSeasonService.list(param, function(resp) {
    		if (!resp.error) {
    			$scope.timeSeasonList = resp.data;
    		}
    	});
    }
    
    $scope.initGradeSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_gradeService.querySelectDatas(param, function(resp) {
    		if (!resp.error) {
    			$scope.gradeList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
				$scope.searchParam.p_bu_id = $scope.buList[0].buId;
            }
        });
    	
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    };
    
    $scope.initPage();
}
angular.module('ework-ui').controller('report_fullclassRateLastController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_fullclassRateService',
    report_fullclassRateLastController
]);

function report_fullclassRateLastController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_fullclassRateService) {
    
    $scope.searchParam = {};
    
    $scope.buList = [];
    
    $scope.timeSeasonList = [];
    
    $scope.gradeList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	// if (!$scope.searchParam.p_bu_id) {
    	// 	$uibMsgbox.error("请选择团队");
    	// 	return false;
    	// }
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
            report_fullclassRateService.queryLast($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.fullclassRateLastList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_fullclassRateService.exportLastExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };
    
    $scope.buChange = function() {
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
    $scope.initTimeSeasonSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_timeSeasonService.list(param, function(resp) {
    		if (!resp.error) {
    			$scope.timeSeasonList = resp.data;
    		}
    	});
    }
    
    $scope.initGradeSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_gradeService.querySelectDatas(param, function(resp) {
    		if (!resp.error) {
    			$scope.gradeList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
            }
        });
    	
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    };
    
	$scope.GetQueryString = function(name)
	{
	     var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
	     var r = window.location.search.substr(1).match(reg);
	     if(r!=null)return  decodeURI(r[2]); return null;
	};
    
    $scope.initPage();

    $scope.searchParam.p_bu_id = $scope.GetQueryString("buId");
	$scope.searchParam.p_grade_id = $scope.GetQueryString("gradeId");
	$scope.searchParam.p_season_id = $scope.GetQueryString("seasonId");
	$scope.searchParam.p_teacher_name = $scope.GetQueryString("teacherName");
	$scope.queryReport();
}
angular.module('ework-ui').controller('report_gxhStudentStatusController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_gxhStudentStatusService',
    report_gxhStudentStatusController
]);

function report_gxhStudentStatusController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                           report_gxhStudentStatusService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_year_month: '',
        p_branch_id: ''
    };

    $scope.dataList = undefined;

    $scope.beforeQuery = function() {
        if (!$scope.searchParam.p_bu_id || $scope.searchParam.p_bu_id == -1) {
            $uibMsgbox.error("请选择团队");
            return false;
        }
        return true;
    };

    $scope.queryReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }

        $scope.searchParam.p_year_month = $('#p_year_month').val();
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_gxhStudentStatusService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_gxhStudentStatusService.output($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

}
angular.module('ework-ui').controller('report_gxhStudentStatusBranchController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_gxhStudentStatusService',
    report_gxhStudentStatusBranchController
]);

function report_gxhStudentStatusBranchController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                           report_gxhStudentStatusService) {
    $scope.searchParam = {
        p_bu_id: '',
        p_year_month: '',
        p_branch_id: ''
    };

    $scope.dataList = undefined;

    $scope.beforeQuery = function() {
        if (!$scope.searchParam.p_bu_id || $scope.searchParam.p_bu_id == -1) {
            $uibMsgbox.error("请选择团队");
            return false;
        }
        return true;
    };

    $scope.queryReport = function () {
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_gxhStudentStatusService.queryBranch($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_gxhStudentStatusService.outputBranchExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.GetQueryString = function(name)
    {
        var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if(r!=null)return  decodeURI(r[2]); return null;
    };


    $scope.init = function () {
        $scope.searchParam.p_bu_id = $scope.GetQueryString("buId");
        $scope.searchParam.p_branch_id = $scope.GetQueryString("branchId");
        $scope.searchParam.p_year_month = $scope.GetQueryString("yearMonth");
        $scope.queryReport();
    }
    $scope.init();
}
angular.module('ework-ui').controller('report_gxhStudentStatusDetailController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_gxhStudentStatusService',
    report_gxhStudentStatusDetailController
]);

function report_gxhStudentStatusDetailController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                           report_gxhStudentStatusService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_year_month: '',
        p_branch_id: ''
    };

    $scope.dataList = undefined;

    $scope.beforeQuery = function() {
        if (!$scope.searchParam.p_bu_id || $scope.searchParam.p_bu_id == -1) {
            $uibMsgbox.error("请选择团队");
            return false;
        }
        return true;
    };

    $scope.queryReport = function () {
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_gxhStudentStatusService.queryDetail($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if ($scope.beforeQuery() == false) {
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_gxhStudentStatusService.outputDetailExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.GetQueryString = function(name)
    {
        var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if(r!=null)return  decodeURI(r[2]); return null;
    };

    $scope.init = function () {
        $scope.searchParam.p_bu_id = $scope.GetQueryString("buId");
        $scope.searchParam.p_branch_id = $scope.GetQueryString("branchId");
        $scope.searchParam.p_year_month = $scope.GetQueryString("yearMonth");
        $scope.searchParam.p_counselor_name = $scope.GetQueryString("counselorName");
        $scope.queryReport();
    }

    $scope.init();

}
angular.module('ework-ui').controller('onLineOrderReportController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'erp_organizationService',
    'report_onLineOrderService',
    'erp_timeSeasonService',
    onLineOrderReportController
]);

function onLineOrderReportController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  erp_organizationService,
                                  report_onLineOrderService,
                                  erp_timeSeasonService) {

    $scope.searchParam = {
        p_season_id: null,
        p_start_date: moment.now(),
        p_end_date: moment.now()
    };

    $scope.performance ={isWfd:false};
    
    $scope.buList = [];
    
    $scope.branchList = [];

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_onLineOrderService.queryList($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.perfDetails = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    		report_onLineOrderService.exportExcel($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };
   /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
                $scope.timeSeasonList.unshift({
                    id: null,
                    course_season_name: '全部'
                })
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }
    $scope.initPage = function() {
    	erp_organizationService.query({org_type : 3}, function(resp) {
    		if (!resp.error) {
    			$scope.buList = resp.data;
    		}
    	});
    	queryTimeSeason();
    }

    $scope.initPage();
}
angular.module('ework-ui').controller('report_orderChangeReportController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_dictService',
    'report_orderChangeReportService',
    report_orderChangeReportController
]);

function report_orderChangeReportController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_dictService,
                                  report_orderChangeReportService) {

    $scope.searchParam = {
        p_business_type:-1
    };
    
    $scope.buList = [];
    
    $scope.branchList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
		if(isEmpty($scope.searchParam.p_start_date)){
			alert("请填写开始日期");
			return false;
		}
		if(isEmpty($scope.searchParam.p_end_date)){
			alert("请填写结束日期");
			return false;
		}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_orderChangeReportService.query($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.orderChangeList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    	report_orderChangeReportService.exportExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };
    
    $scope.buChange = function() {
    	$scope.initBranchSelector();
    }
    
    $scope.initBranchSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_organizationService.branchList(param, function(resp) {
    		if (!resp.error) {
    			$scope.branchList = resp.data;
    		}
    	});
    }
    $scope.businessList = [];
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
            }
        });
        erp_dictService.query({code:"businessType"},function(resp) {
            if (!resp.error) {
                $scope.businessList = resp.data;
                $scope.businessList.unshift({name:'全部',code:-1});
                $.each($scope.businessList,function(i,n) {
                    n.code = parseInt(n.code);
                });
            }
        });
    	$scope.initBranchSelector();
    };
    
    $scope.initPage();
}
angular.module('ework-ui').controller('report_orderPerformaceController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'erp_organizationService',
    'report_orderPerformaceService',
    'erp_timeSeasonService',
    report_orderPerformaceController
]);

function report_orderPerformaceController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  erp_organizationService,
                                  report_orderPerformaceService,
                                  erp_timeSeasonService) {

    $scope.searchParam = {
        p_start_date: moment.now(),
        p_end_date: moment.now()
    };

    $scope.performance ={isWfd:false};
    
    $scope.buList = [];
    
    $scope.branchList = [];

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_orderPerformaceService.queryList($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.perfDetails = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    		report_orderPerformaceService.exportExcel($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };
   /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }
    $scope.initPage = function() {
    	erp_organizationService.query({org_type : 3}, function(resp) {
    		if (!resp.error) {
    			$scope.buList = resp.data;
    		}
    	});
    	queryTimeSeason();
    }

    $scope.checkedWfd = function() {
        if (performance.isWfd) {
            performance.isWfd  = false;
            $scope.searchParam.p_isWfd=0;
        } else {
            performance.isWfd  = true;
            $scope.searchParam.p_isWfd=1;
        }
    }

    $scope.initPage();
    queryTimeSeason();
}
angular.module('ework-ui').controller('report_perfDetailsController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'erp_organizationService',
    'report_perfDetailsService',
    'erp_timeSeasonService',
    report_perfDetailsController
]);

function report_perfDetailsController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  erp_organizationService,
                                  report_perfDetailsService,
                                  erp_timeSeasonService) {

    $scope.searchParam = {
        p_start_date: moment.now(),
        p_end_date: moment.now()
    };

    $scope.performance ={isWfd:false};
    
    $scope.buList = [];
    
    $scope.branchList = [];

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_perfDetailsService.queryList($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.perfDetails = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    		report_perfDetailsService.exportExcel($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };
   /**
     * 查询课程季
     */
    function queryTimeSeason(){
        erp_timeSeasonService.list({
        },function(resp){
            if(!resp.error){
                $scope.timeSeasonList = resp.data;
            }else{
            	$uibMsgbox.error(resp.message);
            }
        })
    }
    $scope.initPage = function() {
    	erp_organizationService.query({org_type : 3}, function(resp) {
    		if (!resp.error) {
                debugger;
    			$scope.buList = resp.data;
    		}
    	});
    	queryTimeSeason();
    }

    $scope.checkedWfd = function() {
        if (performance.isWfd) {
            performance.isWfd  = false;
            $scope.searchParam.p_isWfd=0;
        } else {
            performance.isWfd  = true;
            $scope.searchParam.p_isWfd=1;
        }
    }

    $scope.initPage();
    queryTimeSeason();
}
angular.module('ework-ui').controller('report_performanceSumController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'erp_organizationService',
    'report_performanceSumService',
    report_performanceSumController
]);

function report_performanceSumController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  erp_organizationService,
                                  report_performanceSumService) {

    $scope.buList = [];
    
    $scope.branchList = [];
	$scope.searchParam = {};
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
		if(isEmpty($scope.searchParam.p_start_date)){
			alert("请填写开始日期");
			return false;
		}
		if(isEmpty($scope.searchParam.p_end_date)){
			alert("请填写结束日期");
			return false;
		}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_performanceSumService.query($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.performanceSumList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    	report_performanceSumService.exportExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };
    
    $scope.buChange = function() {
    	$scope.initBranchSelector();
    }
    
    $scope.initBranchSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_organizationService.branchList(param, function(resp) {
    		if (!resp.error) {
    			$scope.branchList = resp.data;
    			$scope.branchList.unshift({id:null,org_name:'全部'});
    		}
    	});
    }
    
    $scope.initPage = function() {
    	erp_organizationService.query({org_type : 3}, function(resp) {
    		if (!resp.error) {
				$scope.buList = resp.data;
			}
    	});
    	$scope.initBranchSelector();
    }
    
    $scope.initPage();
}
angular.module('ework-ui').controller('report_renewalRateController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_renewalRateService',
    report_renewalRateController
]);

function report_renewalRateController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_renewalRateService) {
    
    $scope.searchParam = {
	};
    
    $scope.buList = [];
    
    $scope.timeSeasonList = [];
    
    $scope.gradeList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}
    	if (!$scope.searchParam.p_season_id) {
    		$uibMsgbox.error("请选择课程季");
    		return false;
    	}
        if (!$scope.searchParam.p_teacher_type) {
            $uibMsgbox.error("请选择老师类型:主讲/辅师");
            return false;
        }
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		var selected_season = $("#season_name").find("option:selected").text()
    		var season_name = null;
    		
    		if(selected_season.indexOf("春季班") > 0){
    			season_name = "春季班";
    		}else if(selected_season.indexOf("暑假班") > 0){
    			season_name = "暑假班";
    		}else if(selected_season.indexOf("秋季班") > 0){
    			season_name = "秋季班";
    		}else if(selected_season.indexOf("寒假班") > 0){
    			season_name = "寒假班";
    		}
    		$scope.searchParam.p_season_name = season_name;
    		report_renewalRateService.queryForSum($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.renewalRateList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
        	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    		var selected_season = $("#season_name").find("option:selected").text()
    		var season_name = null;
    		
    		if(selected_season.indexOf("春季班") > 0){
    			season_name = "春季班";
    		}else if(selected_season.indexOf("暑假班") > 0){
    			season_name = "暑假班";
    		}else if(selected_season.indexOf("秋季班") > 0){
    			season_name = "秋季班";
    		}else if(selected_season.indexOf("寒假班") > 0){
    			season_name = "寒假班";
    		}
    		$scope.searchParam.p_season_name = season_name;
        	report_renewalRateService.exportExcelForSum($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };
    
    $scope.buChange = function() {
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
    $scope.initTimeSeasonSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_timeSeasonService.list(param, function(resp) {
    		if (!resp.error) {
    			$scope.timeSeasonList = resp.data;
    		}
    	});
    }
    
    $scope.initGradeSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_gradeService.querySelectDatas(param, function(resp) {
    		if (!resp.error) {
    			$scope.gradeList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
				$scope.searchParam.p_bu_id = $scope.buList[0].buId;
            }
        });
    	
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    };
    
    $scope.initPage();
}
angular.module('ework-ui').controller('report_renewalRateActualController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_renewalRateService',
    report_renewalRateActualController
]);

function report_renewalRateActualController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_renewalRateService) {
    
    $scope.searchParam = {};
    
    $scope.buList = [];
    
    $scope.timeSeasonList = [];
    
    $scope.gradeList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	//if (!$scope.searchParam.p_bu_id) {
    	//	$uibMsgbox.error("请选择团队");
    	//	return false;
    	//}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_renewalRateService.queryForActual($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.renewalRateList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    	report_renewalRateService.exportExcelForActual($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };
    
    $scope.buChange = function() {
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
    $scope.initTimeSeasonSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_timeSeasonService.list(param, function(resp) {
    		if (!resp.error) {
    			$scope.timeSeasonList = resp.data;
    		}
    	});
    }
    
    $scope.initGradeSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_gradeService.querySelectDatas(param, function(resp) {
    		if (!resp.error) {
    			$scope.gradeList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
            }
        });
    	
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    };
    
	$scope.GetQueryString = function(name)
	{
	     var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
	     var r = window.location.search.substr(1).match(reg);
	     if(r!=null)return  decodeURI(r[2]); return null;
	};
    
    $scope.initPage();
    
    $scope.searchParam.p_bu_id = $scope.GetQueryString("buId");
	$scope.searchParam.p_grade_id = $scope.GetQueryString("gradeId");
	$scope.searchParam.p_season_id = $scope.GetQueryString("seasonId");
    $scope.searchParam.p_teacher_type = $scope.GetQueryString("teacherType");
	$scope.searchParam.p_teacher_name = $scope.GetQueryString("teacherName");			

	$scope.queryReport();
}
angular.module('ework-ui').controller('report_renewalRateEstimateController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_renewalRateService',
    report_renewalRateEstimateController
]);

function report_renewalRateEstimateController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_renewalRateService) {
    
    $scope.searchParam = {};
    
    $scope.buList = [];
    
    $scope.timeSeasonList = [];
    
    $scope.gradeList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	//if (!$scope.searchParam.p_bu_id) {
    	//	$uibMsgbox.error("请选择团队");
    	//	return false;
    	//}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_renewalRateService.queryForEstimate($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.renewalRateList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    	report_renewalRateService.exportExcelForEstimate($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };
    
    $scope.buChange = function() {
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
    $scope.initTimeSeasonSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_timeSeasonService.list(param, function(resp) {
    		if (!resp.error) {
    			$scope.timeSeasonList = resp.data;
    		}
    	});
    }
    
    $scope.initGradeSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_gradeService.querySelectDatas(param, function(resp) {
    		if (!resp.error) {
    			$scope.gradeList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
            }
        });
    	
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    };
    
	$scope.GetQueryString = function(name)
	{
	     var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
	     var r = window.location.search.substr(1).match(reg);
	     if(r!=null)return  decodeURI(r[2]); return null;
	};
    
    $scope.initPage();
    
    $scope.searchParam.p_bu_id = $scope.GetQueryString("buId");
	$scope.searchParam.p_grade_id = $scope.GetQueryString("gradeId");
	$scope.searchParam.p_season_id = $scope.GetQueryString("seasonId");
    $scope.searchParam.p_teacher_type = $scope.GetQueryString("teacherType");
	$scope.searchParam.p_teacher_name = $scope.GetQueryString("teacherName");		

	$scope.queryReport();
}
angular.module('ework-ui').controller('report_renewalRateLastBaseController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_renewalRateService',
    report_renewalRateLastBaseController
]);

function report_renewalRateLastBaseController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_renewalRateService) {
    
    $scope.searchParam = {};
    
    $scope.buList = [];
    
    $scope.timeSeasonList = [];
    
    $scope.gradeList = [];
    
	$scope.searchParam.p_start_date = Format("yyyy-MM-dd",new Date());
	$scope.searchParam.p_end_date = Format("yyyy-MM-dd",new Date());
	$scope.endDate = Format("yyyy-MM-dd",new Date());

    $scope.checkBeforeQuery = function() {
    	//if (!$scope.searchParam.p_bu_id) {
    	//	$uibMsgbox.error("请选择团队");
    	//	return false;
    	//}
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
    		report_renewalRateService.queryForLastBase($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.renewalRateList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
    	report_renewalRateService.exportExcelForLastBase($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    	
    	
    };
    
    $scope.buChange = function() {
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
    $scope.initTimeSeasonSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_timeSeasonService.list(param, function(resp) {
    		if (!resp.error) {
    			$scope.timeSeasonList = resp.data;
    		}
    	});
    }
    
    $scope.initGradeSelector = function() {
    	var param = {};
    	if ($scope.searchParam.p_bu_id) {
    		param.bu_id = $scope.searchParam.p_bu_id;
    	}
    	erp_gradeService.querySelectDatas(param, function(resp) {
    		if (!resp.error) {
    			$scope.gradeList = resp.data;
    		}
    	});
    }
    
    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
            }
        });
    	
    	$scope.initTimeSeasonSelector();
    	$scope.initGradeSelector();
    }
    
	$scope.GetQueryString = function(name)
	{
	     var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
	     var r = window.location.search.substr(1).match(reg);
	     if(r!=null)return  decodeURI(r[2]); return null;
	};
    
    $scope.initPage();
    
    $scope.searchParam.p_bu_id = $scope.GetQueryString("buId");
	$scope.searchParam.p_grade_id = $scope.GetQueryString("gradeId");
	$scope.searchParam.p_season_id = $scope.GetQueryString("seasonId");
    $scope.searchParam.p_teacher_type = $scope.GetQueryString("teacherType");
    $scope.searchParam.p_teacher_name = $scope.GetQueryString("teacherName");

	$scope.queryReport();
}
angular.module('ework-ui').controller('report_surplusAmountFeeController', [
    '$rootScope',
    '$scope',
    '$state',
    '$log',
    '$uibMsgbox',
    'report_surplusAmountFeeService',
    report_surplusAmountFeeController
]);

function report_surplusAmountFeeController($rootScope,
                                  $scope,
                                  $state,
                                  $log,
                                  $uibMsgbox,
                                  report_surplusAmountFeeService) {

    $scope.searchParam = {
        p_bu_id: '',
        p_branch_id: '',
        p_student_info: '',
        p_business_type: '1'
    };

    $scope.dataList = undefined;

    $scope.queryReport = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
        report_surplusAmountFeeService.query($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                $scope.dataList = resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

    $scope.outputReport = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_surplusAmountFeeService.output($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };

}
angular.module('ework-ui').controller('report_teacherGroupAttendanceController', [
    '$rootScope',
    '$scope',
    '$uibMsgbox',
    'PUBORGService',
    'erp_organizationService',
    'erp_timeSeasonService',
    'erp_gradeService',
    'report_teacherGroupAttendanceService',

    report_teacherGroupAttendanceController
]);

function report_teacherGroupAttendanceController($rootScope,
                                  $scope,
                                  $uibMsgbox,
                                  PUBORGService,
                                  erp_organizationService,
                                  erp_timeSeasonService,
                                  erp_gradeService,
                                  report_teacherGroupAttendanceService
                                  ) {

    $scope.searchParam = {
    };

    $scope.buList = [];

    $scope.gradeList = [];

    $scope.timeSeasonList = [];

    $scope.searchParam = {
        p_course_date: moment.now()
    };

    $scope.checkBeforeQuery = function() {
    	if (!$scope.searchParam.p_bu_id) {
    		$uibMsgbox.error("请选择团队");
    		return false;
    	}

        if (!$scope.searchParam.p_course_date) {
            $uibMsgbox.error("请选择查询日期");
            return false;
        }
    	return true;
    }
    
    $scope.queryReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('数据加载中，请稍候...');
            report_teacherGroupAttendanceService.query($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    $scope.dataList = resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.exportReport = function () {
    	if ($scope.checkBeforeQuery()) {
    		var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
            report_teacherGroupAttendanceService.exportExcel($scope.searchParam, function (resp) {
                _uibModalInstance.close();
                if (!resp.error) {
                    window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
                } else {
                    $uibMsgbox.error(resp.message);
                }
            });
    	}
    };

    $scope.buChange = function() {
        $scope.initTimeSeasonSelector();
        $scope.initGradeSelector();
    }

    $scope.initTimeSeasonSelector = function() {
        var param = {};
        if ($scope.searchParam.p_bu_id) {
            param.bu_id = $scope.searchParam.p_bu_id;
        }
        erp_timeSeasonService.list(param, function(resp) {
            if (!resp.error) {
                $scope.timeSeasonList = resp.data;
            }
        });
    }

    $scope.initGradeSelector = function() {
        var param = {};
        if ($scope.searchParam.p_bu_id) {
            param.bu_id = $scope.searchParam.p_bu_id;
        }
        erp_gradeService.querySelectDatas(param, function(resp) {
            if (!resp.error) {
                $scope.gradeList = resp.data;
            }
        });
    }

    $scope.initPage = function() {
        PUBORGService.queryBu({}, function(resp) {
            if (!resp.error) {
                $scope.buList = resp.data;
                $scope.searchParam.p_bu_id = $scope.buList[0].buId;
            }
        });

        $scope.initTimeSeasonSelector();
        $scope.initGradeSelector();
    };

    $scope.initPage();

}
/**
 * @author baiqb@klxuexi.org 2017/03/06
 */
"use strict";
angular.module('ework-ui').controller('report_teacherAttendReportController', [
    '$rootScope',
    '$scope',
    '$log',
    '$state',
    '$uibModal',
    '$uibMsgbox',
    'report_wfdTeacherAttendanceService',
    report_teacherAttendReportController
]);

function report_teacherAttendReportController($rootScope,
                                  $scope,
                                  $log,
                                  $state,
                                  $uibModal,
                                  $uibMsgbox,
                                  report_wfdTeacherAttendanceService) {


    $scope.init = function () {

        $scope.selectorList = [
            {label:'按考勤日期',value:false},
            {label:'按上课日期',value:true}
        ]
        $scope.searchParam = { // 搜索条件
            p_bu_id: null,
            p_branch_id: null,
            p_calcBeginDate: null,
            p_calcEndDate: null,
            p_search_key: null,
            p_isCourseTime: false
        };
        $scope.teacherAttendList = []; // 晚辅导教师考勤列表
    };
    // 导出数据
    $scope.exportExcel = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        var _uibModalInstance = $uibMsgbox.waiting('正在为您导出数据，请稍候...');
        report_wfdTeacherAttendanceService.exportExcel($scope.searchParam, function (resp) {
            _uibModalInstance.close();
            if (!resp.error) {
                //下载
                window.location.href = '../report/common/downloadTempFile?fileName=' + resp.data;
            } else {
                $uibMsgbox.error(resp.message);
            }
        });
    };
    // 查询方法
    $scope.query = function () {
        if(!$scope.searchParam.p_bu_id) {
            $uibMsgbox.error("请先选择团队！");
            return;
        }
        report_wfdTeacherAttendanceService.query({
            p_branch_id: $scope.searchParam.p_branch_id,
            p_bu_id: $scope.searchParam.p_bu_id,
            p_calcBeginDate: $scope.searchParam.p_calcBeginDate,
            p_calcEndDate: $scope.searchParam.p_calcEndDate,
            p_search_key: $scope.searchParam.p_search_key,
            p_isCourseTime: $scope.searchParam.p_isCourseTime
        }, function (resp) {
            if (!resp.error) {
                $scope.teacherAttendList = resp.data;
            } else {
                alert(resp.message);
            }
        });
    };

    $scope.init();
}
(function() {
  "use strict";

  angular.module('ework-ui')
    .controller('frClassWorkModalCtrl', frClassWorkModalCtrl)
    .service('frClassWorkModal', frClassWorkModalService)

  frClassWorkModalCtrl.$inject = ['$scope', '$log','$uibModalInstance', '$uibMsgbox', 'uibDateParser', 'frClassWorkModal', 'items', '$rootScope', '$stateParams']
  function frClassWorkModalCtrl($scope, $log, $uibModalInstance, $uibMsgbox, uibDateParser, frClassWorkModal, items, $rootScope, $stateParams) {
    var vm = this;
    window.ss = $scope;
    angular.extend(vm, {$stateParams})
    vm.queryParams = {
      courseName: '',
      gradeId: $rootScope.selectedGrade,
      subjectId: $rootScope.selectedSubject,
      limit: 10,
      start: 0,
      productCode: $stateParams.productCode
    }
    window.classWorkModal = $scope.classWorkModal;
    console.log('classWorkModal');
    vm.courseList = [];
    vm.paginationConf = {
      currentPage: 1,
      totalItems: 0,
      itemsPerPage: 10,
      onChange: function() {
        vm.queryParams.start = vm.paginationConf.currentPage - 1;
        vm.queryParams.limit = vm.paginationConf.itemsPerPage;
        getCourseClassList(vm.queryParams);
      }
    }

    //- methods
    vm.handleModalCancel = handleModalCancel;
    vm.handleModalConfirm = handleModalConfirm;
    vm.search = search;
    vm.toggleCourseClass = toggleCourseClass;
    vm.select = select;
    vm.delete = deleteCourseClass;
    vm.positionOfChild = positionOfChild;
    //- todo: 根据已选与列表进行匹配，自动在列表中识别出已选的item
    vm.handleClassList = handleClassList;
    vm.clearAll = clearAll;
    vm.isSelected = isSelected;

    activate();

    function activate() {
      vm.showSelectCourseClass = angular.copy(items) || [];
      vm.refSelectCourseClass= items
    } 

    //- 请求课程课次列表
    function getCourseClassList(params) {
      return frClassWorkModal.get(params)
        .then(function(data) {
          if (data.error) {
            $uibMsgbox.error(data.message || '请求数据失败！');
            vm.paginationConf.totalItems = 0;
            return 
          }
          vm.courseList = data.data;
          if (vm.courseList.length === 0) {
            vm.paginationConf.totalItems = 0;
            return ;
          }
          vm.paginationConf.totalItems = data.total || 0;
          return vm.courseList;
        }, function(error) {
          $uibMsgbox.error(error.message || '请求数据失败！');
          vm.paginationConf.totalItems = 0;
        })
    }

    function handleModalCancel() {
      $uibModalInstance.dismiss('cancel');
    }

    function handleModalConfirm() {
      if(checkDateValidation(vm.showSelectCourseClass)) {
         $uibMsgbox.error('课次时间不一致，请重新检查!');
         return ;
      }
      
      $uibModalInstance.close(vm.showSelectCourseClass);
    }

    function checkDateValidation(items) {
      var result = []
      var firstItem
      if(items.length) {
        firstItem = items[0]
      }
      result = items.filter(function(item) {
        return item.startDate !== firstItem.startDate ||item.startTime !== firstItem.startTime || item.endTime !== firstItem.endTime
      })
      return result.length ? true : false;
      
    }

    function search(key) {
      if (!key) {
        $uibMsgbox.error('请填写课程标题');
        return ;
      }
      angular.extend(vm.queryParams, {courseName: key, limit: 10, start: 0})
      getCourseClassList(vm.queryParams)
        .then(function() {
          $log.info('search success: ' + key);
        })
    }

    function toggleCourseClass(course) {
      if (course && course.open) {
        course.open = !course.open;
      } else {
        course['open'] = true;
      }
    }

    function isSelected(courseClass) {
      var origialIndex = -1;
      return vm.showSelectCourseClass.some(function(item) {
        return isMyself(item, courseClass)
      })
    }

    function select(item, parentId, parentTitle) {
      var item1 = angular.copy(item)
      var origialIndex
      origialIndex = vm.positionOfChild(vm.showSelectCourseClass, parentId);
      if (origialIndex === -1) {
        if (parentTitle) {
          item1.classTitle = parentTitle + ' - ' + item1.classTitle
        }
        vm.showSelectCourseClass.push(item1);
      } else {
        if (isMyself(vm.showSelectCourseClass[origialIndex], item1)) {
          vm.showSelectCourseClass.splice(origialIndex, 1);
        } else if (isBrother(vm.showSelectCourseClass[origialIndex], item1)) {
          if (parentTitle) {
            item1.classTitle = parentTitle + ' - ' + item1.classTitle
          }
          vm.showSelectCourseClass[origialIndex] = item1;
        }
      }

    }

    function isBrother(item, another) {
      return item.parentId === another.parentId
    }

    function isMyself(item, another) {
      return (item.parentId === another.parentId) && (item.seq === another.seq)
    }

    function deleteCourseClass(item) {
      var index = vm.showSelectCourseClass.indexOf(item);
      if (index > -1) {
        item.selected = false;
        vm.showSelectCourseClass.splice(index, 1);
      }
    }

    function positionOfChild(items, parentId) {
      var origialIndex = -1;
      angular.forEach(items, function(item, index) {
        if (item.parentId === parentId) {
          origialIndex = index;
        }
      })
      return origialIndex;
    }

    function handleClassList(originalItems, items) {
      var courseClassList;
      angular.forEach(items, function(item, index, arr) {
        item['selected'] = true;
      })
    }

    function clearAll() {
      $uibMsgbox.confirm('确定全部清空?', function (result) {
        if(result != 'yes') {
          return;
        }
        vm.showSelectCourseClass = [];
      });
    }

  }

  frClassWorkModalService.$inject = ['$http', '$log'];
  function frClassWorkModalService($http, $log) {
    return {
      get: get
    }

    function get(params) {
      return $http.post('/erp/myCourse/searchCourseClassList', params || {})
        .then(getCourseClassListComplete)
        .catch(getCourseClassListFailed);

      function getCourseClassListComplete(response) {
        return response.data;
      }

      function getCourseClassListFailed(error) {
        $log.error('XHR Failed for CourseClassList.' + error.data);
      }
    }
  }
})();
(function() {
  "use strict";

  angular.module('ework-ui')
    .controller('frMgtWorkModalCtrl', frMgtWorkModalCtrl)
    .service('frMgtWorkModal', frMgtWorkModalService)

  frMgtWorkModalCtrl.$inject = ['$scope', '$uibModalInstance', '$uibMsgbox', 'items', 'frMgtWorkModal', '$log', '$rootScope', '$stateParams']
  function frMgtWorkModalCtrl($scope, $uibModalInstance, $uibMsgbox, items, frMgtWorkModal, $log, $rootScope, $stateParams) {
    var vm = this;
    window.ss = $scope;
    vm.items  = items;
    window.mgtWorkModal = $scope.mgtWorkModal;
    vm.queryParams = {
      subjectId: $rootScope.selectedSubject,
      gradeId: $rootScope.selectedGrade,
      productCode: $stateParams.productCode
    }
    //- methods
    vm.handleModalCancel = handleModalCancel;
    vm.handleModalConfirm = handleModalConfirm;
    vm.search = search;
    vm.select = select;
    vm.delete = deleteWork;
    vm.clearAll = clearAll;

    activate();

    function activate() {
      getPaperList(vm.queryParams)
        .then(function() {
          $log.info('PaperList view');
          if (vm.items.length) {
            angular.forEach(vm.items, function(item) {
              var index = _.findIndex(vm.workRecords, function(record) {
                return record.id == item.id
              })
              if (index > -1) {
                vm.workRecords[index]['selected'] = true;
              }
            })
          }
        })
    } 


    function getPaperList(params) {
      return frMgtWorkModal.get(params)
        .then(function(data) {
          vm.workRecords = data.data.paperList || [];
          return vm.courseList;
        }, function(error) {
          console.log(error);
        })
    }

    function handleModalCancel() {
      $uibModalInstance.dismiss('cancel');
    }

    function handleModalConfirm() {
      $uibModalInstance.close(vm.items);
    }

    function search(key) {
      if (!key) {
        $uibMsgbox.error('请填写搜索条件');
        return ;
      }
      vm.queryParams['paperName'] = key;
      getPaperList(vm.queryParams)
        .then(function() {
          $log.info('PaperList search result');
        })

    }

    function select(item) {
      if (_.findIndex(vm.items, function(o) { return o.id == item.id; }) < 0) {
        item['selected'] = true;
        vm.items.push(item);
      } else {
        vm.delete(item);
      }
    }

    function deleteWork(item) {
      var index = _.findIndex(vm.items, function(o) { return o.id == item.id; })
      if (index > -1) {
        vm.items.splice(index, 1);
      }

      var originalIndex = _.findIndex(vm.workRecords, function(record) {
        return record.id == item.id
      })
      if (originalIndex > -1) {
        vm.workRecords[originalIndex]['selected'] = false;
      }

    }

    function handleClassList(originalItems, items) {
      var courseClassList;
      angular.forEach(items, function(item, index, arr) {
        item['selected'] = true;
      })
    }

    function clearAll() {
      $uibMsgbox.confirm('确定全部清空?', function (result) {
        if(result != 'yes') {
          return;
        }
        vm.items = [];
        angular.forEach(vm.workRecords, function(item, index, arr) {
          item['selected'] = false;
        })
      });

    }

  }

  frMgtWorkModalService.$inject = ['$http', '$log', '$q'];
  function frMgtWorkModalService($http, $log, $q) {
    return {
      get: get
    }

    function get(params) {
      return $http.post('/erp/work/queryPaperList', params || {})
        .then(getPaperListComplete)
        .catch(getPaperListFailed);

      function getPaperListComplete(response) {
        return response.data;
      }

      function getPaperListFailed(error) {
        $log.error('XHR Failed for CourseClassList.' + error.data);
        $q.reject(error);
      }
    }
  }
  
})();
(function() {
    "use strict";

    angular.module('ework-ui')
        .controller('frWorkMgtWorkAddCtrl', frWorkMgtWorkAddCtrl)
        .service('frWorkMgtWorkAdd', frWorkMgtWorkAddService)

    frWorkMgtWorkAddCtrl.$inject = ['$scope', '$log', '$uibModal', '$resource', 'frWorkMgtWorkAdd', '$state', '$uibMsgbox', '$rootScope', '$stateParams'];
    function frWorkMgtWorkAddCtrl($scope, $log, $uibModal, $resource, frWorkMgtWorkAdd, $state, $uibMsgbox, $rootScope, $stateParams) {
        window.mgtWorkAdd = $scope.mgtWorkAdd;
        // window.rootScopeAdd = $rootScope
        var vm = this;
        angular.extend(vm, { $stateParams })
        //- init variable
        vm.title = "添加作业";
        vm.productCode = $stateParams.productCode || 'DOUBLE_TEACHER'
        vm.workTypes = [{
            type: 'PRE_CLASS',
            label: '课前预习'
        },{
            type: 'ENTRY_TEST',
            label: '入门测试'
        },{
            type: 'IN_CLASS',
            label: '课中例题'
        },{
          type: 'CLASS_TEST',
          label: '课堂测试'
        },{
            type: 'AFTER_CLASS',
            label: '课后作业'
        },{
          type: 'EXAM',
          label: '考试'
        }]

        vm.productLineCodes = [{
            type: 'HI_STUDY',
            label: '培英班课程'
        }, {
            type: 'DOUBLE_TEACHER',
            label: '双师课程'
        }]

        //- method
        vm.activate = activate;
        vm.back = back;
        vm.openDialog = openDialog;
        vm.delete = deleteWork;
        vm.createWork = createWork;
        vm.getPaperIds = getPaperIds;
        vm.getVideoUrls = getVideoUrls;
        vm.addVideo = addVideo;
        vm.deleteVideo = deleteVideo;
        //- 启动
        activate();

        function activate() {
            vm.workInfo = {
                workTitle: '',
                type: 'PRE_CLASS',
                papers: [],
                videos: [{}],
                productCode: vm.productCode || 'DOUBLE_TEACHER'
            }
        }

        function addVideo() {
            vm.workInfo.videos.push({});
        }

        function deleteVideo(index) {
            vm.workInfo.videos.splice(index, 1);
        }

        function back() {
            history.back();
        }

        /**
         * 创建作业
         */
        function createWork() {
            vm.videoUrlError = false;
            if (notExistPaper(vm.workInfo.papers) && notExistVideos(vm.workInfo.videos)) {
                $uibMsgbox.alert("作业或视频至少要选择一个");
                return ;
            }
            var params = {
                subjectId: $rootScope.selectedSubject,
                gradeId: $rootScope.selectedGrade,
                workTitle: vm.workInfo.workTitle,
                type: vm.workInfo.type,
                productCode: vm.productCode,
                paperIds: vm.getPaperIds(vm.workInfo.papers),
                videoUrls: vm.getVideoUrls(vm.workInfo.videos)
            }

            if (vm.videoUrlError) {
                $uibMsgbox.alert("存在视频格式不正确");
                return ;
            }

            return frWorkMgtWorkAdd.create(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message || '请求数据失败！');
                        return ;
                    }
                    //- 调回到作业列表
                    $state.go('workManagement');
                }, function(error) {
                    console.log(error);
                })

            function notExistPaper(papers) {
                return papers.length === 0;
            }

            function notExistVideos(videos) {
                if (Object.keys(mgtWorkAdd.workInfo.videos[0]).indexOf('videoUrl') > -1) {
                    if (mgtWorkAdd.workInfo.videos[0]['videoUrl'].length > 0) {
                        return false;
                    }
                    return true;
                }
                return true;
            }
        }

        /**
         * 根据已选组成需要的ids: 'xxx,xxx1'
         */
        function getPaperIds(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    return item.id;
                }).join(',')
            }
            return ;
        }

        function getVideoUrls(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    if (item.videoUrl && item.videoUrl.indexOf('http') === -1) {
                        vm.videoUrlError = true;
                        return ''
                    }
                    return item.videoUrl;
                })
            }
            return [];
        }

        //-
        function openDialog() {
            $uibModal.open({
                size: 'lg',
                templateUrl: 'templates/block/modal/mgt-work-modal.html',
                controller: 'frMgtWorkModalCtrl',
                controllerAs: 'mgtWorkModal',
                resolve: {
                    items: function() {
                        return vm.workInfo.papers;
                    }
                }
            }).result.then(function (data) {
                vm.workInfo.papers = data;
            }, function () {});
        }

        function deleteWork(items, index) {
            return items.splice(index, 1);
        }
    }

    frWorkMgtWorkAddService.$inject = ['$http', '$log'];
    function frWorkMgtWorkAddService($http, $log) {
        return {
            create: create
        }

        function create(params) {
            return $http.post('/erp/work/insertWorkInfo', params || {})
                .then(createWorkComplete)
                .catch(createWorkFailed);

            function createWorkComplete(response) {
                return response.data;
            }

            function createWorkFailed(error) {
                $log.error('XHR Failed for createWork.' + error.data);
            }
        }
    }

})();
(function() {
    "use strict";

    angular.module('ework-ui')
        .controller('frWorkMgtWorkEditCtrl', frWorkMgtWorkEditCtrl)
        .service('frWorkMgtWorkEdit', frWorkMgtWorkEditService)

    frWorkMgtWorkEditCtrl.$inject = ['$scope', '$log', '$uibModal', '$state', '$stateParams', 'frWorkMgtWorkEdit', '$uibMsgbox', '$rootScope'];
    function frWorkMgtWorkEditCtrl($scope, $log, $uibModal, $state, $stateParams, frWorkMgtWorkEdit, $uibMsgbox, $rootScope) {
        window.mgtWorkEdit = $scope.mgtWorkEdit;
        var vm = this;
        angular.extend(vm, {$stateParams})
        //- init variable
        vm.workId = $stateParams.id;
        vm.productCode = $stateParams.productCode
        vm.title = "编辑作业";
        vm.workTypes = [{
            type: 'PRE_CLASS',
            label: '课前预习'
        },{
            type: 'ENTRY_TEST',
            label: '入门测试'
        },{
            type: 'IN_CLASS',
            label: '课中例题'
        },{
          type: 'CLASS_TEST',
          label: '课堂测试'
        },{
          type: 'AFTER_CLASS',
          label: '课后作业'
        },{
          type: 'EXAM',
          label: '考试'
        }]
        vm.productLineCodes = [{
            type: 'HI_STUDY',
            label: '培英班课程'
        }, {
            type: 'DOUBLE_TEACHER',
            label: '双师课程'
        }]

        vm.back = back;
        vm.openDialog = openDialog;
        vm.delete = deleteWork;
        vm.updateWork = updateWork;
        vm.addVideo = addVideo;
        vm.deleteVideo = deleteVideo;
        vm.getPaperIds = getPaperIds;
        vm.getVideoUrls = getVideoUrls;

        //- 启动
        activate();

        function activate() {
            vm.workInfo = {
                workTitle: '',
                type: 'PRE_CLASS',
                papers: [],
                videos: [{}],
                productCode: vm.productCode || 'DOUBLE_TEACHER'
            }
            var params = { workId: vm.workId }
            return getWork(params).then(function() {
                $log.info('activated workInfo view')
                vm.loading = false;
            })
        }

        /**
         * 查询作业
         */
        function getWork(params) {

            return frWorkMgtWorkEdit.query(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message);
                        return
                    }
                    vm.workInfo = data.data.workInfo;
                    if (vm.workInfo.videos.length == 0) {
                        vm.workInfo.videos.push({});
                    }
                    return vm.workInfo;
                }, function(error) {
                    $uibMsgbox.error('请求失败');
                })
        }

        function addVideo() {
            vm.workInfo.videos.push({});
        }

        function deleteVideo(index) {
            vm.workInfo.videos.splice(index, 1);
        }
        /**
         * 更新作业
         */
        function updateWork() {
            vm.videoUrlError = false;
            if (notExistPaper(vm.workInfo.papers) && notExistVideos(vm.workInfo.videos)) {
                $uibMsgbox.alert("作业或视频至少要选择一个");
                return ;
            }
            var params = {
                workId: vm.workId,
                subjectId: $rootScope.selectedSubject,
                gradeId: $rootScope.selectedGrade,
                workTitle: vm.workInfo.workTitle,
                type: vm.workInfo.type,
                productCode: vm.productCode,
                paperIds: vm.getPaperIds(vm.workInfo.papers),
                videoUrls: vm.getVideoUrls(vm.workInfo.videos)
            }
            if (vm.videoUrlError) {
                $uibMsgbox.alert("存在视频格式不正确");
                return ;
            }
            return frWorkMgtWorkEdit.update(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message || '请求数据失败！');
                        return ;
                    }
                    //- 调回到作业列表
                    $state.go('workManagement');
                }, function(error) {
                    console.log(error);
                })

            function notExistPaper(papers) {
                return papers.length === 0;
            }

            function notExistVideos(videos) {
                if (Object.keys(mgtWorkEdit.workInfo.videos[0]).indexOf('videoUrl') > -1) {
                    if (mgtWorkEdit.workInfo.videos[0]['videoUrl'].length > 0) {
                        return false;
                    }
                    return true;
                }
                return true;
            }
        }

        function getPaperIds(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    return item.paperId;
                }).join(',')
            }
            return ;
        }

        function getVideoUrls(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    if (item.videoUrl && item.videoUrl.indexOf('http') === -1) {
                        vm.videoUrlError = true;
                        return ''
                    }
                    return item.videoUrl;
                })
            }
            return [];
        }

        function back() {
            $state.go('workManagement');
        }

        //-
        function openDialog() {
            $uibModal.open({
                size: 'lg',
                templateUrl: 'templates/block/modal/mgt-work-modal.html',
                controller: 'frMgtWorkModalCtrl',
                controllerAs: 'mgtWorkModal',
                resolve: {
                    items: function() {
                        return vm.workInfo.papers || [];
                    }
                }
            }).result.then(function (data) {
                if(data.length){
                    data.forEach(function(item) {
                        if(!item.paperId) {
                            item['paperId'] = item.id
                        }
                    })
                }
                vm.workInfo.papers = data;
            }, function () {});
        }

        function deleteWork(items, index) {
            return items.splice(index, 1);
        }

    }

    frWorkMgtWorkEditService.$inject = ['$http', '$log', '$q'];
    function frWorkMgtWorkEditService($http, $log, $q) {
        return {
            query: query,
            update: update
        }
        function query(params) {
            return $http.get('/erp/work/queryWorkInfoById', {params: params})
                .then(queryWorkComplete)
                .catch(queryWorkFailed);

            function queryWorkComplete(response) {
                return response.data;
            }

            function queryWorkFailed(error) {
                $log.error('XHR Failed for getWorkById.' + error);
                $q.reject(error);
            }
        }

        function update(params) {
            return $http.put('/erp/work/updateWorkInfo', params || {})
                .then(updateWorkComplete)
                .catch(updateWorkFailed);

            function updateWorkComplete(response) {
                return response.data;
            }

            function updateWorkFailed(error) {
                $log.error('XHR Failed for updateWork.' + error.data);
                $q.reject(error);
            }
        }
    }

})();
(function() {
  "use strict";

  angular.module('ework-ui')
    .controller('frWorkMgtWorkViewCtrl', frWorkMgtWorkViewCtrl)
    .service('frPaperItem', frPaperItemService)
    .filter('trustUrl', trustUrlFilter)
    .filter('trustHtml', ['$sce', function ($sce) {
      return function (input) {
          return $sce.trustAsHtml(input)
      }
    }])

  frWorkMgtWorkViewCtrl.$inject = ['$scope', '$log', '$uibModal', 'frPaperItem', '$stateParams', '$sce'];
  function frWorkMgtWorkViewCtrl($scope, $log, $uibModal, frPaperItem, $stateParams, $sce) {
    window.mgtWorkView = $scope.mgtWorkView;
    var vm = this;
    angular.extend(vm, {$stateParams})
    //- init variable
    vm.id = $stateParams.id;
    vm.type = $stateParams.type || 'paper';
    if (vm.type == 'paper') {
      vm.title = "作业浏览"
    } else if (vm.type == 'video') {
      vm.title = "视频"
    }
    vm.page = 1;
    vm.total = 1;
    vm.loading = true;

    //- method
    vm.activate = activate;
    vm.getPaperItems = getPaperItems
    vm.back = back;
    vm.next = next;
    vm.previous = previous;
    vm.hasPrevious = hasPrevious;
    vm.hasNext = hasNext;
    //- 启动
    activate();

    function activate() {
      return getPaperItems().then(function() {
        $log.info('activated courses view')
        if (vm.type === 'paper') {
          vm.total = vm.paperInfo.length;
        }
        
      }).finally(function() {
        vm.loading = false;
      })
    }

    function getPaperItems() {
      var params = {
        workIds: vm.id,
        type: vm.type
      }
      return frPaperItem.getPaperItem(params)
        .then(function(data) {
          if (vm.type === 'paper') {
            vm.paperName = data.paperList && data.paperList[0] && data.paperList[0].paperName
            vm.paperInfo = data.paperList && data.paperList[0] && data.paperList[0].paperInfo;
            angular.forEach(vm.paperInfo, function(item) {
              var diffLevelValue = parseInt(item.diffLevel && item.diffLevel.dataValue || 0)
              if (diffLevelValue > 5) {
                item.diffLevel.dataValue = 5;
              }
              var i = 0
              item['stars'] = [];
              for(i=0; i < diffLevelValue; i++) {
                item['stars'].push({id: i});
              }
            })
            return vm.paperInfo;
          } else {
            vm.videoList = data.videoList;
            vm.videoUrl = vm.videoList && vm.videoList[0].videoUrl;
          }
        }, function(error) {
          console.log(error);
        }).finally(function() {
          vm.loading = false;
        })
    }

    function back() {
      history.back();
    }

    function previous() {
      if (vm.hasPrevious()) {
        return vm.page--;
      }
    }

    function next() {
      if (vm.hasNext()) {
        return vm.page++;
      }
    }

    function hasPrevious() {
      return vm.page > 1;
    }

    function hasNext() {
      return vm.page < vm.total;
    }
  }

  frPaperItemService.$inject = ['$http', '$log', '$q'];
  function frPaperItemService($http, $log, $q) {
    return {
      getPaperItem: getPaperItem
    }

    function getPaperItem(params) {
      return $http.get('/erp/myCourse/queryWorkRecord', {params: params})
        .then(getComplete)
        .catch(getFailed);

      function getComplete(response) {
        return response.data.data;
      }

      function getFailed(error) {
        $log.error('XHR Failed for getCourses.' + error.data);
        $q.reject(error);
      }
    }
  }

  trustUrlFilter.$inject = ['$sce'];
  function trustUrlFilter($sce) {
    return function (recordingUrl) {
      return $sce.trustAsResourceUrl(recordingUrl);
    };
  }

})();

(function() {
    "use strict";

    angular.module('ework-ui')
        .controller('frWorkMgtWorkAddCtrl2', frWorkMgtWorkAddCtrl)
        .service('frWorkMgtWorkAdd', frWorkMgtWorkAddService)

    frWorkMgtWorkAddCtrl.$inject = ['$scope', '$log', '$uibModal', '$resource', 'frWorkMgtWorkAdd', '$state', '$uibMsgbox', '$rootScope'];
    function frWorkMgtWorkAddCtrl($scope, $log, $uibModal, $resource, frWorkMgtWorkAdd, $state, $uibMsgbox, $rootScope) {
        window.mgtWorkAdd = $scope.mgtWorkAdd;
        // window.rootScopeAdd = $rootScope
        var vm = this;
        //- init variable
        vm.title = "添加作业";
        vm.workTypes = [{
            type: 'PRE_CLASS',
            label: '课前预习'
        },{
            type: 'ENTRY_TEST',
            label: '入门测试'
        },{
            type: 'IN_CLASS',
            label: '课中例题'
        },{
            type: 'CLASS_TEST',
            label: '课堂测试'
        },{
            type: 'AFTER_CLASS',
            label: '课后作业'
        }]

        vm.courseTypes = [{
            type: 'COMMON',
            label: '普通课程'
        }, {
            type: 'DOUBLE_TEACHER',
            label: '双师课程'
        }]

        //- method
        vm.activate = activate;
        vm.back = back;
        // vm.bindClassWork = bindClassWork;
        vm.openDialog = openDialog;
        vm.delete = deleteWork;
        vm.createWork = createWork;
        vm.getPaperIds = getPaperIds;
        vm.getVideoUrls = getVideoUrls;
        vm.addVideo = addVideo;
        vm.deleteVideo = deleteVideo;
        //- 启动
        activate();

        function activate() {
            vm.workInfo = {
                workTitle: '',
                type: 'PRE_CLASS',
                papers: [],
                videos: [{}],
                courseType: 'DOUBLE_TEACHER'
            }
        }

        function addVideo() {
            vm.workInfo.videos.push({});
        }

        function deleteVideo(index) {
            vm.workInfo.videos.splice(index, 1);
        }

        function back() {
            history.back();
        }

        /**
         * 创建作业
         */
        function createWork() {
            vm.videoUrlError = false;
            if (notExistPaper(vm.workInfo.papers) && notExistVideos(vm.workInfo.videos)) {
                $uibMsgbox.alert("作业或视频至少要选择一个");
                return ;
            }
            var params = {
                subjectId: $rootScope.selectedSubject,
                gradeId: $rootScope.selectedGrade,
                workTitle: vm.workInfo.workTitle,
                type: vm.workInfo.type,
                courseType: vm.workInfo.courseType,
                paperIds: vm.getPaperIds(vm.workInfo.papers),
                videoUrls: vm.getVideoUrls(vm.workInfo.videos),
                productCode: 'DOUBLE_TEACHER_2'
            }

            if (vm.videoUrlError) {
                $uibMsgbox.alert("存在视频格式不正确");
                return ;
            }

            return frWorkMgtWorkAdd.create(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message || '请求数据失败！');
                        return ;
                    }
                    //- 调回到作业列表
                    $state.go('workManagement');
                }, function(error) {
                    console.log(error);
                })

            function notExistPaper(papers) {
                return papers.length === 0;
            }

            function notExistVideos(videos) {
                if (Object.keys(mgtWorkAdd.workInfo.videos[0]).indexOf('videoUrl') > -1) {
                    if (mgtWorkAdd.workInfo.videos[0]['videoUrl'].length > 0) {
                        return false;
                    }
                    return true;
                }
                return true;
            }
        }

        /**
         * 根据已选组成需要的ids: 'xxx,xxx1'
         */
        function getPaperIds(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    return item.id;
                }).join(',')
            }
            return ;
        }

        function getVideoUrls(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    if (item.videoUrl && item.videoUrl.indexOf('http') === -1) {
                        vm.videoUrlError = true;
                        return ''
                    }
                    return item.videoUrl;
                })
            }
            return [];
        }

        //-
        function openDialog() {
            $uibModal.open({
                size: 'lg',
                templateUrl: 'templates/block/modal/mgt-work-modal.html',
                controller: 'frMgtWorkModalCtrl',
                controllerAs: 'mgtWorkModal',
                resolve: {
                    items: function() {
                        return vm.workInfo.papers;
                    }
                }
            }).result.then(function (data) {
                vm.workInfo.papers = data;
            }, function () {});
        }

        function deleteWork(items, index) {
            return items.splice(index, 1);
        }
    }

    frWorkMgtWorkAddService.$inject = ['$http', '$log'];
    function frWorkMgtWorkAddService($http, $log) {
        return {
            create: create
        }

        function create(params) {
            return $http.post('/erp/work/insertWorkInfo', params || {})
                .then(createWorkComplete)
                .catch(createWorkFailed);

            function createWorkComplete(response) {
                return response.data;
            }

            function createWorkFailed(error) {
                $log.error('XHR Failed for createWork.' + error.data);
            }
        }
    }

})();
(function() {
    "use strict";

    angular.module('ework-ui')
        .controller('frWorkMgtWorkEditCtrl2', frWorkMgtWorkEditCtrl)
        .service('frWorkMgtWorkEdit', frWorkMgtWorkEditService)

    frWorkMgtWorkEditCtrl.$inject = ['$scope', '$log', '$uibModal', '$state', '$stateParams', 'frWorkMgtWorkEdit', '$uibMsgbox', '$rootScope'];
    function frWorkMgtWorkEditCtrl($scope, $log, $uibModal, $state, $stateParams, frWorkMgtWorkEdit, $uibMsgbox, $rootScope) {
        window.mgtWorkEdit = $scope.mgtWorkEdit;
        var vm = this;
        //- init variable
        vm.workId = $stateParams.id;
        vm.title = "编辑作业";
        vm.workTypes = [{
            type: 'PRE_CLASS',
            label: '课前预习'
        },{
            type: 'ENTRY_TEST',
            label: '入门测试'
        },{
            type: 'IN_CLASS',
            label: '课中例题'
        },{
            type: 'CLASS_TEST',
            label: '课堂测试'
        },{
            type: 'AFTER_CLASS',
            label: '课后作业'
        }]
        vm.courseTypes = [{
            type: 'COMMON',
            label: '普通课程'
        }, {
            type: 'DOUBLE_TEACHER',
            label: '双师课程'
        }]

        vm.back = back;
        vm.openDialog = openDialog;
        vm.delete = deleteWork;
        vm.updateWork = updateWork;
        vm.addVideo = addVideo;
        vm.deleteVideo = deleteVideo;
        vm.getPaperIds = getPaperIds;
        vm.getVideoUrls = getVideoUrls;

        //- 启动
        activate();

        function activate() {
            vm.workInfo = {
                workTitle: '',
                type: 'PRE_CLASS',
                papers: [],
                videos: [{}],
                courseType: 'DOUBLE_TEACHER'
            }
            var params = { workId: vm.workId }
            return getWork(params).then(function() {
                $log.info('activated workInfo view')
                vm.loading = false;
            })
        }

        /**
         * 查询作业
         */
        function getWork(params) {

            return frWorkMgtWorkEdit.query(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message);
                        return
                    }
                    vm.workInfo = data.data.workInfo;
                    if (vm.workInfo.videos.length == 0) {
                        vm.workInfo.videos.push({});
                    }
                    return vm.workInfo;
                }, function(error) {
                    $uibMsgbox.error('请求失败');
                })
        }

        function addVideo() {
            vm.workInfo.videos.push({});
        }

        function deleteVideo(index) {
            vm.workInfo.videos.splice(index, 1);
        }
        /**
         * 更新作业
         */
        function updateWork() {
            vm.videoUrlError = false;
            if (notExistPaper(vm.workInfo.papers) && notExistVideos(vm.workInfo.videos)) {
                $uibMsgbox.alert("作业或视频至少要选择一个");
                return ;
            }
            var params = {
                workId: vm.workId,
                subjectId: $rootScope.selectedSubject,
                gradeId: $rootScope.selectedGrade,
                workTitle: vm.workInfo.workTitle,
                type: vm.workInfo.type,
                courseType: vm.workInfo.courseType,
                paperIds: vm.getPaperIds(vm.workInfo.papers),
                videoUrls: vm.getVideoUrls(vm.workInfo.videos),
                productCode: 'DOUBLE_TEACHER_2'
            }
            if (vm.videoUrlError) {
                $uibMsgbox.alert("存在视频格式不正确");
                return ;
            }
            return frWorkMgtWorkEdit.update(params)
                .then(function(data) {
                    if (data.error) {
                        $uibMsgbox.error(data.message || '请求数据失败！');
                        return ;
                    }
                    //- 调回到作业列表
                    $state.go('workManagement');
                }, function(error) {
                    console.log(error);
                })

            function notExistPaper(papers) {
                return papers.length === 0;
            }

            function notExistVideos(videos) {
                if (Object.keys(mgtWorkEdit.workInfo.videos[0]).indexOf('videoUrl') > -1) {
                    if (mgtWorkEdit.workInfo.videos[0]['videoUrl'].length > 0) {
                        return false;
                    }
                    return true;
                }
                return true;
            }
        }

        function getPaperIds(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    return item.id;
                }).join(',')
            }
            return ;
        }

        function getVideoUrls(items) {
            if (angular.isArray(items) && items.length > 0) {
                return items.map(function(item) {
                    if (item.videoUrl && item.videoUrl.indexOf('http') === -1) {
                        vm.videoUrlError = true;
                        return ''
                    }
                    return item.videoUrl;
                })
            }
            return [];
        }

        function back() {
            $state.go('workManagement');
        }

        //-
        function openDialog() {

            $uibModal.open({
                size: 'lg',
                templateUrl: 'templates/block/modal/mgt-work-modal.html',
                controller: 'frMgtWorkModalCtrl',
                controllerAs: 'mgtWorkModal',
                resolve: {
                    items: function() {
                        return vm.workInfo.papers || [];
                    }
                }
            }).result.then(function (data) {
                vm.workInfo.papers = data;
            }, function () {});
        }

        function deleteWork(items, index) {
            return items.splice(index, 1);
        }

    }

    frWorkMgtWorkEditService.$inject = ['$http', '$log', '$q'];
    function frWorkMgtWorkEditService($http, $log, $q) {
        return {
            query: query,
            update: update
        }
        function query(params) {
            return $http.get('/erp/work/queryWorkInfoById', {params: params})
                .then(queryWorkComplete)
                .catch(queryWorkFailed);

            function queryWorkComplete(response) {
                return response.data;
            }

            function queryWorkFailed(error) {
                $log.error('XHR Failed for getWorkById.' + error);
                $q.reject(error);
            }
        }

        function update(params) {
            return $http.put('/erp/work/updateWorkInfo', params || {})
                .then(updateWorkComplete)
                .catch(updateWorkFailed);

            function updateWorkComplete(response) {
                return response.data;
            }

            function updateWorkFailed(error) {
                $log.error('XHR Failed for updateWork.' + error.data);
                $q.reject(error);
            }
        }
    }

})();
(function() {
  "use strict";

  angular.module('ework-ui')
    .controller('frWorkMgtWorkViewCtrl2', frWorkMgtWorkViewCtrl)
    .service('frPaperItem', frPaperItemService)
    .filter('trustUrl', trustUrlFilter)
    .filter('trustHtml', ['$sce', function ($sce) {
      return function (input) {
          return $sce.trustAsHtml(input)
      }
    }])

  frWorkMgtWorkViewCtrl.$inject = ['$scope', '$log', '$uibModal', 'frPaperItem', '$stateParams', '$sce'];
  function frWorkMgtWorkViewCtrl($scope, $log, $uibModal, frPaperItem, $stateParams, $sce) {
    window.mgtWorkView = $scope.mgtWorkView;
    var vm = this;
    //- init variable
    vm.id = $stateParams.id;
    vm.type = $stateParams.type || 'paper';
    if (vm.type == 'paper') {
      vm.title = "作业浏览"
    } else if (vm.type == 'video') {
      vm.title = "视频"
    }
    vm.page = 1;
    vm.total = 1;
    vm.loading = true;

    //- method
    vm.activate = activate;
    vm.getPaperItems = getPaperItems
    vm.back = back;
    vm.next = next;
    vm.previous = previous;
    vm.hasPrevious = hasPrevious;
    vm.hasNext = hasNext;
    //- 启动
    activate();

    function activate() {
      return getPaperItems().then(function() {
        $log.info('activated courses view')
        if (vm.type === 'paper') {
          vm.total = vm.paperInfo.length;
        }
        
      }).finally(function() {
        vm.loading = false;
      })
    }

    function getPaperItems() {
      var params = {
        workIds: vm.id,
        type: vm.type
      }
      return frPaperItem.getPaperItem(params)
        .then(function(data) {
          if (vm.type === 'paper') {
            vm.paperName = data.paperList && data.paperList[0] && data.paperList[0].paperName
            vm.paperInfo = data.paperList && data.paperList[0] && data.paperList[0].paperInfo;
            angular.forEach(vm.paperInfo, function(item) {
              var diffLevelValue = parseInt(item.diffLevel && item.diffLevel.dataValue || 0)
              if (diffLevelValue > 5) {
                item.diffLevel.dataValue = 5;
              }
              var i = 0
              item['stars'] = [];
              for(i=0; i < diffLevelValue; i++) {
                item['stars'].push({id: i});
              }
            })
            return vm.paperInfo;
          } else {
            vm.videoList = data.videoList;
            vm.videoUrl = vm.videoList && vm.videoList[0].videoUrl;
            // vm.videoUrl = $sce.trustAsResourceUrl(vm.videoList && vm.videoList[0].videoUrl);
          }
        }, function(error) {
          console.log(error);
        }).finally(function() {
          vm.loading = false;
        })
    }

    function back() {
      history.back();
    }

    function previous() {
      if (vm.hasPrevious()) {
        return vm.page--;
      }
    }

    function next() {
      if (vm.hasNext()) {
        return vm.page++;
      }
    }

    function hasPrevious() {
      return vm.page > 1;
    }

    function hasNext() {
      return vm.page < vm.total;
    }
  }

  frPaperItemService.$inject = ['$http', '$log', '$q'];
  function frPaperItemService($http, $log, $q) {
    return {
      getPaperItem: getPaperItem
    }

    function getPaperItem(params) {
      return $http.get('/erp/myCourse/queryWorkRecord', {params: params})
        .then(getComplete)
        .catch(getFailed);

      function getComplete(response) {
        return response.data.data;
      }

      function getFailed(error) {
        $log.error('XHR Failed for getCourses.' + error.data);
        $q.reject(error);
      }
    }
  }

  trustUrlFilter.$inject = ['$sce'];
  function trustUrlFilter($sce) {
    return function (recordingUrl) {
      return $sce.trustAsResourceUrl(recordingUrl);
    };
  }

})();

(function () {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcbDatetimeMultiDatePicker', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/base/datetime/multiDatePicker.html',
      controllerAs: '$ctrl',
      bindings: {
        checkedDays: '=?',
        onCheckDays: '&?',
      },
      controller: ['$scope',
        function ($scope) {
          var $ctrl = this;
          
          $scope.calendar = {
            yearMonth: moment().format('YYYY年MM月'),
            weeks: getCalendar(moment()),
            currentDate: moment(),
            checkedDays: []
          }

          $scope.calendarToggleCheck = function (day) {
            day.isChecked = !day.isChecked;
            var dayStr = day.time.format('YYYY-MM-DD')
            var checkedDays = $scope.calendar.checkedDays
            if (day.isChecked && !_.some(checkedDays, { value: dayStr })) {
              checkedDays.push({
                key: moment(dayStr, 'YYYY-MM-DD').format('YYYYMMDD'),
                value: dayStr
              })
            }
            if (!day.isChecked) {
              checkedDays.splice(_.findIndex(checkedDays, { value: dayStr }), 1)
            }
            if (_.isFunction($ctrl.onCheckDays)) {
              $ctrl.onCheckDays({
                days: $scope.calendar.checkedDays
              });
            }
          }

          $scope.calendarDecrement = function (calendar, type) {
            calendar.currentDate.subtract(1, type)
            reloadCalendar(calendar)
          }
          $scope.calendarIncrement = function (calendar, type) {
            calendar.currentDate.add(1, type)
            reloadCalendar(calendar)
          }
          $scope.clearAllCalendarChecked = function (calendar) {
            calendar.checkedDays.splice(0, calendar.checkedDays.length)
            reloadCalendar(calendar)
          }
          $scope.setCalendarToCurrenDay = function (calendar) {
            calendar.currentDate = moment()
            reloadCalendar(calendar)
          }
          $scope.deleteCheckDay = function (day) {
            var idx = _.findIndex($scope.calendar.checkedDays, { key: day.key })
            $scope.calendar.checkedDays.splice(idx, 1)
            reloadCalendar($scope.calendar)
          }

          function getCalendar(curDate, checkedList) {
            // 已经选择的日期
            checkedList = checkedList || []
            // 当前日期
            var curMoment = moment(curDate)
            // 本月第一天
            var curMonthFirstDay = moment(curMoment.startOf('month'))
            // 本月最后一天
            var curMonthLastDay = moment(curMoment.endOf('month'))
            // 本月第一天是一周中的第几天（周日第0天，周一第1天...周六第6天）
            var curMonthFirstDayWeek = curMonthFirstDay.day()
            // 本月最后一天是一周中的第几天
            var curMonthLastDayWeek = curMonthLastDay.day()
            // 当前月日历的第一天（例如本月第一天是周三，那就需要再填充三天）
            var calFirstDay = moment(curMonthFirstDay).subtract((curMonthFirstDayWeek + 6) % 7, 'day')
            // 当前月日历的最后一天
            var calLastDay = moment(curMonthLastDay).add((6 - (curMonthLastDayWeek + 6) % 7), 'day')
            // 当前月日历的所有天数
            var daysArray = []
            var dayPointer = moment(calFirstDay)
            for (; dayPointer < calLastDay; dayPointer.add('day', 1)) {
              // 当前日期是否已经选择
              var isChecked = false
              // 查看当前日期是否在已经选择的日期列表中
              _.forEach(checkedList, function (item) {
                var d = moment(item.value)
                if (d.format('YYYYMMDD') == dayPointer.format('YYYYMMDD')) {
                  isChecked = true
                }
              })
              daysArray.push({
                time: moment(dayPointer),
                date: dayPointer.date(),
                month: dayPointer.month(),
                isChecked: isChecked,
                isCurrentMonth: dayPointer.month() == curDate.month()
              })
            }
            return _.chunk(daysArray, 7)
          }
          function reloadCalendar(calendar) {
            calendar.yearMonth = calendar.currentDate.format('YYYY年MM月')
            calendar.weeks = getCalendar(calendar.currentDate, calendar.checkedDays)
          }

          $scope.$on('clearCheckedMultiDate', function () {
            $scope.checkedDays = $ctrl.checkedDays;
            reloadCalendar($scope.calendar);
          })
          ////////////////

          $ctrl.$onInit = function () {
            $scope.$watch(function () { return $ctrl.checkedDays }, function () {
              $scope.checkedDays = $ctrl.checkedDays;
              reloadCalendar($scope.calendar)
            })
          };
          $ctrl.$onChanges = function (changesObj) { };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage: 获取学员的订单
  // input:
  //    studentId: Number               #学员id
  // events: 
  //    使用方式：父组件调用 $scope.$broadcast('getOrderList')方法
  //    getOrderList:                   # 更新学员报班单信息
  //--TODO---
  //    [multi-select]: Boolean         #是否可多选
  //    [branch-id]: Number             #有传值时，只能选择指定校区，没有值时可以选择所有校区
  //    [select-in-order]: Boolean      #是否必须按顺序选择，默认为否
  //    [select-first-default]: Boolean #默认选择第一条可选的记录
  //--End TODO---
  // output:
  //    onChecked: Array  #
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuOrderList', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuOrderList.html',
      controllerAs: '$ctrl',
      bindings: {
        studentId: '=',
        isAllBranch: '=?',
        onChecked: '&?'
      },
      controller: ['$scope', '$rootScope', '$uibMsgbox', 'erp_studentOrderCourseService',
        function ($scope, $rootScope, $uibMsgbox, erp_studentOrderCourseService) {
          var $ctrl = this;
          $scope.orderCourseList = [];
          $scope.curBranchCourseList = [];
          $scope.orderCourseListCheckedAllFlag = false;
          $scope.$on('getOrderList', function () {
            $scope.getOrderCourseList();
          })
          $scope.getOrderCourseList = function () {
            var waitingModal = $uibMsgbox.waiting('加载学员报班单中，请稍候...')
            erp_studentOrderCourseService.queryOrderCourse({
              pageSize: 999, // 每页显示条数
              currentPage: 1, // 要获取的第几页的数据
              studentId: $scope.studentId,
              isAllBranch: $ctrl.isAllBranch || null,
              businessType: 2
            }).$promise.then(function (resp) {
              waitingModal.close()
              if (!resp.error) {
                var arry = _.filter(_.sortBy(resp.data, 'create_time'), function (o) {
                  return o.course_schedule_count > 0;
                })
                _.forEach(arry, function (item) {
                  item.available = item.branch_id == $rootScope.selectedOrg.id
                  // item.disabled = true
                  item.checked = false
                })
                $scope.orderCourseList = arry;
                $scope.curBranchCourseList = _.filter(arry, { branch_id: $rootScope.selectedOrg.id })
                if (_.isArray($scope.curBranchCourseList) && $scope.curBranchCourseList.length > 0) {
                  $scope.curBranchCourseList[0].checked = true;
                  $scope.onCourseChecked($scope.curBranchCourseList[0])
                }
              } else {
                $uibMsgbox.error(resp.message);
              }
            }, function (resp) {
              waitingModal.close()
            });
          }

          // 学员报班单勾选/取消事件处理
          $scope.onCourseChecked = function (course) {
            if (!_.isArray($scope.curBranchCourseList)) {
              return false
            }
            // for(var i = 0; i < $scope.curBranchCourseList.length; i ++ ) {
            //     var preCourse = $scope.curBranchCourseList[i-1]
            //     var curCourse = $scope.curBranchCourseList[i]
            //     var nextCourse = $scope.curBranchCourseList[i + 1]
            //     if (curCourse.checked) {
            //         curCourse.disabled = !!(nextCourse && nextCourse.checked)
            //     } else {
            //         curCourse.disabled = !!(preCourse && !preCourse.checked)
            //     }
            // }
            $scope.orderCourseListCheckedAllFlag = _.every($scope.curBranchCourseList, { checked: true })
            if (_.isFunction($ctrl.onChecked)) {
              var checkedOrders = _.filter($scope.curBranchCourseList, {
                'checked': true
              });
              $ctrl.onChecked({
                orders: checkedOrders
              })
            }
          }

          // 全选/反选课程
          $scope.onCheckAllOrderCourse = function () {
            _.forEach($scope.curBranchCourseList, function (item) {
              item.checked = $scope.orderCourseListCheckedAllFlag
            })
            $scope.onCourseChecked()
          }

          ////////////////
          $ctrl.$onInit = function () {
            $scope.$watch(function () { return $ctrl.studentId }, function () {
              if ($ctrl.studentId) {
                $scope.studentId = $ctrl.studentId;
                $scope.getOrderCourseList();
              }
            })
          };
          
          $ctrl.$onChanges = function (changesObj) { };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function() {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedApplyBrief', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedApplyBrief.html',
      controllerAs: '$ctrl',
      bindings: {
        apply: '=',
      },
      controller: ['$scope',
        function ($scope) {
          var $ctrl = this;


          ////////////////

          $ctrl.$onInit = function() { };
          $ctrl.$onChanges = function(changesObj) { };
          $ctrl.$onDestroy = function() { };
        }
      ]
    });

})();
(function() {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedApplyDetail', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedApplyDetail.html',
      controllerAs: '$ctrl',
      bindings: {
        apply: '=',
        type: '=',        
      },
      controller: ['$scope',
        function ($scope) {
          var $ctrl = this;
          $scope.match=false;
          if ($ctrl.type == 1) {
            $scope.match = true;
          }


          ////////////////

          $ctrl.$onInit = function() { };
          $ctrl.$onChanges = function(changesObj) { };
          $ctrl.$onDestroy = function() { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular.module('ework-ui').component('klcErpCourseStuSchedBaseInfoAnalysis', {
    //template:'htmlTemplate',
    templateUrl: 'templates/components/erp/course/stuSchedBaseInfoAnalysis.html',
    controllerAs: '$ctrl',
    bindings: {
      // 申请单据
      apply: '=',
      readOnly: '=?'
    },
    controller: [
      '$scope',
      '$uibMsgbox',
      'erp_dictService',
      'erp_studentScoreService',
      function (
        $scope, 
        $uibMsgbox,
        erp_dictService,
        erp_studentScoreService
      ) {
        var $ctrl = this;
        $scope.apply = $ctrl.apply;

        $scope.termList = [];
        $scope.examTypeList = [];
        $scope.latestScore = {};
        $scope.applyTypeList = [{
          code: "1",
          name: '新单'
        }, {
          code: "2",
          name: '加课单'
        }, {
          code: "3",
          name: '换单'
        }];
        ////////////////

        $ctrl.$onInit = function () {
          getDictionary($scope.termList, 'term');
          getDictionary($scope.examTypeList, 'examType');
          $scope.$watch(function() {return $ctrl.apply}, function () {
            $scope.apply = $ctrl.apply;
          })
        };

        $ctrl.$onDestroy = function () {
        };

        $scope.$watch('apply.studentId', function (newValue, oldValue) {
          if (newValue) {
            $scope.getLatestScore();
          }
        });

        $scope.getLatestScore = function () {
          erp_studentScoreService.query({
            studentId: $scope.apply.studentId,
            gradeId: $scope.apply.gradeId,
            term: $scope.apply.term,
            examType: $scope.apply.examType
          }).$promise.then(function (resp) {
            if (!resp.error) {
              var score = {}
              if (_.isArray(resp.data) && resp.data.length >= 1) {
                 score = resp.data[0]
              }
              // $scope.apply.gradeId = score.gradeId;
              // $scope.apply.gradeName = score.gradeName;
              // $scope.apply.term = score.term;
              // $scope.apply.studentRanking = score.ranking || null;
              $scope.apply.stuScoreList = score.studentScoreList || [];
              $scope.apply.stuScoreRankingList = score.studentScoreRankingList || [];
            } else {
              $uibMsgbox.error(resp.message)
            }
          })
        }

        // 获取字典数据
        function getDictionary(listRef, code) {
          return erp_dictService.get({
            code: code
          }).$promise.then(function (resp) {
            if (!resp.error) {
              _.forEach(resp.data, function (item) {
                listRef.push(item);
              })
            } else {
              $uibMsgbox.error(resp.message)
            }
          }, function (resp) {return false;})
        }
      }
    ]
  });
})();

/*****
// 打开学生成绩对话框
function openScoreModal (applyId, score, optype) {
  var _score = _.cloneDeep(score)
  return $uibModal.open({
    templateUrl: 'erp_courseSchedApplyScoreModal.html',
    size: 'sm',
    resolve: {
      applyId: function () {
        return applyId
      },
      score: function() {
        return _score || {}
      },
      optype: function () {
        return optype || 'add'
      }
    },
    controller: [
      '$scope',
      'erp_stuCourseSchedApplyYdyService',
      'applyId',
      'score',
      'optype',
      function (
        $scope,
        erp_stuCourseSchedApplyYdyService,
        applyId, 
        score, 
        optype
      ) {
        $scope.score = score || {}
        if (optype == 'add') {
          $scope.score.fullMark = $scope.score.fullMark || 100
        }
        $scope.saveScore = function () {
          $scope.score.applyId = applyId
          $scope.score.subjectId = parseInt($scope.score.subjectId, 10)
          $scope.score.score = parseInt($scope.score.score, 10)
          $scope.score.fullMark = parseInt($scope.score.fullMark, 10)
          if (!$scope.score.subjectId) {
            return $uibMsgbox.warn('请选择科目！')
          }
          if (!$scope.score.score || isNaN($scope.score.score)) {
            return $uibMsgbox.warn('请输入成绩!')
          }
          if (!$scope.score.fullMark || isNaN($scope.score.fullMark)) {
            return $uibMsgbox.warn('请输入满分分数')
          }
          if ($scope.score.score < 0 || $scope.score.score > $scope.score.fullMark) {
              return $uibMsgbox.warn('输入的课程分数必须在0到' + $scope.score.fullMark + '之间！')
          }
          var commitFunc = erp_stuCourseSchedApplyYdyService.postScore
          if (optype == 'edit') {
            commitFunc = erp_stuCourseSchedApplyYdyService.putScore
          }
          commitFunc($scope.score).$promise.then(function (resp) {
            if (!resp.error) {
              if (optype == 'edit') {
                $scope.$close($scope.score)
              } else {
                $scope.$close(_.pick(resp.data, ['id', 'applyId', 'score', 'fullMark', 'subjectId', 'subjectName']))
              }
            } else {
              $uibMsgbox.error(resp.message)
            }
          })
        }
      }
    ]
  })
} 
// 添加学生近期成绩
  $scope.addScore = function () {
    var modalInstance = openScoreModal($scope.apply.id)
    modalInstance.result.then(function (score) {
      $scope.apply.stuScoreList.push(score)
    }, function () {})
  }
  // 编辑学生近期成绩
  $scope.editScore = function (score) {
    var modalInstance = openScoreModal($scope.apply.id, score, 'edit')
    modalInstance.result.then(function (editScore) {
      score = _.assign(score, editScore)
    }, function () {})
  }
  $scope.delScore = function (score) {
    $uibMsgbox.confirm('确定删除所选科目的成绩？', function (res) {
      if (res == 'yes') {
        erp_stuCourseSchedApplyYdyService.delScore(score, function (resp) {
          if (!resp.error) {
            $uibMsgbox.success('删除成功')
            $scope.apply.stuScoreList.splice(
              _.findIndex($scope.apply.stuScoreList, score), 1
            )
          }
        })
      }
    })
  }
*/
(function () {
  'use strict';

  // Usage:师生匹配结果
  // 
  // Creates:yans@histudy.com
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedBaseInfoMatch', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedBaseInfoMatch.html',
      controllerAs: '$ctrl',
      bindings: {
        apply: '=',
        readOnly: '<?'
      },
      controller: [
        '$rootScope',
        '$scope',
        '$log',
        '$state',
        '$stateParams',
        '$uibModal',
        '$uibMsgbox',
        'erp_stuCourseSchedApplyYdyService',
      function (
        $rootScope,
        $scope,
        $log,
        $state,
        $stateParams,
        $uibModal,
        $uibMsgbox,
        erp_stuCourseSchedApplyYdyService) {
        var $ctrl = this;
        $scope.apply = $ctrl.apply;
        $scope.matchList = {};
        $scope.optype = 'edit'
        $scope.checkAll = false;
        // 申请单基础信息是否只读
        $scope.applyBaseReadOnly = true
        // 初步排课意向表
        $scope.applyPlanList = []
        // 学期类型
        $scope.termTypes = [
          {
            value: "1",
            label: '上学期'
          }, {
            value: "2",
            label: '下学期'
          }
        ]
        // 申请单类型
        $scope.applyTypes = [
          {
            value: "1",
            label: '新单'
          }, {
            value: "2",
            label: '加课单'
          }, {
            value: "3",
            label: '换单'
          }
        ]
        // 申请档期
        $scope.stuSchedTimeList = ''
        // 申请单
        $scope.apply = {}
        // 申请单ID
        $scope.applyId = 0
      
        // 获取申请单详情
        $scope.getApplyDetail = function (applyId) {
          return erp_stuCourseSchedApplyYdyService.getDetail({
            id: applyId
          }).$promise.then(function (resp) {
            if (!resp.error) {
              $scope.apply = resp.data
            } else {
              $uibMsgbox.error(resp.message)
            }
          }, function (resp) {})
        }
      
        // 获取初步排课意向表
        $scope.getApplyPlanList =  function (applyId) {
          applyId = applyId || $scope.applyId;
          return erp_stuCourseSchedApplyYdyService.getApplyPlanList({
            applyId: applyId
          }).$promise.then(function (resp) {
            if (!resp.error) {
              $scope.applyPlanList = resp.data
            } else {
              $uibMsgbox.error(resp.message)
            }
          }, function (resp) {})
        }
      
        // 初步排课意向操作 （status: 1:未排课，2：正常排课,3:压单，4：取消压单）
        /**
         * item: 排课意向单
         * status: 状态
         */
        $scope.handlePutSchedPlanSatus = function (item, status) {
          $scope.PlanSatus = status;
          item.status = status;
          if (status == 2) {
            // 匹配
            $scope.matchList = item;
             _.forEach($scope.applyPlanList, function (apply) {
                apply.checked = apply.id === item.id
             });
          } else if (status == 3) {
            // 压单
            openOverstockDialog(item);
          } else if (status == 4) {
            // 取消压单
            $uibMsgbox.confirm('确认取消压单？', function (res) {
              if (res == 'yes') {
                putSchedPlanSatus(item);
              }
            })
          } else if (status == 5) {
            openOverstockDialog(item); // 课单事故
          } else {
            $uibMsgbox.error('未知的初步排课意向状态：' + status + '，请联系管理员！')
          }
        }
      
        $scope.onMatchSuccess  = function () {
          $scope.getApplyPlanList();
        }

        //全选
        $scope.checkAllApplyPlan = function() {
          $scope.checkAll = !$scope.checkAll;
	        if ($scope.applyPlanList && $scope.applyPlanList.length > 0) {
            $.each($scope.applyPlanList, function (idx, item) {
              item.checkFlag = $scope.checkAll;
            });
          }
        }

        //批量课单事故
        $scope.batchOperation = function() {
          var arr = [];
          if ($scope.applyPlanList && $scope.applyPlanList.length > 0) {
            $.each($scope.applyPlanList, function (idx, item) {
                if (item.checkFlag) {
                  let batchItem = { "id": item.id, "applyId": item.applyId, "status": 5, "remark": item.remark, "courseSpId": item.courseSpId }
                  if (!(item.status == 4 || item.subjectId != $scope.schedulableSubjectId)==true) {
                    arr.push(batchItem);
                  } 
                }
            });
          }
          $scope.PlanSatus = 8;
          if(arr.length==0){
            $uibMsgbox.confirm('请选择初步排课意向！');
          }else{
            openOverstockDialog (arr) 
          }
        }
      
        // 课单事故
        function openOverstockDialog (item) {
          return $uibModal.open({
            templateUrl: 'applyPlanOverstock.html',
            resolve: {
              detail: function (){
                return item
              },
              PlanSatus: function(){
                return $scope.PlanSatus
              }
            },
            controller: ['$scope', 'detail', 'PlanSatus','$uibMsgbox', 'erp_stuCourseSchedApplyYdyService',
              function ($scope, detail,PlanSatus,$uibMsgbox, erp_stuCourseSchedApplyYdyService) {
                $scope.detail = _.clone(detail)
                $scope.PlanSatus = PlanSatus;
                if(PlanSatus==8){
                  $scope.detail = {};
                  $scope.batchList = _.clone(detail);
                }
                $scope.valid = function () {
                  if (!$scope.detail.remark) {
                    $uibMsgbox.error('请输入备注！');
                    return false;
                  }
                  return true;
                }
                $scope.onOk = function () {
                  if (!$scope.valid()) {
                    return false;
                  }
                  if(PlanSatus==8){
                    angular.forEach($scope.batchList, function (item) {
                      item.remark = $scope.detail.remark;
                    });
                    erp_stuCourseSchedApplyYdyService.putApplyPlanStatus($scope.batchList, function (resp) {
                      if (!resp.error) {
                        $scope.$close();
                        $uibMsgbox.confirm('操作成功')
                      } else {
                        $uibMsgbox.error(resp.message)
                      }
                    }, function (resp) {})
                  }else{
                    erp_stuCourseSchedApplyYdyService.putApplyPlan(
                      _.pick($scope.detail, ['id', 'applyId', 'remark', 'status', 'courseSpId'])).$promise.then(function(resp) {
                      if (!resp.error) {
                        $scope.$close();
                      } else {
                        $uibMsgbox.error(resp.message)
                      }
                    }, function (resp) {})
                  }
                 
                }
              }
            ]
          }).result.then(function () {
            $scope.getApplyPlanList();
          })
        }
      
        function putSchedPlanSatus (item) {
          erp_stuCourseSchedApplyYdyService.putApplyPlan(item)
            .$promise.then(function (resp) {
              if (!resp.error) {
                $scope.getApplyPlanList()
              } else {
                $uibMsgbox.error(resp.message)
              }
            }, function (resp) {
              $uibMsgbox.error('请求失败!' + resp);
            })
        }

          $ctrl.$onInit = function () {
            $scope.applyId = $stateParams.id;
            $scope.schedulableSubjectId = $stateParams.schedulableSubjectId;
            $scope.curCourseArrangerId = $stateParams.curCourseArrangerId;
            if ($state.current.name == "classesScheduleYdyMatchDetail") {
              $scope.optype = 'view'
            } else {
              $scope.optype = 'edit'
            }
            $scope.getApplyDetail($scope.applyId).then(function () {
              return $scope.getApplyPlanList($scope.applyId)
            })
            $scope.$watch(function() {return $ctrl.apply}, function () {
              $scope.apply = $ctrl.apply;
              $scope.matchList = $scope.matchList;
            })
          };
          $ctrl.$onChanges = function (changesObj) {
          };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage: 学员课程规划
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedBaseInfoPlan', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedBaseInfoPlan.html',
      controllerAs: '$ctrl',
      bindings: {
        apply: '=',
        readOnly: '<?'
      },
      controller: ['$scope', '$uibModal', '$uibMsgbox', 
        'erp_studentsService',
        'erp_teacherGroupService',
        'erp_stuCourseSchedApplyYdyService',
        function ($scope, $uibModal, $uibMsgbox, erp_studentsService, erp_teacherGroupService, erp_stuCourseSchedApplyYdyService) {
          var $ctrl = this;
          $scope.apply = $ctrl.apply;
          $scope.pageData = {
            totalRequirement:0
          };
          // 计算每周总课程规划节数
          $scope.calcReqSum = function () {
            var sum = 0
            _.forEach($scope.apply.stuReqList, function (req) {
              sum = sum + req.requirement
            })
            $scope.pageData.totalRequirement = sum
          }

          $scope.$on('recalcReqSum', function () {
            $scope.calcReqSum()
          })
          
          $scope.onUpdateSched = function (schedule) {
            $scope.apply.schedule = schedule
          }

          $scope.queryStudentInfo = function () {
            erp_studentsService.query({
              row_num: 20,
              studentId: $scope.apply.studentId
            },
              function (resp) {
                if (!resp.error && resp.data.length) {
                  $scope.apply.student = resp.data[0];
                } else {
                  $uibMsgbox.error(resp.message);
                }
              });
          }
          
          $scope.$watch('apply.studentId', function (newValue, oldValue) {
            if (newValue) {
              $scope.queryStudentInfo();
            }
          });

          $scope.handleBranchChange = function (branch) {
            $scope.apply.branchEmail = branch.email
          }
          $scope.onUpdateSched = function (schedule) {
            $scope.apply.schedule = schedule;
          }
          // 添加课程规划
          $scope.addReq = function () {
            openReqModal($scope.apply.id, $scope.apply.applyType).result.then(function (req) {
              $scope.apply.stuReqList.push(req)
              $scope.apply.stuReqList = _.sortBy($scope.apply.stuReqList, 'seq')
              $scope.calcReqSum()
            }, function () { })
          }
          // 编辑课程规划
          $scope.editReq = function (req) {
            openReqModal($scope.apply.id, $scope.apply.applyType, req, 'edit').result.then(function (reqRes) {
              req = _.assign(req, reqRes)
              $scope.apply.stuReqList = _.sortBy($scope.apply.stuReqList, 'seq')
              $scope.calcReqSum()
            }, function () { })
          }
          // 删除课程规划
          $scope.delReq = function (req) {
            $uibMsgbox.confirm('确定删除该课程规划？', function (res) {
              if (res == 'yes') {
                erp_stuCourseSchedApplyYdyService.delReq({
                  id: req.id
                }, function (resp) {
                  if (!resp.error) {
                    $scope.apply.stuReqList.splice(
                      _.findIndex($scope.apply.stuReqList, req), 1
                    )
                    $scope.calcReqSum()
                  } else {
                    $uibMsgbox.error(resp.message)
                  }
                })
              }
            })
          }

          // 打开课程规划对话框
          function openReqModal(applyId, applyType, req, optype) {
            var reqCopy = _.cloneDeep(req)
            return $uibModal.open({
              templateUrl: 'erp_courseSchedApplyReqModal.html',
              resolve: {
                applyId: function () {
                  return applyId
                },
                applyType: function () {
                  return applyType
                },
                req: function () {
                  return reqCopy || {}
                },
                optype: function () {
                  return optype || 'add'
                }
              },
              controller: [
                '$scope',
                'erp_stuCourseSchedApplyYdyService',
                'applyId',
                'applyType',
                'req',
                'optype',
                function (
                  $scope,
                  erp_stuCourseSchedApplyYdyService,
                  applyId,
                  applyType,
                  req,
                  optype
                ) {
                  $scope.req = req || {}
                  if (optype == 'add') {
                    $scope.req.seq = $scope.req.seq || 1
                  }
                  $scope.saveReq = function () {
                    $scope.req.applyId = applyId;
                    $scope.req.subjectId = parseInt($scope.req.subjectId, 10);
                    $scope.req.teachGroupId = parseInt($scope.req.teachGroupId, 10);                    
                    $scope.req.requirement = parseInt($scope.req.requirement, 10);
                    $scope.req.seq = parseInt($scope.req.seq, 10);
                    $scope.req.applyType = applyType;
                    if (!$scope.req.subjectId) {
                      return $uibMsgbox.warn('请选择科目！')
                    }
                    if (!$scope.req.teachGroupId) {
                      return $uibMsgbox.warn('请选择教研组！')
                    }
                    if (!$scope.req.requirement || isNaN($scope.req.requirement)) {
                      return $uibMsgbox.warn('请输入每周上课节数!')
                    }
                    if (!$scope.req.seq || isNaN($scope.req.seq)) {
                      return $uibMsgbox.warn('请输入排序序号')
                    }
                    var waitingModal = $uibMsgbox.waiting('保存中，请稍候...')
                    if (optype == 'add') {
                      erp_stuCourseSchedApplyYdyService.postReq($scope.req)
                        .$promise.then(function (resp) {
                          waitingModal.close()
                          if (!resp.error) {
                            $scope.req.id = resp.data.id
                            $scope.$close($scope.req)
                          } else {
                            $uibMsgbox.error(resp.message)
                          }
                        }, function (resp) {
                          waitingModal.close()
                          $uibMsgbox.error('数据请求失败，请联系管理员！' + resp.message)
                        })
                    } else {
                      erp_stuCourseSchedApplyYdyService.putReq($scope.req)
                        .$promise.then(function (resp) {
                          waitingModal.close()
                          if (!resp.error) {
                            $scope.$close($scope.req)
                          } else {
                            $uibMsgbox.error(resp.message)
                          }
                        }, function () {
                          waitingModal.close()
                          $uibMsgbox.error('数据请求失败，请联系管理员！' + resp.message)
                        })
                    }
                  }

                  // 获取教研组
                  $scope.teachGroupList = [];
                  $scope.getGroup = function () {
                    erp_teacherGroupService.queryList({}, function (resp) {
                      if (!resp.error) {
                        $scope.teachGroupList = resp.data;
                      } else {
                        $uibMsgbox.error(resp.message)
                      }
                    })
                  }
                  $scope.getGroup();
                }
              ]
            })
          }

          $ctrl.$onInit = function () {
            $scope.$watch(function() {return $ctrl.apply}, function () {
              $scope.apply = $ctrl.apply;
              // 等待渲染完成，nexttick的时候再渲染每周总节数
              setTimeout(function () {
                $scope.calcReqSum();
              }, 0)
            });
          };
          $ctrl.$onChanges = function (changesObj) {
          };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage:师生匹配结果
  // 
  // Creates:yans@histudy.com
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedBaseInfoResult', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedBaseInfoResult.html',
      controllerAs: '$ctrl',
      bindings: {
        apply: '=',
        readOnly: '<?'
      },
      controller: [
      '$scope', 
      '$uibModal', 
      '$uibMsgbox', 
      '$state',
      '$stateParams',
      'erp_studentsService',
      'erp_stuCourseSchedApplyYdyService',
      function ($scope,
        $uibModal,
        $uibMsgbox, 
        $state,
        $stateParams,
        erp_studentsService, 
        erp_stuCourseSchedApplyYdyService) {
        var $ctrl = this;
        $scope.apply = $ctrl.apply;

        $scope.SchedCancle = function(schedPlanItem){
          return $uibModal.open({
            templateUrl: 'schedResultDialog.html',
            resolve: {
              schedPlanItem: function () {
                return schedPlanItem
              }
            },
            controller: [
              '$scope',
              'erp_stuCourseSchedApplyYdyService',
              'schedPlanItem',
              function (
                $scope,
                erp_stuCourseSchedApplyYdyService,
                schedPlanItem
              ) {
                $scope.schedPlan = {
                  id: schedPlanItem.id,
                  applyId : schedPlanItem.applyId,
                  status: 4,
                  remark:null
                }

                $scope.onOk = function () {
                  if (!$scope.schedPlan.remark) {
                    return $uibMsgbox.warn('请填写备注！')
                  }
                  var waitingModal = $uibMsgbox.waiting('保存中，请稍候...')
                 
                  erp_stuCourseSchedApplyYdyService.putApplyPlan($scope.schedPlan, function (resp) {
                    waitingModal.close()
                    if (!resp.error) {
                      schedPlanItem.status = 4;
                      schedPlanItem.statusName = '已取消';
                      schedPlanItem.remark = $scope.schedPlan.remark;
                      $uibMsgbox.success('操作成功！', function() {
                        $scope.$close();
                      });
                    } else {
                      $uibMsgbox.error(resp.message)
                    }
                  })
                  
                }
              }
            ]
          })
        }

          $ctrl.$onInit = function () {
            $scope.$watch(function() {return $ctrl.apply}, function () {
              $scope.apply = $ctrl.apply;
            })
          };
          $ctrl.$onChanges = function (changesObj) {
          };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage:2017.12.1
  // 一对一师生匹配的匹配操作页面
  // Creates:yans@histudy.com
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedByMatch', {
      templateUrl: 'templates/components/erp/course/stuSchedByMatch.html',
      controllerAs: '$ctrl',
      bindings: {
        matchList: '<?',
        onMatchSuccess: '&?',
        apply: '<?'
      },
      controller: [
        '$scope',
        '$log',
        '$state',
        '$stateParams',
        '$uibModal',
        '$uibMsgbox',
        'erp_stuCourseSchedApplyYdyService',
        'erp_tpScheduleTimeService',
        'erp_teacherGroupService',
        'erp_teacherService',
        function (
          $scope,
          $log,
          $state,
          $stateParams,
          $uibModal,
          $uibMsgbox,
          erp_stuCourseSchedApplyYdyService,
          erp_tpScheduleTimeService,
          erp_teacherGroupService,
          erp_teacherService
        ) {
          var $ctrl = this;
          $scope.detail=$ctrl.matchList;
          $scope.teachGroupList = [];
          $scope.moment = moment;
          $scope.tpScheduleTimeList = [];
          $scope.teacher = $ctrl.matchList;
          // 匹配取消
          $scope.onCancle = function (period) {
            $scope.onTpScheduleTimeChange({});
            $scope.detail.courseDate = null;
            $scope.detail.teacher_name = null;
            $scope.detail.teacherEncoding = null;
            $scope.detail.remark = null;
          }
          // 匹配确认验证
          $scope.valid = function () {
            if (!$scope.detail.subjectName) {
              $uibMsgbox.error('请选择科目！');
              return false;
            }
            if (!$scope.detail.teach_group_id) {
              $uibMsgbox.error('请选择教研组！');
              return false;
            }
            if (!$scope.detail.courseDate) {
              $uibMsgbox.error('请选择上课日期！');
              return false;
            }
            if (!$scope.detail.startTime) {
              $uibMsgbox.error('请选择上课时间！');
              return false;
            }
            if (!$scope.detail.endTime) {
              $uibMsgbox.error('请选择下课时间！');
              return false;
            }
            if (!$scope.detail.teacher_name && !$scope.detail.teacherEncoding) {
              $uibMsgbox.error('请选择上课的老师');
              return false;
            }
            // if (!$scope.detail.remark) {
            //   $uibMsgbox.error('请输入备注！');
            //   return false;
            // }
            if (moment($scope.detail.startTime, 'HH:mm') - moment($scope.detail.endTime, 'HH:mm') > 0) {
              $uibMsgbox.error('下课时间不能早于上课时间！')
              return false;
            }
            return true;
          }

          // 匹配确认
          $scope.onOk = function () {
            if($scope.detail.courseDate){
              $scope.detail.weekday = moment($scope.detail.courseDate, 'YYYY-MM-DD').format('dddd')              
            }
            if (!$scope.valid()) {
              return false;
            }
            var waitingModal = $uibMsgbox.waiting('保存中，请稍候...')
            erp_stuCourseSchedApplyYdyService.putApplyPlan(
              _.pick($scope.detail, ['id', 'applyId', 'courseDate', 'startTime',
                'endTime', 'weekday', 'teacherId', 'teacherName', 'subjectId', 'subjectName',
                'remark', 'status', 'courseSpId'])
            ).$promise.then(function (resp) {
              waitingModal.close();
              if (!resp.error) {
                if (typeof $ctrl.onMatchSuccess == 'function') {
                  $ctrl.onMatchSuccess()
                }
              } else {
                $uibMsgbox.error(resp.message)
              }
            })
          }
          // 获取教研组
          $scope.getGroup = function () {
            erp_teacherGroupService.queryList({}, function (resp) {
              if (!resp.error) {
                $scope.teachGroupList = resp.data;
              } else {
                $uibMsgbox.error(resp.message)
              }
            })
          }
          $scope.getGroup();

          // 获取时间档期列表
          $scope.getTpScheduleTimeList = function () {
            erp_tpScheduleTimeService.queryList({}, function (resp) {
              if (!resp.error) {
                _.forEach(resp.data, function (item) {
                  item.checked = false
                })
                $scope.tpScheduleTimeList = resp.data
              } else {
                $uibMsgbox.error(resp.message)
              }
            })
          }
          // 时间档期切换事件处理
          $scope.onTpScheduleTimeChange = function (period) {
            _.forEach($scope.tpScheduleTimeList, function (period) {
              period.checked = false
            })
            $scope.detail.period = period
            $scope.detail.startTime = period.startTime
            $scope.detail.endTime = period.endTime
            $scope.detail.defaultDuration = moment(period.endTime, 'HH:mm')
              - moment(period.startTime, 'HH:mm')
            period.checked = true
          }
          $scope.getTpScheduleTimeList();
          // 选择老师
          $scope.onSearchTearcher = function (search_info) {
            return erp_teacherService.page({
              search_info: search_info,
              subjectId: $scope.detail.subjectId
            }).$promise;
          }
          $scope.onSelectTeacher = function (teacher) {
            $scope.detail.teacherName = teacher.teacher_name;
            $scope.detail.teacherEncoding = teacher.encoding;
            $scope.detail.teacherId = teacher.id;
          }

          $scope.setWeekday = function() {
            if ($scope.detail.courseDate) {
              $scope.detail.weekday = "星期"+"日一二三四五六".charAt(new Date($scope.detail.courseDate).getDay());
            }
          }

          $scope.viewSchedule = function (group) {
            if (!group.subjectName) {
              $uibMsgbox.error('科目不能为空，请选择初步排课意向！');
              return false;
            }else if(!group.teach_group_id){
              $uibMsgbox.error('请选择教研组！');
              return false;
            }
            else{
              window.open('?groupId='+group.teach_group_id+'#/teachers/courseSchedule');              
            }
          }
          //查询老师
          $scope.detail.seg=[];
          $scope.searchSchedule = function(teacher){
            $scope.detail.seg = [$scope.detail.courseDate,$scope.detail.startTime,$scope.detail.endTime];
          };
          $ctrl.$onInit = function () {
            $scope.$watch(function () { return $ctrl.matchList }, function () {
              $scope.detail = _.cloneDeep($ctrl.matchList);
              $scope.onTpScheduleTimeChange({})
              $scope.onSearchTearcher();
            })
            
            $scope.$watch(function () { return $ctrl.apply }, function () {
              $scope.apply = $ctrl.apply;
            })

            $scope.$watch(function () { return $scope.detail.courseDate }, function () {
              if($scope.detail.courseDate){
                $scope.setWeekday();
              }else{
                $scope.detail.weekday = '';
              }
            })
            
          };
          $ctrl.$onChanges = function (changesObj) {
          };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function() {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedByPeriod', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedByPeriod.html',
      controllerAs: '$ctrl',
      bindings: {
        schedConfig: '=',
      },
      controller: ['$scope',
        function ($scope) {
          var $ctrl = this;
          console.log('klcErpCourseStuSchedByPeriod');

          ////////////////

          $ctrl.$onInit = function() { };
          $ctrl.$onChanges = function(changesObj) { };
          $ctrl.$onDestroy = function() { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedByTime', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedByTime.html',
      controllerAs: '$ctrl',
      bindings: {
        orderList: '<?',
        applyItem: '<?',
        studentId: '<',
        studentCounselors: '<?',
        onSchedSuccess: '&?'
      },
      controller: [
        '$scope',
        '$uibModal',
        '$uibMsgbox', 
        'erp_tpScheduleTimeService', 
        'erp_studentCourseSchedulingService',
        function (
          $scope,
          $uibModal,
          $uibMsgbox,
          erp_tpScheduleTimeService,
          erp_studentCourseSchedulingService
        ) {
          var $ctrl = this;
          $scope.apply = {};
          $scope.moment = moment;
          // 时间档期列表
          $scope.tpScheduleTimeList = []
          $scope.checkedDays = [];
          $scope.schedule_type = 'time';
          $scope.schedule = {
            applyId: null,
            schedule_type: 'time',
            subject: null,
            subjectId: null,
            teacher: null,
            period: null,
            startTime: null,
            endTime: null,
            defaultDuration: 0
          }

          $scope.onCheckDays = function (days) {
            $scope.checkedDays = days
          }

          $scope.deleteCheckDay = function (day) {
              var idx = _.findIndex($scope.checkedDays, {key: day.key})
              $scope.checkedDays.splice(idx, 1)
          }

          // 获取时间档期列表
          $scope.getTpScheduleTimeList = function () {
            erp_tpScheduleTimeService.queryList({}, function (resp) {
              if (!resp.error) {
                _.forEach(resp.data, function (item) {
                  item.checked = false
                })
                $scope.tpScheduleTimeList = resp.data
              } else {
                $uibMsgbox.error(resp.message)
              }
            })
          }

          // 时间档期切换事件处理
          $scope.onTpScheduleTimeChange = function (period) {
            _.forEach($scope.tpScheduleTimeList, function (period) {
              period.checked = false
            })
            $scope.schedule.period = period
            $scope.schedule.startTime = period.startTime
            $scope.schedule.endTime = period.endTime
            $scope.schedule.defaultDuration = moment(period.endTime, 'HH:mm')
              - moment(period.startTime, 'HH:mm')
            period.checked = true
          }

          // 监听排课开始时间，改变时，结束时间也相应改变
          $scope.$watch('schedule.startTime', function (newValue, oldValue) {
            $scope.schedule.endTime = moment(moment(newValue, 'HH:mm')
              + $scope.schedule.defaultDuration).format('HH:mm')
          })

          // 选择老师事件处理
          $scope.onSelectTeacher = function (teacher) {
            $scope.schedule.teacher = _.cloneDeep(teacher)
          }
          // 获取已选择的报班单
          function getSelectedCourseList(courseList) {
            var courseIdList = [];
            _.forEach(courseList, function (course) {
              if (course.checked) {
                courseIdList.push(course.id);
              }
            })
            return courseIdList.join(',');
          }

          function validAddScheduleByTime() {
            if (getSelectedCourseList($scope.orderList).length <= 0) {
              $uibMsgbox.error('请先选择报班单！')
              return false
            }
            if (!$scope.schedule.startTime) {
              $uibMsgbox.error('请选择上课时间')
              return false
            }
            if (!$scope.schedule.endTime) {
              $uibMsgbox.error('请选择下课时间')
              return false
            }
            if (moment($scope.schedule.startTime, 'HH:mm') - moment($scope.schedule.endTime, 'HH:mm') > 0) {
              $uibMsgbox.error('下课时间不能早于上课时间！')
              return false;
            }
            if (!$scope.schedule.subjectId) {
              $uibMsgbox.error('请选择科目')
              return false
            }
            if (!$scope.schedule.teacher) {
              $uibMsgbox.error('请选择老师')
              return false
            }
            if (!_.isArray($scope.checkedDays) || $scope.checkedDays.length <= 0) {
              $uibMsgbox.error('请至少选择一个日期')
              return false
            }
            return true
          }

          // 检测课程是否冲突
          function queryConflictScheduling(
            studentId,
            startTime,
            endTime,
            teacherId,
            checkedDays,
            callback) {
            var waitingModal = $uibMsgbox.waiting('排课校验中，请稍候...')
            var schedulingArry = []
            _.forEach(checkedDays, function (courseDay) {
              schedulingArry.push({
                student_id: studentId,
                start_time: startTime,
                end_time: endTime,
                teacher_id: teacherId,
                course_date: courseDay.key
              })
            })
            return erp_studentCourseSchedulingService.queryConflictScheduling(schedulingArry)
              .$promise.then(function (resp) {
                waitingModal.close()
                if (!resp.error) {
                  callback(resp)
                } else {
                  $uibMsgbox.error(resp.message)
                }
              }, function (resp) {
                $uibMsgbox.error(resp.message)
              });
          }
          $scope.handleAddSched = function () {
            if (!validAddScheduleByTime()) {
              return false;
            }
            queryConflictScheduling(
              $ctrl.studentId,
              $scope.schedule.startTime,
              $scope.schedule.endTime,
              $scope.schedule.teacher.id,
              $scope.checkedDays,
              function (resp) {
                $scope.conflictObject = resp.data
                $scope.conflictList = []
                _.forIn(resp.data, function (value, key) {
                  $scope.conflictList.push(value[0])
                })
                _.forEach($scope.checkedDays, function (day) {
                  if (!!$scope.conflictObject[day.key]) {
                    day.cls = "danger"
                  }
                })
                $scope.conflictList = _.orderBy($scope.conflictList, 'course_date')
                var courseIdListStr = getSelectedCourseList($scope.orderList);
                $uibModal.open({
                  backdrop: false,
                  templateUrl: 'newScheduleListByDate.html',
                  size: 'xlg',
                  scope: $scope,
                  controller: ['$scope', function ($scope) {
                    $scope.onOk = function () {
                      if ($scope.checkedDays.length <= 0) {
                        return $uibMsgbox.error('排课列表为空，请选择排课日期！', function () {
                          $scope.$dismiss();
                        })
                      }
                      var scheduleList = []
                      _.forEach($scope.checkedDays, function (day) {
                        scheduleList.push({
                          orderCourseIds: courseIdListStr,
                          scheduleType: "time",
                          apply_id: $scope.schedule.applyId,
                          student_id: $ctrl.studentId,
                          start_time: $scope.schedule.startTime,
                          end_time: $scope.schedule.endTime,
                          startDate: day.value,
                          subject_id: $scope.schedule.subjectId,
                          teacher_id: $scope.schedule.teacher.id
                        })
                      })
                      var waitingModal = $uibMsgbox.waiting('排课中，请稍候...')
                      erp_studentCourseSchedulingService.addYdyOrderCourseSchedulingList(
                        scheduleList, function (resp) {
                          waitingModal.close();
                          if (!resp.error) {
                            if (!_.isArray($scope.addedScheduleList)) {
                              $scope.addedScheduleList = []
                            }
                            _.forEach(resp.data, function (item) {
                              $scope.addedScheduleList.push(item)
                            })
                            $uibMsgbox.success(resp.message || '添加排课成功！', function () {
                              $scope.$close();
                            });
                          } else {
                            $uibMsgbox.error(resp.message);
                          }
                        });
                    }
                  }]
                }).result.then(function () {
                  $scope.checkedDays.splice(0, $scope.checkedDays.length)
                  $scope.$broadcast('clearCheckedMultiDate');
                  $scope.schedule.period = null
                  $scope.schedule.startTime = ''
                  $scope.schedule.endTime = ''
                  $ctrl.onSchedSuccess();
                })
              }
            )
          }

          $scope.getTpScheduleTimeList();

          function queryIndexCounselors() {
            erp_studentIndexCounselorsService.query({
              studentId: $scope.studentId
            }).$promise.then(function (resp) {
              if (!resp.error) {
                $scope.studentIndexCounselors = resp.data
              } else {
                $uibMsgbox.error(resp.message)
              }
            }, function (resp) {
              $uibMsgbox.error(resp.message)
            });
          }
          ////////////////
          // 获取时间档期

          $ctrl.$onInit = function () {
            // 监听初步排课计划
            $scope.$watch(function () { return $ctrl.applyItem }, function () {
              $scope.applyItem = _.cloneDeep($ctrl.applyItem);
              $scope.schedule.teacher = {
                id: $scope.applyItem.teacherId,
                teacher_name: $scope.applyItem.teacherName,
                encoding: $scope.applyItem.teacherEncoding
              }
              $scope.schedule.applyId = $scope.applyItem.applyId;
              
              $scope.schedule.defaultDuration = moment($scope.applyItem.endTime, 'HH:mm')
                - moment($scope.applyItem.startTime, 'HH:mm')
              $scope.schedule.startTime = $scope.applyItem.startTime;
              $scope.schedule.endTime = $scope.applyItem.endTime;
              $scope.schedule.subjectId = $scope.applyItem.subjectId;
            })

            // 监听报班单列表
            $scope.$watch(function () { return $ctrl.orderList }, function () {
              $scope.orderList = _.cloneDeep($ctrl.orderList);
            })
          };
          $ctrl.$onChanges = function (changesObj) { };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedPlanList', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedPlanList.html',
      controllerAs: '$ctrl',
      bindings: {
        applyId: '=',
        showOperatorBtn: '=?',
        onItemClick: '&?'
      },
      controller: ['$scope', '$uibMsgbox', 'erp_stuCourseSchedApplyYdyService',
        function ($scope, $uibMsgbox, erp_stuCourseSchedApplyYdyService) {
          var $ctrl = this;
          $scope.applyPlanList = [];



          // 获取初步排课意向表
          $scope.getApplyPlanList = function (applyId) {
            applyId = applyId || $scope.applyId;
            return erp_stuCourseSchedApplyYdyService.getApplyPlanList({
              applyId: applyId
            }).$promise.then(function (resp) {
              if (!resp.error) {
                $scope.applyPlanList = resp.data
              } else {
                $uibMsgbox.error(resp.message)
              }
            }, function (resp) { })
          }


          $scope.onItemClick = function (item) {
            _.forEach($scope.applyPlanList, function (apply) {
              apply.checked = apply.id === item.id
            })

            if (typeof $ctrl.onItemClick === 'function') {
              $ctrl.onItemClick({
                item: item
              })
            }
          }
          ////////////////

          $ctrl.$onInit = function () {
            $scope.$watch(function () { return $ctrl.applyId }, function () {
              if ($ctrl.applyId) {
                $scope.getApplyPlanList($ctrl.applyId);
              }
            })
          };
          $ctrl.$onChanges = function (changesObj) { };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedProcess', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedProcess.html',
      controllerAs: '$ctrl',
      bindings: {
        apply: '<',
        optype: '<',
        onGoBack: '&'
      },
      controller: [
        '$scope',
        '$uibMsgbox',
        'erp_stuCourseSchedApplyYdyService',
        'erp_studentCourseSchedulingService',
        function (
          $scope,
          $uibMsgbox,
          erp_stuCourseSchedApplyYdyService,
          erp_studentCourseSchedulingService
        ) {
          var $ctrl = this;

          // 1对1排课申请单详情
          $scope.apply = {};
          $scope.moment = moment;
          // 已选择的学员报班单
          $scope.checkedOrders = [];
          $scope.checkApplyPlanItem = {};
          $scope.studentCounselors = {};
          $scope.scheduledList = []
          // 获取订单详情
          $scope.getApplyDetail = function (applyId) {
            erp_stuCourseSchedApplyYdyService.getDetail({
              id: applyId
            }, function (resp) {
              if (!resp.error) {
                if (!resp.data) {
                  return
                }
                $scope.apply = resp.data
              } else {
                $uibMsgbox.error(resp.message)
              }
            })
          }

          $scope.onSchedSuccess = function () {
            $scope.$broadcast('getOrderList');
            $scope.getSchedListByApplyId();
          }

          $scope.getSchedListByApplyId = function () {
            erp_studentCourseSchedulingService.get({
              apply_id: $scope.apply.id
            }).$promise.then(function (resp) {
              if (!resp.error) {
                $scope.scheduledList = resp.data;
              } else {
                $uibMsgbox.error(resp.message);
              }
            })
          }

          $scope.hanldeSchedPlanListClick = function (item) {
            $scope.checkApplyPlanItem = item
          }

          ////////////////

          $ctrl.$onInit = function () {
            $scope.$watch(function () { return $ctrl.apply }, function () {
              $scope.apply = $ctrl.apply;
              $scope.studentId = $ctrl.apply.studentId;
              if ($ctrl.apply.id) {
                $scope.getApplyDetail($ctrl.apply.id);
                $scope.getSchedListByApplyId()
              }
              $scope.studentCounselors = _.pick($scope.apply, [
                'counselor',
                'counselorId',
                'courseAdmin',
                'courseAdminId'
              ])
            })

            $scope.$watch(function () { return $ctrl.optype; }, function () {
              $scope.optype = $ctrl.optype;
            })
          };

          $ctrl.$onChanges = function (changesObj) { };
          $ctrl.$onDestroy = function () { };
        }
      ]
    });

})();
(function() {
  'use strict';

  // Usage:
  // 
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedResult', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/course/stuSchedResult.html',
      controllerAs: '$ctrl',
      bindings: {
        data: '=',
      },
      controller: ['$scope',
        function ($scope) {
          var $ctrl = this;
          console.log($ctrl.data)
          ////////////////

          $ctrl.$onInit = function() { };
          $ctrl.$onChanges = function(changesObj) { };
          $ctrl.$onDestroy = function() { };
        }
      ]
    });

})();
(function() {
  'use strict';

  // Usage: 学生档期表格
  // <sched-time-table time-list="stuSchedTimeListStr" read-only="true">
  // 数据格式
  /* [{startTime: '08:00', endTime: '10:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '10:15', endTime: '12:15', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '14:00', endTime: '16:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '16:15', endTime: '18:15', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
    {startTime: '19:00', endTime: '21:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']}]
  */
  // 
  // Creates:baiqb@klxuexi.org
  // 说明：组件均以Klc开头（klxuexi）
  // 

  angular
    .module('ework-ui')
    .component('klcErpCourseStuSchedTimeTable', {
      templateUrl:'templates/components/erp/course/stuSchedTimeTable.html',
      controllerAs: '$ctrl',
      bindings: {
        timeList: '=',
        readOnly: '<?',
        onUpdate: '&?'
      },
      controller: ['$scope',
        function (
          $scope
        ) {
          var $ctrl = this;
          $scope.readOnly = !!$ctrl.readOnly;
          $scope.stuSchedTimeList = [
            {startTime: '08:00', endTime: '10:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
            {startTime: '10:15', endTime: '12:15', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
            {startTime: '14:00', endTime: '16:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
            {startTime: '16:15', endTime: '18:15', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']},
            {startTime: '19:00', endTime: '21:00', idles: ['Y', 'Y', 'N', 'N', 'N', 'N', 'N']}
          ]
          $scope.reverseIdle = function(time, idx) {
            if ($scope.readOnly) {
              return
            }
            time.idles[idx] = time.idles[idx] == 'Y' ? 'N':'Y'
            if(_.isFunction($ctrl.onUpdate)) {
              $ctrl.onUpdate({
                schedule: JSON.stringify($scope.stuSchedTimeList)
              })
            }
          }
          $scope.setAllTimesIdle = function(index) {
            if ($scope.readOnly) {
              return
            }
            var allIdle = 'N'
            _.forEach($scope.stuSchedTimeList, function (item) {
              if (item.idles[index] == 'N') {
                allIdle = 'Y'
              }
            })
            _.forEach($scope.stuSchedTimeList, function (item) {
              item.idles[index] = allIdle
            })
            if(_.isFunction($ctrl.onUpdate)) {
              $ctrl.onUpdate({
                schedule: JSON.stringify($scope.stuSchedTimeList)
              })
            }
          }
          ////////////////
      
          $ctrl.$onInit = function() { 
            $scope.$watch(function(){return $ctrl.timeList}, function () {
              if ($ctrl.timeList) {
                $scope.stuSchedTimeList = JSON.parse($ctrl.timeList)
              }
            })
            if (typeof $ctrl.onUpdate == 'function') {
              $ctrl.onUpdate({
                schedule: JSON.stringify($scope.stuSchedTimeList)
              })
            }
          };
          $ctrl.$onChanges = function(changesObj) {
          };
          $ctrl.$onDestroy = function() { };
        }
      ],
    });
})();
(function() {
  'use strict';

  // Usage:
  // Output:
  //    - studentId[optional]   教师ID
  //    - onSelect[optional]   选中后回调事件
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcStudentTypeahead', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/student/typeahead.html',
      controllerAs: '$ctrl',
      transclude: true,
      bindings: {
        onChange: '@',
        studentId: '=?',
        studentName: '=?',
        onSelect: '&?'
      },
      controller: ['$scope', 'erp_studentsService',
        function ($scope, erp_studentsService) {
          var $ctrl = this;
          var _selected = null;
          $scope.student = null;
          if ($ctrl.studentId && $ctrl.studentName) {
            $scope.student = {
              id: $ctrl.studentId,
              fullName: $ctrl.studentName
            }
          }
          $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
              _selected = value;
            } else {
              return _selected;
            }
          };
          
          $scope.onTypeaheadSelect = function($item, $model, $label, $event) {
            $ctrl.studentId = $item.id
            setTimeout(() => {
              if (typeof $ctrl.onSelect == 'function') {
                $ctrl.onSelect({'$item': $item})
              }
            }, 0);
            return false
          }

          $scope.onClearTypeahead = function() {
            $ctrl.studentId = null;
            $ctrl.studentName = null;
            $scope.student = null;
            setTimeout(() => {
              if (typeof $ctrl.onSelect == 'function') {
                $ctrl.onSelect()
              }
            }, 0);
          }

          $scope.getStudent = function (value) {
            return erp_studentsService.query({
              pageSize: 30,
              currentPage: 1,
              need_contact: '1',
              searchInfo: value,
              searchType: 0
            }).$promise.then(function (resp) {
              _.forEach(resp.data, function (item) {
                item.fullName=item.student_name +
                  ' (' + (item.grade_name || '未知年级') + ') 【' +
                  (item.branch_name || '未知校区')  +'】'
              })
              return resp.data
            })
          }
          ////////////////

          $ctrl.$onInit = function() { };
          $ctrl.$onChanges = function(changesObj) { };
          $ctrl.$onDestroy = function() { };
        }
      ]
    });

})();
(function () {
  'use strict';

  // Usage:2017.01.03
  // 教室日历表
  // Creates:yans@histudy.com
  // 

  angular
    .module('ework-ui')
    .directive('onSizeChanged', ['$window', function ($window) {
      return {
        restrict: 'A',
        scope: { onSizeChanged: '&' },
        link: function (scope, $element, attr) {
          $window.addEventListener('resize', onWindowResize);
          function onWindowResize() {
            var expression = scope.onSizeChanged();
            expression();
          };
        }
      }
    }])
    .component('klcTeacherSchedule', {
      templateUrl: 'templates/components/erp/teacher/teacherSchedule.html',
      controllerAs: '$ctrl',
      transclude: true,
      bindings: {
        groupId: '=?',
        groupAll: '=?',
        searchSeg: '=?',

      },
      controller: [
        '$scope',
        '$log',
        '$state',
        '$uibMsgbox',
        '$uibModal',
        'erp_TeacherListService',
        function (
          $scope,
          $log,
          $state,
          $uibMsgbox,
          $uibModal,
          erp_TeacherListService) {
          var $ctrl = this;
          $scope.groupAll = $ctrl.groupAll;
          $scope.pageSize = 22;
          if( $scope.groupAll==true){
            $scope.pageSize = 2200;
          }
          $scope.courseAllList = [] //教师所有的课程列表
          $scope.courseList = []; //教师课程列表
          $scope.teacherDetail = []; //教师详情列表
          // $scope.paginationConf = {
          //   currentPage: 1, // 当前页
          //   totalItems: 0,
          //   itemsPerPage: 22,
          //   onChange: function () {
          //     $scope.queryTeacher(); //教师搜索
          //   }
          // };

          //悬浮框添加
          $("[data-toggle=tooltip]").tooltip({html : true });

          //获取课程
          $scope.getCourse = function () {
            erp_TeacherListService
              .queryTeacherSched({
                startDate: $scope.curFroms,
                endDate: $scope.curTos,
                teacherId: $scope.teacherDetail.id
              },
              function (resp) {
                if (!resp.error) {
                  var item =[];
                  var lists =[];
                  $scope.space = ($('.teacher-week_title').width() -60 )/ 7; //获取兼容不同屏幕的课程间距
                  _.forEach(resp.data, function (course) { 
                    var i = 0;
                    _.forEach(course.showList,function(arr){
                      arr.xAxis = arr.xAxis * $scope.space;
                      if(i==1){
                        arr.xAxis += 28; //同一时间段的第二个课程加一个间距
                      }
                      i = i + 1;
                      item.push(arr)
                    })
                    course.x = course.x * $scope.space +$scope.space -35; //更多标签的x轴
                    lists.push(course)
                  })

                  //同一天的课程错开
                  for (var i = 0; i < item.length; i = i + 1) {
                    for (var j = i + 1; j < item.length; j ++) {
                      var day = item[i].courseDate == item[j].courseDate;
                      var tag = item[i].yAxis + item[i].courseLen;
                      var jtag = item[j].yAxis + item[j].courseLen;
                      if (day) {
                        if ((item[j].yAxis < tag && item[j].yAxis > item[i].yAxis)
                          || (item[j].yAxis != item[i].yAxis &&jtag < tag && jtag > item[i].yAxis)) {
                          item[j].xAxis = item[j].xAxis + 28;
                        }
                      }
                    }
                  }
                  // console.log(resp.data)
                  $scope.courseList = item;
                  $scope.courseAllList = lists;
                }
              });
          }
          
          //屏幕自适应
          $scope.logResize = function () {
            $scope.getCourse();
            $scope.topCourse = $('.teacher-week_title').height();
            // console.log($scope.topCourse)
            // console.log($scope.space)
          };

          //搜索教师
          $scope.queryTeacher = function () {
            erp_TeacherListService
              .query({
                pageSize:  $scope.pageSize,
                teach_group_id: $scope.groupId,
                search_info: $scope.teacher_name,
                courseDate: $scope.courseDate,
                startTime: $scope.startTime,
                endTime: $scope.endTime
              },
              function (resp) {
                if (!resp.error) {
                  $scope.groupteacherList = resp.data;
                  if ($scope.groupId != null || $scope.groupAll== true) {
                    $scope.teacherListed = $scope.groupteacherList;
                    if($scope.groupAll == true){
                      $scope.teacherListed = $scope.groupteacherList.slice(0,13)
                    }
                    if ($scope.teacherListed == '') {
                      $scope.teacherDetail = [];
                    } else {
                      $scope.getTeacher($scope.teacherListed[0])
                      // $scope.teacherDetail = $scope.teacherListed[0];                       
                    }
                    $scope.getCourse();
                  }
                  $scope.getCourse();
                }
              });
          };
          
          //选择老师
          $scope.getTeacher = function (arr) {
            // $scope.curWeek();//切换老师重置时间到本周
            $scope.teacherDetail = arr;
            _.forEach($scope.teacherListed, function (apply) {
              apply.checked = apply.id === arr.id
            });
            $scope.getCourse();
          }

          //日历
          $scope.curFirst;
          $scope.weekList = [];
          $scope.timeList = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
          $scope.year = new Date().getFullYear();
          $scope.month = (new Date().getMonth() + 1);
          $scope.day = new Date().getDate();
          $scope.weekDay = [];
          $scope.formatDate = function (date) {
            $scope.year = date.getFullYear() + '年';
            $scope.month = (date.getMonth() + 1) + '月';
            $scope.day = date.getDate() + '日';
            $scope.weekDay = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'][date.getDay()];

            return $scope.weekDay + '(' + $scope.month + $scope.day + ')';
          };
          $scope.changeDate = function (date, n) {
            date.setDate(date.getDate() + n);
            return date;
          };

          $scope.getWeek = function (date) {
            var week = date.getDay() + 1;
            date = $scope.changeDate(date, week * -1);
            $scope.curFirst = new Date(date);
            var curdata = $scope.curFirst;
            $scope.curFrom = Format('yyyy年MM月dd日', curdata)
            $scope.curTo = Format('yyyy年MM月dd日', new Date(curdata.getTime() + 24 * 6 * 60 * 60 * 1000))
            $scope.curFroms = Format('yyyy-MM-dd', curdata)
            $scope.curTos = Format('yyyy-MM-dd', new Date(curdata.getTime() + 24 * 6 * 60 * 60 * 1000))
            for (var i = 0; i < 7; i++) {
              $scope.weekList[i] = $scope.formatDate(i == 0 ? date : $scope.changeDate(date, 1));
            }
            $scope.getCourse();
          };
          $scope.prevWeek = function () {
            $scope.getWeek($scope.changeDate($scope.curFirst, -5));
          };
          $scope.nextWeek = function () {
            $scope.getWeek($scope.changeDate($scope.curFirst, 10));
          };
          $scope.curWeek = function () {
            $scope.getWeek(new Date());
          };
          $scope.getWeek(new Date());

          $ctrl.$onInit = function () {
            $scope.$watch(function () { return $ctrl.groupId }, function () {
              $scope.groupId = $ctrl.groupId;
              $scope.queryTeacher()
            })
            $scope.$watch(function () { return $ctrl.searchSeg }, function () {
              var search_seg = $ctrl.searchSeg || [];
              $scope.courseDate = search_seg[0];
              $scope.startTime = search_seg[1];
              $scope.endTime = search_seg[2];

              $scope.queryTeacher()
            })
          };
          $ctrl.$onChanges = function (changesObj) {
          };
          $ctrl.$onDestroy = function () {
          };
        }
      ]
    });
})();
(function() {
  'use strict';

  // Usage:
  //  teacherType: 
  //      1 咨询师
  //      2 学管师
  // Input:
  //    - teacherType[require] 教师类型
  // Output:
  //    - teacherId[optional]   教师ID
  //    - onSelect[optional]   选中后回调事件
  // Creates:
  // 

  angular
    .module('ework-ui')
    .component('klcTeacherTypeahead', {
      //template:'htmlTemplate',
      templateUrl: 'templates/components/erp/teacher/typeahead.html',
      controllerAs: '$ctrl',
      transclude: true,
      bindings: {
        defaultName:'=?',
        teacherType: '<',
        teacherId: '=?',
        teacherName: '=?',
        employeeId: '=?',
        employeeName: '=?',
        encoding: '=?',
        onSelect: '&?'
      },
      controller: ['$scope', 'erp_employeeService', 'erp_TeacherSearchService',
        function ($scope, erp_employeeService, erp_TeacherSearchService) {
          var $ctrl = this;
          var _selected;
          
          $scope.teacher = null;
          
          $scope.teacherTypeNameMap = {
            1 : '咨询师',
            2 : '学管师',
            3: '教师',
            4: '员工'
          }
          
          $scope.teacherType = $ctrl.teacherType || 1

          $scope.onTypeaheadSelect = function($item, $model, $label, $event) {
            $ctrl.employeeId = $item.employee_id || $item.id
            $ctrl.teacherId = $item.id
            $ctrl.employeeName = $item.employee_name
            $ctrl.encoding = $item.encoding;
            if (typeof $ctrl.onSelect == 'function') {
              $ctrl.onSelect({'$item': $item})
            }
          }
          
          $scope.onClearTypeahead = function() {
            $ctrl.teacherId = null
            $ctrl.employeeId = null
            $ctrl.employeeName = null
            $ctrl.encoding = null
            $scope.teacher = null
          }

          $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
              _selected = value;
            } else {
              return _selected;
            }
          };

          // 查询咨询师或学管师
          function getCounselorOrManager (employee_name) {
            return erp_employeeService.query({
              currentPage: 1,
              pageSize: 30,
              counselor_type: $scope.teacherType,
              employee_name: employee_name
            }).$promise.then(function (resp) {
              if (!resp.error) {
                _.forEach(resp.data, function (item) {
                  item.fullName = item.employee_name + '【' +　item.branch_post_names + '】'
                })
                return resp.data
              }
              return []
            })
          }
          
          // 获取教师列表
          function getTeacher (searchString) {
            return erp_TeacherSearchService.query({
              currentPage: 1,
              pageSize: 30,
              search_info: searchString
            }).$promise.then(function(resp) {
              if (!resp.error) {
                _.forEach(resp.data, function (item) {
                  item.fullName = (item.teacher_name || '') +
                    '(' + (item.encoding || '暂无编码') + ')' +
                    '【' + (item.bu_name || item.city_name || '暂无地区/团队信息') + '】'
                })
                return resp.data
              } else {
                return []
              }
            })
          }

          $scope.getTeacher = function (searchString) {
            if ($scope.teacherType == 1 || $scope.teacherType == 2 || $scope.teacherType == 4) {
              return getCounselorOrManager(searchString)
            } else if ($scope.teacherType == 3) {
              return getTeacher(searchString)
            }
          }

          ////////////////
          $ctrl.$onInit = function() {
            if($ctrl.employeeName==null && $ctrl.teacherType == 2){
              $ctrl.employeeName=$ctrl.defaultName;
              getCounselorOrManager ($ctrl.employeeName)
            }

            $scope.$watch(function() {return $ctrl.teacherType}, function () {
              $scope.teacherType = $ctrl.teacherType
            })

            $scope.$watch(function() {
              return $ctrl.employeeName
            }, function () {
              if ($ctrl.employeeName || $ctrl.teacherName) {
                $scope.teacher = {
                  fullName: ($ctrl.employeeName || $ctrl.teacherName) +  ($ctrl.encoding ? ('(' + $ctrl.encoding + ')') : '')
                }
              }
            })
          };
          $ctrl.$onChanges = function(changesObj) {
          };
          $ctrl.$onDestroy = function() {
          };
        }
      ]
    });

})();