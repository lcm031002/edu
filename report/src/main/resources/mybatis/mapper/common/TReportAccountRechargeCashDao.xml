<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.report.framework.dao.TReportAccountRechargeCashDao">
	<select id="queryReport" parameterType="map"
		resultType="com.edu.report.model.TAccountRechargeCash">
		select * from(select t.id,
		t.task_flow,
		t.opt_encoding,
		t.calc_date,
		t.opt_type,
		t.opt_name,
		t.bu_id,
		t.bu_name,
		t.branch_id,
		t.branch_name,
		t.zhuanru,
		t.student_id,
		t.student_name,
		t.student_encoding,
		nvl(t.fee_amount,0) fee_amount ,
		nvl(t.pay_cash,0) pay_cash,
		nvl(t.pay_card,0) pay_card,
		nvl(t.pay_trans,0) pay_trans,
		t.qukuan,
		t.student_bankcard,
		t.company_bankcard,
		t.status,
		t.status_name,
		t.creatmaker,
		t.remark
		from t_account_recharge_cash t
		where t.bu_id = #{bu_id}
		<if test="branch_id != null and branch_id != -1">
			<![CDATA[ and t.branch_id = #{branch_id, jdbcType=NUMERIC} ]]>
		</if>
		 <if test="validBranchIds != null and validBranchIds !='' ">
			   and t.branch_id  in (${validBranchIds})
	     </if>
		<if test="start_date != null and start_date != ''">
			<![CDATA[ and t.calc_date >= #{start_date} ]]>
		</if>
		<if test="end_date != null and end_date != ''">
			<![CDATA[ and t.calc_date <= #{end_date} ]]>
		</if>
		<if test="end_date != null and end_date != ''">
			<![CDATA[ and t.calc_date <= #{end_date} ]]>
		</if>
		<if test="input_user_name != null and input_user_name != ''">
			<![CDATA[ and t.creatmaker like '%${input_user_name}%' ]]>
		</if>
		order by t.opt_encoding)
		union all
		select null id,
		null task_flow,
		null opt_encoding,
		'合计' calc_date,
		null opt_type,
		null opt_name,
		null bu_id,
		null bu_name,
		null branch_id,
		null branch_name,
		null zhuanru,
		null student_id,
		null student_name,
		null student_encoding,
		sum(nvl(fee_amount, 0)) fee_amount,
		sum(nvl(pay_cash, 0)) pay_cash,
		sum(nvl(pay_card, 0)) pay_card,
		sum(nvl(pay_trans, 0)) pay_trans,
		null qukuan,
		null student_bankcard,
		null company_bankcard,
		null status,
		null status_name,
		null creatmaker,
		to_char(sum(nvl(total, 0))) remark from(
		select  sum(nvl(fee_amount, 0)) fee_amount,
		sum(nvl(pay_cash, 0)) pay_cash,
		sum(nvl(pay_card, 0)) pay_card,
		sum(nvl(pay_trans, 0)) pay_trans,
		count(0) total
		from t_account_recharge_cash t
		where t.bu_id = #{bu_id}
		<if test="branch_id != null and branch_id != -1">
			<![CDATA[ and t.branch_id = #{branch_id, jdbcType=NUMERIC} ]]>
		</if>
		<if test="validBranchIds != null and validBranchIds !='' ">
			and t.branch_id  in (${validBranchIds})
		</if>
		<if test="start_date != null and start_date != ''">
			<![CDATA[ and t.calc_date >= #{start_date} ]]>
		</if>
		<if test="end_date != null and end_date != ''">
			<![CDATA[ and t.calc_date <= #{end_date} ]]>
		</if>
		<if test="end_date != null and end_date != ''">
			<![CDATA[ and t.calc_date <= #{end_date} ]]>
		</if>
		<if test="input_user_name != null and input_user_name != ''">
			<![CDATA[ and t.creatmaker like '%${input_user_name}%' ]]>
		</if>
		group by  t.calc_date,t.opt_encoding,fee_amount,pay_cash,pay_card,pay_trans)temp
	</select>
	
	<delete id="removeByTaskFlow" parameterType="map">
		delete from t_account_recharge_cash where task_flow = #{taskFlow}
	</delete>
	
	<insert id="addByTaskFlow" parameterType="map">
		insert into t_account_recharge_cash 
		(   
				  id,
				  opt_encoding,
				  calc_date,
				  opt_type,
				  opt_name,
				  bu_id,
				  bu_name,
				  branch_id,
				  branch_name,
				  zhuanru,
				  student_id,
				  student_encoding,
				  student_name,
				  fee_amount,
				  qukuan,
				  pay_cash,
				  pay_card,
				  pay_trans,
				  student_bankcard,
				  company_bankcard,
				  status,
				  status_name,
				  remark,
				  task_flow,
				  creatmaker
		)
		select SEQ_T_ACCOUNT_recharge_cash.Nextval,
		       d.encoding opt_encoding,
		       to_char(d.confirm_time,'yyyy-MM-dd') calc_date,
		       d.dynamic_type opt_type,
		       decode(d.dynamic_type,
		              1,
		              '充值',
		              2,
		              '转账',
		              3,
		              '理赔',
		              4,
		              '取款',
		              5,
		              '充值作废',
		              6,
		              '理赔作废',
		              7,
		              '取款作废',
		              8,
		              '一元转校',
		              9,
		              '一元结转',
		              -1,
		              '期初导入') opt_name,
		       d.bu_id,
		       bu.org_name bu_name,
		       d.branch_id,
		       branch.org_name branch_name,
		       b2.org_name zhuanru,
		       d.student_id,
		       stu.encoding student_encoding,
		       stu.student_name,
		       case
		         when d.dynamic_type in (5, 4) or
		              (chang.change_flag = 1 and d.dynamic_type = 2) then
		          d.money * -1
		         else
		          d.money
		       end fee_amount,
		       d.money_fee qukuan,
		       case
		         when d.dynamic_type in (5, 4) then
		          decode(d.pay_mode, 1, d.money) * -1
		         else
		          decode(d.pay_mode, 1, d.money)
		       end pay_cash,
		       case
		         when d.dynamic_type in (5, 4) then
		          decode(d.pay_mode, 2, d.money) * -1
		         else
		          decode(d.pay_mode, 2, d.money)
		       end pay_card,
		       case
		         when d.dynamic_type in (5, 4) then
		          decode(d.pay_mode, 3, d.money) * -1
		         else
		          decode(d.pay_mode, 3, d.money)
		       end pay_trans,
		       r.card_no student_bankcard,
		       acc.account_num company_bankcard,
		       d.status,
		       decode(d.status, 1, '待审批', 2, '未通过', 3, '生效', 4, '作废') status_name,
		       d.remark,
		       '${taskFlow}' as task_flow,
		        i.employee_name creatmaker
		  from t_account_dynamic d
		  left join tab_user_info ui on ui.id = d.input_user
      	  left join tab_employee_info i on ui.employee_id=i.id
		  left join t_account_change chang
		    on d.id = chang.dynamic_id
		  left join t_account ac
		    on ac.id = chang.account_id
		  left join t_account_recharge_info r
		    on d.id = r.dynamic_id
		  left join t_account_trans_course tatc
		    on d.id = tatc.dynamic_id
		   and d.dynamic_type = 8
		   and tatc.trans_type = 0
		  left join t_account ta
		    on ta.id = tatc.account_id
		  left join tab_organization_info b2
		    on ta.branch_id = b2.id
		  left join tab_organization_info branch
		    on d.branch_id = branch.id
		  join tab_organization_info bu
		    on d.bu_id = bu.id
		  join tab_student_info stu
		    on ac.student_id = stu.id
		  left join tab_data_company_account acc
		    on acc.id = r.company_account
		 where d.dynamic_type != -1
			and to_number(to_char(d.confirm_time,'yyyymmdd')) BETWEEN #{minOperateNo} AND #{maxOperateNo}
	</insert>
	
</mapper>