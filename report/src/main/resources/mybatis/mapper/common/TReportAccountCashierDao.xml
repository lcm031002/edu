<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.report.framework.dao.TReportAccountCashierDao">
	<select id="queryReport" parameterType="map"
		resultType="com.edu.report.model.TAccountCashier">
		select * from (select t.id,
		       t.task_flow,
		       t.city_id,
		       t.city_name,
		       t.bu_id,
		       t.bu_name,
		       t.branch_id,
		       t.branch_name,
		       t.opt_type,
		       t.opt_type_name,
		       t.opt_id,
		       t.opt_encoding,
		       t.student_id,
		       t.student_name,
		       t.student_encoding,
		       t.pay_amount,
		       t.pay_cash,
		       t.pay_card,
		       t.pay_trans,
		       t.pay_ebprice,
               t.pay_onlineprice,
		       t.pay_account,
		       t.input_user,
		       t.input_user_name,
		       t.input_time,
		       t.card_no,
		       t.company_names,
		       t.company_account,
		       t.remark,
		       t.status,
		       t.order_detail_id,
               t.eb_no
		from t_account_cashier t
		where t.bu_id = #{bu_id}
		<if test="branch_id != null and branch_id != -1">
			and t.branch_id = #{branch_id, jdbcType=NUMERIC}
		</if>
		<if test="validBranchIds != null and validBranchIds !='' ">
			   and t.branch_id in (${validBranchIds})
		 </if>
		<if test="start_date != null and start_date != ''">
			<![CDATA[ and t.input_time >= #{start_date} ]]>
		</if>
		<if test="end_date != null and end_date != ''">
			<![CDATA[ and t.input_time <= #{end_date} ]]>
		</if>	
		<if test="student_name != null and student_name != ''">
			<![CDATA[ and t.student_name like '%${student_name}%']]>
		</if>
		<if test="input_user_name != null and input_user_name != ''">
			<![CDATA[ and t.input_user_name like '%${input_user_name}%' ]]>
		</if>
		order by t.input_time,t.opt_encoding ) temp1
		union all
		select null id,
           null task_flow,
           null city_id,
           '合计' city_name,
           null  bu_id,
           null bu_name, 
           null branch_id,
           null branch_name,
           null opt_type,
           null opt_type_name,
           null opt_id,
           null opt_encoding,
           null student_id,
           null student_name,
           null student_encoding,
           sum(ifnull(pay_amount, 0)) pay_amount,
           sum(ifnull(pay_cash, 0)) pay_cash,
           sum(ifnull(pay_card, 0)) pay_card,
           sum(ifnull(pay_trans, 0)) pay_trans,
           sum(ifnull(pay_ebprice, 0)) pay_ebprice,
           sum(ifnull(pay_onlineprice, 0)) pay_onlineprice,
           sum(ifnull(pay_account, 0)) pay_account,
           null input_user,
           null input_user_name,
           null input_time,
           null card_no,
           null company_names,
           null company_account,
           sum(ifnull(total, 0)) remark,
           null status,
           null order_detail_id,
           null eb_no
      from (
          select
           sum(ifnull(t.pay_amount, 0)) pay_amount,
           t.pay_cash ,
           t.pay_card ,
           t.pay_trans ,
           t.pay_ebprice,
           t.pay_onlineprice,
           t.pay_account ,
           count(0) total
          from t_account_cashier t
          where t.bu_id = #{bu_id}
		<if test="branch_id != null and branch_id != -1">
			and t.branch_id = #{branch_id, jdbcType=NUMERIC}
		</if>
		<if test="validBranchIds != null and validBranchIds !='' ">
			   and t.branch_id in (${validBranchIds})
		 </if>
		<if test="start_date != null and start_date != ''">
			<![CDATA[ and t.input_time >= #{start_date} ]]>
		</if>
		<if test="end_date != null and end_date != ''">
			<![CDATA[ and t.input_time <= #{end_date} ]]>
		</if>		
		<if test="student_name != null and student_name != ''">
            <![CDATA[ and t.student_name like '%${student_name}%']]>
		</if>
		<if test="input_user_name != null and input_user_name != ''">
            <![CDATA[ and t.input_user_name like '%${input_user_name}%']]>
		</if>
          group by t.input_time,t.opt_encoding,t.pay_cash,t.pay_card,t.pay_trans,t.pay_ebprice,t.pay_onlineprice,t.pay_account
      ) temp2
	</select>
	
	<delete id="removeByTaskFlow"  parameterType="map">
		delete from t_account_cashier where task_flow = #{taskFlow}
	</delete>
	
	<insert id="addByTaskFlow" parameterType="map">
		insert into t_account_cashier 
		(
	          task_flow,
	          city_id,
	          city_name,
	          bu_id,
	          bu_name,
	          branch_id,
	          branch_name,
	          opt_type,
	          opt_type_name,
	          opt_id,
	          opt_encoding,
	          student_id,
	          student_name,
	          student_encoding,
	          pay_amount,
	          pay_cash,
	          pay_card,
	          pay_trans,
	          pay_ebPrice,
	          pay_onlinePrice,
	          pay_account,
	          input_user,
	          input_user_name,
	          input_time,
	          card_no,
	          company_names,
	          company_account,
	          remark,
	          status,
	          order_detail_id,
	          eb_no
		)
		 select '${taskFlow}' task_flow,
        tmp.*
    from (select t.city_id,
                 city.org_name city_name,
                 t.bu_id,
                 bu.org_name bu_name,
                 t.branch_id,
                 branch.org_name branch_name,
                 decode(t.dynamic_type, 1, 1, 4, 3, 5, 2, 7, 4) opt_type,
                 decode(t.dynamic_type,
                        1,
                        '充值',
                        4,
                        '取款',
                        5,
                        '充值作废',
                        7,
                        '取款作废') opt_type_name,
                 t.id opt_id,
                 t.encoding opt_encoding,
                 t.student_id,
                 stu.student_name,
                 stu.encoding student_encoding,
                 decode(t.pay_flag, 1, 1, 2, -1) * t.money pay_amount,
                 decode(t.pay_flag, 1, 1, 2, -1) *
                 decode(t.pay_mode, 1, t.money, 0) pay_cash,
                 decode(t.pay_flag, 1, 1, 2, -1) *
                 decode(t.pay_mode, 2, t.money, 0) pay_card,
                 decode(t.pay_flag, 1, 1, 2, -1) *
                 decode(t.pay_mode, 3, t.money, 0) pay_trans,
                 0 as pay_ebPrice,
                 0 as pay_onlinePrice,
                 0 as pay_account,
                 t.input_user,
                 e.employee_name input_user_name,
                 date_format(t.confirm_time, '%Y-%m-%d') input_time,
                 recharge.card_no card_no,
                 acc.account_name company_names,
                 acc.account_num company_account,
                 t.encoding || '操作ID' || t.id remark,
                 case
                   when tt.id is null then
                    ''
                   else
                    '作废'
                 end as status,
                 null order_detail_id,
                 null eb_no
            from t_account_dynamic t
            join tab_organization_info city
              on t.city_id = city.id
            left join tab_organization_info bu
              on t.bu_id = bu.id
            left join tab_organization_info branch
              on t.branch_id = branch.id
            left join t_account_recharge_info recharge
              on t.id = recharge.dynamic_id
            join tab_student_info stu
              on t.student_id = stu.id
            join tab_user_info u
              on t.input_user = u.id
            join tab_employee_info e
              on u.employee_id = e.id
            left join tab_data_company_account acc
              on acc.id = recharge.company_account
            left join t_account_dynamic tt
              on tt.DYNAMIC_ID = t.id
             and tt.STATUS = 3
             and tt.DYNAMIC_TYPE in (5, 6, 7)
           where t.dynamic_type in (1, 4, 5, 7)
             and t.status in (3, 4)
          union all
          select t.city_id,
                 t.city_name,
                 t.bu_id,
                 t.bu_name,
                 t.branch_id,
                 t.branch_name,
                 5 opt_type,
                 '报班' opt_type_name,
                 t.order_id opt_id,
                 t.order_encoding opt_encoding,
                 t.student_id,
                 t.student_name student_name,
                 t.student_encoding,
                 t.pay_cash + t.pay_card + t.pay_trans+ t.pay_ebPrice + t.pay_onlinePrice + t.pay_account0 pay_amount,
                 t.pay_cash,
                 t.pay_card,
                 t.pay_trans,
                 t.pay_ebPrice,
                 t.pay_onlinePrice,
                 t.pay_account0 as pay_account,
                 t.agent_id input_user,
                 t.agent_name input_user_name,
                 toi.APPROVE_TIME input_time,
                 top.card_no,
                 top.company_names,
                 top.company_account,
                 t.remark || t.order_id remark,
                 case
                   when toi.VALID_STATUS = 1 then
                    '有效'
                   else
                    '作废'
                 end as status,
                 null order_detail_id,
                 top.eb_no
            from vt_order t
            left join (select topc.order_id,
                              group_concat(acc.account_name) company_names,
                              group_concat(wm_concat(topcd.client_card_no) card_no,
                              group_concat(wm_concat(acc.account_num) company_account,
                              group_concat(wm_concat(topcd.eb_no) eb_no
                         from TAB_ORDER_PAY_COST topc
                         join TAB_ORDER_PAY_COST_DETAIL topcd
                           on topcd.ORDER_BUY_ID = topc.id
                         left join tab_data_company_account acc
                           on acc.id = topcd.COMPANY_CARD_ID
                        group by topc.order_id) top
              on top.order_id = t.order_id
            left join TAB_ORDER_INFO toi
              on toi.id = t.order_id
           where 1 = 1
          union all
          select city.id city_id,
                 city.org_name city_name,
                 bu.id bu_id,
                 bu.org_name bu_name,
                 branch.id branch_id,
                 branch.org_name branch_name,
                 decode(chg.change_type, 1, 3, 3, 6, 4, 5) opt_type,
                 decode(chg.change_type,
                        3,
                        '报班作废',
                        1,
                        '退费',
                        4,
                        '退费作废') opt_type_name,
                 chg.id opt_id,
                 chg.encoding opt_encoding,
                 i.id student_id,
                 i.student_name student_name,
                 i.encoding student_encoding,
                 decode(chg.change_type, 3, -1, 1) * nvl(fee.fee_amount, 0) pay_amount,
                 decode(chg.change_type, 3, -1, 1) * nvl(en.cash, 0) pay_cash,
                 decode(chg.change_type, 3, -1, 1) * nvl(en.card, 0) pay_card,
                 decode(chg.change_type, 3, -1, 1) * nvl(en.trans, 0) pay_trans,
                 decode(chg.change_type, 3, -1, 1) * nvl(en.ebPrice, 0) pay_ebPrice,
                 decode(chg.change_type, 3, -1, 1) * nvl(en.onlinePrice, 0) pay_onlinePrice,
                 decode(chg.change_type, 3, -1, 1) * nvl(en.account0, 0) as pay_account,
                 chg.apply_user input_user,
                 e.employee_name input_user_name,
                 date_format(chg.validate_time, '%Y-%m-%d') input_time,
                 top.card_no,
                 top.company_names,
                 top.company_account,
                 chg.remark || '' || fee.order_detail_id as remark,
                 '' as status,
                 fee.order_detail_id,
                 top.eb_no
            from t_order_change chg
            join (select fee.operate_no,
                         fd.order_detail_id,
                         fd.course_sum,
                         sum(fd.fee_amount) fee_amount
                    from t_fee fee
                    join t_fee_detail fd
                      on fee.id = fd.fee_id
                   where fee.fee_status = 1
                     and fee.operate_type = 5
                     and fee.fee_type in (54, 51, 53)
                   group by fee.operate_no, fd.order_detail_id, fd.course_sum) fee
              on chg.id = fee.operate_no
            join vt_encoder en
              on en.BUSI_TYPE = 5
             and en.busi_id = chg.id
            join t_order o
              on o.id = chg.order_id
            join tab_student_info i
              on o.student_id = i.id
            left join (select topc.order_id,
                              group_concat(acc.account_name) company_names,
                              group_concat(topcd.client_card_no) card_no,
                              group_concat(acc.account_num) company_account,
                              group_concat(topcd.eb_no) eb_no
                         from TAB_ORDER_PAY_COST topc
                         join TAB_ORDER_PAY_COST_DETAIL topcd
                           on topcd.ORDER_BUY_ID = topc.id
                         left join tab_data_company_account acc
                           on acc.id = topcd.COMPANY_CARD_ID
                        group by topc.order_id) top
              on top.order_id = chg.order_id
            join tab_user_info u
              on chg.apply_user = u.id
            join tab_employee_info e
              on u.employee_id = e.id
            join tab_organization_info branch
              on chg.branch_id = branch.id
            join tab_organization_info bu
              on branch.parent_id = bu.id
            join tab_organization_info city
              on bu.parent_id = city.id
           where chg.change_type in (1, 3, 4)
             and chg.change_status in (5, 7)
             ) tmp
		where date_format(input_time,'%Y%m%d') BETWEEN #{minOperateNo} AND #{maxOperateNo}
	</insert>

    <insert id="addByTaskFlowBatch1" parameterType="map">
         insert into t_account_cashier
		(
	          task_flow,
	          city_id,
	          city_name,
	          bu_id,
	          bu_name,
	          branch_id,
	          branch_name,
	          opt_type,
	          opt_type_name,
	          opt_id,
	          opt_encoding,
	          student_id,
	          student_name,
	          student_encoding,
	          pay_amount,
	          pay_cash,
	          pay_card,
	          pay_trans,
	          pay_ebPrice,
	          pay_onlinePrice,
	          pay_account,
	          input_user,
	          input_user_name,
	          input_time,
	          card_no,
	          company_names,
	          company_account,
	          remark,
	          status,
	          order_detail_id,
	          eb_no
		)
		select  '${taskFlow}' task_flow,
		         t.city_id,
                 city.org_name city_name,
                 t.bu_id,
                 bu.org_name bu_name,
                 t.branch_id,
                 branch.org_name branch_name,
                 case when t.dynamic_type =  1 then 1 when t.dynamic_type = 4 then  3 when t.dynamic_type = 5 then 2 when t.dynamic_type =7 then  4 end opt_type,
                 case when t.dynamic_type =  1 then '充值' when t.dynamic_type = 4 then '取款' when t.dynamic_type = 5 then '充值作废' when t.dynamic_type = 7 then '取款作废' end opt_type_name,
                 t.id opt_id,
                 t.encoding opt_encoding,
                 t.student_id,
                 stu.student_name,
                 stu.encoding student_encoding,
                 case when t.pay_flag = 1 then  1 when t.pay_flag = 2 then -1 end * t.money pay_amount,
                 case when t.pay_flag = 1 then  1 when t.pay_flag = 2 then -1 end *
                 case when t.pay_mode = 1 then  t.money else 0 end pay_cash,
                 case when t.pay_flag = 1 then  1 when t.pay_flag = 2 then -1 end *
                 case when t.pay_mode = 2 then  t.money else 0 end  pay_card,
                 case when t.pay_flag = 1 then  1 when t.pay_flag = 2 then -1 end *
                 case when t.pay_mode = 3 then  t.money else 0 end  pay_trans,
                 0 as pay_ebPrice,
                 0 as pay_onlinePrice,
                 0 as pay_account,
                 t.create_user,
                 e.employee_name input_user_name,
                 date_format(t.confirm_time, '%Y-%m-%d') input_time,
                 recharge.card_no card_no,
                 acc.account_name company_names,
                 acc.account_num company_account,
                 t.encoding || '操作ID' || t.id remark,
                 case
                   when tt.id is null then
                    ''
                   else
                    '作废'
                 end as status,
                 null order_detail_id,
                 null eb_no
            from t_account_dynamic t
            join tab_organization_info city
              on t.city_id = city.id
            left join tab_organization_info bu
              on t.bu_id = bu.id
            left join tab_organization_info branch
              on t.branch_id = branch.id
            left join t_account_recharge_info recharge
              on t.id = recharge.dynamic_id
            join tab_student_info stu
              on t.student_id = stu.id
            join tab_user_info u
              on t.create_user = u.id
            join tab_employee_info e
              on u.employee_id = e.id
            left join tab_data_company_account acc
              on acc.id = recharge.company_account
            left join t_account_dynamic tt
              on tt.DYNAMIC_ID = t.id
             and tt.STATUS = 3
             and tt.DYNAMIC_TYPE in (5, 6, 7)
           where t.dynamic_type in (1, 4, 5, 7)
             and t.status in (3, 4)
             and date_format(t.confirm_time,'%Y%m%d') BETWEEN #{minOperateNo} AND #{maxOperateNo}
    </insert>

    <insert id="addByTaskFlowBatch2" parameterType="map">
        insert into t_account_cashier
		(
	          task_flow,
	          city_id,
	          city_name,
	          bu_id,
	          bu_name,
	          branch_id,
	          branch_name,
	          opt_type,
	          opt_type_name,
	          opt_id,
	          opt_encoding,
	          student_id,
	          student_name,
	          student_encoding,
	          pay_amount,
	          pay_cash,
	          pay_card,
	          pay_trans,
	          pay_ebPrice,
	          pay_onlinePrice,
	          pay_account,
	          input_user,
	          input_user_name,
	          input_time,
	          card_no,
	          company_names,
	          company_account,
	          remark,
	          status,
	          order_detail_id,
	          eb_no
		)
       select '${taskFlow}' task_flow,
               t.city_id,
               t.city_name,
               t.bu_id,
               t.bu_name,
               t.branch_id,
               t.branch_name,
               5 opt_type,
               '报班' opt_type_name,
               t.order_id opt_id,
               t.order_encoding opt_encoding,
               t.student_id,
               t.student_name student_name,
               t.student_encoding,
               t.pay_amount,
               t.pay_cash,
               t.pay_card,
               t.pay_trans,
               t.pay_ebPrice,
               t.pay_onlinePrice,
               t.pay_account,
               t.input_user,
               t.input_user_name,
               t.input_time,
               top.card_no,
               top.company_names,
               top.company_account,
               t.remark,
               t.status,
               null order_detail_id,
               top.eb_no
          from (select t.city_id,
                       t.city_name,
                       t.bu_id,
                       t.bu_name,
                       t.branch_id,
                       t.branch_name,
                       t.order_id,
                       t.order_encoding,
                       t.student_id,
                       t.student_name student_name,
                       t.student_encoding,
                       t.pay_cash + t.pay_card + t.pay_trans + t.pay_ebPrice +
                       t.pay_onlinePrice + t.pay_account pay_amount,
                       t.pay_cash,
                       t.pay_card,
                       t.pay_trans,
                       t.pay_ebPrice,
                       t.pay_onlinePrice,
                       t.pay_account as pay_account,
                       t.agent_id input_user,
                       t.agent_name input_user_name,
                       toi.APPROVE_TIME input_time,
                       t.remark || t.order_id remark,
                       case
                         when toi.VALID_STATUS = 1 then
                          '有效'
                         else
                          '作废'
                       end as status
                  from vt_order t, tab_order_info toi
                 where t.order_id = toi.id
                   and date_format(toi.APPROVE_TIME,'%Y%m%d') BETWEEN #{minOperateNo} AND #{maxOperateNo} ) t
          left join (select topc.order_id,
                                    group_concat(acc.account_name) company_names,
                                    group_concat(topcd.client_card_no) card_no,
                                    group_concat(acc.account_num) company_account,
                                    group_concat(topcd.eb_no) eb_no
                               from TAB_ORDER_PAY_COST topc
                               join TAB_ORDER_PAY_COST_DETAIL topcd
                                 on topcd.ORDER_BUY_ID = topc.id
                               left join tab_data_company_account acc
                                 on acc.id = topcd.COMPANY_CARD_ID
                                 left join tab_order_info toi
                                 on toi.id = topc.order_id
                              where acc.account_name is not null
                              and date_format(toi.APPROVE_TIME,'%Y%m%d') BETWEEN #{minOperateNo} AND #{maxOperateNo}
                              group by topc.order_id) top
            on top.order_id = t.order_id
    </insert>

    <insert id="addByTaskFlowBatch3" parameterType="map">
        insert into t_account_cashier
		(
	          task_flow,
	          city_id,
	          city_name,
	          bu_id,
	          bu_name,
	          branch_id,
	          branch_name,
	          opt_type,
	          opt_type_name,
	          opt_id,
	          opt_encoding,
	          student_id,
	          student_name,
	          student_encoding,
	          pay_amount,
	          pay_cash,
	          pay_card,
	          pay_trans,
	          pay_ebPrice,
	          pay_onlinePrice,
	          pay_account,
	          input_user,
	          input_user_name,
	          input_time,
	          card_no,
	          company_names,
	          company_account,
	          remark,
	          status,
	          order_detail_id,
	          eb_no
		)
         select  '${taskFlow}' task_flow,
                 city.id city_id,
                 city.org_name city_name,
                 bu.id bu_id,
                 bu.org_name bu_name,
                 branch.id branch_id,
                 branch.org_name branch_name,
                 case when chg.change_type = 1 then 3  when chg.change_type = 3 then  6 when chg.change_type = 4 then  5 end opt_type,
                 case when chg.change_type = 3 then '报班作废' when chg.change_type = 1 then '退费' when chg.change_type = 4 then '退费作废' end opt_type_name,
                 chg.id opt_id,
                 chg.encoding opt_encoding,
                 i.id student_id,
                 i.student_name student_name,
                 i.encoding student_encoding,
                 case when chg.change_type = 3 then -1 else 1 end * ifnull(fee.fee_amount, 0) pay_amount,
                 case when chg.change_type = 3 then -1 else 1 end * ifnull(en.cash, 0) pay_cash,
                 case when chg.change_type = 3 then -1 else 1 end * ifnull(en.card, 0) pay_card,
                 case when chg.change_type = 3 then -1 else 1 end * ifnull(en.trans, 0) pay_trans,
                 case when chg.change_type = 3 then -1 else 1 end * ifnull(en.ebPrice, 0) pay_ebPrice,
                 case when chg.change_type = 3 then -1 else 1 end * ifnull(en.onlinePrice, 0) pay_onlinePrice,
                 case when chg.change_type = 3 then -1 else 1 end * ifnull(en.account, 0) as pay_account,
                 chg.apply_user input_user,
                 e.employee_name input_user_name,
                 date_format(chg.validate_time, '%Y-%m-%d') input_time,
                 top.card_no,
                 top.company_names,
                 top.company_account,
                 concat(chg.remark ,' - ',fee.order_detail_id) as remark,
                 '' as status,
                 fee.order_detail_id,
                 top.eb_no
            from t_order_change chg
            join (select fee.operate_no,
                         fd.order_detail_id,
                         fd.course_sum,
                         sum(fd.fee_amount) fee_amount
                    from t_fee fee
                    join t_fee_detail fd
                      on fee.id = fd.fee_id
                   where fee.fee_status = 1
                     and fee.operate_type = 5
                     and fee.fee_type in (54, 51, 53)
                   group by fee.operate_no, fd.order_detail_id, fd.course_sum) fee
              on chg.id = fee.operate_no
            join vt_encoder en
              on en.BUSI_TYPE = 5
             and en.busi_id = chg.id
            join t_order o
              on o.id = chg.order_id
            join tab_student_info i
              on o.student_id = i.id
            left join (select topc.order_id,
                              group_concat(acc.account_name) company_names,
                              group_concat(topcd.client_card_no) card_no,
                              group_concat(acc.account_num) company_account,
                              group_concat(topcd.eb_no) eb_no
                         from TAB_ORDER_PAY_COST topc
                         join TAB_ORDER_PAY_COST_DETAIL topcd
                           on topcd.ORDER_BUY_ID = topc.id
                         left join tab_data_company_account acc
                           on acc.id = topcd.COMPANY_CARD_ID
                        group by topc.order_id) top
              on top.order_id = chg.order_id
            join tab_user_info u
              on chg.apply_user = u.id
            join tab_employee_info e
              on u.employee_id = e.id
            join tab_organization_info branch
              on chg.branch_id = branch.id
            join tab_organization_info bu
              on branch.parent_id = bu.id
            join tab_organization_info city
              on bu.parent_id = city.id
           where chg.change_type in (1, 3, 4)
             and chg.change_status in (5, 7)
             and date_format(chg.validate_time, '%Y%m%d')  BETWEEN #{minOperateNo} AND #{maxOperateNo}
    </insert>

	
</mapper>