<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.erp.dao.StudentAccountDao">

	<select id="queryBuIdByProductLine" parameterType="java.util.HashMap" resultType="java.lang.Long">
		select t.parent_id 
		from tab_organization_info t 
		where t.id = #{branch_id,jdbcType=NUMERIC} 
		and t.product_line = #{productLineId,jdbcType=NUMERIC}
	</select>
	
	<!-- 学生账户充值  2014-11-10 -->
	<select id="queryAccount" parameterType="java.util.HashMap" resultType="HashMap">
		SELECT
		    sum(TA.FEE_AMOUNT) as fee_amount,
		    student_id,id
		FROM
		    T_ACCOUNT TA
		WHERE
		    TA.STUDENT_ID = #{studentId,jdbcType=NUMERIC}
	</select>
	
	<!-- 查询订单主表  -->
	<select id="queryOrder" parameterType="java.util.Map" resultType="java.util.Map">
				select t2.encoding,
		       t2.student_name,
		       t1.encoding order_code,
		       t3.org_name,
		       t5.employee_name,
		       to_char(t1.create_time,'yyyy-MM-dd') create_time,
		       t1.sum_price,
		       t6.actual_price,
		       decode(t1.is_extend_order,1,'续单',0,'原单') is_extend_order,
		       decode(t1.order_type,2,'赠单','') order_type,
		       t1.bu_id
		  from tab_order_info t1
		  left join tab_student_info t2
		    on t1.student_id = t2.id
		  left join tab_organization_info t3
		    on t1.branch_id = t3.id
		  left join tab_user_info t4
		    on t1.create_user = t4.id
		  left join tab_employee_info t5
		    on t4.employee_id = t5.id
		  left join tab_order_pay_cost t6 
		  on t1.id = t6.order_id
		    where t1.id = #{orderId,jdbcType=NUMERIC}
	</select>
	
	<!-- 查询订单子表  -->
	<select id="queryOrderDetail" parameterType="java.util.Map" resultType="java.util.Map">
				  select t2.course_name,
			             t2.start_time,
			             t2.end_time,
			             t1.course_total_count,
			             t1.discount_sum_price sum_price,
			             t4.org_name || '   ' || t3.teacher_name remark
			        from tab_order_info_detail t1
			        left join t_course t2
			          on t1.course_id = t2.id
			        left join tab_teacher_info t3
			        on t1.teacher_id = t3.id
			        left join tab_organization_info t4
			        on t2.branch_id = t4.id
				    where t1.order_id = #{orderId,jdbcType=NUMERIC}
	</select>
	
	<!-- 查询订单缴费方式 -->
	<select id="queryPayDetail" parameterType="java.util.Map" resultType="java.util.Map">
  select decode(t2.payment_way,
                1,
                '现金',
                2,
                '刷卡',
                3,
                '转账',
                4,
                '储值账户',
                5,
                '一元课程',
                6,
                '支付宝',
                7,
                '微信',
                8,
                '网银',
                9,
		        '冻结账户') payment_way,
         t2.staffappprem,
         t3.org_name,
         t2.client_card_no,
         to_char(t2.create_time, 'yyyy-MM-dd') create_time,
         dd.device_name,
         dd.device_code,
         t2.pos_id
    from tab_order_pay_cost t1
    left join tab_order_pay_cost_detail t2
      on t1.id = t2.order_buy_id
    left join tab_data_device dd
      on t2.pos_id = dd.id
    left join tab_organization_info t3
      on t1.branch_id = t3.id
    where t1.order_id = #{orderId,jdbcType=NUMERIC}
	</select>
	
	<!-- 查询充值记录 -->
  <select id="queryRechange" parameterType="java.util.Map" resultType="java.util.Map">
	  	select t2.encoding s_encoding,
	       t2.student_name,
	       t1.encoding r_encoding,
	       t3.org_name,
	       t5.employee_name,
	       date_format(t1.create_time, '%Y-%m-%d') input_time,
	       t1.money,
	       t8.name pay_name,
	       t1.city_id,
	       t1.remark 
	  from t_account_dynamic t1
	  left join tab_student_info t2
	    on t1.student_id = t2.id
	  left join tab_organization_info t3
	    on t1.branch_id = t3.id
	  left join tab_user_info t4
	    on t1.create_user = t4.id
	  left join tab_employee_info t5
	    on t4.employee_id = t5.id
	  left join t_account t6
	    on t1.account_id = t6.id
	 left join tp_pay_mode t8
	 	on t1.pay_mode = t8.id  
	 where t1.id = #{dynamicId,jdbcType=NUMERIC}
  </select>
  
  <!-- 学生转账  单据 -->
  <select id="queryTransfer" parameterType="java.util.Map" resultType="java.util.Map">
	  	select t2.encoding s_encoding,
	       t2.student_name,
	       t1.encoding d_encoding,
	       t1.city_id,
	       t3.org_name,
	       t5.employee_name,
	       date_format (t1.create_time, '%Y-%m-%d') input_time,
	       t9.student_name input_stu_name,
	       t1.money,
	       case when	t1.account_type = 1 then '储值账户' when t1.account_type =2 then '冻结账户' when t1.account_type = 3 then  '退费账户' end  account_type
	  from t_account_dynamic t1
	  left join tab_student_info t2
	    on t1.student_id = t2.id
	  left join tab_organization_info t3
	    on t1.branch_id = t3.id
	  left join tab_user_info t4
	    on t1.input_user = t4.id
	  left join tab_employee_info t5
	    on t4.employee_id = t5.id
	  left join t_account t6
	    on t1.account_id = t6.id
	  left join t_account_transfer_input t8
	    on t1.id = t8.dynamic_id
	  left join tab_student_info t9
	    on t8.student_id = t9.id
	  left join t_account t10
	    on t8.account_id = t10.id
     where t1.id = #{dynamicId,jdbcType=NUMERIC}
  </select>
  
  <!-- 学生理赔单据 -->
  <select id="queryClaimInfo" parameterType="java.util.Map" resultType="java.util.Map">
	  		select t2.encoding s_encoding,
	       t2.student_name,
	       t1.encoding d_encoding,
	       t3.org_name,
	       t1.city_id,
	       t5.employee_name,
	       to_char(t1.input_time, 'yyyy-MM-dd') input_time,
	       t7.name product_line,
	       t1.money,
           t1.remark
	  from t_account_dynamic t1
	  left join tab_student_info t2
	    on t1.student_id = t2.id
	  left join tab_organization_info t3
	    on t1.branch_id = t3.id
	  left join tab_user_info t4
	    on t1.input_user = t4.id
	  left join tab_employee_info t5
	    on t4.employee_id = t5.id
	  left join t_account t6
	    on t1.account_id = t6.id
	  left join tp_product_line t7
	    on t6.product_line = t7.id
	    where t1.id = #{dynamicId,jdbcType=NUMERIC}
  </select>
  
  <!-- 学生取款单据 -->
  <select id="queryWithdrwaingInfo" parameterType="map" resultType="map">
	  	select t1.encoding stuEncoding,
	       t1.student_name studentName,
	       t.encoding encoding,
	       t.city_id,
	       t2.org_name buName,
	       t4.employee_name userName,
	       to_char(t.input_time, 'yyyy-MM-dd') inputTime,
	       t.money,
	       t.money_fee,
	       t5.pre_amount preAmount,
       	   t6.name productLine
	  from t_account_dynamic t
	  join tab_student_info t1
	    on t.student_id = t1.id
	  join tab_organization_info t2
	    on t.bu_id = t2.id
	  join tab_user_info t3
	    on t.input_user = t3.id
	   join t_account_change t5
	   on t.id = t5.dynamic_id
	  join tab_employee_info t4
	    on t4.id = t3.employee_id
	   join tp_product_line t6
       on t6.id = t2.product_line
	  where t.dynamic_type = 4 and t.id = #{dynamicId,jdbcType=NUMERIC}
  </select>
  
  <select id="queryDynamicAccountInfo" parameterType="map" resultType="map">
  <![CDATA[
		SELECT
		    a.*,
		    concat(concat(concat(concat(b.student_name,'('), concat(b.id, ')')), '('), concat(b.encoding,
		    ')')) student_name_id_encoding,
		    c.card_no,
		    c.company_account,
		    d.name          AS pay_mode_name,
		    f.name          AS product_line_name,
		    h.employee_name AS input_user_name,
		    i.org_name      AS branch_name,
		    j.org_name      AS bu_name,
		    k.org_name      AS city_name
		FROM
		    t_account_dynamic a
		LEFT JOIN
		    tab_student_info b
		ON
		    a.student_id = b.id
		LEFT JOIN
		    t_account_recharge_info c
		ON
		    a.id = c.dynamic_id
		LEFT JOIN
		    tp_pay_mode d
		ON
		    a.pay_mode = d.id
		LEFT JOIN
		    t_account e
		ON
		    a.account_id = e.id
		LEFT JOIN
		    tp_product_line f
		ON
		    e.product_line = f.id
		LEFT JOIN
		    tab_user_info g
		ON
		    a.input_user = g.id
		AND g.status = 1
		LEFT JOIN
		    tab_employee_info h
		ON
		    g.employee_id = h.id
		AND h.status = 1
		LEFT JOIN
		    tab_organization_info i
		ON
		    a.branch_id = i.id
		AND i.status = 1
		LEFT JOIN
		    tab_organization_info j
		ON
		    a.bu_id = j.id
		AND j.status = 1
		LEFT JOIN
		    tab_organization_info k
		ON
		    a.city_id = k.id
		AND k.status = 1
		WHERE a.status = 3 
		<if test="dynamicId != null and dynamicId != ''">
			AND a.id = #{dynamicId} 
		</if>
		<if test="dynamic_type != null and dynamic_type != ''">
			AND a.dynamic_type = #{paramMap.dynamic_type} 
		</if>
		<if test="queryStudentString != null and queryStudentString != ''">
			AND (
		    b.student_name LIKE '%${queryStudentString}%'
		    OR  b.encoding LIKE '%${queryStudentString}%'
		    OR  b.id LIKE '%${queryStudentString}%') 
		</if>
		<if test="encoding != null and encoding != ''">
			AND a.encoding LIKE '%${encoding}%' 
		</if>
		ORDER BY a.id DESC
		]]>
  </select>
	
	<select id="selectList" parameterType="java.util.Map" resultType="com.edu.erp.model.TAccount">
		select 		t1.* 
			from 	t_account t1
		where 		t1.student_id = #{student_id}
		<if test="city_id != null and city_id != ''">
			and		t1.city_id = #{city_id}
		</if>
		<if test="bu_id != null and bu_id != ''">
			and		t1.bu_id = #{bu_id}
		</if>
		<if test="branch_id != null">
			and		t1.branch_id = #{branch_id}
		</if>
		<if test="product_line != null">
			and		t1.product_line = #{product_line}
		</if>
	</select>
	
	<sql id="accountChangePage_order">
		select 
						t1.*,
						decode(t1.change_flag, 0, '存入', 1, '取出') change_flag_name,
						date_format(t10.fin_confirm_date, 'yyyy-MM-dd HH24:mi') business_time,
						t9.org_name business_branch,
						decode(t1.change_type, 
								0,'客户充值',
								1,'订单收费取出',
								2,'订单退费存入',
								3,'客户取出',
								4,'一元转校',
								5,'转账',
								6,'理赔',
								7,'转班转入',
								8,'充值作废 ',
								9,'理赔作废',
								10,'取款作废 ',
								11,'报班作废 ',
								12,'退费作废',
								13,'订单冻结存入',
								14,'冻结作废',
								15,'跨团队转账') change_type_name,
						t_emp.employee_name input_user_name,
						t7.name pay_name,
						t5.remark,
						decode(t5.status, 1, '审批中', 2, '审批拒绝', 3, '生效') as auditStatusName
			from 		t_account_change t1
			join		t_account t2 					on t1.account_id = t2.id
			left join	tp_product_line t3 				on t2.product_line = t3.id
			join		tab_student_info t4 			on t2.student_id = t4.id
			left join	t_account_dynamic t5 			on t1.dynamic_id = t5.id
			left join 	t_account_recharge_info t6 		on t5.id = t6.dynamic_id
			left join 	tp_pay_mode t7 					on t5.pay_mode = t7.id
			left join	tab_organization_info t8		on t8.id = t2.branch_id
			left join	tab_organization_info t9		on t9.id = t5.branch_id
			left join	t_order t10						on t1.order_id = t10.id
			
			left join 	tab_user_info t_user			on t5.input_user = t_user.id 
			left join 	tab_employee_info t_emp 		on t_user.employee_id = t_emp.id
		where 			1 = 1
		
		<if test="paramMap.student_id != null and paramMap.student_id != ''">
			and			t2.student_id = #{paramMap.student_id}
		</if>	
		<if test="paramMap.bu_id != null and paramMap.bu_id != ''">
			and			t2.bu_id = #{paramMap.bu_id}
		</if>	
		<if test="paramMap.start_date != null and paramMap.end_date != null">
			<![CDATA[
			and	 date_format(t10.fin_confirm_date, 'yyyy-MM-dd') between #{paramMap.start_date} and #{paramMap.end_date}
			]]>	
		</if>
		<if test="paramMap.change_type != null">
			and			t1.change_type = #{paramMap.change_type}
		</if>
		<if test="paramMap.change_types != null and paramMap.change_types != ''">
			and			t1.change_type in (${paramMap.change_types})
		</if>
		<if test="paramMap.branch_id != null and paramMap.branch_id != ''">
			and			t2.branch_id = #{paramMap.branch_id}
		</if>
		<if test="paramMap.product_line != null">
			and			t2.product_line = #{paramMap.product_line}
		</if>
		<if test="paramMap.account_blance != null">
			<!-- 根据学先提出的特殊要求,账户详情列表第一条为最后变更记录 -->
			and			t1.next_amount = #{paramMap.account_blance} and rownum = 1 and t1.order_id > 0
		</if>
	</sql>
	<sql id="accountChangePage_dynamic">
		select 
						t1.*,
						decode(t1.change_flag, 0, '存入', 1, '取出') change_flag_name,
						to_char(t5.confirm_time, 'yyyy-MM-dd HH24:mi') business_time,
						t9.org_name business_branch,
						decode(t1.change_type, 
								0,'客户充值',
								1,'订单收费取出',
								2,'订单退费存入',
								3,'客户取出',
								4,'一元转校',
								5,'转账',
								6,'理赔',
								7,'转班转入',
								8,'充值作废 ',
								9,'理赔作废',
								10,'取款作废 ',
								11,'报班作废 ',
								12,'退费作废',
								13,'订单冻结存入',
								14,'冻结作废',
								15,'跨团队转账') change_type_name,
						t_emp.employee_name input_user_name,
						t7.name pay_name,
						decode(t5.status, 1, '审批中', 2, '审批拒绝', 3, '生效') as auditStatusName
			from 		t_account_change t1
			join		t_account t2 					on t1.account_id = t2.id
			left join	tp_product_line t3 				on t2.product_line = t3.id
			join		tab_student_info t4 			on t2.student_id = t4.id
			left join	t_account_dynamic t5 			on t1.dynamic_id = t5.id
			left join 	t_account_recharge_info t6 		on t5.id = t6.dynamic_id
			left join 	tp_pay_mode t7 					on t5.pay_mode = t7.id
			left join	tab_organization_info t8		on t8.id = t2.branch_id
			left join	tab_organization_info t9		on t9.id = t5.branch_id
			
			left join 	tab_user_info t_user			on t5.input_user = t_user.id 
			left join 	tab_employee_info t_emp 		on t_user.employee_id = t_emp.id
		where 			1 = 1
		
		<if test="paramMap.student_id != null and paramMap.student_id != ''">
			and			t2.student_id = #{paramMap.student_id}
		</if>	
		<if test="paramMap.bu_id != null and paramMap.bu_id != ''">
			and			t2.bu_id = #{paramMap.bu_id}
		</if>	
		<if test="paramMap.start_date != null and paramMap.end_date != null">
			<![CDATA[
			and	 to_char(t5.confirm_time, 'yyyy-MM-dd') between #{paramMap.start_date} and #{paramMap.end_date}
			]]>	
		</if>
		<if test="paramMap.change_type != null">
			and			t1.change_type = #{paramMap.change_type}
		</if>
		<if test="paramMap.change_types != null and paramMap.change_types != ''">
			and			t1.change_type in (${paramMap.change_types})
		</if>
		<if test="paramMap.branch_id != null and paramMap.branch_id != ''">
			and			t2.branch_id = #{paramMap.branch_id}
		</if>
		<if test="paramMap.product_line != null">
			and			t2.product_line = #{paramMap.product_line}
		</if>
		<if test="paramMap.account_blance != null">
			<!-- 根据学先提出的特殊要求,账户详情列表第一条为最后变更记录 -->
			and			t1.next_amount = #{paramMap.account_blance} and rownum = 1 and t1.dynamic_id > 0
		</if>
	</sql>
	
	<!-- 学生资产 账户详情分页 -->
	<!-- 原为 accountChangePage_dynamic union accountChangePage_order 查询-->
	<!-- 2015-02-05 t_account_change增加change_time, 以此作为时间比较 -->
	<select id="page" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select 
						t1.*,
						case when t1.change_flag = 0 then  '存入' when t1.change_flag = 1 then '取出'end change_flag_name,
						date_format(t1.change_time, '%Y-%m-%d %T') 	 business_time,
						ifnull(ifnull(t9.org_name,t8.org_name), org3.org_name) business_branch,
						case when t1.change_type = 0 then '客户充值'
						when t1.change_type = 1 then '订单收费取出'
						when t1.change_type = 2 then '订单退费存入'
						when t1.change_type = 3 then '客户取出'
						when t1.change_type = 4 then '一元转校'
						when t1.change_type = 5 then '转账'
						when t1.change_type = 7 then '转班转入'
						when t1.change_type = 8 then '充值作废'
						when t1.change_type = 10 then '取款作废'
						when t1.change_type = 11 then '报班作废'
						when t1.change_type = 12 then '退费作废'
						when t1.change_type = 13 then '订单冻结存入'
						when t1.change_type = 14 then '冻结作废' end
					    change_type_name,
						ifnull(ifnull(t_emp.employee_name, t_emp2.employee_name),t_emp3.employee_name) 	 			 input_user_name,
						t7.name 										 pay_name,
						ifnull(t5.remark, toc.remark)						 remark,
						t6.card_no,
					    tor.order_no					 				 order_no,
					    tsi_out.id										 transfer_student_id,
					    tsi_out.student_name   							 transfer_student,
						case when t5.status = 1 then '审批中' when  t5.status = 2 then '审批拒绝' when t5.status = 3 then '生效' end auditStatusName
			from 		t_account_change t1
			join		t_account t2 					on t1.account_id = t2.id
			join		tab_student_info t4 			on t2.student_id = t4.id
			left join	t_account_dynamic t5 			on t1.dynamic_id = t5.id
			left join   t_account_change tac_out   		on tac_out.dynamic_id = t5.id and tac_out.id != t1.id
			left join   t_account ta_out 				on ta_out.id = tac_out.account_id
   			left join   tab_student_info tsi_out 		on tsi_out.id = ta_out.student_id
			left join 	t_account_recharge_info t6 		on t5.id = t6.dynamic_id
			left join 	tp_pay_mode t7 					on t5.pay_mode = t7.id
			left join	tab_organization_info t9		on t9.id = ifnull(t1.branch_id, t5.branch_id)
			left join 	tab_user_info t_user			on t5.create_user = t_user.id
			left join 	tab_employee_info t_emp 		on t_user.employee_id = t_emp.id
			left join 	t_encoder ten 					on ten.id = t1.encoder_id
            left join   t_order_change toc 				on toc.id = ten.busi_id and ten.busi_type = 5
			left join   tab_user_info t_user2			on toc.input_user = t_user2.id
			left join   tab_employee_info t_emp2 		on t_user2.employee_id = t_emp2.id    
			left join   tab_organization_info t8 		on t8.id = toc.branch_id
			left join   t_order tor 					on tor.id = t1.order_id
			left join 	tab_order_info toi 				on toi.id = ten.busi_id and ten.busi_type = 4
            left join 	tab_user_info t_user3 			on toi.create_user = t_user3.id
         	left join 	tab_employee_info t_emp3 		on t_user3.employee_id = t_emp3.id
         	left join   tab_organization_info org3      on org3.id = toi.branch_id
		where 			1 = 1
		
		<if test="student_id != null and student_id != ''">
			and			t2.student_id = #{student_id}
		</if>
		<if test="start_date != null and end_date != null">
			<![CDATA[
			and	 date_format(t1.change_time, '%Y-%m-%d') between #{start_date} and #{end_date}
			]]>	
		</if>
		<if test="change_account_type != null and change_account_type > -1">
			and			ifnull(t1.account_type, 1) = #{change_account_type}
		</if>
		<if test="change_type != null">
			and			t1.change_type = #{change_type}
		</if>
		<if test="change_types != null and change_types != ''">
			and			t1.change_type in (${change_types})
		</if>
		<if test="branch_id != null and branch_id != ''">
			and			t2.branch_id = #{branch_id}
		</if>
		<if test="product_line != null">
			and			t2.product_line = #{product_line}
		</if>
		order by 		t1.id DESC
	</select>
	
	
	<resultMap type="hashmap" id="getCardNumMap">
		<result column="card_no" property="cardNum" javaType="string"/>
		<result column="company_account" property="companyAccount" javaType="string"/>
		<result column="id" property="id" javaType="string"/>
		<result column="dynamic_id" property="dynamicId" javaType="string"/>
	</resultMap>
	
	<select id="getCardNum" parameterType="String" resultMap="getCardNumMap">
	select 
    	r.card_no card_no,
    	r.company_account company_account,
    	r.id id,
    	r.dynamic_id dynamic_id
  	from 
    	t_account_recharge_info r 
	where 
		r.dynamic_id = #{encoding}
	</select>
	
	<resultMap type="hashmap" id="getPOSListMap">
		<result column="id" property="id" javaType="string"/>
		<result column="device_name" property="deviceName" javaType="string"/>
		<result column="account_id" property="accountId" javaType="string"/>
		<result column="account_num" property="accountNum" javaType="string"/>
	</resultMap>
	
	<select id="getPOSList" parameterType="String" resultMap="getPOSListMap">
	select device.id,
		device.simple_name device_name,
       acc.id account_id,
       acc.account_num account_num
  from tab_data_device device
  left join tab_data_company_account acc
    on device.account_id = acc.id
 where device.status = 1
   and device.city_id = #{cityId}
	</select>
	
	<select id="addReChargeHis" parameterType="java.util.HashMap">
		insert into
			T_ACCOUNT_RECHARGE_INFO_HIS 
		values(
			seq_his.nextval,
			#{id,jdbcType=VARCHAR},
			#{cardNum,jdbcType=VARCHAR},
			#{companyAccount,jdbcType=VARCHAR},
			#{dynamicId,jdbcType=VARCHAR},
			#{creatUser,jdbcType=VARCHAR},
			sysdate
			)
	</select>
	
	<select id="updateReCharge">
		update 
			T_ACCOUNT_RECHARGE_INFO t 
		set 
		<if test="cardNum!=null and cardNum != ''">
			t.card_no = #{cardNum,jdbcType=VARCHAR}
		</if>
		<if test="accountId!=null and accountId != ''">
		  	,t.company_account=#{accountId,jdbcType=VARCHAR}
		</if>
		where 
			t.dynamic_id = #{id}
	</select>
	
	
	<!-- 保存账户变动信息 -->
	<insert id="saveAccountChange" parameterType="com.edu.erp.model.TAccountChange" useGeneratedKeys="true" keyProperty="id">
		insert into t_account_change
	      (
	       account_id, 
	       order_id, 
	       encoder_id, 
	       change_flag, 
	       change_type, 
	       change_amount,
	       pre_amount,
	       next_amount, 
	       pay_mode,
	       dynamic_id, 
	       account_type, 
	       change_time 
	       )
	    values
	      (
		  #{account_id,jdbcType=NUMERIC},
		  #{order_id,jdbcType=NUMERIC},
		  #{encoder_id,jdbcType=NUMERIC},
		  #{change_flag,jdbcType=NUMERIC},
		  #{change_type,jdbcType=NUMERIC},
		  #{change_amount,jdbcType=NUMERIC},
		  #{pre_amount,jdbcType=NUMERIC},
		  #{next_amount,jdbcType=NUMERIC},
		  #{pay_mode,jdbcType=NUMERIC},
		  #{dynamic_id,jdbcType=NUMERIC},
		  #{account_type,jdbcType=NUMERIC},
	       sysdate()
	       )
	</insert>

	<!-- 保存账户变动信息 -->
	<insert id="saveAccountDynamic" parameterType="com.edu.erp.model.TAccountDynamic" useGeneratedKeys="true" keyProperty="id">
		insert into t_account_dynamic
		(
		dynamic_type,
		city_id,
		branch_id,
		bu_id,
		student_id,
		account_id,
		money,
		money_fee,
		pay_flag,
		pay_mode,
		create_user,
		create_time,
		confirm_time,
		status,
		encoding,
		account_type
		)
		values
		(
		#{dynamic_type,jdbcType=NUMERIC},
		#{city_id,jdbcType=NUMERIC},
		#{branch_id,jdbcType=NUMERIC},
		#{bu_id,jdbcType=NUMERIC},
		#{student_id,jdbcType=NUMERIC},
		#{account_id,jdbcType=NUMERIC},
		#{money,jdbcType=NUMERIC},
		#{money_fee,jdbcType=NUMERIC},
		#{pay_flag,jdbcType=NUMERIC},
		#{pay_mode,jdbcType=NUMERIC},
		#{create_user,jdbcType=VARCHAR},
		sysdate(),
		sysdate(),
		#{status,jdbcType=NUMERIC},
		#{encoding,jdbcType=VARCHAR},
		1
		)
	</insert>

	<!--更新储蓄账户  -->
	<update id="updateFeeAccount"  parameterType="java.util.HashMap" >
		update t_account t set  t.fee_amount = #{amount} where t.id = #{accountId}
	</update>
	<!-- 更新冻结账户   -->
	<update id="updateFrozenAccount">
		update t_account t set  t.fee_amount = #{amount} where t.id = #{accountId}
	</update>
	<!--更新退费账户   -->
	<update id="updateRefundAccount">
		update t_account t set  t.refund_account = #{amount} where t.id = #{accountId}
	</update>
	
	<!-- 账户查询  -->
	<select id="queryAccountInfo" parameterType="java.util.HashMap" resultType="com.edu.erp.model.TAccount">
		SELECT * FROM T_ACCOUNT TA WHERE
		    TA.STUDENT_ID = #{studentId,jdbcType=NUMERIC} 
	</select>
	
	<!--新建账户信息 -->
	<insert id="createAccount" parameterType="com.edu.erp.model.TAccount">
		 insert into t_account
	      (
		   student_id,
	       bu_id,
	       fee_amount,
	       create_time,
	       create_user
	       )
	    values
	      (
		  #{student_id,jdbcType=NUMERIC},
		  #{bu_id,jdbcType=NUMERIC},
		  0,
		  sysdate(),
		  #{creater_id,jdbcType=NUMERIC}
	       )
	</insert>
	
	<!-- 查询订单id -->
	<select id="queryIdByOrderEncoding" resultType="long">
		select id from t_order where order_no=#{encoding}
	</select>

	<!-- 账户查询  -->
	<select id="queryAccountInfoCount" parameterType="java.util.HashMap" resultType="Integer">
		SELECT count(1) FROM T_ACCOUNT TA WHERE
		TA.STUDENT_ID = #{studentId,jdbcType=NUMERIC}
		<if test="buId!=null">
			AND TA.BU_ID = #{buId,jdbcType=NUMERIC}
		</if>
		<if test="cityId!=null">
			AND TA.CITY_ID = #{cityId,jdbcType=NUMERIC}
		</if>
	</select>

	<select id="queryStuAccountInfo" parameterType="long" resultType="map">
		select tsiout.student_name as "outStudentName",
					 tsiout.phone as "mobile",
					 toiout.org_name as "outBuName",
					 tad.money as "transferAmount",
					 tsiin.student_name as "inStudentName",
					 toiin.org_name as "inBuName",
					 decode(tad.account_type, 1, '储值账户', 2, '冻结账户', 3, '退费账户') as "accountTypeName"
			from t_account_dynamic     tad,
					 t_account_change      tacout,
					 t_account             taout,
					 tab_student_info      tsiout,
					 tab_organization_info toiout,
					 t_account_change      tacin,
					 t_account             tain,
					 tab_student_info      tsiin,
					 tab_organization_info toiin
		 where tacout.Dynamic_Id = tad.id
			 and tacout.Change_Flag = 1
			 and tacout.account_id = taout.id
			 and taout.student_id = tsiout.id
			 and tsiout.phone is not null
			 and taout.bu_id = toiout.id
			 and tacin.Dynamic_Id = tad.id
			 and tacin.Change_Flag = 0
			 and tacin.account_id = tain.id
			 and tain.student_id = tsiin.id
			 and tain.bu_id = toiin.id
			 and tad.id = #{dynamicId}
	</select>

	<!-- 转入信息 -->
	<insert id="saveTransferInput" parameterType="java.util.HashMap" useGeneratedKeys="true" keyProperty="id">
		insert into t_account_transfer_input
		(
			student_id, account_id, money, dynamic_id
		)
		values
		(
			#{student_id,jdbcType=NUMERIC},
			#{account_id,jdbcType=NUMERIC},
			#{money,jdbcType=NUMERIC},
			#{dynamic_id,jdbcType=NUMERIC}
		)
	</insert>

</mapper>