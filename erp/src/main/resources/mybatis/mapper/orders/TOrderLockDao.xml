<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.erp.dao.TOrderLockDao">

	<select id="queryOrderLockStatus" parameterType="java.lang.Long"
		resultType="com.edu.erp.model.TOrderLock">
		select distinct tol.*,
		tei.employee_name as createrName,
		tei2.employee_name as updaterName,
		case
		when tol.status = 1 then
		'保留学籍冻结'
		when tol.status = 2 then
		'已结转考勤'
		when tol.status = 3 then
		'保留学籍解冻'
		end statusName
		from T_ORDER_LOCK tol
		left join TAB_EMPLOYEE_INFO tei
		on tol.creater = tei.id
		left join TAB_EMPLOYEE_INFO tei2
		on tol.updater = tei2.id
		where tol.order_id = #{orderId,jdbcType=NUMERIC}
	</select>

	<select id="queryLockInfoByOrderId" parameterType="java.util.HashMap"
		resultType="com.edu.erp.model.TOrderLock">
		select * from T_ORDER_LOCK t where t.order_id =
		#{orderId,jdbcType=NUMERIC}
	</select>

	<update id="updateOrderLockStatus" parameterType="com.edu.erp.model.TOrderLock">
		update T_ORDER_LOCK set
		status = #{status,jdbcType=NUMERIC},
		remark = #{remark,jdbcType=VARCHAR},
		updater = #{updater,jdbcType=NUMERIC},
		updatetime = sysdate,
		unlocktime = sysdate,
		course_surplus_count = #{course_surplus_count,jdbcType=NUMERIC},
		surplus_cost = #{surplus_cost,jdbcType=NUMERIC}
		where order_id = #{orderId,jdbcType=NUMERIC}
	</update>

	<insert id="insertOrderLock" parameterType="com.edu.erp.model.TOrderLock">
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
			select SEQ_T_ORDER_LOCK.nextval as id from dual
		</selectKey>
		INSERT INTO T_ORDER_LOCK
		(
		ID,
		ORDER_ID,
		CREATER,
		CREATETIME,
		UPDATER,
		UPDATETIME,
		STATUS,
		REMARK,
		COURSE_SURPLUS_COUNT,
		SURPLUS_COST
		)
		select #{id,jdbcType=NUMERIC} ,
		#{orderId,jdbcType=NUMERIC},
		#{creater,jdbcType=NUMERIC},
		sysdate,
		#{updater,jdbcType=NUMERIC},
		sysdate,
		#{status,jdbcType=NUMERIC},
		#{remark,jdbcType=VARCHAR},
		sum(t.course_surplus_count),
		sum(t.surplus_cost)
		from t_order_course t where t.order_id = #{orderId,jdbcType=NUMERIC}
		and not exists( select 1 from T_ORDER_LOCK c where c.order_id =
		#{orderId,jdbcType=NUMERIC})
	</insert>

	<insert id="insertOrderLockHt" parameterType="com.edu.erp.model.TOrderLock">
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
			select SEQ_T_ORDER_LOCK_HT.nextval as id from dual
		</selectKey>
		INSERT INTO T_ORDER_LOCK_HT
		(
		ID,
		ORDER_ID,
		OLDSTATUS,
		STATUS,
		OPERATER,
		OPERATETIME,
		REMARK,
		COURSE_SURPLUS_COUNT,
		SURPLUS_COST
		)
		select
		#{id,jdbcType=NUMERIC},
		#{orderId,jdbcType=NUMERIC},
		#{oldstatus,jdbcType=NUMERIC},
		#{status,jdbcType=NUMERIC},
		#{updater,jdbcType=NUMERIC},
		#{updateTime,jdbcType=DATE},
		#{remark,jdbcType=VARCHAR},
		t.course_surplus_count,
		t.surplus_cost
		from T_ORDER_LOCK t where t.order_id = #{orderId,jdbcType=NUMERIC}
	</insert>

	<select id="countOrderCourse" parameterType="com.edu.erp.model.TOrderLock"
		resultType="HashMap">
		select sum(course_surplus_count) course_surplus_count,sum(surplus_cost) surplus_cost 
		from t_order_course
		where order_id = #{orderId,jdbcType=NUMERIC}
	</select>

	<select id="selectLockedOrderList" parameterType="Map" resultType="com.edu.erp.model.TOrderLock">
		select
			tod.id as orderId ,/*id*/
			tod.order_no as order_encoding ,/*报班单号*/
			tsi.encoding as student_code ,/*学生编码*/
			tsi.student_name as student_name,/*学生姓名*/
			toi.org_name branch_name,/*校区*/
			tol.status ,/*状态*/
			decode(tol.status,1,'锁定中',2,'已结转'，3,'已解锁','异常') statusName,
			tol.remark ,/*备注*/
			tei.employee_name as updaterName ,/*操作人*/
			tol.updatetime as updateTime ,/*更新时间*/
			decode(tol.status, 1, sum(oc.course_surplus_count), sum(tol.course_surplus_count)) course_surplus_count, /*剩余课时*/
			decode(tol.status, 1, sum(oc.surplus_cost), sum(tol.surplus_cost)) surplus_cost, /*剩余费用*/
			case when tol.status in(2,3) and max(tol.unlocktime) is not null then
				to_char(max(tol.unlocktime),'yyyy-mm-dd hh24:mi:ss') else '' end unlockTime /*解冻时间*/
		from
			t_order tod join t_order_lock tol on tol.order_id = tod.id 
			left join tab_user_info tui on tui.id = tol.updater 
			left join tab_employee_info tei on tei.id = tui.employee_id 
			left join tab_organization_info toi on toi.id = tod.branch_id 
			left join tab_student_info tsi on tsi.id = tod.student_id 
			left join t_order_course oc on oc.order_id = tod.id
		where tod.bu_id = #{bu_id, jdbcType=NUMERIC}
		<if test="branch_id != null and branch_id != -1">
			and tod.branch_id = #{branch_id, jdbcType=NUMERIC}
		</if>
		<if test="start_date != null">
			and to_char(tol.updatetime,'yyyy-MM-dd') >= #{start_date, jdbcType=VARCHAR}
		</if>
		<if test="end_date != null">
			and to_char(tol.updatetime,'yyyy-MM-dd') &lt;= #{end_date, jdbcType=VARCHAR}
		</if>
		<if test="status != -1">
			and tol.status = #{status, jdbcType=NUMERIC}
		</if>
		and tol.status in (1,2)
		group by tod.id,
			tod.order_no,
			tsi.encoding ,
			tsi.student_name,
			toi.org_name ,
			tol.status ,
			tol.remark ,
			tei.employee_name ,
			tol.updatetime
		order by tol.updatetime asc
	</select>
	
	<!-- 根据课程详情ID查询学生所报课次 退费使用-->
	<select id= "queryCourseTimesByOrderDetail" parameterType="Map" resultType="HashMap">
		select oc.id "order_detail_id",
		       oct.times "course_times",
		       decode(oct.is_valid,
		              0,
		              0,
		              decode(att.attend_type, null, 1, 10, 1, 0)) "is_valid",
		       nvl(att.attend_type, 10) "attend_type",
		     	(select nvl(tcc.premium_type, 1)
	          		from tab_change_course tcc, t_order_change toc
	         		where toc.id = tcc.change_id
	           		and (tcc.order_course_id = oc.id or tcc.order_course_id = oc.root_course_id)
	           		and toc.change_status not in (7, 8)
	           		and toc.order_id is not null
	           		and rownum = 1) "premium_type",
	       		(select nvl(count(toc.order_id), 0)
		          from tab_change_course tcc, t_order_change toc
		         where toc.id = tcc.change_id
		           and (tcc.order_course_id = oc.id or
		               tcc.order_course_id = oc.root_course_id)
		           and toc.change_status in (3, 4)
		           and toc.order_id is not null
		         group by toc.order_id) "approvings"
		  from t_order_course oc
		  join t_order_course_times oct
		    on oc.id = oct.ocid
		  join t_course_scheduling tos
		    on oc.course_id = tos.course_id
		   and oct.times = tos.course_times
		  left join t_attendance att
		    on tos.id = att.scheduling_id
		   and oc.id = att.order_course_id
		 where oc.id = #{orderDetailId, jdbcType=NUMERIC}	
	</select>
	
	<select id="queryCourseScheduling_wfd" resultType="HashMap" parameterType="Map">
	        select * from t_course_scheduling where course_id =#{course_id,jdbcType=NUMERIC}
	</select>
	
</mapper>